Compiling Program: C:\test\BuildTools\Order Entry\AppSrc\Order.src
Memory Available: 2147483647
1>//Use OrderPrecompile.pkg
1>
1>Use DfAllent.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.pkd    (C:\Program Files (x86)\DataFlex 19.1\Pkg\dfallent.pkd)
67438>Use cCJStandardCommandBarSystem.pkg
Including file: cCJStandardCommandBarSystem.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCJStandardCommandBarSystem.pkg)
67438>>>// these are all the packages used in a standard MDI menubar/toolbar system
67438>>>
67438>>>Use cCJCommandBarSystem.pkg
67438>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCJStandardMenuItemClasses.pkg)
67438>>>>>Use Dfpanel.pkg
67438>>>>>Use cCJCommandBarSystem.pkg
67438>>>>>Use LanguageText.pkg
67438>>>>>
67438>>>>>
67438>>>>>Class cCJUndoMenuItem is a cCJMenuItem
67439>>>>>    
67439>>>>>    Procedure Construct_Object
67441>>>>>        Forward Send Construct_Object
67443>>>>>        Set psCaption   to C_$CaptionUndo
67444>>>>>        Set psToolTip to C_$ToolTipUndo
67445>>>>>        Set psDescription to C_$DescUndo
67446>>>>>        Set psImage to "ActionUndo.ico"
67447>>>>>        Set pbActiveUpdate to True
67448>>>>>        Set psCategory to C_$CategoryEdit
67449>>>>>        Set psShortcut to C_$Key_Ctrl_Z
67450>>>>>    End_Procedure
67451>>>>>    
67451>>>>>    Procedure OnExecute Variant vCommandBarControl
67453>>>>>        Send Undo of (focus(Self))
67454>>>>>    End_Procedure
67455>>>>>    
67455>>>>>    Function IsEnabled Returns Boolean
67457>>>>>        Boolean bEnabled
67457>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
67458>>>>>        Function_Return bEnabled
67459>>>>>    End_Function
67460>>>>>    
67460>>>>>End_Class
67461>>>>>
67461>>>>>
67461>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
67462>>>>>    
67462>>>>>    Procedure Construct_Object
67464>>>>>        Forward Send Construct_Object
67466>>>>>        Set psCaption   to C_$CaptionDelete
67467>>>>>        Set psToolTip to C_$ToolTipDelete
67468>>>>>        Set psDescription to C_$DescDelete
67469>>>>>        Set psImage to "actionDelete.ico"
67470>>>>>        Set psShortcut to C_$Key_Delete
67471>>>>>        Set pbActiveUpdate to True
67472>>>>>        Set psCategory to C_$CategoryEdit
67473>>>>>    End_Procedure
67474>>>>>    
67474>>>>>    
67474>>>>>    Procedure OnExecute Variant vCommandBarControl
67476>>>>>        Send Delete of (focus(Self))
67477>>>>>    End_Procedure
67478>>>>>    
67478>>>>>    Function IsEnabled Returns Boolean
67480>>>>>        Boolean bEnabled
67480>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
67481>>>>>        Function_Return bEnabled
67482>>>>>    End_Function
67483>>>>>    
67483>>>>>End_Class
67484>>>>>
67484>>>>>
67484>>>>>Class cCJCutMenuItem is a cCJMenuItem
67485>>>>>    
67485>>>>>    Procedure Construct_Object
67487>>>>>        Forward Send Construct_Object
67489>>>>>        Set psCaption   to C_$CaptionCut
67490>>>>>        Set psToolTip to C_$TooltipCut
67491>>>>>        Set psDescription to C_$DescCut
67492>>>>>        Set psImage to "actionCut.ico"
67493>>>>>        Set psShortcut to C_$Key_Ctrl_X
67494>>>>>        Set pbActiveUpdate to True
67495>>>>>        Set psCategory to C_$CategoryEdit
67496>>>>>    End_Procedure
67497>>>>>    
67497>>>>>    
67497>>>>>    Procedure OnExecute Variant vCommandBarControl
67499>>>>>        Send Cut of (focus(Self))
67500>>>>>    End_Procedure
67501>>>>>    
67501>>>>>    Function IsEnabled Returns Boolean
67503>>>>>        Boolean bEnabled
67503>>>>>        Get CanCut of (Focus(Self)) to bEnabled
67504>>>>>        Function_Return bEnabled
67505>>>>>    End_Function
67506>>>>>    
67506>>>>>End_Class
67507>>>>>
67507>>>>>
67507>>>>>Class cCJCopyMenuItem is a cCJMenuItem
67508>>>>>    
67508>>>>>    Procedure Construct_Object
67510>>>>>        Forward Send Construct_Object
67512>>>>>        Set psCaption   to C_$CaptionCopy
67513>>>>>        Set psToolTip to C_$ToolTipCopy
67514>>>>>        Set psDescription to C_$DescCopy
67515>>>>>        Set psImage to "actionCopy.ico"
67516>>>>>        Set psShortcut to C_$Key_Ctrl_C
67517>>>>>        Set pbActiveUpdate to True
67518>>>>>        Set psCategory to C_$CategoryEdit
67519>>>>>    End_Procedure
67520>>>>>    
67520>>>>>    
67520>>>>>    Procedure OnExecute Variant vCommandBarControl
67522>>>>>        Send Copy of (focus(Self))
67523>>>>>    End_Procedure
67524>>>>>    
67524>>>>>    Function IsEnabled Returns Boolean
67526>>>>>        Boolean bEnabled
67526>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
67527>>>>>        Function_Return bEnabled
67528>>>>>    End_Function
67529>>>>>    
67529>>>>>End_Class
67530>>>>>
67530>>>>>
67530>>>>>Class cCJPasteMenuItem is a cCJMenuItem
67531>>>>>    
67531>>>>>    Procedure Construct_Object
67533>>>>>        Forward Send Construct_Object
67535>>>>>        Set psCaption   to C_$CaptionPaste
67536>>>>>        Set psToolTip to C_$ToolTipPaste
67537>>>>>        Set psDescription to C_$DescPaste
67538>>>>>        Set psImage to "actionPaste.ico"
67539>>>>>        Set pbActiveUpdate to True
67540>>>>>        Set psShortcut to C_$Key_Ctrl_V
67541>>>>>        Set psCategory to C_$CategoryEdit
67542>>>>>    End_Procedure
67543>>>>>    
67543>>>>>    
67543>>>>>    Procedure OnExecute Variant vCommandBarControl
67545>>>>>        Send Paste of (focus(Self))
67546>>>>>    End_Procedure
67547>>>>>    
67547>>>>>    Function IsEnabled Returns Boolean
67549>>>>>        Boolean bEnabled
67549>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
67550>>>>>        Function_Return bEnabled
67551>>>>>    End_Function
67552>>>>>    
67552>>>>>End_Class
67553>>>>>
67553>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
67554>>>>>    
67554>>>>>    Procedure Construct_Object
67556>>>>>        Forward Send Construct_Object
67558>>>>>        Set psCaption   to C_$CaptionSelectAll
67559>>>>>        Set psToolTip to C_$ToolTipSelectAll
67560>>>>>        Set psDescription to C_$DescSelectAll
67561>>>>>        Set pbActiveUpdate to True
67562>>>>>        Set psShortcut to C_$Key_Ctrl_A
67563>>>>>        Set psCategory to C_$CategoryEdit
67564>>>>>    End_Procedure
67565>>>>>    
67565>>>>>    
67565>>>>>    Procedure OnExecute Variant vCommandBarControl
67567>>>>>        Send Select_All of (focus(Self))
67568>>>>>    End_Procedure
67569>>>>>    
67569>>>>>    Function IsEnabled Returns Boolean
67571>>>>>        Boolean bEnabled
67571>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
67572>>>>>        Function_Return bEnabled
67573>>>>>    End_Function
67574>>>>>    
67574>>>>>End_Class
67575>>>>>
67575>>>>>
67575>>>>>Class cCJExitMenuItem is a cCJMenuItem
67576>>>>>    
67576>>>>>    Procedure Construct_Object
67578>>>>>        Forward Send Construct_Object
67580>>>>>        Set psCaption to C_$CaptionExit
67581>>>>>        Set psToolTip to C_$ToolTipExit
67582>>>>>        Set psDescription to C_$ToolTipExit
67583>>>>>        Set psShortcut to C_$Key_Alt_F4
67584>>>>>        Set psCategory to C_$CategoryFile
67585>>>>>    End_Procedure
67586>>>>>    
67586>>>>>    Procedure OnExecute Variant vCommandBarControl
67588>>>>>        Send Exit_Application of Desktop
67589>>>>>    End_Procedure
67590>>>>>    
67590>>>>>End_Class
67591>>>>>
67591>>>>>Class cCJHelpMenuItem is a cCJMenuItem
67592>>>>>    
67592>>>>>    Procedure Construct_Object
67594>>>>>        Forward Send Construct_Object
67596>>>>>        Set psCaption to C_$CaptionHelp
67597>>>>>        Set psDescription to C_$ToolTipHelp
67598>>>>>        Set psToolTip to C_$DescHelp
67599>>>>>        Set psImage to "ActionHelp.ico"
67600>>>>>        Set psShortcut to "F1"
67601>>>>>        Set psCategory to C_$CategoryHelp
67602>>>>>    End_Procedure
67603>>>>>    
67603>>>>>    Procedure OnExecute Variant vCommandBarControl
67605>>>>>        Send Help of (Focus(Self))
67606>>>>>    End_Procedure
67607>>>>>    
67607>>>>>End_Class
67608>>>>>
67608>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
67609>>>>>    
67609>>>>>    Procedure Construct_Object
67611>>>>>        Forward Send Construct_Object
67613>>>>>        Set psCaption to C_$CaptionAddStatusbar
67614>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
67615>>>>>        Set psDescription to  C_$DescAddStatusbar
67616>>>>>        Set psCategory to C_$CategoryWindow
67617>>>>>    End_Procedure
67618>>>>>    
67618>>>>>    Procedure OnExecute Variant vCommandBarControl
67620>>>>>        Handle hoCommandBars hoClientArea
67620>>>>>        Get CommandBarSystemObject to hoCommandBars
67621>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67622>>>>>        If hoClientArea Begin
67624>>>>>            // the clientarea's parent panel has message
67624>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
67625>>>>>        End
67625>>>>>>
67625>>>>>    End_Procedure
67626>>>>>    
67626>>>>>    Function IsChecked Returns Boolean
67628>>>>>        Boolean bOn
67628>>>>>        Handle hoCommandBars hoClientArea
67628>>>>>        Get CommandBarSystemObject to hoCommandBars
67629>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67630>>>>>        If hoClientArea Begin
67632>>>>>            // the clientarea's parent panel has message
67632>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
67633>>>>>        End
67633>>>>>>
67633>>>>>        Function_Return bOn
67634>>>>>    End_Function
67635>>>>>End_Class
67636>>>>>
67636>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
67637>>>>>    
67637>>>>>    Procedure Construct_Object
67639>>>>>        Forward Send Construct_Object
67641>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
67642>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
67643>>>>>        Set psDescription to C_$DescAutoArrangeIcons
67644>>>>>        Set psCategory to C_$CategoryWindow
67645>>>>>    End_Procedure
67646>>>>>    
67646>>>>>    Procedure OnExecute Variant vCommandBarControl
67648>>>>>        Handle hoCommandBars hoClientArea
67648>>>>>        Get CommandBarSystemObject to hoCommandBars
67649>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67650>>>>>        If hoClientArea Begin
67652>>>>>            // the clientarea's parent panel has message
67652>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
67653>>>>>        End
67653>>>>>>
67653>>>>>    End_Procedure
67654>>>>>    
67654>>>>>    Function IsChecked Returns Boolean
67656>>>>>        Boolean bOn
67656>>>>>        Handle hoCommandBars hoClientArea
67656>>>>>        Get CommandBarSystemObject to hoCommandBars
67657>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67658>>>>>        If hoClientArea Begin
67660>>>>>            // the clientarea's parent panel has message
67660>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
67661>>>>>        End
67661>>>>>>
67661>>>>>        Function_Return bOn
67662>>>>>    End_Function
67663>>>>>End_Class
67664>>>>>
67664>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
67665>>>>>    
67665>>>>>    Procedure Construct_Object
67667>>>>>        Forward Send Construct_Object
67669>>>>>        Set psCaption to C_$CaptionRestoreMenus
67670>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
67671>>>>>        Set psDescription to C_$DescRestoreMenus
67672>>>>>        Set psCategory to C_$CategoryWindow
67673>>>>>    End_Procedure
67674>>>>>    
67674>>>>>    Procedure OnExecute Variant vCommandBarControl
67676>>>>>        Handle hoCommandBars
67676>>>>>        Get CommandBarSystemObject to hoCommandBars
67677>>>>>        Send RestoreLayout of hoCommandBars
67678>>>>>    End_Procedure
67679>>>>>    
67679>>>>>End_Class
67680>>>>>
67680>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
67681>>>>>    
67681>>>>>    Procedure Construct_Object
67683>>>>>        Forward Send Construct_Object
67685>>>>>        Set psCaption to C_$CaptionCascade
67686>>>>>        Set psToolTip to C_$ToolTipCascade
67687>>>>>        Set psDescription to  C_$DescCascade
67688>>>>>        Set psImage to "ActionCascade.ico"
67689>>>>>        Set psCategory to C_$CategoryWindow
67690>>>>>    End_Procedure
67691>>>>>    
67691>>>>>    Procedure OnExecute Variant vCommandBarControl
67693>>>>>        Handle hoCommandBars hoClientArea
67693>>>>>        Get CommandBarSystemObject to hoCommandBars
67694>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67695>>>>>        If hoClientArea Begin
67697>>>>>            Send Cascade_Windows of hoClientArea
67698>>>>>        End
67698>>>>>>
67698>>>>>    End_Procedure
67699>>>>>End_Class
67700>>>>>
67700>>>>>Class cCJTileHorizontally is a cCJMenuItem
67701>>>>>    
67701>>>>>    Procedure Construct_Object
67703>>>>>        Forward Send Construct_Object
67705>>>>>        Set psCaption to C_$CaptionTileHorizontally
67706>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
67707>>>>>        Set psDescription to  C_$DescTileHorizontally
67708>>>>>        Set psImage to "ActionTileHorizontally.ico"
67709>>>>>        Set psCategory to C_$CategoryWindow
67710>>>>>    End_Procedure
67711>>>>>    
67711>>>>>    Procedure OnExecute Variant vCommandBarControl
67713>>>>>        Handle hoCommandBars hoClientArea
67713>>>>>        Get CommandBarSystemObject to hoCommandBars
67714>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67715>>>>>        If hoClientArea Begin
67717>>>>>            Send Tile_Windows_Horizontal of hoClientArea
67718>>>>>        End
67718>>>>>>
67718>>>>>    End_Procedure
67719>>>>>End_Class
67720>>>>>
67720>>>>>Class cCJTileVertically is a cCJMenuItem
67721>>>>>    
67721>>>>>    Procedure Construct_Object
67723>>>>>        Forward Send Construct_Object
67725>>>>>        Set psCaption to C_$CaptionTileVertically
67726>>>>>        Set psToolTip to C_$ToolTipTileVertically
67727>>>>>        Set psDescription to  C_$DescTileVertically
67728>>>>>        Set psImage to "ActionTileVertically.ico"
67729>>>>>        Set psCategory to C_$CategoryWindow
67730>>>>>    End_Procedure
67731>>>>>    
67731>>>>>    Procedure OnExecute Variant vCommandBarControl
67733>>>>>        Handle hoCommandBars hoClientArea
67733>>>>>        Get CommandBarSystemObject to hoCommandBars
67734>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67735>>>>>        If hoClientArea Begin
67737>>>>>            Send Tile_Windows_Vertical of hoClientArea
67738>>>>>        End
67738>>>>>>
67738>>>>>    End_Procedure
67739>>>>>End_Class
67740>>>>>
67740>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
67741>>>>>    
67741>>>>>    Procedure Construct_Object
67743>>>>>        Forward Send Construct_Object
67745>>>>>        Set psCaption to C_$CaptionMinimizeWindows
67746>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
67747>>>>>        Set psDescription to  C_$DescMinimizeWindows
67748>>>>>        Set psCategory to C_$CategoryWindow
67749>>>>>    End_Procedure
67750>>>>>    
67750>>>>>    Procedure OnExecute Variant vCommandBarControl
67752>>>>>        Handle hoCommandBars hoClientArea
67752>>>>>        Get CommandBarSystemObject to hoCommandBars
67753>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67754>>>>>        If hoClientArea Begin
67756>>>>>            // the clientarea's parent panel has message
67756>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
67757>>>>>        End
67757>>>>>>
67757>>>>>    End_Procedure
67758>>>>>End_Class
67759>>>>>
67759>>>>>
67759>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
67760>>>>>    
67760>>>>>    Procedure Construct_Object
67762>>>>>        Forward Send Construct_Object
67764>>>>>        Set psCaption to C_$CaptionRestoreWindows
67765>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
67766>>>>>        Set psDescription to  C_$DescRestoreWindows
67767>>>>>        Set psCategory to C_$CategoryWindow
67768>>>>>    End_Procedure
67769>>>>>    
67769>>>>>    Procedure OnExecute Variant vCommandBarControl
67771>>>>>        Handle hoCommandBars hoClientArea
67771>>>>>        Get CommandBarSystemObject to hoCommandBars
67772>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67773>>>>>        If hoClientArea Begin
67775>>>>>            // the clientarea's parent panel has message
67775>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
67776>>>>>        End
67776>>>>>>
67776>>>>>    End_Procedure
67777>>>>>End_Class
67778>>>>>
67778>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
67779>>>>>    
67779>>>>>    Procedure Construct_Object
67781>>>>>        Forward Send Construct_Object
67783>>>>>        Set psCaption to C_$CaptionArrangeIcons
67784>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
67785>>>>>        Set psDescription to  C_$DescArrangeIcons
67786>>>>>        Set psCategory to C_$CategoryWindow
67787>>>>>    End_Procedure
67788>>>>>    
67788>>>>>    Procedure OnExecute Variant vCommandBarControl
67790>>>>>        Handle hoCommandBars hoClientArea
67790>>>>>        Get CommandBarSystemObject to hoCommandBars
67791>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67792>>>>>        If hoClientArea Begin
67794>>>>>            Send Arrange_Icons of hoClientArea
67795>>>>>        End
67795>>>>>>
67795>>>>>    End_Procedure
67796>>>>>    
67796>>>>>End_Class
67797>>>Use cCJAboutMenuItem.pkg
Including file: cCJAboutMenuItem.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCJAboutMenuItem.pkg)
67797>>>>>Use cCJCommandBarSystem.pkg
67797>>>>>Use LanguageText.pkg
67797>>>>>
67797>>>>>// It is expected that if you use this class that you provide an about object that is
67797>>>>>// activated via activate_about such as DfAbout.pkg. We don't use this for you automatically
67797>>>>>// because you may wish to create your own custom about package.
67797>>>>>
67797>>>>>Class cCJAboutMenuItem is a cCJMenuItem    
67798>>>>>
67798>>>>>    Procedure Construct_Object
67800>>>>>        Forward Send Construct_Object
67802>>>>>        Set psCaption to C_$CaptionAbout
67803>>>>>        Set psDescription to C_$ToolTipAbout
67804>>>>>        Set psToolTip to C_$DescAbout
67805>>>>>        Set psImage to "ActionAbout.ico"
67806>>>>>        Set psCategory to C_$CategoryHelp
67807>>>>>    End_Procedure
67808>>>>>    
67808>>>>>    Procedure OnExecute Variant vCommandBarControl
67810>>>>>        Handle hoCommandBars hoClientArea
67810>>>>>        Get CommandBarSystemObject to hoCommandBars
67811>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
67812>>>>>        If hoClientArea Begin
67814>>>>>            Send Activate_About of hoClientArea
67815>>>>>        End
67815>>>>>>
67815>>>>>    End_Procedure
67816>>>>>
67816>>>>>End_Class
67817>>>>>
67817>>>>>
67817>>>Use cCJDeoMenuItemClasses.pkg
67817>>>Use cCJMDIWindowsMenuItem.pkg
Including file: cCJMDIWindowsMenuItem.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCJMDIWindowsMenuItem.pkg)
67817>>>>>Use cCJCommandBarSystem.pkg
67817>>>>>
67817>>>>>Register_Function Client_ID Returns Integer
67817>>>>>
67817>>>>>// only used by cCJMDIWIndowsMenuItem
67817>>>>>Class cCJMDIWindowItem is a cCJMenuItem
67818>>>>>    
67818>>>>>    Procedure Construct_Object
67820>>>>>        Forward Send Construct_Object
67822>>>>>        Property Handle phWindow 0 // object id of view
67823>>>>>        Set pbControlFlagNoMovable to True
67824>>>>>        Set pbActiveUpdate to True
67825>>>>>    End_Procedure
67826>>>>>    
67826>>>>>    Procedure OnExecute Variant vCommandBarControl
67828>>>>>        Handle hWindow
67828>>>>>        Get phWindow to hWindow
67829>>>>>        Send Activate_View of hWindow
67830>>>>>    End_Procedure
67831>>>>>    
67831>>>>>End_Class
67832>>>>>
67832>>>>>
67832>>>>>Class cCJMDIWindowsMenuItem is a cCJMenuItem
67833>>>>>    
67833>>>>>    Procedure Construct_Object
67835>>>>>        Forward Send Construct_Object
67837>>>>>        Property Handle[] phArrayOfWindows
67838>>>>>        Set peControlType to xtpControlPopup
67839>>>>>        Set psCategory to C_$CategoryWindow
67840>>>>>    End_Procedure
67841>>>>>    
67841>>>>>    // This adds MDI windows to the existing menu items.
67841>>>>>    // This removes any existing windows menus and always adds a new set to the end
67841>>>>>    
67841>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hCommandBarControls
67843>>>>>        Handle  hClientArea hView
67843>>>>>        String  sLabel
67843>>>>>        Integer i iWindows
67843>>>>>        Handle[] hArrayOfWindows
67844>>>>>        Variant vItem
67844>>>>>        
67844>>>>>        // delete all windows actions and menu items. Assume we have an array of DF action objects for the windows
67844>>>>>        // also assume that destroying an action removes all menu instances of that action
67844>>>>>        Get phArrayOfWindows to hArrayOfWindows
67845>>>>>        Move (SizeOfArray(hArrayOfWindows)) to iWindows
67846>>>>>        For i from 0 to (iWindows-1)
67852>>>>>>
67852>>>>>            Send Destroy of hArrayOfWindows[i] // assume this removes all menu items of this action
67853>>>>>        Loop
67854>>>>>>
67854>>>>>        Move (ResizeArray(hArrayOfWindows,0)) to hArrayOfWindows
67855>>>>>        
67855>>>>>        // Add all views to this menu. Create the action and add the item
67855>>>>>        Move 0 to i
67856>>>>>        Get Client_Id to hClientArea // object id of client area
67857>>>>>        If (hClientArea > 0) Begin
67859>>>>>            Get Next_Mdi_Dialog of hClientArea True to hView // find first view
67860>>>>>            While (hView <> 0)
67864>>>>>                If (Active_State(hView)) Begin
67866>>>>>                    // create the action
67866>>>>>                    Get Create U_cCJMDIWindowItem to hArrayOfWindows[i]
67867>>>>>                    Get Label of hView to sLabel // caption bar (name) of view
67868>>>>>                    Set psCaption of hArrayOfWindows[i] to sLabel
67869>>>>>                    Set psDescription of hArrayOfWindows[i] to ("Make this view (" - trim(sLabel) - ") the active window.")
67870>>>>>                    If (current_scope(desktop)=hView and View_mode(hView)<>VIEWMODE_ICONIZE) Begin
67872>>>>>                        Set pbChecked of hArrayOfWindows[i] to True
67873>>>>>                    End
67873>>>>>>
67873>>>>>                    Set phWindow of hArrayOfWindows[i] to hView // used by custom OnExecute
67874>>>>>                    If (i=0) Begin
67876>>>>>                        Set pbControlBeginGroup of hArrayOfWindows[i] to True
67877>>>>>                    End
67877>>>>>>
67877>>>>>                    // Create a menu item for this action
67877>>>>>                    Get AddDynamicControl of hArrayOfWindows[i] hCommandBarControls to vItem
67878>>>>>                    Increment i
67879>>>>>                End
67879>>>>>>
67879>>>>>                Get Next_Mdi_Dialog of hClientArea False to hView // find next
67880>>>>>            Loop
67881>>>>>>
67881>>>>>        End
67881>>>>>>
67881>>>>>        
67881>>>>>        Set phArrayOfWindows to hArrayOfWindows
67882>>>>>        
67882>>>>>    End_Procedure
67883>>>>>    
67883>>>>>End_Class
67884>Use cToolTipController.pkg
67884>Use cCJCommandBarSystem.pkg
67884>
67884>Object oHtmlHelp is a cHtmlHelp
67886>End_Object
67887>
67887>Object oApplication is a cApplication
67889>    Set psCompany to "Data Access Worldwide"
67890>    Set psProduct to "DataFlex Examples"
67891>    Set psVersion to "19.1"
67892>    Set psProgram to "Order"
67893>    Set psHelpFile to "DevelopmentGuide.chm"
67894>    Set peHelpType to htHtmlHelp
67895>    
67895>    Object oConnection is a cConnection
67897>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\LoginEncryption.pkg)
67897>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cLoginEncryption.pkg)
67897>>>>>Use cCryptographer.pkg
Including file: cCryptographer.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCryptographer.pkg)
67897>>>>>>>Use VdfBase.pkg
67897>>>>>>>
67897>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\CryptographerConstants.pkg)
67897>>>>>>>>>//   Author  : Ulbe Stellema
67897>>>>>>>>>// Algorithm classes
67897>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
67897>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
67897>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
67897>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
67897>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
67897>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
67897>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
67897>>>>>>>>>
67897>>>>>>>>>// Algorithm types
67897>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
67897>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
67897>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
67897>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
67897>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
67897>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
67897>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
67897>>>>>>>>>
67897>>>>>>>>>// Generic sub-ids
67897>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
67897>>>>>>>>>
67897>>>>>>>>>// RSA sub-ids
67897>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
67897>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
67897>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
67897>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
67897>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
67897>>>>>>>>>
67897>>>>>>>>>// DSS sub-ids
67897>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
67897>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
67897>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
67897>>>>>>>>>
67897>>>>>>>>>// DES sub_ids
67897>>>>>>>>>Define ALG_SID_DES                      for 1
67897>>>>>>>>>Define ALG_SID_3DES                     for 3
67897>>>>>>>>>Define ALG_SID_DESX                     for 4
67897>>>>>>>>>Define ALG_SID_IDEA                     for 5
67897>>>>>>>>>Define ALG_SID_CAST                     for 6
67897>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
67897>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
67897>>>>>>>>>Define ALG_SID_3DES_112                 for 9
67897>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
67897>>>>>>>>>Define ALG_SID_RC5                      for 13
67897>>>>>>>>>Define ALG_SID_AES_128                  for 14
67897>>>>>>>>>Define ALG_SID_AES_192                  for 15
67897>>>>>>>>>Define ALG_SID_AES_256                  for 16
67897>>>>>>>>>Define ALG_SID_AES                      for 17
67897>>>>>>>>>
67897>>>>>>>>>// Fortezza sub-ids
67897>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
67897>>>>>>>>>Define ALG_SID_TEK                      for 11
67897>>>>>>>>>
67897>>>>>>>>>// RC2 sub-ids
67897>>>>>>>>>Define ALG_SID_RC2                      for 2
67897>>>>>>>>>
67897>>>>>>>>>// Stream cipher sub-ids
67897>>>>>>>>>Define ALG_SID_RC4                      for 1
67897>>>>>>>>>Define ALG_SID_SEAL                     for 2
67897>>>>>>>>>
67897>>>>>>>>>// Diffie-Hellman sub-ids
67897>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
67897>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
67897>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
67897>>>>>>>>>Define ALG_SID_KEA                      for 4
67897>>>>>>>>>
67897>>>>>>>>>// Hash sub ids
67897>>>>>>>>>Define ALG_SID_MD2                      for 1
67897>>>>>>>>>Define ALG_SID_MD4                      for 2
67897>>>>>>>>>Define ALG_SID_MD5                      for 3
67897>>>>>>>>>Define ALG_SID_SHA                      for 4
67897>>>>>>>>>Define ALG_SID_SHA1                     for 4
67897>>>>>>>>>Define ALG_SID_MAC                      for 5
67897>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
67897>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
67897>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
67897>>>>>>>>>Define ALG_SID_HMAC                     for 9
67897>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
67897>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
67897>>>>>>>>>Define ALG_SID_SHA_256                  for 12
67897>>>>>>>>>Define ALG_SID_SHA_384                  for 13
67897>>>>>>>>>Define ALG_SID_SHA_512                  for 14
67897>>>>>>>>>
67897>>>>>>>>>// secure channel sub ids
67897>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
67897>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
67897>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
67897>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
67897>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
67897>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
67897>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
67897>>>>>>>>>
67897>>>>>>>>>// algorithm identifier definitions
67897>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
67897>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
67897>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
67897>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
67897>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
67897>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
67897>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
67897>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
67897>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
67897>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
67897>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
67897>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
67897>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
67897>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
67897>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
67897>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
67897>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
67897>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
67897>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
67897>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
67897>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
67897>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
67897>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
67897>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
67897>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
67897>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
67897>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
67897>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
67897>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
67897>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
67897>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
67897>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
67897>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
67897>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
67897>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
67897>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
67897>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
67897>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
67897>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
67897>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
67897>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
67897>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
67897>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
67897>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
67897>>>>>>>>>
67897>>>>>>>>>// Providers
67897>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
67897>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
67897>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
67897>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
67897>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
67897>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
67897>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
67897>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
67897>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
67897>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
67897>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
67897>>>>>>>>>
67897>>>>>>>>>// dwFlags definitions for CryptAcquireContext
67897>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
67897>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
67897>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
67897>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
67897>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
67897>>>>>>>>>
67897>>>>>>>>>// dwFlag definitions for CryptGenKey
67897>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
67897>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
67897>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
67897>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
67897>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
67897>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
67897>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
67897>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
67897>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
67897>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
67897>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
67897>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
67897>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
67897>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
67897>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
67897>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
67897>>>>>>>>>
67897>>>>>>>>>// Provider types
67897>>>>>>>>>Define PROV_RSA_FULL                    for 1
67897>>>>>>>>>Define PROV_RSA_SIG                     for 2
67897>>>>>>>>>Define PROV_DSS                         for 3
67897>>>>>>>>>Define PROV_FORTEZZA                    for 4
67897>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
67897>>>>>>>>>Define PROV_SSL                         for 6
67897>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
67897>>>>>>>>>Define PROV_DSS_DH                      for 13
67897>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
67897>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
67897>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
67897>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
67897>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
67897>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
67897>>>>>>>>>Define PROV_RNG                         for 21
67897>>>>>>>>>Define PROV_INTEL_SEC                   for 22
67897>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
67897>>>>>>>>>Define PROV_RSA_AES                     for 24
67897>>>>>>>>>
67897>>>>>>>>>// KP_MODE
67897>>>>>>>>>// KP_MODE
67897>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
67897>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
67897>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
67897>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
67897>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
67897>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
67897>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
67897>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
67897>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
67897>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
67897>>>>>>>>>
67897>>>>>>>>>// dwParam definitions for CryptGetKeyParam
67897>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
67897>>>>>>>>>Define KP_SALT                          for 2       // Salt value
67897>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
67897>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
67897>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
67897>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
67897>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
67897>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
67897>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
67897>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
67897>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
67897>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
67897>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
67897>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
67897>>>>>>>>>Define KP_Y                             for 15      // Y value
67897>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
67897>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
67897>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
67897>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
67897>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
67897>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
67897>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
67897>>>>>>>>>Define KP_RP                            for 23
67897>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
67897>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
67897>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
67897>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
67897>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
67897>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
67897>>>>>>>>>Define KP_KEYVAL                        for 30
67897>>>>>>>>>Define KP_ADMIN_PIN                     for 31
67897>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
67897>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
67897>>>>>>>>>Define KP_PREHASH                       for 34
67897>>>>>>>>>Define KP_ROUNDS                        for 35
67897>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
67897>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
67897>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
67897>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
67897>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
67897>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
67897>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
67897>>>>>>>>>
67897>>>>>>>>>// dwParam definitions for CryptGetHashParam
67897>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
67897>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
67897>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
67897>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
67897>>>>>>>>>
67897>>>>>>>>>// key BLOB types
67897>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
67897>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
67897>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
67897>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
67897>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
67897>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
67897>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
67897>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
67897>>>>>>>>>
67897>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
67897>>>>>>>>>
67897>>>>>>>>>//  Structure cryptimportkey
67897>>>>>>>>>Struct PUBLICKEYSTRUC
67897>>>>>>>>>    UChar    bType
67897>>>>>>>>>    UChar    bVersion
67897>>>>>>>>>    UShort   reserved
67897>>>>>>>>>    UInteger aiKeyAlg
67897>>>>>>>>>End_Struct
67897>>>>>>>>>
67897>>>>>>>>>Struct tPLAINTEXTKEYBLOB
67897>>>>>>>>>    PUBLICKEYSTRUC hdr
67897>>>>>>>>>    PUBLICKEYSTRUC hdr
67897>>>>>>>>>    UInteger       dwKeySize
67897>>>>>>>>>//    UChar[]        rgbKeyData
67897>>>>>>>>>End_Struct
67897>>>>>>>>>
67897>>>>>>>>>
67897>>>>>>>>>
67897>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
67897>>>>>>>>>Struct HMAC_INFO
67897>>>>>>>>>    UInteger HashAlgid
67897>>>>>>>>>    Pointer pbInnerString
67897>>>>>>>>>    DWord cbInnerString
67897>>>>>>>>>    Pointer pbOuterString
67897>>>>>>>>>    DWord cbOuterString
67897>>>>>>>>>End_Struct
67897>>>>>>>>>
67897>>>>>>>>>
67897>>>>>>>>>External_Function CryptAcquireContext "CryptAcquireContextA" advapi32.dll ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
67898>>>>>>>>>
67898>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
67899>>>>>>>>>
67899>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
67900>>>>>>>>>
67900>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
67901>>>>>>>>>
67901>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
67902>>>>>>>>>
67902>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
67903>>>>>>>>>
67903>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
67904>>>>>>>>>
67904>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
67905>>>>>>>>>
67905>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
67906>>>>>>>>>
67906>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
67907>>>>>>>>>    
67907>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
67908>>>>>>>>>
67908>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
67909>>>>>>>>>
67909>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
67910>>>>>>>>>
67910>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
67911>>>>>>>>>    
67911>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
67912>>>>>>>>>    
67912>>>>>>>
67912>>>>>>>Class cCryptographer is a cObject
67913>>>>>>>    
67913>>>>>>>    Procedure Construct_Object
67915>>>>>>>        Forward Send Construct_Object
67917>>>>>>>        
67917>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
67918>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
67919>>>>>>>        Property Integer    piCipher    CALG_RC4
67920>>>>>>>        Property Integer    piHash      CALG_MD5
67921>>>>>>>        
67921>>>>>>>        // Private properties
67921>>>>>>>        Property Handle     Private_phProv
67922>>>>>>>    End_Procedure
67923>>>>>>>    
67923>>>>>>>    
67923>>>>>>>    // Acquire key container handle
67923>>>>>>>    Function AcquireContext Returns Handle
67925>>>>>>>        Integer iProvider
67925>>>>>>>        String sProvider
67925>>>>>>>        Handle hProv
67925>>>>>>>        Boolean bOk
67925>>>>>>>        Address addrProv
67925>>>>>>>        
67925>>>>>>>        Move 0 to hProv
67926>>>>>>>        Get piProvider to iProvider
67927>>>>>>>        Get psProvider to sProvider
67928>>>>>>>        
67928>>>>>>>        //  Determine address to be passed as provider
67928>>>>>>>        If (Trim(sProvider) <> "") Begin
67930>>>>>>>            Move (AddressOf(sProvider)) to addrProv
67931>>>>>>>        End
67931>>>>>>>>
67931>>>>>>>        Else Begin
67932>>>>>>>            Move 0 to addrProv
67933>>>>>>>        End
67933>>>>>>>>
67933>>>>>>>        
67933>>>>>>>        //  Acquire Crypto Context
67933>>>>>>>        Move (CryptAcquireContext(AddressOf(hProv),0,addrProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
67934>>>>>>>        If (not(bOk) or hProv = 0) Begin
67936>>>>>>>            Move (CryptAcquireContext(AddressOf(hProv),0,addrProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
67937>>>>>>>        End
67937>>>>>>>>
67937>>>>>>>        
67937>>>>>>>        If (not(bOk) or hProv = 0) Begin
67939>>>>>>>            // Fallback to original
67939>>>>>>>            Move (CryptAcquireContext(AddressOf(hProv),0,addrProv,iProvider,0)) to bOk
67940>>>>>>>            
67940>>>>>>>            If (not(bOk) or hProv = 0) Begin
67942>>>>>>>                Move (CryptAcquireContext(AddressOf(hProv),0,addrProv,iProvider,CRYPT_NEWKEYSET)) to bOk
67943>>>>>>>            End
67943>>>>>>>>
67943>>>>>>>        End
67943>>>>>>>>
67943>>>>>>>        Set Private_phProv to hProv
67944>>>>>>>        
67944>>>>>>>        Function_Return hProv
67945>>>>>>>    End_Function
67946>>>>>>>    
67946>>>>>>>    // Releases key container handle
67946>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
67948>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
67949>>>>>>>    End_Function
67950>>>>>>>    
67950>>>>>>>    // Creates hash object
67950>>>>>>>    Function CreateHash Handle hProv Returns Handle
67952>>>>>>>        Integer iAlgorithm
67952>>>>>>>        Handle hHash
67952>>>>>>>        Boolean bOk
67952>>>>>>>        
67952>>>>>>>        Move 0 to hHash
67953>>>>>>>        Get piHash to iAlgorithm
67954>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
67955>>>>>>>        
67955>>>>>>>        Function_Return hHash
67956>>>>>>>    End_Function
67957>>>>>>>    
67957>>>>>>>    // Destroys the hash object
67957>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
67959>>>>>>>        Function_Return (CryptDestroyHash(hHash))
67960>>>>>>>    End_Function
67961>>>>>>>    
67961>>>>>>>    // Adds data to hash object
67961>>>>>>>    Function HashData Handle hHash String sData Returns Boolean
67963>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(sData),Length(sData),0))
67964>>>>>>>    End_Function
67965>>>>>>>    
67965>>>>>>>    // Generates session key
67965>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
67967>>>>>>>        Integer iAlgorithm
67967>>>>>>>        Handle hKey
67967>>>>>>>        Boolean bOk
67967>>>>>>>        
67967>>>>>>>        Move 0 to hKey
67968>>>>>>>        Get piCipher to iAlgorithm
67969>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
67970>>>>>>>        
67970>>>>>>>        Function_Return hKey
67971>>>>>>>    End_Function
67972>>>>>>>    
67972>>>>>>>    // Imports a plain text key
67972>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
67974>>>>>>>        tPLAINTEXTKEYBLOB blobhead
67974>>>>>>>        tPLAINTEXTKEYBLOB blobhead
67974>>>>>>>        Boolean   bSuccess
67974>>>>>>>        Handle    hKey
67974>>>>>>>        Integer   iHeadSize iKeySize
67974>>>>>>>        UChar[]   ucaKeyblob
67975>>>>>>>        Integer iVoid
67975>>>>>>>        
67975>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
67976>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
67977>>>>>>>        
67977>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
67978>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
67979>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
67980>>>>>>>        Move iKeySize           to blobhead.dwKeySize
67981>>>>>>>        
67981>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
67982>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
67983>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
67984>>>>>>>        
67984>>>>>>>        Move 0 to hKey
67985>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
67986>>>>>>>        If (not(bSuccess)) Begin
67988>>>>>>>            Move (ShowLastError()) to iVoid
67989>>>>>>>        End
67989>>>>>>>>
67989>>>>>>>        
67989>>>>>>>        Function_Return hKey
67990>>>>>>>    End_Function
67991>>>>>>>    
67991>>>>>>>    // Destroys the key
67991>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
67993>>>>>>>        Function_Return (CryptDestroyKey(hKey))
67994>>>>>>>    End_Function
67995>>>>>>>    
67995>>>>>>>    // Retrieves key data
67995>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
67997>>>>>>>        Integer iBuffer iLen
67997>>>>>>>        Boolean bOk
67997>>>>>>>        
67997>>>>>>>        Move (SizeOfType(Integer)) to iLen
67998>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
67999>>>>>>>        Function_Return iBuffer
68000>>>>>>>    End_Function
68001>>>>>>>    
68001>>>>>>>    // Retrieves a hash value
68001>>>>>>>    Function HashValue Handle lhHash Returns String
68003>>>>>>>        String  lsHash
68003>>>>>>>        Integer liResult
68003>>>>>>>        DWord   dwDataLen
68003>>>>>>>        
68003>>>>>>>        Move 0 to dwDataLen
68004>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
68005>>>>>>>        If (liResult = 0) ;            Function_Return ""
68008>>>>>>>        
68008>>>>>>>        Move (Repeat(Character(0),dwDataLen)) to lsHash
68009>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(lsHash),AddressOf(dwDataLen),0)) to liResult
68010>>>>>>>        If (liResult = 0) ;            Function_Return ""
68013>>>>>>>        
68013>>>>>>>        Function_Return lsHash
68014>>>>>>>    End_Function
68015>>>>>>>
68015>>>>>>>    // Encrypts data
68015>>>>>>>    Function Encrypt String sPassword String sData Returns String
68017>>>>>>>        Handle hProv hHash hKey
68017>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
68017>>>>>>>        Boolean bOk
68017>>>>>>>        
68017>>>>>>>        Get AcquireContext to hProv
68018>>>>>>>        If (hProv) Begin
68020>>>>>>>            Get CreateHash hProv to hHash
68021>>>>>>>            If (hHash) Begin
68023>>>>>>>                Get HashData hHash sPassword to bOk
68024>>>>>>>                If (bOk) Begin
68026>>>>>>>                    Get piCipher to iAlgorithm
68027>>>>>>>                    Get DeriveKey hProv hHash to hKey
68028>>>>>>>                End
68028>>>>>>>>
68028>>>>>>>                Get DestroyHash hHash to bOk
68029>>>>>>>            End
68029>>>>>>>>
68029>>>>>>>            
68029>>>>>>>            If (hKey) Begin
68031>>>>>>>                //  First call to determine resulting data size
68031>>>>>>>                Move (Length(sData)) to iDataLen
68032>>>>>>>                Move (Length(sData)) to iCipherLen
68033>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
68034>>>>>>>                
68034>>>>>>>                //  Reserve space in string
68034>>>>>>>                If (iDataLen < iCipherLen) Begin
68036>>>>>>>                    Move (sData + Repeat(" ", iCipherLen - iDataLen)) to sData
68037>>>>>>>                End
68037>>>>>>>>
68037>>>>>>>                
68037>>>>>>>                //  Call to really decrypt
68037>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(sData),AddressOf(iDataLen),Length(sData))) to bOk
68038>>>>>>>                //If (not(bOk)) Begin
68038>>>>>>>                //Move "" to sData
68038>>>>>>>                //Move (GetLastError()) to iErr
68038>>>>>>>                //End
68038>>>>>>>                
68038>>>>>>>                Get DestroyKey hKey to bOk
68039>>>>>>>            End 
68039>>>>>>>>
68039>>>>>>>            Get ReleaseContext hProv to bOk
68040>>>>>>>        End 
68040>>>>>>>>
68040>>>>>>>        Function_Return sData
68041>>>>>>>    End_Function
68042>>>>>>>    
68042>>>>>>>    // Decrypts data
68042>>>>>>>    Function Decrypt String sPassword String sData Returns String
68044>>>>>>>        Handle hProv hHash hKey
68044>>>>>>>        Integer iAlgorithm iDataLen
68044>>>>>>>        Boolean bOk
68044>>>>>>>        
68044>>>>>>>        Get AcquireContext to hProv
68045>>>>>>>        If (hProv) Begin
68047>>>>>>>            Get CreateHash hProv to hHash
68048>>>>>>>            If (hHash) Begin
68050>>>>>>>                Get HashData hHash sPassword to bOk
68051>>>>>>>                If (bOk) Begin
68053>>>>>>>                    Get piCipher to iAlgorithm
68054>>>>>>>                    Get DeriveKey hProv hHash to hKey
68055>>>>>>>                End
68055>>>>>>>>
68055>>>>>>>                Get DestroyHash hHash to bOk
68056>>>>>>>            End
68056>>>>>>>>
68056>>>>>>>            
68056>>>>>>>            If (hKey) Begin
68058>>>>>>>                Move (Length(sData)) to iDataLen
68059>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(sData),AddressOf(iDataLen))) to bOk
68060>>>>>>>                //  Resulting dat can be shorter as the input string, in that case we shorten the result string
68060>>>>>>>                If (Length(sData) > iDataLen) Begin
68062>>>>>>>                    Move (Left(sData, iDataLen)) to sData
68063>>>>>>>                End
68063>>>>>>>>
68063>>>>>>>                
68063>>>>>>>                Get DestroyKey hKey to bOk
68064>>>>>>>            End
68064>>>>>>>>
68064>>>>>>>            Get ReleaseContext hProv to bOk
68065>>>>>>>        End
68065>>>>>>>>
68065>>>>>>>        Function_Return sData
68066>>>>>>>    End_Function
68067>>>>>>>    
68067>>>>>>>    //  Generates random data.
68067>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
68069>>>>>>>        Handle hProv
68069>>>>>>>        UChar[] uaResult
68070>>>>>>>        Boolean bRes
68070>>>>>>>        
68070>>>>>>>        Get AcquireContext to hProv
68071>>>>>>>        
68071>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
68072>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
68073>>>>>>>        
68073>>>>>>>        Get ReleaseContext hProv to bRes
68074>>>>>>>        
68074>>>>>>>        Function_Return uaResult
68075>>>>>>>    End_Function
68076>>>>>>>    
68076>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
68076>>>>>>>    Function GenerateRandomString Integer iLenght Returns String
68078>>>>>>>        String sResult
68078>>>>>>>        UChar[] aData
68079>>>>>>>        Address pBase64
68079>>>>>>>        Integer iVoid
68079>>>>>>>        
68079>>>>>>>        Get GenerateRandom iLenght to aData
68080>>>>>>>        
68080>>>>>>>        Move (Base64Encode(AddressOf(aData), iLenght)) to pBase64
68081>>>>>>>        Move pBase64 to sResult
68082>>>>>>>        Move (Free(pBase64)) to iVoid
68083>>>>>>>        
68083>>>>>>>        Function_Return (Left(sResult, iLenght))
68084>>>>>>>    End_Function
68085>>>>>>>    
68085>>>>>>>End_Class
68086>>>>>
68086>>>>>Class cLoginEncryption is a cObject
68087>>>>>    
68087>>>>>    Procedure Construct_Object
68089>>>>>        Forward Send Construct_Object
68091>>>>>        // this must be set to a multi (40ish) character random key
68091>>>>>        Property String psEncryptPassword ""
68092>>>>>        
68092>>>>>        Object oDataCrypter is a cCryptographer
68094>>>>>            Set piHash to CALG_SHA_256
68095>>>>>            Set piCipher to CALG_AES_256
68096>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
68097>>>>>            Set piProvider to PROV_RSA_AES
68098>>>>>        End_Object
68099>>>>>    End_Procedure
68100>>>>>    
68100>>>>>    // This can be augmented to return a password encryption key using any
68100>>>>>    // hidden mechanism desired.
68100>>>>>    Function GetEncryptionPassword Returns String
68102>>>>>        String sPassword
68102>>>>>        Get psEncryptPassword to sPassword
68103>>>>>        Function_Return sPassword
68104>>>>>    End_Function
68105>>>>>    
68105>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
68105>>>>>    //
68105>>>>>    // Params:
68105>>>>>    //   sPlainText     String to encrypt.
68105>>>>>    // Returns:
68105>>>>>    //   Base64 encoded hash.
68105>>>>>    Function EncryptPassword String sPlainText Returns String
68107>>>>>        String sEncryptPassword sBinary sBase64
68107>>>>>        Address pBase64
68107>>>>>        Integer iVoid
68107>>>>>        
68107>>>>>        //  Encrypt Key
68107>>>>>        Get GetEncryptionPassword to sEncryptPassword
68108>>>>>        If (sEncryptPassword = "") Begin
68110>>>>>            Error DFERR_PROGRAM "No encryption password set"
68111>>>>>>
68111>>>>>        End
68111>>>>>>
68111>>>>>        
68111>>>>>        Get Encrypt of oDataCrypter sEncryptPassword sPlainText to sBinary
68112>>>>>        
68112>>>>>        If (sPlainText = sBinary or sBinary = "") Begin
68114>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
68115>>>>>>
68115>>>>>            Function_Return ""
68116>>>>>        End
68116>>>>>>
68116>>>>>        
68116>>>>>        //  Encode binary hash to Base64
68116>>>>>        Move (Base64Encode(AddressOf(sBinary), Length(sBinary))) to pBase64
68117>>>>>        Move pBase64 to sBase64
68118>>>>>        Move (Free(pBase64)) to iVoid
68119>>>>>        
68119>>>>>        Function_Return sBase64
68120>>>>>    End_Function
68121>>>>>    
68121>>>>>    
68121>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
68121>>>>>    //
68121>>>>>    // Params:
68121>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
68121>>>>>    // Returns:
68121>>>>>    //   Readable plain text password
68121>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
68123>>>>>        String sEncryptPassword sPlainText sBinary
68123>>>>>        Boolean bIsHex
68123>>>>>        Integer iLen iVoid
68123>>>>>        Address pBinary
68123>>>>>        
68123>>>>>        If (sBase64EncryptedPassword <> "") Begin
68125>>>>>            //  Decode from Base64
68125>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
68126>>>>>            
68126>>>>>            Move (Repeat(Character(0), iLen)) to sBinary
68127>>>>>            Move (CopyMemory(AddressOf(sBinary), pBinary, iLen)) to iVoid
68128>>>>>            
68128>>>>>            Move (Free(pBinary)) to iVoid
68129>>>>>            
68129>>>>>            //  Encrypted binary hash to string
68129>>>>>            Get GetEncryptionPassword to sEncryptPassword
68130>>>>>            Get Decrypt of oDataCrypter sEncryptPassword sBinary to sPlainText
68131>>>>>        End
68131>>>>>>
68131>>>>>        
68131>>>>>        Function_Return sPlainText
68132>>>>>    End_Function
68133>>>>>End_Class
68134>>>
68134>>>Object oLoginEncryption is a cLoginEncryption
68136>>>
68136>>>    // this must be created in your appsrc directory and must contain an encryption
68136>>>    // key that is set to psEncryptPassword. It will look something like this
68136>>>    //
68136>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
68136>>>    //  
Including file: LoginEncryptionKey.inc    (C:\test\BuildTools\Order Entry\AppSrc\LoginEncryptionKey.inc)
68136>>>>// Studio generated login encryption key
68136>>>>Set psEncryptPassword to "A#*2<&J?$%{A9zhxV>Nhp,tNoy@{E^?+bT1#K[i%"
68137>>>>
68137>>>    
68137>>>    // use this to register this object to your cConnection Object. This object
68137>>>    // must be created after the cConnection object
68137>>>    Move Self to ghoLoginEncryption
68138>>>End_Object
68139>        Use DatabaseLoginDialog.dg
Including file: DatabaseLoginDialog.dg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\DatabaseLoginDialog.dg)
68139>>>
68139>>>Use Windows.pkg
68139>>>Use cConnection.pkg
68139>>>Use dfLine.pkg
68139>>>
68139>>>Object oDatabaseLoginDialog is a ModalPanel
68141>>>    Set Label to "Database Login"
68142>>>    Set Location to 2 2
68143>>>    Set Size to 110 211
68144>>>    
68144>>>    Property String psId
68146>>>    Property Boolean pbOk False
68148>>>    Property Boolean pbChanged False
68150>>>    Property Boolean pbAllowRemember True
68152>>>    
68152>>>    // this registers this object with the cConnection object.
68152>>>    Move Self to ghoLoginConnectDialog
68153>>>    
68153>>>    Object oUserIDForm is a Form
68155>>>        Set Label to "User Name"
68156>>>        Set Size to 12 85
68157>>>        Set Location to 34 79
68158>>>        Set Label_Col_Offset to 64
68159>>>        Set peAnchors to anTopLeftRight
68160>>>    End_Object
68161>>>    
68161>>>    Object oPwdForm is a Form
68163>>>        Set Size to 12 85
68164>>>        Set Location to 49 79
68165>>>        Set Label_Col_Offset to 64
68166>>>        Set Password_State to True
68167>>>        Set peAnchors to anTopLeftRight
68168>>>        Set Label to "Password"
68169>>>    End_Object
68170>>>    
68170>>>    Object oTrustedConnection is a CheckBox
68172>>>        Set Size to 10 50
68173>>>        Set Location to 65 79
68174>>>        Set Label to "Trusted Connection"
68175>>>    End_Object
68176>>>    
68176>>>    Object oRemember is a CheckBox
68178>>>        Set Size to 10 50
68179>>>        Set Location to 79 14
68180>>>        Set Label to "Remember and don't ask again"
68181>>>        Set Checked_State to True
68182>>>    End_Object
68183>>>    
68183>>>    Object oLogin_btn is a Button
68185>>>        Set Label to "&Login"
68186>>>        Set Location to 92 102
68187>>>        Set peAnchors to anBottomRight
68188>>>        Set Default_State to True
68189>>>        
68189>>>        Procedure OnClick
68192>>>            Boolean bTrust
68192>>>            String sUser sPwd sConn sErr sId
68192>>>            Integer iError
68192>>>            Get psId to sId
68193>>>            Get Value of oUserIDForm to sUser
68194>>>            Get Value of oPwdForm to sPwd
68195>>>            Get Checked_State of oTrustedConnection to bTrust
68196>>>            
68196>>>            Get LoginConnectIdNewCredentials of ghoConnection sId sUser sPwd bTrust to iError
68197>>>            If (iError=0) Begin
68199>>>                Set pbOk to True
68200>>>                Set pbChanged to True
68201>>>                Send Close_Panel
68202>>>            End
68202>>>>
68202>>>            Else Begin
68203>>>                Get psErrorText of ghoConnection to sErr
68204>>>                Send UserError sErr "Login Error"
68205>>>            End
68205>>>>
68205>>>        End_Procedure
68206>>>    End_Object
68207>>>    
68207>>>    Object oCancel_btn is a Button
68209>>>        Set Label to "&Cancel"
68210>>>        Set Location to 92 157
68211>>>        Set peAnchors to anBottomRight
68212>>>        
68212>>>        Procedure OnClick
68215>>>            Send Close_Panel
68216>>>        End_Procedure
68217>>>    End_Object
68218>>>    
68218>>>    Object oConnectionIdInfo is a TextBox
68220>>>        Set Size to 10 50
68221>>>        Set Location to 4 14
68222>>>        Set Label to 'Connection Id='
68223>>>    End_Object
68224>>>    
68224>>>    Object oConnectionServerInfo is a TextBox
68226>>>        Set Size to 10 50
68227>>>        Set Location to 16 14
68228>>>        Set Label to 'Server'
68229>>>    End_Object
68230>>>    
68230>>>    Object oLineControl1 is a LineControl
68232>>>        Set Size to 2 202
68233>>>        Set Location to 29 5
68234>>>    End_Object
68235>>>    
68235>>>    Function LoginConnectIdDialog String sId Returns Boolean
68238>>>        Boolean bOk bChanged bTrusted bAllowRemember bRemember
68238>>>        String sUser sPwd sDescription
68238>>>        tConnection Connect
68238>>>        tConnection Connect
68238>>>        
68238>>>        Get pbAllowRemember to bAllowRemember
68239>>>        
68239>>>        
68239>>>        If not bAllowRemember Begin
68241>>>            Set Enabled_State of oRemember to bRemember
68242>>>            Set Visible_State of oRemember to bRemember
68243>>>        End
68243>>>>
68243>>>        
68243>>>        Get ConnectionIdInfo of ghoConnection sId to Connect
68244>>>        Set Value of oConnectionIdInfo to ("Connection ID="+Connect.sId)
68245>>>        Set Value of oConnectionServerInfo to Connect.sString
68246>>>        
68246>>>        Set psId to sId
68247>>>        Set pbOk to False
68248>>>        Set pbChanged to False
68249>>>        Set Value of oUserIDForm to Connect.sUID
68250>>>        Set Value of oPwdForm to ""
68251>>>        
68251>>>        Send Popup
68252>>>        
68252>>>        Get pbOk to bOk
68253>>>        Get pbChanged to bChanged
68254>>>        If (bChanged and bOk) Begin
68256>>>            If bAllowRemember Begin
68258>>>                Get Checked_State of oRemember to bRemember
68259>>>                If bRemember Begin
68261>>>                    Get Checked_State of oTrustedConnection to bTrusted
68262>>>                    If not (bTrusted) Begin
68264>>>                        Get Value of oUserIDForm to sUser
68265>>>                        Get Value of oPwdForm to sPwd
68266>>>                    End
68266>>>>
68266>>>                    Get StoreConnectionIdCredentials of ghoConnection sId sUser sPwd bTrusted to bOk
68267>>>                End
68267>>>>
68267>>>            End
68267>>>>
68267>>>        End
68267>>>>
68267>>>        Function_Return bOk
68268>>>    End_Function
68269>>>    
68269>>>    
68269>>>    On_Key Key_Alt+Key_O Send KeyAction of oLogin_btn
68270>>>    On_Key Key_Alt+Key_L Send KeyAction of oCancel_btn
68271>>>End_Object
68272>>>
68272>    End_Object
68273>    
68273>End_Object
68274>
68274>Object oToolTipController is a cToolTipController
68276>    Move Self to ghoToolTipController
68277>End_Object
68278>
68278>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\oEditContextMenu.pkg)
68278>>>Use cCJStandardMenuItemClasses.pkg
68278>>>
68278>>>Object oEditContextMenu is a cCJContextMenu
68280>>>    
68280>>>    Move Self to Default_Form_Floating_Menu_ID
68281>>>    
68281>>>    Object oUndoMenuItem is a cCJUndoMenuItem
68283>>>    End_Object
68284>>>    
68284>>>    Object oCutMenuItem is a cCJCutMenuItem
68286>>>        Set pbControlBeginGroup to True
68287>>>    End_Object
68288>>>    
68288>>>    Object oCopyMenuItem is a cCJCopyMenuItem
68290>>>    End_Object
68291>>>
68291>>>    Object oPasteMenuItem is a cCJPasteMenuItem
68293>>>    End_Object
68294>>>
68294>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
68296>>>    End_Object
68297>>>
68297>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
68299>>>        Set pbControlBeginGroup to True
68300>>>    End_Object
68301>>>
68301>>>End_Object
68302>>>
68302>Use oDEOEditContextMenu17.pkg
Including file: oDEOEditContextMenu17.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\oDEOEditContextMenu17.pkg)
68302>>>Use Windows.pkg
68302>>>Use cCJStandardMenuItemClasses.pkg
68302>>>Use cCJDeoMenuItemClasses.pkg
68302>>>
68302>>>
68302>>>Object oDEOEditContextMenu17 is a cCJContextMenu
68304>>>    
68304>>>    Move Self to Default_dbFloating_Menu_ID
68305>>>    
68305>>>    Object oUndoMenuItem is a cCJUndoMenuItem
68307>>>    End_Object
68308>>>    
68308>>>    Object oCutMenuItem is a cCJCutMenuItem
68310>>>        Set pbControlBeginGroup to True
68311>>>    End_Object
68312>>>    
68312>>>    Object oCopyMenuItem is a cCJCopyMenuItem
68314>>>    End_Object
68315>>>
68315>>>    Object oPasteMenuItem is a cCJPasteMenuItem
68317>>>    End_Object
68318>>>
68318>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
68320>>>    End_Object
68321>>>
68321>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
68323>>>        Set pbControlBeginGroup to True
68324>>>    End_Object
68325>>>
68325>>>    Object oPromptMenuItem is a cCJPromptMenuItem
68327>>>        Set pbControlBeginGroup to True
68328>>>    End_Object
68329>>>
68329>>>    Object oFindNextMenu is a cCJFindNextMenuItem
68331>>>        Set pbControlBeginGroup to True
68332>>>    End_Object
68333>>>
68333>>>    Object oFindPreviousMenu is a cCJFindPreviousMenuItem
68335>>>    End_Object
68336>>>
68336>>>    Object oClearMenuItem is a cCJClearMenuItem
68338>>>        Set pbControlBeginGroup to True
68339>>>    End_Object
68340>>>
68340>>>    Object oClearAllMenu is a cCJClearAllMenuItem
68342>>>    End_Object
68343>>>
68343>>>    Object oSaveMenu is a cCJSaveMenuItem
68345>>>    End_Object
68346>>>    
68346>>>    Object oDeleteMenu is a cCJDeleteMenuItem
68348>>>    End_Object
68349>>>
68349>>>    Object oRememberitem is a cCJRememberFieldMenuItem
68351>>>        Set pbControlBeginGroup to True
68352>>>    End_Object
68353>>>
68353>>>    Object oRetainItem is a cCJRememberLastFieldMenuItem
68355>>>    End_Object
68356>>>
68356>>>    Object oUnRememberitem is a cCJUnRememberFieldMenuItem
68358>>>    End_Object
68359>>>
68359>>>    Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
68361>>>    End_Object
68362>>>
68362>>>End_Object
68363>
68363>Object oMain is a Panel
68365>    Set Label to "Order Entry Sample Application"
68366>    Set Location to 4 3
68367>    Set Size to 300 450
68368>    
68368>    Object oCommandBarSystem is a cCJCommandBarSystem
68370>        Set pbTimerUpdate to True
68371>        Set pbAutoResizeIcons to True
68372>        Set peVisualTheme to xtpThemeOffice2013Outlook
68373>        
68373>        Procedure OnCreateCommandBars
68376>            Handle hoOptions
68376>            Get OptionsObject to hoOptions
68377>            Forward Send OnCreateCommandBars
68379>        End_Procedure
68380>        
68380>        Object oMenuBar is a cCJMenuBar
68382>            
68382>            Object oFileMenu is a cCJMenuItem
68384>                Set peControlType to xtpControlPopup
68385>                Set psCaption   to "&File"
68386>                Set psDescription to "Find, Save, Delete, Clear information or quit this application."
68387>                Set psCategory to "Menus"
68388>                
68388>                Object oClearMenuItem is a cCJClearMenuItem
68390>                    Set pbAddToDesignerMenu to True
68391>                End_Object
68392>                
68392>                Object oClearAllMenu is a cCJClearAllMenuItem
68394>                    Set pbAddToDesignerMenu to True
68395>                End_Object
68396>                
68396>                Object oPromptMenuItem is a cCJPromptMenuItem
68398>                    Set pbAddToDesignerMenu to True
68399>                    Set pbControlBeginGroup to True
68400>                End_Object
68401>                
68401>                Object oFindMenuItem is a cCJFindMenuItem
68403>                    Set pbAddToDesignerMenu to True
68404>                    Set pbControlBeginGroup to True
68405>                End_Object
68406>                
68406>                Object oFindNextMenu is a cCJFindNextMenuItem
68408>                    Set pbAddToDesignerMenu to True
68409>                End_Object
68410>                
68410>                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
68412>                    Set pbAddToDesignerMenu to True
68413>                End_Object
68414>                
68414>                Object oFindFirstMenu is a cCJFindFirstMenuItem
68416>                    Set pbAddToDesignerMenu to True
68417>                End_Object
68418>                
68418>                Object oFindLastMenu is a cCJFindLastMenuItem
68420>                    Set pbAddToDesignerMenu to True
68421>                End_Object
68422>                
68422>                Object oSaveMenuItem is a cCJSaveMenuItem
68424>                    Set pbAddToDesignerMenu to True
68425>                    Set pbControlBeginGroup to True
68426>                End_Object
68427>                
68427>                Object oDeleteMenuItem is a cCJDeleteMenuItem
68429>                    Set pbAddToDesignerMenu to True
68430>                End_Object
68431>                
68431>                Object oExitMenu is a cCJExitMenuItem
68433>                    Set pbControlBeginGroup to True
68434>                End_Object
68435>                
68435>            End_Object
68436>            
68436>            Object oViewMenu is a cCJMenuItem
68438>                
68438>                Set peControlType to xtpControlPopup
68439>                Set psCaption to "&View"
68440>                Set psToolTip to "View"
68441>                Set psDescription to "Available Views"
68442>                
68442>                Object oCustomerEntryViewMenuItem is a cCJMenuItem
68444>                    Set psCaption to "Customer Entry View"
68445>                    Set psShortcut to "Ctrl+1"
68446>                    Set psDescription to "Add, edit and delete Customer data."
68447>                    Set psToolTip to "Customer Entry View"
68448>                    
68448>                    Procedure OnExecute Variant vCommandBarControl
68451>                        Handle hoClient
68451>                        Get Client_Id to hoClient
68452>                        Send Activate_oCustomerView of hoClient
68453>                    End_Procedure
68454>                End_Object
68455>                
68455>                Object oInventoryItemViewMenuItem is a cCJMenuItem
68457>                    Set psCaption to "Inventory Item View"
68458>                    Set psShortcut to "Ctrl+2"
68459>                    Set psDescription to "Add, edit and delete Inventory data."
68460>                    Set psToolTip to "Inventory Item View"
68461>                    
68461>                    Procedure OnExecute Variant vCommandBarControl
68464>                        Handle hoClient
68464>                        Get Client_Id to hoClient
68465>                        Send Activate_oInventoryView of hoClient
68466>                    End_Procedure
68467>                End_Object
68468>                
68468>                Object oOrderEntryMenuItem is a cCJMenuItem
68470>                    Set psCaption to "Order Entry"
68471>                    Set psShortcut to "Ctrl+3"
68472>                    Set psDescription to "Add, edit and delete Order data."
68473>                    Set psToolTip to "Order Entry"
68474>                    
68474>                    Procedure OnExecute Variant vCommandBarControl
68477>                        Handle hoClient
68477>                        Get Client_Id to hoClient
68478>                        Send Activate_oOrderEntryView of hoClient
68479>                    End_Procedure
68480>                End_Object
68481>                
68481>                Object oSalesPersonEntryViewMenuItem is a cCJMenuItem
68483>                    Set psCaption to "Sales Person Entry View"
68484>                    Set psShortcut to "Ctrl+4"
68485>                    Set psDescription to "Add, edit and delete Sales Person data."
68486>                    Set psToolTip to "Sales Person Entry View"
68487>                    
68487>                    Procedure OnExecute Variant vCommandBarControl
68490>                        Handle hoClient
68490>                        Get Client_Id to hoClient
68491>                        Send Activate_oSalesPersonView of hoClient
68492>                    End_Procedure
68493>                End_Object
68494>                
68494>                Object oVendorEntryViewMenuItem is a cCJMenuItem
68496>                    Set psCaption to "Vendor Entry View"
68497>                    Set psShortcut to "Ctrl+5"
68498>                    Set psDescription to "Add, edit and delete Vendor data."
68499>                    Set psToolTip to "Vendor Entry View"
68500>                    
68500>                    Procedure OnExecute Variant vCommandBarControl
68503>                        Handle hoClient
68503>                        Get Client_Id to hoClient
68504>                        Send Activate_oVendorView of hoClient
68505>                    End_Procedure
68506>                End_Object
68507>                
68507>            End_Object
68508>            
68508>            Object oReportMenu is a cCJMenuItem                
68510>                Set peControlType to xtpControlPopup
68511>                Set psCaption to "&Report"
68512>                Set psToolTip to "Report"
68513>                Set psDescription to "Available Reports"
68514>
68514>                Object oDataFlexReportsMenuItem is a cCJMenuItem
68516>                    Set psCaption to "DataFlex Reports"
68517>                    Set psTooltip to "DataFlex Reports"
68518>                    Set peControlType to xtpControlPopup
68519>
68519>                    Object oListofCustomersMenuItem is a cCJMenuItem
68521>                        Set psCaption to "List of Customers"
68522>                        Set psTooltip to "Produces a Configurable List of Customers"
68523>                    
68523>                        Procedure OnExecute Variant vCommandBarControl
68526>                            Handle hoClient
68526>                            Get Client_Id to hoClient
68527>                            Send Activate_oCustomerListReportView of hoClient
68528>                        End_Procedure
68529>                    End_Object
68530>
68530>                    Object oCustomerListDrillDownMenuItem is a cCJMenuItem
68532>                        Set psCaption to "CustomerList (Drill-Down)"
68533>                        Set psTooltip to "Creates a CustomerList with Drill-Down feature"
68534>                    
68534>                        Procedure OnExecute Variant vCommandBarControl
68537>                            Handle hoClient
68537>                            Get Client_Id to hoClient
68538>                            Send Activate_oCustomerListDrillDownReportView of hoClient
68539>                        End_Procedure
68540>                    End_Object
68541>
68541>                    Object oOrdersWithPagelayersMenuItem is a cCJMenuItem
68543>                        Set psCaption to "Orders with Pagelayers"
68544>                        Set psTooltip to "Orders with Pagelayers"
68545>                    
68545>                        Procedure OnExecute Variant vCommandBarControl
68548>                            Handle hoClient
68548>                            Get Client_Id to hoClient
68549>                            Send Activate_oOrderswithPagelayersReportView of hoClient
68550>                        End_Procedure
68551>                    End_Object
68552>
68552>                    Object oCustomerLabelsMenuItem is a cCJMenuItem
68554>                        Set psCaption to "Customer Labels"
68555>                        Set psTooltip to "Created a Report with Customer Labels"
68556>                    
68556>                        Procedure OnExecute Variant vCommandBarControl
68559>                            Handle hoClient
68559>                            Get Client_Id to hoClient
68560>                            Send Activate_oCustomerLabelsReportView of hoClient
68561>                        End_Procedure
68562>                    End_Object
68563>
68563>                    Object oSalesperSalespersonperUSAStateMenuItem is a cCJMenuItem
68565>                        Set psCaption to "Sales per Salesperson per USA State"
68566>                        Set psTooltip to "Sales per Salesperson per USA State"
68567>                    
68567>                        Procedure OnExecute Variant vCommandBarControl
68570>                            Handle hoClient
68570>                            Get Client_Id to hoClient
68571>                            Send Activate_oSalesPerSalesPersonPerUSAStateReportView of hoClient
68572>                        End_Procedure
68573>                    End_Object
68574>
68574>                    Object oCustomerVendorRelationshipMenuItem is a cCJMenuItem
68576>                        Set psCaption to "Customer Vendor Relationship"
68577>                        Set psTooltip to "Shows what Vendors Delivered Products to this Customer"
68578>                    
68578>                        Procedure OnExecute Variant vCommandBarControl
68581>                            Handle hoClient
68581>                            Get Client_Id to hoClient
68582>                            Send Activate_oCustomerVendorRelationshipReportView of hoClient
68583>                        End_Procedure
68584>                    End_Object
68585>
68585>                    Object oInventoryReportMenuItem is a cCJMenuItem
68587>                        Set psCaption to "Inventory Report"
68588>                        Set psTooltip to "Creates an Inventory Report"
68589>                    
68589>                        Procedure OnExecute Variant vCommandBarControl
68592>                            Handle hoClient
68592>                            Get Client_Id to hoClient
68593>                            Send Activate_oInventoryReportView of hoClient
68594>                        End_Procedure
68595>                    End_Object
68596>
68596>                    Object oSalesperStateperYearMenuItem is a cCJMenuItem
68598>                        Set psCaption to "Sales per State per Year"
68599>                        Set psTooltip to "Creates a Report with a Crosstab Showing the Sales per State per Year"
68600>                    
68600>                        Procedure OnExecute Variant vCommandBarControl
68603>                            Handle hoClient
68603>                            Get Client_Id to hoClient
68604>                            Send Activate_oSalesperStateperYearReportView of hoClient
68605>                        End_Procedure
68606>                    End_Object
68607>
68607>                    Object oDataOverviewMenuItem is a cCJMenuItem
68609>                        Set psCaption to "Data Overview"
68610>                        Set psTooltip to "List of Addresses, Delivery and Payment Methods and Salespersons"
68611>                    
68611>                        Procedure OnExecute Variant vCommandBarControl
68614>                            Handle hoClient
68614>                            Get Client_Id to hoClient
68615>                            Send Activate_oDataOverviewReportView of hoClient
68616>                        End_Procedure
68617>                    End_Object
68618>
68618>                    Object oMyPicturesGalleryMenuItem is a cCJMenuItem
68620>                        Set psCaption to "My Pictures Gallery"
68621>                        Set psTooltip to "Report Showing the Images of on This Computer"
68622>                    
68622>                        Procedure OnExecute Variant vCommandBarControl
68625>                            Handle hoClient
68625>                            Get Client_Id to hoClient
68626>                            Send Activate_oMyPicturesGalleryReportView of hoClient
68627>                        End_Procedure
68628>                    End_Object
68629>
68629>                    Object oTableUsageMenuItem is a cCJMenuItem
68631>                        Set psCaption to "Table Usage"
68632>                        Set psTooltip to "Shows How Many Rows are Used per Table"
68633>                    
68633>                        Procedure OnExecute Variant vCommandBarControl
68636>                            Handle hoClient
68636>                            Get Client_Id to hoClient
68637>                            Send Activate_oTableUsageReportView of hoClient
68638>                        End_Procedure
68639>                    End_Object
68640>
68640>                    Object oReportInfoMenuItem is a cCJMenuItem
68642>                        Set psCaption to "Report Info"
68643>                        Set psTooltip to "Shows Information About a Report"
68644>                    
68644>                        Procedure OnExecute Variant vCommandBarControl
68647>                            Handle hoClient
68647>                            Get Client_Id to hoClient
68648>                            Send Activate_oReportInfoView of hoClient
68649>                        End_Procedure
68650>                    End_Object
68651>                End_Object
68652>                
68652>                Object oBasicReportsMenuItem is a cCJMenuItem
68654>                    Set psCaption to "Basic Reports"
68655>                    Set peControlType to xtpControlPopup
68656>                    Set psToolTip to "Basic Reports"
68657>                    Set psDescription to "Reports based on the Basic Report class."
68658>                    
68658>                    Object oCustomerListMenuItem is a cCJMenuItem
68660>                        Set psCaption to "Customer List"
68661>                        Set psToolTip to "Customer List (Basic)"
68662>                        
68662>                        Procedure OnExecute Variant vCommandBarControl
68665>                            Handle hoClient
68665>                            Get Client_Id to hoClient
68666>                            Send Activate_oCustomerListBR of hoClient
68667>                        End_Procedure
68668>                    End_Object
68669>                End_Object
68670>                
68670>                Object oWinPrintReportsMenuItem is a cCJMenuItem
68672>                    Set psCaption to "WinPrint Reports"
68673>                    Set peControlType to xtpControlPopup
68674>                    Set psToolTip to "WinPrint Reports"
68675>                    Set psDescription to "Reports based on the WinPrint class."
68676>                    
68676>                    Object oCustomerListMenuItem2 is a cCJMenuItem
68678>                        Set psCaption to "Customer List"
68679>                        Set psShortcut to "Ctrl+6"
68680>                        Set psToolTip to "Customer List (WinPrint)"
68681>                        Set psDescription to "Print Customer data."
68682>                        
68682>                        Procedure OnExecute Variant vCommandBarControl
68685>                            Handle hoClient
68685>                            Get Client_Id to hoClient
68686>                            Send Activate_oCustomerListWP of hoClient
68687>                        End_Procedure
68688>                    End_Object
68689>                    
68689>                    Object oItemsperOrderMenuItem is a cCJMenuItem
68691>                        Set psCaption to "Items per Order"
68692>                        Set psShortcut to "Ctrl+7"
68693>                        Set psToolTip to "Items per Order (WinPrint)"
68694>                        Set psDescription to "Print line items for all Orders."
68695>                        
68695>                        Procedure OnExecute Variant vCommandBarControl
68698>                            Handle hoClient
68698>                            Get Client_Id to hoClient
68699>                            Send Activate_oItemsPerOrderWP of hoClient
68700>                        End_Procedure
68701>                    End_Object
68702>                    
68702>                    Object oOrdersbyCustomerMenuItem1 is a cCJMenuItem
68704>                        Set psCaption to "Orders by Customer"
68705>                        Set psShortcut to "Ctrl+8"
68706>                        Set psToolTip to "Orders by Customer (WinPrint)"
68707>                        Set psDescription to "Print Order data sorted by Customer."
68708>                        
68708>                        Procedure OnExecute Variant vCommandBarControl
68711>                            Handle hoClient
68711>                            Get Client_Id to hoClient
68712>                            Send Activate_oOrdersByCustomerWP of hoClient
68713>                        End_Procedure
68714>                    End_Object
68715>                    
68715>                    Object oOrdersbyOrderNumberMenuItem is a cCJMenuItem
68717>                        Set psCaption to "Orders by Order Number"
68718>                        Set psShortcut to "Ctrl+9"
68719>                        Set psToolTip to "Orders by Order Number (WinPrint)"
68720>                        Set psDescription to "Print Order data."
68721>                        
68721>                        Procedure OnExecute Variant vCommandBarControl
68724>                            Handle hoClient
68724>                            Get Client_Id to hoClient
68725>                            Send Activate_oOrdersWP of hoClient
68726>                        End_Procedure
68727>                    End_Object
68728>                End_Object
68729>                
68729>            End_Object
68730>            
68730>            Object oNavigateMenu is a cCJMenuItem
68732>                Set peControlType to xtpControlPopup
68733>                Set psCaption to "&Navigate"
68734>                Set psTooltip to "Navigate"
68735>                Set psDescription to "Move to different areas of the application"
68736>                
68736>                Object oNextAreaMenu is a cCJNextAreaMenu
68738>                End_Object
68739>                
68739>                Object oPriorAreaMenu is a cCJPriorAreaMenu
68741>                End_Object
68742>                
68742>                Object oNextViewMenu is a cCJNextViewMenu
68744>                End_Object
68745>                
68745>                Object oPriorViewMenu is a cCJPriorViewMenu
68747>                End_Object
68748>                
68748>                Object oPromptMenu is a cCJPromptMenuItem
68750>                    Set pbControlBeginGroup to True
68751>                End_Object
68752>                
68752>                Object oZoomMenu is a cCJZoomMenuItem
68754>                End_Object
68755>                
68755>            End_Object
68756>            
68756>            Object oWindowMenu is a cCJMDIWindowsMenuItem
68758>                Set peControlType to xtpControlPopup
68759>                Set psCaption to "&Window"
68760>                Set psToolTip to "Window"
68761>                Set psDescription to "Display Current Views and set other display options."
68762>                
68762>                // These are the static windows items. More will be created in onInitPopup
68762>                Object oDisplayOptionsMenu is a cCJMenuItem
68764>                    Set peControlType to xtpControlPopup
68765>                    Set psCaption to "&Display Options"
68766>                    Set psToolTip to "Display Options"
68767>                    Set psDescription to "Set display options"
68768>                    
68768>                    Object oStatusbarMenu is a cCJStatusbarMenuItem
68770>                    End_Object
68771>                    
68771>                    Object oAutoArrangeIconsMenu is a cCJAutoArrangeIconsMenuItem
68773>                    End_Object
68774>                    
68774>                    Object oRestoreMenusMenu is a cCJRestoreMenusMenuItem
68776>                        Set pbControlBeginGroup to True
68777>                    End_Object
68778>                    
68778>                End_Object
68779>                
68779>                Object oCascadeMenu is a cCJCascadeMenuItem
68781>                    Set pbControlBeginGroup to True
68782>                End_Object
68783>                
68783>                Object oHorizTile is a cCJTileHorizontally
68785>                End_Object
68786>                
68786>                Object oVertTile is a cCJTileVertically
68788>                End_Object
68789>                
68789>                Object oMinimizeMenuItem is a cCJMinimizeWindowsMenuItem
68791>                    Set pbControlBeginGroup to True
68792>                End_Object
68793>                
68793>                Object oRestoreMenuItem is a cCJRestoreWindowsMenuItem
68795>                End_Object
68796>                
68796>                Object oArrangeIconsMenuItem is a cCJAutoArrangeIconsMenuItem
68798>                    Set pbControlBeginGroup to True
68799>                End_Object
68800>                
68800>            End_Object
68801>            
68801>            Object oDemoMenuItem is a cCJMenuItem
68803>                Set psCaption to "&Demo"
68804>                Set psTooltip to "&Demo"
68805>                Set peControlType to xtpControlPopup
68806>                
68806>                Object oParentComboDemoMenuItem is a cCJMenuItem
68808>                    Set psCaption to "Parent Combo Demo"
68809>                    Set psTooltip to "Parent Combo Demo"
68810>                    
68810>                    Procedure OnExecute Variant vCommandBarControl
68813>                        Handle hoClient
68813>                        Get Client_Id to hoClient
68814>                        Send Activate_oDemoParentCombos of hoClient
68815>                    End_Procedure
68816>                End_Object
68817>                
68817>                Object oSuggestionFormMenuItem is a cCJMenuItem
68819>                    Set psCaption to "Suggestion Form"
68820>                    Set psTooltip to "Suggestion Form"
68821>                    
68821>                    Procedure OnExecute Variant vCommandBarControl
68824>                        Handle hoClient
68824>                        Get Client_Id to hoClient
68825>                        Send Activate_oDemoSuggestionForm of hoClient
68826>                    End_Procedure
68827>                End_Object
68828>                
68828>                Object oButtonSamplesMenuItem is a cCJMenuItem
68830>                    Set psCaption to "Button Samples"
68831>                    Set psTooltip to "Button Samples"
68832>                    
68832>                    Procedure OnExecute Variant vCommandBarControl
68835>                        Handle hoClient
68835>                        Get Client_Id to hoClient
68836>                        Send Activate_oButtonTest of hoClient
68837>                    End_Procedure
68838>                End_Object
68839>                
68839>                Object oCalendarControlSampleMenuItem is a cCJMenuItem
68841>                    Set psCaption to "Calendar Control Sample"
68842>                    Set psTooltip to "Calendar Control Sample"
68843>                    
68843>                    Procedure OnExecute Variant vCommandBarControl
68846>                        Handle hoClient
68846>                        Get Client_Id to hoClient
68847>                        Send Activate_oDemoCalendarControl of hoClient
68848>                    End_Procedure
68849>                End_Object
68850>            End_Object
68851>            
68851>            Object oHelpMenu is a cCJMenuItem
68853>                Set peControlType to xtpControlPopup
68854>                Set psCaption to "&Help"
68855>                Set psDescription to "Access Information for learning and using this DataFlex application."
68856>                Set psToolTip to "Help"
68857>                
68857>                Object oHelpMenuItem is a cCJHelpMenuItem
68859>                End_Object
68860>                
68860>                Object oAboutMenuItem is a cCJAboutMenuItem
68862>                End_Object
68863>                
68863>            End_Object
68864>            
68864>        End_Object
68865>        
68865>        Object oFindToolBar is a cCJToolbar
68867>            Set psTitle to "Finding Toolbar"
68868>            
68868>            Object oFindFirstTool is a cCJFindFirstMenuItem
68870>            End_Object
68871>            
68871>            Object oFindPreviousTool is a cCJFindPreviousMenuItem
68873>            End_Object
68874>            
68874>            Object oFindMenuTool is a cCJFindMenuItem
68876>            End_Object
68877>            
68877>            Object oFindNextTool is a cCJFindNextMenuItem
68879>            End_Object
68880>            
68880>            Object oFindLastTool is a cCJFindLastMenuItem
68882>            End_Object
68883>            
68883>            Object oPromptToolItem is a cCJPromptMenuItem
68885>                Set pbControlBeginGroup to True
68886>            End_Object
68887>            
68887>        End_Object
68888>        
68888>        Object oFileToolBar is a cCJToolbar
68890>            Set psTitle to "Data Entry Toolbar"
68891>            
68891>            Object oClearToolItem is a cCJClearMenuItem
68893>                Set peControlStyle to xtpButtonIconAndCaption
68894>            End_Object
68895>            
68895>            Object oClearAllToolItem2 is a cCJClearAllMenuItem
68897>                Set peControlStyle to xtpButtonIconAndCaption
68898>            End_Object
68899>            
68899>            Object oSaveToolItem is a cCJSaveMenuItem
68901>                Set peControlStyle to xtpButtonIconAndCaption
68902>                Set pbControlBeginGroup to True
68903>            End_Object
68904>            
68904>            Object oDeleteToolItem is a cCJDeleteMenuItem
68906>                Set peControlStyle to xtpButtonIconAndCaption
68907>            End_Object
68908>            
68908>        End_Object
68909>        
68909>        Object oEditToolBar is a cCJToolbar
68911>            Set psTitle to "Edit Toolbar"
68912>            
68912>            Object oCutToolbarItem is a cCJCutMenuItem
68914>            End_Object
68915>            
68915>            Object oCopyToolbarItem is a cCJCopyMenuItem
68917>            End_Object
68918>            
68918>            Object oPasteToolbarItem is a cCJPasteMenuItem
68920>            End_Object
68921>            
68921>            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
68923>                Set pbControlBeginGroup to True
68924>            End_Object
68925>            
68925>        End_Object
68926>        
68926>        Object oRememberToolbar is a cCJToolbar
68928>            Set psTitle to "Remember Toolbar"
68929>            
68929>            Object oRememberItems is a cCJMenuItem
68931>                
68931>                Set peControlType to xtpControlPopup
68932>                Set peControlStyle to xtpButtonCaption
68933>                Set psCaption to C_$Remember
68934>                
68934>                Object oMenuItem is a cCJRememberFieldMenuItem
68936>                    Set peControlStyle to xtpButtonIconAndCaption
68937>                End_Object
68938>                
68938>                Object oMenuItem is a cCJRememberLastFieldMenuItem
68940>                    Set peControlStyle to xtpButtonIconAndCaption
68941>                End_Object
68942>                
68942>                Object oMenuItem is a cCJUnRememberFieldMenuItem
68944>                    Set peControlStyle to xtpButtonIconAndCaption
68945>                End_Object
68946>                
68946>                Object oMenuItem is a cCJUnRememberFieldAllMenuItem
68948>                    Set peControlStyle to xtpButtonIconAndCaption
68949>                End_Object
68950>                
68950>            End_Object
68951>            
68951>        End_Object
68952>        
68952>        Object oStatusBar is a cCJStatusBar
68954>            
68954>            Object oStatusPane1 is a cCJStatusBarPane
68956>                Set piID to sbpIDIdlePane
68957>                Set pbStyleStretch to True
68958>            End_Object
68959>            
68959>            Object oStatusPane2 is a cCJStatusBarPane
68961>                Set phoViewPane to Self
68962>                Set pbStyleStretch to True
68963>            End_Object
68964>            
68964>        End_Object
68965>        
68965>    End_Object
68966>    
68966>    Object oClientArea is a ClientArea
68968>        Use Customer.vw
Including file: Customer.vw    (C:\test\BuildTools\Order Entry\AppSrc\Customer.vw)
68968>>>Use dfClient.pkg
68968>>>Use DataDict.pkg
68968>>>Use dfEntry.pkg
68968>>>Use dfTabDlg.pkg
68968>>>Use dfCEntry.pkg
68968>>>Use cDbTextEdit.Pkg
68968>>>
68968>>>Use cCustomerDataDictionary.dd
Including file: cCustomerDataDictionary.dd    (C:\test\BuildTools\Order Entry\DDSrc\cCustomerDataDictionary.dd)
68968>>>>>Use DataDict.pkg
68968>>>>>
68968>>>>>Open Customer
Including file: Customer.fd    (C:\test\BuildTools\Order Entry\DDSrc\Customer.fd)
68970>>>>>Open OrderHeader
Including file: OrderHeader.fd    (C:\test\BuildTools\Order Entry\DDSrc\OrderHeader.fd)
68972>>>>>Open OrderSystem
Including file: OrderSystem.fd    (C:\test\BuildTools\Order Entry\DDSrc\OrderSystem.fd)
68974>>>>>
68974>>>>>Register_Object Customer_State_VT
68974>>>>>Register_Object Customer_sl
68974>>>>>
68974>>>>>Object Customer_State_VT is a CodeValidationTable
68976>>>>>    Set Type_Value to "STATES"
68977>>>>>    Set Table_Title to "States"
68978>>>>>End_Object
68979>>>>>
68979>>>>>Register_Function ValidateEmail Integer iColumn String sValue Returns Boolean
68979>>>>>
68979>>>>>Register_Object oCustomerWebLookup
68979>>>>>Class cCustomerDataDictionary is a DataDictionary
68980>>>>>    
68980>>>>>    Procedure Construct_Object
68982>>>>>        Forward Send Construct_Object
68984>>>>>        
68984>>>>>        Set Main_File to Customer.File_Number
68985>>>>>        Set Cascade_Delete_State to False
68986>>>>>        
68986>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
68987>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
68988>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
68989>>>>>        
68989>>>>>        Set Add_Client_File to OrderHeader.File_Number
68990>>>>>        
68990>>>>>        Set Add_System_File to OrderSystem.File_Number DD_LOCK_ON_NEW_SAVE
68991>>>>>        
68991>>>>>        Set Field_Auto_Increment Field Customer.Customer_Number to File_Field OrderSystem.Cust_Number
68992>>>>>        Set Field_Label_Long Field Customer.Customer_Number to "Customer Number"
68993>>>>>        Set Field_Label_Short Field Customer.Customer_Number to "Number"
68994>>>>>        Set Field_Option Field Customer.Customer_Number DD_AUTOFIND to True
68995>>>>>        Set Field_Option Field Customer.Customer_Number DD_NOPUT to True
68996>>>>>        Set Field_Prompt_Object Field Customer.Customer_Number to Customer_sl
68997>>>>>        Set Field_WebPrompt_Object Field Customer.Customer_Number to oCustomerWebLookup
68998>>>>>        Set Key_Field_State Field Customer.Customer_Number to True
68999>>>>>        Set Status_Help Field Customer.Customer_Number to "Customer Id Number (system assigned)."
69000>>>>>        
69000>>>>>        Set Field_Label_Long Field Customer.Name to "Customer Name"
69001>>>>>        Set Field_Label_Short Field Customer.Name to "Customer Name"
69002>>>>>        Set Field_Option Field Customer.Name DD_REQUIRED to True
69003>>>>>        Set Field_Prompt_Object Field Customer.Name to Customer_sl
69004>>>>>        Set Field_WebPrompt_Object Field Customer.Name to oCustomerWebLookup
69005>>>>>        Set Status_Help Field Customer.Name to "Customer/Company Name."
69006>>>>>        
69006>>>>>        Set Field_Label_Long Field Customer.Address to "Street Address"
69007>>>>>        Set Field_Label_Short Field Customer.Address to "Address"
69008>>>>>        Set Status_Help Field Customer.Address to "Street Address."
69009>>>>>        
69009>>>>>        Set Status_Help Field Customer.City to "City Name."
69010>>>>>        
69010>>>>>        Set Field_Class_Name Field Customer.State to "Combo"
69011>>>>>        Set Field_Label_Long Field Customer.State to "State"
69012>>>>>        Set Field_Label_Short Field Customer.State to "St."
69013>>>>>        Set Field_Option Field Customer.State DD_CAPSLOCK to True
69014>>>>>        Set Field_Value_Table Field Customer.State to Customer_State_VT
69015>>>>>        Set Status_Help Field Customer.State to "Two letter state ID."
69016>>>>>        
69016>>>>>        Set Field_Label_Long Field Customer.Zip to "Zip/Postal Code"
69017>>>>>        Set Field_Label_Short Field Customer.Zip to "Zip"
69018>>>>>        Set Field_Mask Field Customer.Zip to "#####-####"
69019>>>>>        Set Field_Mask_Type Field Customer.Zip to MASK_WINDOW
69020>>>>>        Set Status_Help Field Customer.Zip to "Zip or Postal Code."
69021>>>>>        
69021>>>>>        Set Field_Label_Long Field Customer.Phone_Number to "Phone Number"
69022>>>>>        Set Field_Label_Short Field Customer.Phone_Number to "Phone"
69023>>>>>        Set Status_Help Field Customer.Phone_Number to "Phone Number."
69024>>>>>        
69024>>>>>        Set Field_Label_Long Field Customer.Fax_Number to "Fax Number"
69025>>>>>        Set Field_Label_Short Field Customer.Fax_Number to "Fax"
69026>>>>>        Set Status_Help Field Customer.Fax_Number to "Fax Phone Number."
69027>>>>>        
69027>>>>>        Set Field_Label_Long Field Customer.Email_Address to "E-Mail Address"
69028>>>>>        Set Field_Label_Short Field Customer.Email_Address to "E-Mail"
69029>>>>>        Set Status_Help Field Customer.Email_Address to "E-mail Address (internet)."
69030>>>>>        Set Field_Validate_msg Field Customer.EMail_Address to (RefFunc(ValidateEmail))
69031>>>>>        Set Field_Option Field Customer.EMail_Address DD_REQUIRED to True
69032>>>>>        
69032>>>>>        Set Field_Class_Name Field Customer.Credit_Limit to "Spin"
69033>>>>>        Set Field_Mask_Type Field Customer.Credit_Limit to MASK_CURRENCY_WINDOW
69034>>>>>        
69034>>>>>        Set Field_Label_Long Field Customer.Purchases to "Total Purchases"
69035>>>>>        Set Field_Label_Short Field Customer.Purchases to "Purchases"
69036>>>>>        Set Field_Mask_Type Field Customer.Purchases to MASK_CURRENCY_WINDOW
69037>>>>>        Set Field_Option Field Customer.Purchases DD_DISPLAYONLY to True
69038>>>>>        
69038>>>>>        Set Field_Label_Long Field Customer.Balance to "Balance Due"
69039>>>>>        Set Field_Label_Short Field Customer.Balance to "Balance"
69040>>>>>        Set Field_Mask_Type Field Customer.Balance to MASK_CURRENCY_WINDOW
69041>>>>>        Set Field_Option Field Customer.Balance DD_DISPLAYONLY to True
69042>>>>>        
69042>>>>>        Set Status_Help Field Customer.Comments to "Additional Comments and Notes."
69043>>>>>        
69043>>>>>        Set Field_Checkbox_Values Field Customer.Status to "Y" "N"
69044>>>>>        Set Field_Label_Long Field Customer.Status to "Active Status"
69045>>>>>        Set Field_Label_Short Field Customer.Status to "Status"
69046>>>>>        Set Status_Help Field Customer.Status to "Active Inactive Status of customer"
69047>>>>>        
69047>>>>>        Set piPrimaryIndex to 1
69048>>>>>    End_Procedure
69049>>>>>    
69049>>>>>    Procedure Field_defaults
69051>>>>>        Forward Send Field_Defaults
69053>>>>>        Set Field_Changed_Value   Field Customer.State to "FL"
69054>>>>>        Set Field_Changed_Value   Field Customer.Credit_Limit to 1000
69055>>>>>        Set Field_Changed_Value   Field Customer.Status to "Y"
69056>>>>>    End_Procedure
69057>>>>>    
69057>>>>>    //  Validates if the field contains a valid email address (it allows empty values too).
69057>>>>>    Function ValidateEmail Integer iColumn String sValue Returns Boolean
69059>>>>>        Integer iAt iDot
69059>>>>>        Boolean bResult
69059>>>>>        
69059>>>>>        If (Trim(sValue) <> "") Begin
69061>>>>>            Move (Pos("@", sValue)) to iAt
69062>>>>>            Move (RightPos(".", sValue)) to iDot
69063>>>>>            
69063>>>>>            If (not(iAt > 1 and iDot > 0 and iDot > iAt + 1 and iDot < Length(sValue))) Begin
69065>>>>>                Send Data_set_error iColumn DFERR_OPERATOR "Please enter a valid email address"
69066>>>>>                Move True to bResult
69067>>>>>            End
69067>>>>>>
69067>>>>>        End
69067>>>>>>
69067>>>>>        
69067>>>>>        Function_Return bResult
69068>>>>>    End_Function
69069>>>>>    
69069>>>>>End_Class
69070>>>>>
69070>>>>>
69070>>>>>Use Customer.sl
Including file: Customer.sl    (C:\test\BuildTools\Order Entry\AppSrc\Customer.sl)
69070>>>>>>>Use DFClient.pkg
69070>>>>>>>Use Windows.pkg
69070>>>>>>>Use cDbCJGridPromptList.pkg
69070>>>>>>>
69070>>>>>>>Use cCustomerDataDictionary.dd
69070>>>>>>>
69070>>>>>>>Cd_Popup_Object Customer_sl is a dbModalPanel
69088>>>>>>>>
69088>>>>>>>    
69088>>>>>>>    Set Border_Style to Border_Thick
69089>>>>>>>    Set Minimize_Icon to False
69090>>>>>>>    Set Label to "Customer List"
69091>>>>>>>    Set Size to 134 238
69092>>>>>>>    Set Location to 4 5
69093>>>>>>>    Set piMinSize to 134 238
69094>>>>>>>    
69094>>>>>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
69096>>>>>>>    End_Object
69097>>>>>>>    
69097>>>>>>>    Set Main_DD to oCustomerDataDictionary
69098>>>>>>>    Set Server to oCustomerDataDictionary
69099>>>>>>>    
69099>>>>>>>    Object oSelList is a cDbCJGridPromptList
69101>>>>>>>        Set Size to 100 224
69102>>>>>>>        Set Location to 9 8
69103>>>>>>>        Set peAnchors to anAll
69104>>>>>>>        Set pbAllowColumnRemove to False
69105>>>>>>>        
69105>>>>>>>        Object oNumber is a cDbCJGridColumn
69107>>>>>>>            Entry_Item Customer.Customer_Number
69108>>>>>>>            Set piWidth to 93
69109>>>>>>>            Set psCaption to "Number"
69110>>>>>>>        End_Object
69111>>>>>>>        
69111>>>>>>>        Object oCustomerName is a cDbCJGridColumn
69113>>>>>>>            Entry_Item Customer.Name
69114>>>>>>>            Set piWidth to 243
69115>>>>>>>            Set psCaption to "Customer Name"
69116>>>>>>>        End_Object
69117>>>>>>>    End_Object
69118>>>>>>>    
69118>>>>>>>    Object oOK_bn is a Button
69120>>>>>>>        Set Label to "&Ok"
69121>>>>>>>        Set Location to 116 77
69122>>>>>>>        Set peAnchors to anBottomRight
69123>>>>>>>        
69123>>>>>>>        Procedure OnClick
69126>>>>>>>            Send OK of oSelList
69127>>>>>>>        End_Procedure
69128>>>>>>>        
69128>>>>>>>    End_Object
69129>>>>>>>    
69129>>>>>>>    Object oCancel_bn is a Button
69131>>>>>>>        Set Label to "&Cancel"
69132>>>>>>>        Set Location to 116 130
69133>>>>>>>        Set peAnchors to anBottomRight
69134>>>>>>>        
69134>>>>>>>        Procedure OnClick
69137>>>>>>>            Send Cancel of oSelList
69138>>>>>>>        End_Procedure
69139>>>>>>>        
69139>>>>>>>    End_Object
69140>>>>>>>    
69140>>>>>>>    Object oSearch_bn is a Button
69142>>>>>>>        Set Label to "&Search..."
69143>>>>>>>        Set Location to 116 183
69144>>>>>>>        Set peAnchors to anBottomRight
69145>>>>>>>        
69145>>>>>>>        Procedure OnClick
69148>>>>>>>            Send Search of oSelList
69149>>>>>>>        End_Procedure
69150>>>>>>>        
69150>>>>>>>    End_Object
69151>>>>>>>    
69151>>>>>>>    On_Key Key_Alt+Key_O Send KeyAction of oOk_bn
69152>>>>>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancel_bn
69153>>>>>>>    On_Key Key_Alt+Key_S Send KeyAction of oSearch_bn
69154>>>>>>>    
69154>>>>>>>Cd_End_Object
69156>>>>>>>>
69156>>>>>
69156>>>
69156>>>Deferred_View Activate_oCustomerView for ;;Object oCustomerView is a dbView
69181>>>    Set Border_Style to Border_Thick
69182>>>    Set Label to "Customer Entry View"
69183>>>    Set Location to 7 23
69184>>>    Set Size to 138 277
69185>>>    Set piMaxSize to 300 350
69186>>>    Set piMinSize to 135 277
69187>>>    
69187>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
69189>>>    End_Object
69190>>>    
69190>>>    Set Main_DD to oCustomerDataDictionary
69191>>>    Set Server to oCustomerDataDictionary
69192>>>    
69192>>>    Object oCustomer_Number is a dbForm
69194>>>        Entry_Item Customer.Customer_Number
69195>>>        Set Label to "Customer Number:"
69196>>>        Set Size to 12 42
69197>>>        Set Location to 5 72
69198>>>        Set peAnchors to anTopLeft
69199>>>        Set Label_Col_Offset to 2
69200>>>        Set Label_Justification_Mode to jMode_Right
69201>>>    End_Object
69202>>>    
69202>>>    Object oCustomer_Name is a dbForm
69204>>>        Entry_Item Customer.Name
69205>>>        Set Label to "Name:"
69206>>>        Set Size to 12 186
69207>>>        Set Location to 19 72
69208>>>        Set peAnchors to anTopLeftRight
69209>>>        Set Label_Col_Offset to 2
69210>>>        Set Label_Justification_Mode to jMode_Right
69211>>>    End_Object
69212>>>    
69212>>>    Object oCustTD is a dbTabDialog
69214>>>        Set Size to 97 265
69215>>>        Set Location to 36 9
69216>>>        Set Rotate_Mode to RM_Rotate
69217>>>        Set peAnchors to anAll
69218>>>        Object oAddress_TP is a dbTabPage
69220>>>            Set Label to "Address"
69221>>>            Set Tab_ToolTip_Value to "Customer contact information"
69222>>>            Object oCustomer_Address is a dbForm
69224>>>                Entry_Item Customer.Address
69225>>>                Set Label to "Street Address:"
69226>>>                Set Size to 12 180
69227>>>                Set Location to 8 62
69228>>>                Set peAnchors to anTopLeftRight
69229>>>                Set Label_Col_Offset to 2
69230>>>                Set Label_Justification_Mode to jMode_Right
69231>>>            End_Object
69232>>>            
69232>>>            Object oCustomer_City is a dbForm
69234>>>                Entry_Item Customer.City
69235>>>                Set Label to "City/State/Zip:"
69236>>>                Set Size to 12 84
69237>>>                Set Location to 22 62
69238>>>                Set peAnchors to anTopLeftRight
69239>>>                Set Label_Col_Offset to 2
69240>>>                Set Label_Justification_Mode to jMode_Right
69241>>>            End_Object
69242>>>            
69242>>>            Object oCustomer_State is a dbComboForm
69244>>>                Entry_Item Customer.State
69245>>>                Set Size to 12 32
69246>>>                Set Location to 22 152
69247>>>                Set peAnchors to anTopRight
69248>>>                Set Form_Border to 0
69249>>>                Set Code_Display_Mode to cb_code_display_code
69250>>>            End_Object
69251>>>            
69251>>>            Object oCustomer_Zip is a dbForm
69253>>>                Entry_Item Customer.Zip
69254>>>                Set Size to 12 51
69255>>>                Set Location to 22 191
69256>>>                Set peAnchors to anTopRight
69257>>>            End_Object
69258>>>            
69258>>>            Object oCustomer_Phone_number is a dbForm
69260>>>                Entry_Item Customer.Phone_Number
69261>>>                Set Label to "Phone Number:"
69262>>>                Set Size to 12 120
69263>>>                Set Location to 36 62
69264>>>                Set peAnchors to anTopLeft
69265>>>                Set Label_Col_Offset to 2
69266>>>                Set Label_Justification_Mode to jMode_Right
69267>>>            End_Object
69268>>>            
69268>>>            Object oCustomer_Fax_number is a dbForm
69270>>>                Entry_Item Customer.Fax_Number
69271>>>                Set Label to "Fax Number:"
69272>>>                Set Size to 12 120
69273>>>                Set Location to 50 62
69274>>>                Set peAnchors to anTopLeft
69275>>>                Set Label_Col_Offset to 2
69276>>>                Set Label_Justification_Mode to jMode_Right
69277>>>            End_Object
69278>>>            
69278>>>            Object oCustomer_Email_address is a dbForm
69280>>>                Entry_Item Customer.EMail_Address
69281>>>                Set Label to "E-Mail Address:"
69282>>>                Set Size to 12 180
69283>>>                Set Location to 64 62
69284>>>                Set peAnchors to anTopLeftRight
69285>>>                Set Label_Col_Offset to 2
69286>>>                Set Label_Justification_Mode to jMode_Right
69287>>>            End_Object
69288>>>            
69288>>>        End_Object
69289>>>        
69289>>>        Object oBalances_TP is a dbTabPage
69291>>>            Set Label to "Balances"
69292>>>            Set Tab_ToolTip_Value to "Current account balances"
69293>>>            Object oCustomer_Credit_Limit is a dbForm
69295>>>                Entry_Item Customer.Credit_limit
69296>>>                Set Label to "Credit Limit:"
69297>>>                Set Size to 12 48
69298>>>                Set Location to 9 72
69299>>>                Set Label_Col_Offset to 2
69300>>>                Set Label_Justification_Mode to jMode_Right
69301>>>            End_Object
69302>>>            
69302>>>            Object oCustomer_Purchases is a dbForm
69304>>>                Entry_Item Customer.Purchases
69305>>>                Set Label to "Total Purchases:"
69306>>>                Set Size to 12 48
69307>>>                Set Location to 23 72
69308>>>                Set Label_Col_Offset to 2
69309>>>                Set Label_Justification_Mode to jMode_Right
69310>>>            End_Object
69311>>>            
69311>>>            Object oCustomer_Balance is a dbForm
69313>>>                Entry_Item Customer.Balance
69314>>>                Set Label to "Balance Due:"
69315>>>                Set Size to 12 48
69316>>>                Set Location to 37 72
69317>>>                Set Label_Col_Offset to 2
69318>>>                Set Label_Justification_Mode to jMode_Right
69319>>>            End_Object
69320>>>            
69320>>>        End_Object
69321>>>        
69321>>>        Object oComments_TP is a dbTabPage
69323>>>            Set Label to "Comments"
69324>>>            Set Tab_ToolTip_Value to "Notes about this customer"
69325>>>            Object oCustomer_Comments is a cDbTextEdit
69327>>>                Entry_Item Customer.Comments
69328>>>                Set Size to 74 242
69329>>>                Set Location to 5 9
69330>>>                Set peAnchors to anAll
69331>>>            End_Object
69332>>>            
69332>>>        End_Object
69333>>>        
69333>>>    End_Object
69334>>>    
69334>>>Cd_End_Object
69336>>>>
69336>>>
69336>        Use Inventory.vw
Including file: Inventory.vw    (C:\test\BuildTools\Order Entry\AppSrc\Inventory.vw)
69336>>>Use Windows.pkg
69336>>>Use dfClient.pkg
69336>>>Use DataDict.pkg
69336>>>Use dfEntry.pkg
69336>>>
69336>>>Use cCJCommandBarSystem.pkg
69336>>>
69336>>>Use cVendorDataDictionary.dd
Including file: cVendorDataDictionary.dd    (C:\test\BuildTools\Order Entry\DDSrc\cVendorDataDictionary.dd)
69336>>>>>Use DataDict.pkg
69336>>>>>
69336>>>>>Open Vendor
Including file: Vendor.fd    (C:\test\BuildTools\Order Entry\DDSrc\Vendor.fd)
69338>>>>>Open Inventory
Including file: Inventory.fd    (C:\test\BuildTools\Order Entry\DDSrc\Inventory.fd)
69340>>>>>Open OrderSystem
69342>>>>>
69342>>>>>Register_Object Vendor_State_VT
69342>>>>>
69342>>>>>Object Vendor_State_VT is a CodeValidationTable
69344>>>>>    Set Type_Value to "STATES"
69345>>>>>End_Object
69346>>>>>
69346>>>>>Register_Object Vendor_sl
69346>>>>>Register_Object oVendorWebLookup
69346>>>>>
69346>>>>>Class cVendorDataDictionary is a DataDictionary
69347>>>>>    
69347>>>>>    Procedure Construct_Object
69349>>>>>        Forward Send Construct_Object
69351>>>>>        
69351>>>>>        Set Main_File to Vendor.File_Number
69352>>>>>        Set Cascade_Delete_State to False
69353>>>>>        
69353>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
69354>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
69355>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
69356>>>>>        
69356>>>>>        Set Add_Client_File to Inventory.File_Number
69357>>>>>        
69357>>>>>        Set Add_System_File to OrderSystem.File_Number DD_LOCK_ON_NEW_SAVE
69358>>>>>        
69358>>>>>        Set Field_Auto_Increment Field Vendor.Id to File_Field OrderSystem.Vendor_Number
69359>>>>>        
69359>>>>>        Set Field_Label_Long Field Vendor.ID to "Vendor ID"
69360>>>>>        Set Field_Label_Short Field Vendor.ID to "Vndr ID"
69361>>>>>        Set Field_Option Field Vendor.ID DD_AUTOFIND to True
69362>>>>>        Set Field_Option Field Vendor.ID DD_NOPUT to True
69363>>>>>        Set Field_Prompt_Object Field Vendor.ID to Vendor_sl
69364>>>>>        Set Key_Field_State Field Vendor.ID to True
69365>>>>>        Set Status_Help Field Vendor.ID to "Vendor Id Number (system assigned)."
69366>>>>>        Set Field_WebPrompt_Object Field Vendor.ID to oVendorWebLookup
69367>>>>>        
69367>>>>>        Set Field_Label_Long Field Vendor.Name to "Vendor Name"
69368>>>>>        Set Field_Label_Short Field Vendor.Name to "Name"
69369>>>>>        Set Field_Option Field Vendor.Name DD_REQUIRED to True
69370>>>>>        Set Field_Prompt_Object Field Vendor.Name to Vendor_sl
69371>>>>>        Set Status_Help Field Vendor.Name to "Vendor Name."
69372>>>>>        Set Field_WebPrompt_Object Field Vendor.Name to oVendorWebLookup
69373>>>>>        
69373>>>>>        Set Field_Label_Long Field Vendor.Address to "Street Address"
69374>>>>>        Set Field_Label_Short Field Vendor.Address to "Address"
69375>>>>>        Set Status_Help Field Vendor.Address to "Street Address."
69376>>>>>        
69376>>>>>        Set Status_Help Field Vendor.City to "City Name."
69377>>>>>        
69377>>>>>        Set Field_Class_Name Field Vendor.State to "Combo"
69378>>>>>        Set Field_Label_Long Field Vendor.State to "State"
69379>>>>>        Set Field_Label_Short Field Vendor.State to "St."
69380>>>>>        Set Field_Option Field Vendor.State DD_CAPSLOCK to True
69381>>>>>        Set Field_Value_Table Field Vendor.State to Vendor_State_VT
69382>>>>>        Set Status_Help Field Vendor.State to "Two letter state ID."
69383>>>>>        
69383>>>>>        Set Field_Label_Long Field Vendor.Zip to "Zip/Postal Code"
69384>>>>>        Set Field_Label_Short Field Vendor.Zip to "Zip"
69385>>>>>        Set Field_Mask Field Vendor.Zip to "#####-####"
69386>>>>>        Set Field_Mask_Type Field Vendor.Zip to MASK_WINDOW
69387>>>>>        Set Status_Help Field Vendor.Zip to "Zip or Postal Code."
69388>>>>>        
69388>>>>>        Set Field_Label_Long Field Vendor.Phone_Number to "Phone Number"
69389>>>>>        Set Field_Label_Short Field Vendor.Phone_Number to "Phone"
69390>>>>>        Set Status_Help Field Vendor.Phone_Number to "Phone Number."
69391>>>>>        
69391>>>>>        Set Field_Label_Long Field Vendor.Fax_Number to "Fax Number"
69392>>>>>        Set Field_Label_Short Field Vendor.Fax_Number to "Fax"
69393>>>>>        Set Status_Help Field Vendor.Fax_Number to "Fax Phone Number."
69394>>>>>        
69394>>>>>        Set piPrimaryIndex to 1
69395>>>>>    End_Procedure
69396>>>>>    
69396>>>>>    Procedure Field_Defaults
69398>>>>>        Forward Send Field_Defaults
69400>>>>>    End_Procedure
69401>>>>>    
69401>>>>>End_Class
69402>>>>>
69402>>>>>
69402>>>>>Use Vendor.sl
Including file: Vendor.sl    (C:\test\BuildTools\Order Entry\AppSrc\Vendor.sl)
69402>>>>>>>Use DFClient.pkg
69402>>>>>>>Use Windows.pkg
69402>>>>>>>Use cDbCJGridPromptList.pkg
69402>>>>>>>
69402>>>>>>>Use cVendorDataDictionary.dd
69402>>>>>>>
69402>>>>>>>Cd_Popup_Object Vendor_sl is a dbModalPanel
69420>>>>>>>>
69420>>>>>>>    Set Label to "Vendor List"
69421>>>>>>>    Set Size to 132 238
69422>>>>>>>    Set Location to 4 5
69423>>>>>>>    Set piMinSize to 132 238
69424>>>>>>>    
69424>>>>>>>    Object oVendorDataDictionary is a cVendorDataDictionary
69426>>>>>>>    End_Object
69427>>>>>>>    
69427>>>>>>>    Set Main_DD to oVendorDataDictionary
69428>>>>>>>    Set Server to oVendorDataDictionary
69429>>>>>>>    
69429>>>>>>>    Object oSelList is a cDbCJGridPromptList
69431>>>>>>>        Set Size to 95 229
69432>>>>>>>        Set Location to 12 4
69433>>>>>>>        Set pbAllowColumnRemove to False
69434>>>>>>>        Set peAnchors to anAll
69435>>>>>>>        
69435>>>>>>>        Object oVendor_ID is a cDbCJGridColumn
69437>>>>>>>            Entry_Item Vendor.ID
69438>>>>>>>            Set piWidth to 63
69439>>>>>>>            Set psCaption to "ID"
69440>>>>>>>        End_Object
69441>>>>>>>        
69441>>>>>>>        Object oVendor_Name is a cDbCJGridColumn
69443>>>>>>>            Entry_Item Vendor.Name
69444>>>>>>>            Set piWidth to 280
69445>>>>>>>            Set psCaption to "Vendor Name"
69446>>>>>>>        End_Object
69447>>>>>>>    End_Object
69448>>>>>>>    
69448>>>>>>>    Object oOK_bn is a Button
69450>>>>>>>        Set Label to "&Ok"
69451>>>>>>>        Set Location to 114 77
69452>>>>>>>        Set peAnchors to anBottomRight
69453>>>>>>>        
69453>>>>>>>        Procedure OnClick
69456>>>>>>>            Send OK of oSelList
69457>>>>>>>        End_Procedure
69458>>>>>>>        
69458>>>>>>>    End_Object
69459>>>>>>>    
69459>>>>>>>    Object oCancel_bn is a Button
69461>>>>>>>        Set Label to "&Cancel"
69462>>>>>>>        Set Location to 114 130
69463>>>>>>>        Set peAnchors to anBottomRight
69464>>>>>>>        
69464>>>>>>>        Procedure OnClick
69467>>>>>>>            Send Cancel of oSelList
69468>>>>>>>        End_Procedure
69469>>>>>>>        
69469>>>>>>>    End_Object
69470>>>>>>>    
69470>>>>>>>    Object oSearch_bn is a Button
69472>>>>>>>        Set Label to "&Search..."
69473>>>>>>>        Set Location to 114 183
69474>>>>>>>        Set peAnchors to anBottomRight
69475>>>>>>>        
69475>>>>>>>        Procedure OnClick
69478>>>>>>>            Send Search of oSelList
69479>>>>>>>        End_Procedure
69480>>>>>>>        
69480>>>>>>>    End_Object
69481>>>>>>>    
69481>>>>>>>    On_Key Key_Alt+Key_O Send KeyAction of oOk_bn
69482>>>>>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancel_bn
69483>>>>>>>    On_Key Key_Alt+Key_S Send KeyAction of oSearch_bn
69484>>>>>>>    
69484>>>>>>>Cd_End_Object
69486>>>>>>>>
69486>>>>>>>
69486>>>>>
69486>>>Use cInventoryDataDictionary.dd
Including file: cInventoryDataDictionary.dd    (C:\test\BuildTools\Order Entry\DDSrc\cInventoryDataDictionary.dd)
69486>>>>>Use DataDict.pkg
69486>>>>>
69486>>>>>Open Inventory
69488>>>>>Open OrderDetail
Including file: OrderDetail.fd    (C:\test\BuildTools\Order Entry\DDSrc\OrderDetail.fd)
69490>>>>>Open Vendor
69492>>>>>
69492>>>>>Register_Object Inventory_sl
69492>>>>>Register_Object oInventoryWebLookup
69492>>>>>Class cInventoryDataDictionary is a DataDictionary
69493>>>>>    
69493>>>>>    Procedure Construct_Object
69495>>>>>        Forward Send Construct_Object
69497>>>>>        
69497>>>>>        Set Main_File to Inventory.File_Number
69498>>>>>        Set Cascade_Delete_State to False
69499>>>>>        
69499>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
69500>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
69501>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
69502>>>>>        
69502>>>>>        Set Add_Client_File to OrderDetail.File_Number
69503>>>>>        
69503>>>>>        Set Add_Server_File to Vendor.File_Number
69504>>>>>        
69504>>>>>        Set Field_Label_Long Field Inventory.Item_ID to "Inventory Item ID"
69505>>>>>        Set Field_Label_Short Field Inventory.Item_ID to "Item ID"
69506>>>>>        Set Field_Option Field Inventory.Item_ID DD_AUTOFIND to True
69507>>>>>        Set Field_Option Field Inventory.Item_ID DD_REQUIRED to True
69508>>>>>        Set Field_Option Field Inventory.Item_ID DD_CAPSLOCK to True
69509>>>>>        Set Field_Prompt_Object Field Inventory.Item_ID to Inventory_sl
69510>>>>>        Set Field_WebPrompt_Object Field Inventory.Item_ID to oInventoryWebLookup
69511>>>>>        Set Key_Field_State Field Inventory.Item_ID to True
69512>>>>>        Set Status_Help Field Inventory.Item_ID to "Inventory Item Id - user defined identification"
69513>>>>>        
69513>>>>>        Set Field_Label_Long Field Inventory.Description to "Inventory. Description"
69514>>>>>        Set Field_Label_Short Field Inventory.Description to "Description"
69515>>>>>        Set Field_Option Field Inventory.Description DD_REQUIRED to True
69516>>>>>        Set Status_Help Field Inventory.Description to "Inventory Part Description"
69517>>>>>        
69517>>>>>        Set Field_Option Field Inventory.Vendor_ID DD_CAPSLOCK to True
69518>>>>>        Set Status_Help Field Inventory.Vendor_ID to "Vendor Number"
69519>>>>>        
69519>>>>>        Set Field_Option Field Inventory.Vendor_Part_ID DD_REQUIRED to True
69520>>>>>        Set Status_Help Field Inventory.Vendor_Part_ID to "Vendor ID name for this item"
69521>>>>>        
69521>>>>>        Set Field_Mask_Type Field Inventory.Unit_Price to MASK_CURRENCY_WINDOW
69522>>>>>        Set Field_Value_Range Field Inventory.Unit_Price to 0 999999.99
69523>>>>>        Set Status_Help Field Inventory.Unit_Price to "Retail unit price"
69524>>>>>        
69524>>>>>        Set Field_Value_Range Field Inventory.On_Hand to -999999 999999
69525>>>>>        Set Status_Help Field Inventory.On_Hand to "Units currently available"
69526>>>>>        
69526>>>>>        Set piPrimaryIndex to 1
69527>>>>>    End_Procedure
69528>>>>>    
69528>>>>>    Function Validate_Save Returns Integer
69530>>>>>        Integer iRetVal
69530>>>>>        
69530>>>>>        Forward Get Validate_Save to iRetVal
69532>>>>>        
69532>>>>>        If iRetVal;            Function_Return iRetVal
69535>>>>>        
69535>>>>>        If (Inventory.On_Hand < 0) Begin
69537>>>>>            Send UserError "Insufficient Inventory Stock" ""
69538>>>>>            Function_Return 1
69539>>>>>        End
69539>>>>>>
69539>>>>>    End_Function
69540>>>>>    
69540>>>>>    Procedure Field_Defaults
69542>>>>>        Forward Send Field_Defaults
69544>>>>>    End_Procedure
69545>>>>>    
69545>>>>>End_Class
69546>>>>>
69546>>>>>
69546>>>>>Use Inventory.sl
Including file: Inventory.sl    (C:\test\BuildTools\Order Entry\AppSrc\Inventory.sl)
69546>>>>>>>Use DFClient.pkg
69546>>>>>>>Use Windows.pkg
69546>>>>>>>
69546>>>>>>>Use cVendorDataDictionary.dd
69546>>>>>>>Use cInventoryDataDictionary.dd
69546>>>>>>>
69546>>>>>>>Cd_Popup_Object Inventory_sl is a dbModalPanel
69564>>>>>>>>
69564>>>>>>>    
69564>>>>>>>    Set Minimize_Icon to False
69565>>>>>>>    Set Label to "Inventory List"
69566>>>>>>>    Set Size to 133 284
69567>>>>>>>    Set Location to 4 4
69568>>>>>>>    Set piMinSize to 133 284
69569>>>>>>>    
69569>>>>>>>    Object oVendorDataDictionary is a cVendorDataDictionary
69571>>>>>>>    End_Object
69572>>>>>>>    
69572>>>>>>>    Object oInventoryDataDictionary is a cInventoryDataDictionary
69574>>>>>>>        Set DDO_Server to oVendorDataDictionary
69575>>>>>>>    End_Object
69576>>>>>>>    
69576>>>>>>>    Set Main_DD to oInventoryDataDictionary
69577>>>>>>>    Set Server to oInventoryDataDictionary
69578>>>>>>>    
69578>>>>>>>    Object oSelList is a cDbCJGridPromptList
69580>>>>>>>        Set Size to 105 273
69581>>>>>>>        Set Location to 6 6
69582>>>>>>>        Set peAnchors to anAll
69583>>>>>>>        Set pbAllowColumnRemove to False
69584>>>>>>>        
69584>>>>>>>        Object oItemID is a cDbCJGridColumn
69586>>>>>>>            Entry_Item Inventory.Item_iD
69587>>>>>>>            Set psCaption to "Item ID"
69588>>>>>>>            Set piWidth to 74
69589>>>>>>>        End_Object
69590>>>>>>>        
69590>>>>>>>        Object oDescription is a cDbCJGridColumn
69592>>>>>>>            Entry_Item Inventory.Description
69593>>>>>>>            Set psCaption to "Description"
69594>>>>>>>            Set piWidth to 205
69595>>>>>>>        End_Object
69596>>>>>>>        
69596>>>>>>>        Object oUnitPrice is a cDbCJGridColumn
69598>>>>>>>            Entry_Item Inventory.Unit_Price
69599>>>>>>>            Set psCaption to "Unit Price"
69600>>>>>>>            Set piWidth to 69
69601>>>>>>>        End_Object
69602>>>>>>>        
69602>>>>>>>        Object oOnHand is a cDbCJGridColumn
69604>>>>>>>            Entry_Item Inventory.On_Hand
69605>>>>>>>            Set psCaption to "On Hand"
69606>>>>>>>            Set piWidth to 61
69607>>>>>>>        End_Object
69608>>>>>>>        
69608>>>>>>>    End_Object
69609>>>>>>>    
69609>>>>>>>    Object oOK_bn is a Button
69611>>>>>>>        Set Label to "&Ok"
69612>>>>>>>        Set Location to 115 123
69613>>>>>>>        Set peAnchors to anBottomRight
69614>>>>>>>        
69614>>>>>>>        Procedure OnClick
69617>>>>>>>            Send OK of oSelList
69618>>>>>>>        End_Procedure
69619>>>>>>>        
69619>>>>>>>    End_Object
69620>>>>>>>    
69620>>>>>>>    Object oCancel_bn is a Button
69622>>>>>>>        Set Label to "&Cancel"
69623>>>>>>>        Set Location to 115 176
69624>>>>>>>        Set peAnchors to anBottomRight
69625>>>>>>>        
69625>>>>>>>        Procedure OnClick
69628>>>>>>>            Send Cancel of oSelList
69629>>>>>>>        End_Procedure
69630>>>>>>>        
69630>>>>>>>    End_Object
69631>>>>>>>    
69631>>>>>>>    Object oSearch_bn is a Button
69633>>>>>>>        Set Label to "&Search..."
69634>>>>>>>        Set Location to 115 229
69635>>>>>>>        Set peAnchors to anBottomRight
69636>>>>>>>        
69636>>>>>>>        Procedure OnClick
69639>>>>>>>            Send Search of oSelList
69640>>>>>>>        End_Procedure
69641>>>>>>>        
69641>>>>>>>    End_Object
69642>>>>>>>    
69642>>>>>>>    On_Key Key_Alt+Key_O Send KeyAction of oOk_bn
69643>>>>>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancel_bn
69644>>>>>>>    On_Key Key_Alt+Key_S Send KeyAction of oSearch_bn
69645>>>>>>>    
69645>>>>>>>Cd_End_Object
69647>>>>>>>>
69647>>>>>>>
69647>>>>>
69647>>>
69647>>>Use cDRReport.pkg
Including file: cDRReport.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRReport.pkg)
69647>>>>>Use cDRAPI.pkg
Including file: cDRAPI.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRAPI.pkg)
69647>>>>>>>Use FlexCom20.pkg
69647>>>>>>>
69647>>>>>>>Define C_drDatabaseTypes for Integer
69647>>>>>>>    Define C_drDF for 1
69647>>>>>>>    Define C_drODBC for 2
69647>>>>>>>    Define C_drRDS for 4
69647>>>>>>>    Define C_drSQLite for 7
69647>>>>>>>
69647>>>>>>>Define C_drDatabaseSubTypes for Integer
69647>>>>>>>    Define C_drStandard for 0
69647>>>>>>>    Define C_drSQL for 1
69647>>>>>>>    Define C_drSP for 2
69647>>>>>>>
69647>>>>>>>Define C_drHitTests for Integer
69647>>>>>>>    Define C_drNowhere for 1
69647>>>>>>>    Define C_drSection for 2
69647>>>>>>>    Define C_drObject for 3
69647>>>>>>>
69647>>>>>>>Define C_drStatistics for Integer
69647>>>>>>>    Define C_drReportOpen for 1
69647>>>>>>>    Define C_drExecutionPlan for 2
69647>>>>>>>    Define C_drExecution for 3
69647>>>>>>>    Define C_drReadRecords for 4
69647>>>>>>>    Define C_drSortRecords for 5
69647>>>>>>>    Define C_drCountPages for 6
69647>>>>>>>    Define C_drFormatPages for 7
69647>>>>>>>
69647>>>>>>>Define C_drSortOrders for Integer
69647>>>>>>>    Define C_drAscending for 1
69647>>>>>>>    Define C_drDescending for 2
69647>>>>>>>
69647>>>>>>>Define C_drOperators for Integer
69647>>>>>>>    Define C_drNone for 0
69647>>>>>>>    Define C_drEqual for 1
69647>>>>>>>    Define C_drNotEqual for 2
69647>>>>>>>    Define C_drGreaterThan for 3
69647>>>>>>>    Define C_drGreaterThanOrEqual for 4
69647>>>>>>>    Define C_drLessThan for 5
69647>>>>>>>    Define C_drLessThanOrEqual for 6
69647>>>>>>>
69647>>>>>>>Define C_drExportFormats for Integer
69647>>>>>>>    Define C_drPDF for 0
69647>>>>>>>    Define C_drCSV for 1
69647>>>>>>>    Define C_drImage for 2
69647>>>>>>>    Define C_drHTML for 3
69647>>>>>>>    Define C_drXLS for 4
69647>>>>>>>    Define C_drRTF for 5
69647>>>>>>>
69647>>>>>>>Define C_drImageFormats for Integer
69647>>>>>>>    Define C_drJPEG for 1
69647>>>>>>>    Define C_drGIF for 2
69647>>>>>>>    Define C_drTIFF for 3
69647>>>>>>>    Define C_drPNG for 4
69647>>>>>>>
69647>>>>>>>Define C_drPDFPageModes for Integer
69647>>>>>>>    Define C_drNormal for 0
69647>>>>>>>    Define C_drOutline for 1
69647>>>>>>>    Define C_drThumbs for 2
69647>>>>>>>    Define C_drFullScreen for 3
69647>>>>>>>
69647>>>>>>>Define C_drPDFTypes for Integer
69647>>>>>>>    Define C_drPDFNormal for 0
69647>>>>>>>    Define C_drPDFA for 1
69647>>>>>>>
69647>>>>>>>Define C_drPDFImageQualities for Integer
69647>>>>>>>    Define C_drLow for 0
69647>>>>>>>    Define C_drHigh for 1
69647>>>>>>>
69647>>>>>>>Define C_drXLSVersions for Integer
69647>>>>>>>    Define C_drXLS2003 for 0
69647>>>>>>>    Define C_drXLS2007 for 1
69647>>>>>>>
69647>>>>>>>Define C_drXLSNewSheetOptions for Integer
69647>>>>>>>    Define C_drNoSheets for 0
69647>>>>>>>    Define C_drSheetsPage for 1
69647>>>>>>>
69647>>>>>>>Struct drPDFExportOptions
69647>>>>>>>    Integer iPageMode
69647>>>>>>>    Integer iPDFType
69647>>>>>>>    String sOwnerPassword
69647>>>>>>>    String sUserPassword
69647>>>>>>>    Integer iImageQuality
69647>>>>>>>    Integer bAllPages
69647>>>>>>>    Integer iPage
69647>>>>>>>End_Struct
69647>>>>>>>
69647>>>>>>>Struct drCSVExportOptions
69647>>>>>>>    String cFieldDelimiter
69647>>>>>>>    String cFieldSeparator
69647>>>>>>>    Integer bExportPageSections
69647>>>>>>>    Integer bExportReportSections
69647>>>>>>>    Integer bExportGroupSections
69647>>>>>>>    Integer bAllPages
69647>>>>>>>    Integer iPage
69647>>>>>>>End_Struct
69647>>>>>>>
69647>>>>>>>Struct drHTMLExportOptions
69647>>>>>>>    Integer bMultiPage
69647>>>>>>>    Integer iPage
69647>>>>>>>End_Struct
69647>>>>>>>
69647>>>>>>>Struct drImageExportOptions
69647>>>>>>>    Integer iImageType
69647>>>>>>>    Integer bMultiPage
69647>>>>>>>    Integer iPage
69647>>>>>>>End_Struct
69647>>>>>>>
69647>>>>>>>Struct drXLSExportOptions
69647>>>>>>>    Integer iXLSVersion
69647>>>>>>>    Integer iNewSheet
69647>>>>>>>    Integer iColumnWidth
69647>>>>>>>    Integer bExportDataOnly
69647>>>>>>>    Integer bExportPageSections
69647>>>>>>>    Integer bExportReportSections
69647>>>>>>>    Integer bExportGroupSections
69647>>>>>>>    Integer bExportWithFormatting
69647>>>>>>>    Integer bAllPages
69647>>>>>>>    Integer iPage
69647>>>>>>>End_Struct
69647>>>>>>>
69647>>>>>>>Struct drRTFExportOptions
69647>>>>>>>    Integer bAllPages
69647>>>>>>>    Integer iPage
69647>>>>>>>End_Struct
69647>>>>>>>
69647>>>>>>>// CLSID: {D13BDC38-2343-4D98-92B2-98C6D16E2BE0}
69647>>>>>>>// Dispatch interface for DataFlex Reports 2018 Developer Edition
69647>>>>>>>Class cCom_DataFlexReportsAPI is a Mixin
69648>>>>>>>
69648>>>>>>>    // Preview the specified page in the report
69648>>>>>>>    Function ComPreviewCurrentPage Returns Integer
69650>>>>>>>        Integer retVal
69650>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_I4 to retVal
69651>>>>>>>        Function_Return retVal
69652>>>>>>>    End_Function
69653>>>>>>>
69653>>>>>>>    // Preview the specified page in the report
69653>>>>>>>    Procedure Set ComPreviewCurrentPage Integer value
69655>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_I4 to value
69656>>>>>>>    End_Procedure
69657>>>>>>>
69657>>>>>>>    // Sets the zoom factor
69657>>>>>>>    Function ComPreviewZoom Returns Integer
69659>>>>>>>        Integer retVal
69659>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_I4 to retVal
69660>>>>>>>        Function_Return retVal
69661>>>>>>>    End_Function
69662>>>>>>>
69662>>>>>>>    // Sets the zoom factor
69662>>>>>>>    Procedure Set ComPreviewZoom Integer value
69664>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_I4 to value
69665>>>>>>>    End_Procedure
69666>>>>>>>
69666>>>>>>>    // Open a report
69666>>>>>>>    Function ComReportOpen String llReportName Returns String
69668>>>>>>>        Handle hDispatchDriver
69668>>>>>>>        String retVal
69668>>>>>>>        Get phDispatchDriver to hDispatchDriver
69669>>>>>>>        Send PrepareParams to hDispatchDriver 1
69670>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llReportName
69671>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
69672>>>>>>>        Function_Return retVal
69673>>>>>>>    End_Function
69674>>>>>>>
69674>>>>>>>    // Close the report
69674>>>>>>>    Procedure ComReportClose String llsId
69676>>>>>>>        Handle hDispatchDriver
69676>>>>>>>        Get phDispatchDriver to hDispatchDriver
69677>>>>>>>        Send PrepareParams to hDispatchDriver 1
69678>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69679>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
69680>>>>>>>    End_Procedure
69681>>>>>>>
69681>>>>>>>    // Preview the report
69681>>>>>>>    Procedure ComReportPreview String llsId
69683>>>>>>>        Handle hDispatchDriver
69683>>>>>>>        Get phDispatchDriver to hDispatchDriver
69684>>>>>>>        Send PrepareParams to hDispatchDriver 1
69685>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69686>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
69687>>>>>>>    End_Procedure
69688>>>>>>>
69688>>>>>>>    // Refresh the report
69688>>>>>>>    Procedure ComReportRefresh String llsId
69690>>>>>>>        Handle hDispatchDriver
69690>>>>>>>        Get phDispatchDriver to hDispatchDriver
69691>>>>>>>        Send PrepareParams to hDispatchDriver 1
69692>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69693>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
69694>>>>>>>    End_Procedure
69695>>>>>>>
69695>>>>>>>    // Prints the report
69695>>>>>>>    Procedure ComReportPrint String llsId Integer llhPrintDlg
69697>>>>>>>        Handle hDispatchDriver
69697>>>>>>>        Get phDispatchDriver to hDispatchDriver
69698>>>>>>>        Send PrepareParams to hDispatchDriver 2
69699>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69700>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhPrintDlg
69701>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
69702>>>>>>>    End_Procedure
69703>>>>>>>
69703>>>>>>>    // Export the report
69703>>>>>>>    Procedure ComReportExport String llsId C_drExportFormats lliType String llFileName
69705>>>>>>>        Handle hDispatchDriver
69705>>>>>>>        Get phDispatchDriver to hDispatchDriver
69706>>>>>>>        Send PrepareParams to hDispatchDriver 3
69707>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69708>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliType
69709>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llFileName
69710>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
69711>>>>>>>    End_Procedure
69712>>>>>>>
69712>>>>>>>    // Cancels the report output
69712>>>>>>>    Procedure ComReportCancel String llsId
69714>>>>>>>        Handle hDispatchDriver
69714>>>>>>>        Get phDispatchDriver to hDispatchDriver
69715>>>>>>>        Send PrepareParams to hDispatchDriver 1
69716>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69717>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
69718>>>>>>>    End_Procedure
69719>>>>>>>
69719>>>>>>>    // Returns the SQL query used in the report
69719>>>>>>>    Function ComReportQuery String llsId Returns String
69721>>>>>>>        Handle hDispatchDriver
69721>>>>>>>        String retVal
69721>>>>>>>        Get phDispatchDriver to hDispatchDriver
69722>>>>>>>        Send PrepareParams to hDispatchDriver 1
69723>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69724>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_BSTR to retVal
69725>>>>>>>        Function_Return retVal
69726>>>>>>>    End_Function
69727>>>>>>>
69727>>>>>>>    // Returns the page count
69727>>>>>>>    Function ComReportPageCount String llsId Returns Integer
69729>>>>>>>        Handle hDispatchDriver
69729>>>>>>>        Integer retVal
69729>>>>>>>        Get phDispatchDriver to hDispatchDriver
69730>>>>>>>        Send PrepareParams to hDispatchDriver 1
69731>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69732>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_I4 to retVal
69733>>>>>>>        Function_Return retVal
69734>>>>>>>    End_Function
69735>>>>>>>
69735>>>>>>>    // Returns the subreport name
69735>>>>>>>    Function ComReportName String llsId Returns String
69737>>>>>>>        Handle hDispatchDriver
69737>>>>>>>        String retVal
69737>>>>>>>        Get phDispatchDriver to hDispatchDriver
69738>>>>>>>        Send PrepareParams to hDispatchDriver 1
69739>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69740>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_BSTR to retVal
69741>>>>>>>        Function_Return retVal
69742>>>>>>>    End_Function
69743>>>>>>>
69743>>>>>>>    // Returns the language in use
69743>>>>>>>    Function ComReportLanguage String llsId Returns Integer
69745>>>>>>>        Handle hDispatchDriver
69745>>>>>>>        Integer retVal
69745>>>>>>>        Get phDispatchDriver to hDispatchDriver
69746>>>>>>>        Send PrepareParams to hDispatchDriver 1
69747>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69748>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_I4 to retVal
69749>>>>>>>        Function_Return retVal
69750>>>>>>>    End_Function
69751>>>>>>>
69751>>>>>>>    // Returns the language in use
69751>>>>>>>    Procedure Set ComReportLanguage String llsId Integer value
69753>>>>>>>        Handle hDispatchDriver
69753>>>>>>>        Get phDispatchDriver to hDispatchDriver
69754>>>>>>>        Send PrepareParams to hDispatchDriver 2
69755>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69756>>>>>>>        Set ComProperty of hDispatchDriver 12 OLE_VT_I4 to value
69757>>>>>>>    End_Procedure
69758>>>>>>>
69758>>>>>>>    // Returns a list of supported languages
69758>>>>>>>    Function ComReportLanguageList String llsId Returns Variant
69760>>>>>>>        Handle hDispatchDriver
69760>>>>>>>        Variant retVal
69760>>>>>>>        Get phDispatchDriver to hDispatchDriver
69761>>>>>>>        Send PrepareParams to hDispatchDriver 1
69762>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69763>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_VARIANT to retVal
69764>>>>>>>        Function_Return retVal
69765>>>>>>>    End_Function
69766>>>>>>>
69766>>>>>>>    // Preview the report (HTML)
69766>>>>>>>    Function ComReportHTMLPreview String llsId Integer lliArgSize Integer lliPage Returns Variant
69768>>>>>>>        Handle hDispatchDriver
69768>>>>>>>        Variant retVal
69768>>>>>>>        Get phDispatchDriver to hDispatchDriver
69769>>>>>>>        Send PrepareParams to hDispatchDriver 3
69770>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69771>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliArgSize
69772>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliPage
69773>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_VARIANT to retVal
69774>>>>>>>        Function_Return retVal
69775>>>>>>>    End_Function
69776>>>>>>>
69776>>>>>>>    // Sets the PDF export options
69776>>>>>>>    Procedure ComPDFExportOptions String llsId Integer llpData
69778>>>>>>>        Handle hDispatchDriver
69778>>>>>>>        Get phDispatchDriver to hDispatchDriver
69779>>>>>>>        Send PrepareParams to hDispatchDriver 2
69780>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69781>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpData
69782>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
69783>>>>>>>    End_Procedure
69784>>>>>>>
69784>>>>>>>    // Sets the CSV export options
69784>>>>>>>    Procedure ComCSVExportOptions String llsId Integer llpData
69786>>>>>>>        Handle hDispatchDriver
69786>>>>>>>        Get phDispatchDriver to hDispatchDriver
69787>>>>>>>        Send PrepareParams to hDispatchDriver 2
69788>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69789>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpData
69790>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
69791>>>>>>>    End_Procedure
69792>>>>>>>
69792>>>>>>>    // Sets the HTML export options
69792>>>>>>>    Procedure ComHTMLExportOptions String llsId Integer llpData
69794>>>>>>>        Handle hDispatchDriver
69794>>>>>>>        Get phDispatchDriver to hDispatchDriver
69795>>>>>>>        Send PrepareParams to hDispatchDriver 2
69796>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69797>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpData
69798>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
69799>>>>>>>    End_Procedure
69800>>>>>>>
69800>>>>>>>    // Sets the image export options
69800>>>>>>>    Procedure ComImageExportOptions String llsId Integer llpData
69802>>>>>>>        Handle hDispatchDriver
69802>>>>>>>        Get phDispatchDriver to hDispatchDriver
69803>>>>>>>        Send PrepareParams to hDispatchDriver 2
69804>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69805>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpData
69806>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
69807>>>>>>>    End_Procedure
69808>>>>>>>
69808>>>>>>>    // Sets the XLS export options
69808>>>>>>>    Procedure ComXLSExportOptions String llsId Integer llpData
69810>>>>>>>        Handle hDispatchDriver
69810>>>>>>>        Get phDispatchDriver to hDispatchDriver
69811>>>>>>>        Send PrepareParams to hDispatchDriver 2
69812>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69813>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpData
69814>>>>>>>        Send InvokeComMethod to hDispatchDriver 19 OLE_VT_VOID
69815>>>>>>>    End_Procedure
69816>>>>>>>
69816>>>>>>>    // Sets the RTF export options
69816>>>>>>>    Procedure ComRTFExportOptions String llsId Integer llpData
69818>>>>>>>        Handle hDispatchDriver
69818>>>>>>>        Get phDispatchDriver to hDispatchDriver
69819>>>>>>>        Send PrepareParams to hDispatchDriver 2
69820>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69821>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpData
69822>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
69823>>>>>>>    End_Procedure
69824>>>>>>>
69824>>>>>>>    // Returns the paper orientation
69824>>>>>>>    Function ComPaperOrientation String llsId Returns Integer
69826>>>>>>>        Handle hDispatchDriver
69826>>>>>>>        Integer retVal
69826>>>>>>>        Get phDispatchDriver to hDispatchDriver
69827>>>>>>>        Send PrepareParams to hDispatchDriver 1
69828>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69829>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_I4 to retVal
69830>>>>>>>        Function_Return retVal
69831>>>>>>>    End_Function
69832>>>>>>>
69832>>>>>>>    // Returns the paper size
69832>>>>>>>    Function ComPaperSize String llsId Returns Integer
69834>>>>>>>        Handle hDispatchDriver
69834>>>>>>>        Integer retVal
69834>>>>>>>        Get phDispatchDriver to hDispatchDriver
69835>>>>>>>        Send PrepareParams to hDispatchDriver 1
69836>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69837>>>>>>>        Get InvokeComMethod of hDispatchDriver 29 OLE_VT_I4 to retVal
69838>>>>>>>        Function_Return retVal
69839>>>>>>>    End_Function
69840>>>>>>>
69840>>>>>>>    // Returns the paper left margin
69840>>>>>>>    Function ComPaperMarginLeft String llsId Returns Integer
69842>>>>>>>        Handle hDispatchDriver
69842>>>>>>>        Integer retVal
69842>>>>>>>        Get phDispatchDriver to hDispatchDriver
69843>>>>>>>        Send PrepareParams to hDispatchDriver 1
69844>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69845>>>>>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_I4 to retVal
69846>>>>>>>        Function_Return retVal
69847>>>>>>>    End_Function
69848>>>>>>>
69848>>>>>>>    // Returns the paper left margin
69848>>>>>>>    Procedure Set ComPaperMarginLeft String llsId Integer value
69850>>>>>>>        Handle hDispatchDriver
69850>>>>>>>        Get phDispatchDriver to hDispatchDriver
69851>>>>>>>        Send PrepareParams to hDispatchDriver 2
69852>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69853>>>>>>>        Set ComProperty of hDispatchDriver 130 OLE_VT_I4 to value
69854>>>>>>>    End_Procedure
69855>>>>>>>
69855>>>>>>>    // Returns the paper top margin
69855>>>>>>>    Function ComPaperMarginTop String llsId Returns Integer
69857>>>>>>>        Handle hDispatchDriver
69857>>>>>>>        Integer retVal
69857>>>>>>>        Get phDispatchDriver to hDispatchDriver
69858>>>>>>>        Send PrepareParams to hDispatchDriver 1
69859>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69860>>>>>>>        Get InvokeComMethod of hDispatchDriver 131 OLE_VT_I4 to retVal
69861>>>>>>>        Function_Return retVal
69862>>>>>>>    End_Function
69863>>>>>>>
69863>>>>>>>    // Returns the paper top margin
69863>>>>>>>    Procedure Set ComPaperMarginTop String llsId Integer value
69865>>>>>>>        Handle hDispatchDriver
69865>>>>>>>        Get phDispatchDriver to hDispatchDriver
69866>>>>>>>        Send PrepareParams to hDispatchDriver 2
69867>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69868>>>>>>>        Set ComProperty of hDispatchDriver 131 OLE_VT_I4 to value
69869>>>>>>>    End_Procedure
69870>>>>>>>
69870>>>>>>>    // Returns the paper right margin
69870>>>>>>>    Function ComPaperMarginRight String llsId Returns Integer
69872>>>>>>>        Handle hDispatchDriver
69872>>>>>>>        Integer retVal
69872>>>>>>>        Get phDispatchDriver to hDispatchDriver
69873>>>>>>>        Send PrepareParams to hDispatchDriver 1
69874>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69875>>>>>>>        Get InvokeComMethod of hDispatchDriver 132 OLE_VT_I4 to retVal
69876>>>>>>>        Function_Return retVal
69877>>>>>>>    End_Function
69878>>>>>>>
69878>>>>>>>    // Returns the paper right margin
69878>>>>>>>    Procedure Set ComPaperMarginRight String llsId Integer value
69880>>>>>>>        Handle hDispatchDriver
69880>>>>>>>        Get phDispatchDriver to hDispatchDriver
69881>>>>>>>        Send PrepareParams to hDispatchDriver 2
69882>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69883>>>>>>>        Set ComProperty of hDispatchDriver 132 OLE_VT_I4 to value
69884>>>>>>>    End_Procedure
69885>>>>>>>
69885>>>>>>>    // Returns the paper bottom margin
69885>>>>>>>    Function ComPaperMarginBottom String llsId Returns Integer
69887>>>>>>>        Handle hDispatchDriver
69887>>>>>>>        Integer retVal
69887>>>>>>>        Get phDispatchDriver to hDispatchDriver
69888>>>>>>>        Send PrepareParams to hDispatchDriver 1
69889>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69890>>>>>>>        Get InvokeComMethod of hDispatchDriver 133 OLE_VT_I4 to retVal
69891>>>>>>>        Function_Return retVal
69892>>>>>>>    End_Function
69893>>>>>>>
69893>>>>>>>    // Returns the paper bottom margin
69893>>>>>>>    Procedure Set ComPaperMarginBottom String llsId Integer value
69895>>>>>>>        Handle hDispatchDriver
69895>>>>>>>        Get phDispatchDriver to hDispatchDriver
69896>>>>>>>        Send PrepareParams to hDispatchDriver 2
69897>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
69898>>>>>>>        Set ComProperty of hDispatchDriver 133 OLE_VT_I4 to value
69899>>>>>>>    End_Procedure
69900>>>>>>>
69900>>>>>>>    // Preview the first page in the report
69900>>>>>>>    Procedure ComPreviewFirstPage
69902>>>>>>>        Handle hDispatchDriver
69902>>>>>>>        Get phDispatchDriver to hDispatchDriver
69903>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
69904>>>>>>>    End_Procedure
69905>>>>>>>
69905>>>>>>>    // Preview the previous page in the report
69905>>>>>>>    Procedure ComPreviewPreviousPage
69907>>>>>>>        Handle hDispatchDriver
69907>>>>>>>        Get phDispatchDriver to hDispatchDriver
69908>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
69909>>>>>>>    End_Procedure
69910>>>>>>>
69910>>>>>>>    // Preview the next page in the report
69910>>>>>>>    Procedure ComPreviewNextPage
69912>>>>>>>        Handle hDispatchDriver
69912>>>>>>>        Get phDispatchDriver to hDispatchDriver
69913>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
69914>>>>>>>    End_Procedure
69915>>>>>>>
69915>>>>>>>    // Preview the last page in the report
69915>>>>>>>    Procedure ComPreviewLastPage
69917>>>>>>>        Handle hDispatchDriver
69917>>>>>>>        Get phDispatchDriver to hDispatchDriver
69918>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
69919>>>>>>>    End_Procedure
69920>>>>>>>
69920>>>>>>>    // Returns the preview window handle
69920>>>>>>>    Function ComPreviewHWND Returns Handle
69922>>>>>>>        Handle hDispatchDriver hWnd
69922>>>>>>>        Get phDispatchDriver to hDispatchDriver
69923>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_I4 to hWnd
69924>>>>>>>        Function_Return hWnd
69925>>>>>>>    End_Function
69926>>>>>>>
69926>>>>>>>    // Returns the preview window handle
69926>>>>>>>    Procedure Set ComPreviewHWND Handle hWnd
69928>>>>>>>        Handle hDispatchDriver
69928>>>>>>>        Get phDispatchDriver to hDispatchDriver
69929>>>>>>>        Send PrepareParams to hDispatchDriver 1
69930>>>>>>>        Set ComProperty of hDispatchDriver 56 OLE_VT_I4 to hWnd
69931>>>>>>>    End_Procedure
69932>>>>>>>
69932>>>>>>>    // Find text in the preview window
69932>>>>>>>    Function ComPreviewFind String llsString Integer llbDown Integer llbWholeWord Integer llbMatchCase Returns Integer
69934>>>>>>>        Handle hDispatchDriver
69934>>>>>>>        Integer Retval
69934>>>>>>>        Get phDispatchDriver to hDispatchDriver
69935>>>>>>>        Send PrepareParams to hDispatchDriver 4
69936>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsString
69937>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbDown
69938>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbWholeWord
69939>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbMatchCase
69940>>>>>>>        Get InvokeComMethod of hDispatchDriver 57 OLE_VT_I4 to Retval
69941>>>>>>>        Function_Return Retval
69942>>>>>>>    End_Function
69943>>>>>>>
69943>>>>>>>    // Scroll the preview window vertically
69943>>>>>>>    Procedure ComPreviewVScroll Integer lliType Integer lliPos
69945>>>>>>>        Handle hDispatchDriver
69945>>>>>>>        Get phDispatchDriver to hDispatchDriver
69946>>>>>>>        Send PrepareParams to hDispatchDriver 2
69947>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliType
69948>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliPos
69949>>>>>>>        Send InvokeComMethod to hDispatchDriver 58 OLE_VT_VOID
69950>>>>>>>    End_Procedure
69951>>>>>>>
69951>>>>>>>    // Scroll the preview window horizontally
69951>>>>>>>    Procedure ComPreviewHScroll Integer lliType Integer lliPos
69953>>>>>>>        Handle hDispatchDriver
69953>>>>>>>        Get phDispatchDriver to hDispatchDriver
69954>>>>>>>        Send PrepareParams to hDispatchDriver 2
69955>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliType
69956>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliPos
69957>>>>>>>        Send InvokeComMethod to hDispatchDriver 59 OLE_VT_VOID
69958>>>>>>>    End_Procedure
69959>>>>>>>
69959>>>>>>>    // Paint the preview window
69959>>>>>>>    Procedure ComPreviewPaint Integer llbRedraw
69961>>>>>>>        Handle hDispatchDriver
69961>>>>>>>        Get phDispatchDriver to hDispatchDriver
69962>>>>>>>        Send PrepareParams to hDispatchDriver 1
69963>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbRedraw
69964>>>>>>>        Send InvokeComMethod to hDispatchDriver 160 OLE_VT_VOID
69965>>>>>>>    End_Procedure
69966>>>>>>>
69966>>>>>>>    // Canvas color
69966>>>>>>>    Function ComPreviewCanvasColor Returns Integer
69968>>>>>>>        Handle hDispatchDriver
69968>>>>>>>        Integer retVal
69968>>>>>>>        Get phDispatchDriver to hDispatchDriver
69969>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
69970>>>>>>>        Function_Return retVal
69971>>>>>>>    End_Function
69972>>>>>>>
69972>>>>>>>    // Canvas color
69972>>>>>>>    Procedure Set ComPreviewCanvasColor Integer value
69974>>>>>>>        Handle hDispatchDriver
69974>>>>>>>        Get phDispatchDriver to hDispatchDriver
69975>>>>>>>        Send PrepareParams to hDispatchDriver 1
69976>>>>>>>        Set ComProperty of hDispatchDriver 161 OLE_VT_I4 to value
69977>>>>>>>    End_Procedure
69978>>>>>>>
69978>>>>>>>    // Waiting GIF
69978>>>>>>>    Function ComPreviewWaitingGIF Returns String
69980>>>>>>>        Handle hDispatchDriver
69980>>>>>>>        String retVal
69980>>>>>>>        Get phDispatchDriver to hDispatchDriver
69981>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_BSTR to retVal
69982>>>>>>>        Function_Return retVal
69983>>>>>>>    End_Function
69984>>>>>>>
69984>>>>>>>    // Waiting GIF
69984>>>>>>>    Procedure Set ComPreviewWaitingGIF String value
69986>>>>>>>        Handle hDispatchDriver
69986>>>>>>>        Get phDispatchDriver to hDispatchDriver
69987>>>>>>>        Send PrepareParams to hDispatchDriver 1
69988>>>>>>>        Set ComProperty of hDispatchDriver 162 OLE_VT_BSTR to value
69989>>>>>>>    End_Procedure
69990>>>>>>>
69990>>>>>>>    // Reset find in preview window
69990>>>>>>>    Procedure ComPreviewFindReset
69992>>>>>>>        Handle hDispatchDriver
69992>>>>>>>        Get phDispatchDriver to hDispatchDriver
69993>>>>>>>        Send InvokeComMethod to hDispatchDriver 163 OLE_VT_VOID
69994>>>>>>>    End_Procedure
69995>>>>>>>
69995>>>>>>>    // Returns the database type
69995>>>>>>>    Function ComDatabaseType String llsId Returns C_drDatabaseTypes
69997>>>>>>>        Handle hDispatchDriver
69997>>>>>>>        C_drDatabaseTypes retVal
69997>>>>>>>        Get phDispatchDriver to hDispatchDriver
69998>>>>>>>        Send PrepareParams to hDispatchDriver 1
69999>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70000>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
70001>>>>>>>        Function_Return retVal
70002>>>>>>>    End_Function
70003>>>>>>>
70003>>>>>>>    // Returns the database connection string
70003>>>>>>>    Function ComDatabaseConnection String llsId Returns String
70005>>>>>>>        Handle hDispatchDriver
70005>>>>>>>        String retVal
70005>>>>>>>        Get phDispatchDriver to hDispatchDriver
70006>>>>>>>        Send PrepareParams to hDispatchDriver 1
70007>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70008>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_BSTR to retVal
70009>>>>>>>        Function_Return retVal
70010>>>>>>>    End_Function
70011>>>>>>>
70011>>>>>>>    // Returns the database connection string
70011>>>>>>>    Procedure Set ComDatabaseConnection String llsId String value
70013>>>>>>>        Handle hDispatchDriver
70013>>>>>>>        Get phDispatchDriver to hDispatchDriver
70014>>>>>>>        Send PrepareParams to hDispatchDriver 2
70015>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70016>>>>>>>        Set ComProperty of hDispatchDriver 61 OLE_VT_BSTR to value
70017>>>>>>>    End_Procedure
70018>>>>>>>
70018>>>>>>>    // Returns the database name
70018>>>>>>>    Function ComDatabaseName String llsId Returns String
70020>>>>>>>        Handle hDispatchDriver
70020>>>>>>>        String retVal
70020>>>>>>>        Get phDispatchDriver to hDispatchDriver
70021>>>>>>>        Send PrepareParams to hDispatchDriver 1
70022>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70023>>>>>>>        Get InvokeComMethod of hDispatchDriver 62 OLE_VT_BSTR to retVal
70024>>>>>>>        Function_Return retVal
70025>>>>>>>    End_Function
70026>>>>>>>
70026>>>>>>>    // Returns the database name
70026>>>>>>>    Procedure Set ComDatabaseName String llsId String value
70028>>>>>>>        Handle hDispatchDriver
70028>>>>>>>        Get phDispatchDriver to hDispatchDriver
70029>>>>>>>        Send PrepareParams to hDispatchDriver 2
70030>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70031>>>>>>>        Set ComProperty of hDispatchDriver 62 OLE_VT_BSTR to value
70032>>>>>>>    End_Procedure
70033>>>>>>>
70033>>>>>>>    // Returns the number of tables in the report
70033>>>>>>>    Function ComTableCount String llsId Returns Integer
70035>>>>>>>        Handle hDispatchDriver
70035>>>>>>>        Integer retVal
70035>>>>>>>        Get phDispatchDriver to hDispatchDriver
70036>>>>>>>        Send PrepareParams to hDispatchDriver 1
70037>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70038>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
70039>>>>>>>        Function_Return retVal
70040>>>>>>>    End_Function
70041>>>>>>>
70041>>>>>>>    // Returns the name of a table
70041>>>>>>>    Function ComTableName String llsId Integer lliTable Returns String
70043>>>>>>>        Handle hDispatchDriver
70043>>>>>>>        String retVal
70043>>>>>>>        Get phDispatchDriver to hDispatchDriver
70044>>>>>>>        Send PrepareParams to hDispatchDriver 2
70045>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70046>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70047>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_BSTR to retVal
70048>>>>>>>        Function_Return retVal
70049>>>>>>>    End_Function
70050>>>>>>>
70050>>>>>>>    // Returns the name of a table
70050>>>>>>>    Procedure Set ComTableName String llsId Integer lliTable String value
70052>>>>>>>        Handle hDispatchDriver
70052>>>>>>>        Get phDispatchDriver to hDispatchDriver
70053>>>>>>>        Send PrepareParams to hDispatchDriver 3
70054>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70055>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70056>>>>>>>        Set ComProperty of hDispatchDriver 64 OLE_VT_BSTR to value
70057>>>>>>>    End_Procedure
70058>>>>>>>
70058>>>>>>>    // Returns the schema name of a table
70058>>>>>>>    Function ComTableSchema String llsId Integer lliTable Returns String
70060>>>>>>>        Handle hDispatchDriver
70060>>>>>>>        String retVal
70060>>>>>>>        Get phDispatchDriver to hDispatchDriver
70061>>>>>>>        Send PrepareParams to hDispatchDriver 2
70062>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70063>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70064>>>>>>>        Get InvokeComMethod of hDispatchDriver 65 OLE_VT_BSTR to retVal
70065>>>>>>>        Function_Return retVal
70066>>>>>>>    End_Function
70067>>>>>>>
70067>>>>>>>    // Returns the schema name of a table
70067>>>>>>>    Procedure Set ComTableSchema String llsId Integer lliTable String value
70069>>>>>>>        Handle hDispatchDriver
70069>>>>>>>        Get phDispatchDriver to hDispatchDriver
70070>>>>>>>        Send PrepareParams to hDispatchDriver 3
70071>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70072>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70073>>>>>>>        Set ComProperty of hDispatchDriver 65 OLE_VT_BSTR to value
70074>>>>>>>    End_Procedure
70075>>>>>>>
70075>>>>>>>    // Returns the alias name of a table
70075>>>>>>>    Function ComTableNameAlias String llsId Integer lliTable Returns String
70077>>>>>>>        Handle hDispatchDriver
70077>>>>>>>        String retVal
70077>>>>>>>        Get phDispatchDriver to hDispatchDriver
70078>>>>>>>        Send PrepareParams to hDispatchDriver 2
70079>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70080>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70081>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BSTR to retVal
70082>>>>>>>        Function_Return retVal
70083>>>>>>>    End_Function
70084>>>>>>>
70084>>>>>>>    // Sets the table data
70084>>>>>>>    Procedure ComTableData String llsId Integer lliTable Variant[] llpData
70086>>>>>>>        Handle hDispatchDriver
70086>>>>>>>        Get phDispatchDriver to hDispatchDriver
70087>>>>>>>        Send PrepareParams to hDispatchDriver 3
70088>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70089>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70090>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_ARRAY ior OLE_VT_VARIANT) llpData
70091>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
70092>>>>>>>    End_Procedure
70093>>>>>>>
70093>>>>>>>    // Returns the number of columns in a table
70093>>>>>>>    Function ComColumnCount String llsId Integer lliTable Returns Integer
70095>>>>>>>        Handle hDispatchDriver
70095>>>>>>>        Integer retVal
70095>>>>>>>        Get phDispatchDriver to hDispatchDriver
70096>>>>>>>        Send PrepareParams to hDispatchDriver 2
70097>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70098>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70099>>>>>>>        Get InvokeComMethod of hDispatchDriver 30 OLE_VT_I4 to retVal
70100>>>>>>>        Function_Return retVal
70101>>>>>>>    End_Function
70102>>>>>>>
70102>>>>>>>    // Returns the column name
70102>>>>>>>    Function ComColumnName String llsId Integer lliTable Integer lliColumn Returns String
70104>>>>>>>        Handle hDispatchDriver
70104>>>>>>>        String retVal
70104>>>>>>>        Get phDispatchDriver to hDispatchDriver
70105>>>>>>>        Send PrepareParams to hDispatchDriver 3
70106>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70107>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70108>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliColumn
70109>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_BSTR to retVal
70110>>>>>>>        Function_Return retVal
70111>>>>>>>    End_Function
70112>>>>>>>
70112>>>>>>>    // Returns the column type
70112>>>>>>>    Function ComColumnType String llsId Integer lliTable Integer lliColumn Returns Integer
70114>>>>>>>        Handle hDispatchDriver
70114>>>>>>>        Integer retVal
70114>>>>>>>        Get phDispatchDriver to hDispatchDriver
70115>>>>>>>        Send PrepareParams to hDispatchDriver 3
70116>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70117>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70118>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliColumn
70119>>>>>>>        Get InvokeComMethod of hDispatchDriver 32 OLE_VT_I4 to retVal
70120>>>>>>>        Function_Return retVal
70121>>>>>>>    End_Function
70122>>>>>>>
70122>>>>>>>    // Returns the column length
70122>>>>>>>    Function ComColumnLength String llsId Integer lliTable Integer lliColumn Returns Integer
70124>>>>>>>        Handle hDispatchDriver
70124>>>>>>>        Integer retVal
70124>>>>>>>        Get phDispatchDriver to hDispatchDriver
70125>>>>>>>        Send PrepareParams to hDispatchDriver 3
70126>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70127>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70128>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliColumn
70129>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
70130>>>>>>>        Function_Return retVal
70131>>>>>>>    End_Function
70132>>>>>>>
70132>>>>>>>    // Returns the column precision
70132>>>>>>>    Function ComColumnPrecision String llsId Integer lliTable Integer lliColumn Returns Integer
70134>>>>>>>        Handle hDispatchDriver
70134>>>>>>>        Integer retVal
70134>>>>>>>        Get phDispatchDriver to hDispatchDriver
70135>>>>>>>        Send PrepareParams to hDispatchDriver 3
70136>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70137>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70138>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliColumn
70139>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
70140>>>>>>>        Function_Return retVal
70141>>>>>>>    End_Function
70142>>>>>>>
70142>>>>>>>    // Returns the column main index
70142>>>>>>>    Function ComColumnIndex String llsId Integer lliTable Integer lliColumn Returns Integer
70144>>>>>>>        Handle hDispatchDriver
70144>>>>>>>        Integer retVal
70144>>>>>>>        Get phDispatchDriver to hDispatchDriver
70145>>>>>>>        Send PrepareParams to hDispatchDriver 3
70146>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70147>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliTable
70148>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliColumn
70149>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_I4 to retVal
70150>>>>>>>        Function_Return retVal
70151>>>>>>>    End_Function
70152>>>>>>>
70152>>>>>>>    // Returns the filter function
70152>>>>>>>    Function ComFilterFunction String llsId Returns String
70154>>>>>>>        Handle hDispatchDriver
70154>>>>>>>        String retVal
70154>>>>>>>        Get phDispatchDriver to hDispatchDriver
70155>>>>>>>        Send PrepareParams to hDispatchDriver 1
70156>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70157>>>>>>>        Get InvokeComMethod of hDispatchDriver 70 OLE_VT_BSTR to retVal
70158>>>>>>>        Function_Return retVal
70159>>>>>>>    End_Function
70160>>>>>>>
70160>>>>>>>    // Returns the filter function
70160>>>>>>>    Procedure Set ComFilterFunction String llsId String value
70162>>>>>>>        Handle hDispatchDriver
70162>>>>>>>        Get phDispatchDriver to hDispatchDriver
70163>>>>>>>        Send PrepareParams to hDispatchDriver 2
70164>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70165>>>>>>>        Set ComProperty of hDispatchDriver 70 OLE_VT_BSTR to value
70166>>>>>>>    End_Procedure
70167>>>>>>>
70167>>>>>>>    // Checks the function for errors
70167>>>>>>>    Function ComFunctionCheck String llsId String llsFunction Integer lliIndex Returns Integer
70169>>>>>>>        Handle hDispatchDriver
70169>>>>>>>        Integer retVal
70169>>>>>>>        Get phDispatchDriver to hDispatchDriver
70170>>>>>>>        Send PrepareParams to hDispatchDriver 3
70171>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70172>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsFunction
70173>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliIndex
70174>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_I4 to retVal
70175>>>>>>>        Function_Return retVal
70176>>>>>>>    End_Function
70177>>>>>>>
70177>>>>>>>    // Returns the data type of a function
70177>>>>>>>    Function ComFunctionType String llsId String llsFunction Integer lliIndex Returns Integer
70179>>>>>>>        Handle hDispatchDriver
70179>>>>>>>        Integer retVal
70179>>>>>>>        Get phDispatchDriver to hDispatchDriver
70180>>>>>>>        Send PrepareParams to hDispatchDriver 3
70181>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70182>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsFunction
70183>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliIndex
70184>>>>>>>        Get InvokeComMethod of hDispatchDriver 81 OLE_VT_I4 to retVal
70185>>>>>>>        Function_Return retVal
70186>>>>>>>    End_Function
70187>>>>>>>
70187>>>>>>>    // Returns the length of a function
70187>>>>>>>    Function ComFunctionLength String llsId String llsFunction Integer lliIndex Returns Integer
70189>>>>>>>        Handle hDispatchDriver
70189>>>>>>>        Integer retVal
70189>>>>>>>        Get phDispatchDriver to hDispatchDriver
70190>>>>>>>        Send PrepareParams to hDispatchDriver 3
70191>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70192>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsFunction
70193>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliIndex
70194>>>>>>>        Get InvokeComMethod of hDispatchDriver 82 OLE_VT_I4 to retVal
70195>>>>>>>        Function_Return retVal
70196>>>>>>>    End_Function
70197>>>>>>>
70197>>>>>>>    // Returns if a symbol is used in any function
70197>>>>>>>    Function ComFunctionIsSymbolUsed String llsId String llsSymbol Returns Integer
70199>>>>>>>        Handle hDispatchDriver
70199>>>>>>>        Integer retVal
70199>>>>>>>        Get phDispatchDriver to hDispatchDriver
70200>>>>>>>        Send PrepareParams to hDispatchDriver 2
70201>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70202>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsSymbol
70203>>>>>>>        Get InvokeComMethod of hDispatchDriver 86 OLE_VT_I4 to retVal
70204>>>>>>>        Function_Return retVal
70205>>>>>>>    End_Function
70206>>>>>>>
70206>>>>>>>    // Returns if a function is empty
70206>>>>>>>    Function ComFunctionIsEmpty String llsId String llsFunction Returns Integer
70208>>>>>>>        Handle hDispatchDriver
70208>>>>>>>        Integer retVal
70208>>>>>>>        Get phDispatchDriver to hDispatchDriver
70209>>>>>>>        Send PrepareParams to hDispatchDriver 2
70210>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70211>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsFunction
70212>>>>>>>        Get InvokeComMethod of hDispatchDriver 87 OLE_VT_I4 to retVal
70213>>>>>>>        Function_Return retVal
70214>>>>>>>    End_Function
70215>>>>>>>
70215>>>>>>>    // Returns the number of functions
70215>>>>>>>    Function ComFunctionCount String llsId Returns Integer
70217>>>>>>>        Handle hDispatchDriver
70217>>>>>>>        Integer retVal
70217>>>>>>>        Get phDispatchDriver to hDispatchDriver
70218>>>>>>>        Send PrepareParams to hDispatchDriver 1
70219>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70220>>>>>>>        Get InvokeComMethod of hDispatchDriver 83 OLE_VT_I4 to retVal
70221>>>>>>>        Function_Return retVal
70222>>>>>>>    End_Function
70223>>>>>>>
70223>>>>>>>    // Returns the function name
70223>>>>>>>    Function ComFunctionName String llsId Integer lliFunction Returns String
70225>>>>>>>        Handle hDispatchDriver
70225>>>>>>>        String retVal
70225>>>>>>>        Get phDispatchDriver to hDispatchDriver
70226>>>>>>>        Send PrepareParams to hDispatchDriver 2
70227>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70228>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFunction
70229>>>>>>>        Get InvokeComMethod of hDispatchDriver 84 OLE_VT_BSTR to retVal
70230>>>>>>>        Function_Return retVal
70231>>>>>>>    End_Function
70232>>>>>>>
70232>>>>>>>    // Returns the function name
70232>>>>>>>    Procedure Set ComFunctionName String llsId Integer lliFunction String value
70234>>>>>>>        Handle hDispatchDriver
70234>>>>>>>        Get phDispatchDriver to hDispatchDriver
70235>>>>>>>        Send PrepareParams to hDispatchDriver 3
70236>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70237>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFunction
70238>>>>>>>        Set ComProperty of hDispatchDriver 84 OLE_VT_BSTR to value
70239>>>>>>>    End_Procedure
70240>>>>>>>
70240>>>>>>>    // Returns the function
70240>>>>>>>    Function ComFunction String llsId Integer lliFunction Returns String
70242>>>>>>>        Handle hDispatchDriver
70242>>>>>>>        String retVal
70242>>>>>>>        Get phDispatchDriver to hDispatchDriver
70243>>>>>>>        Send PrepareParams to hDispatchDriver 2
70244>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70245>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFunction
70246>>>>>>>        Get InvokeComMethod of hDispatchDriver 85 OLE_VT_BSTR to retVal
70247>>>>>>>        Function_Return retVal
70248>>>>>>>    End_Function
70249>>>>>>>
70249>>>>>>>    // Returns the function
70249>>>>>>>    Procedure Set ComFunction String llsId Integer lliFunction String value
70251>>>>>>>        Handle hDispatchDriver
70251>>>>>>>        Get phDispatchDriver to hDispatchDriver
70252>>>>>>>        Send PrepareParams to hDispatchDriver 3
70253>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70254>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFunction
70255>>>>>>>        Set ComProperty of hDispatchDriver 85 OLE_VT_BSTR to value
70256>>>>>>>    End_Procedure
70257>>>>>>>
70257>>>>>>>    // Finds a function by name
70257>>>>>>>    Function ComFunctionByName String llsId String llsFunction Returns Integer
70259>>>>>>>        Handle hDispatchDriver
70259>>>>>>>        Integer retVal
70259>>>>>>>        Get phDispatchDriver to hDispatchDriver
70260>>>>>>>        Send PrepareParams to hDispatchDriver 2
70261>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70262>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsFunction
70263>>>>>>>        Get InvokeComMethod of hDispatchDriver 88 OLE_VT_I4 to retVal
70264>>>>>>>        Function_Return retVal
70265>>>>>>>    End_Function
70266>>>>>>>
70266>>>>>>>    // Returns the number of subreports
70266>>>>>>>    Function ComSubreportCount String llsId Returns Integer
70268>>>>>>>        Handle hDispatchDriver
70268>>>>>>>        Integer retVal
70268>>>>>>>        Get phDispatchDriver to hDispatchDriver
70269>>>>>>>        Send PrepareParams to hDispatchDriver 1
70270>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70271>>>>>>>        Get InvokeComMethod of hDispatchDriver 91 OLE_VT_I4 to retVal
70272>>>>>>>        Function_Return retVal
70273>>>>>>>    End_Function
70274>>>>>>>
70274>>>>>>>    // Returns the subreport id
70274>>>>>>>    Function ComSubreportId String llsId Integer lliSubreport Returns String
70276>>>>>>>        Handle hDispatchDriver
70276>>>>>>>        String retVal
70276>>>>>>>        Get phDispatchDriver to hDispatchDriver
70277>>>>>>>        Send PrepareParams to hDispatchDriver 2
70278>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70279>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliSubreport
70280>>>>>>>        Get InvokeComMethod of hDispatchDriver 92 OLE_VT_BSTR to retVal
70281>>>>>>>        Function_Return retVal
70282>>>>>>>    End_Function
70283>>>>>>>
70283>>>>>>>    // Returns the number of record sorts
70283>>>>>>>    Function ComRecordSortCount String llsId Returns Integer
70285>>>>>>>        Handle hDispatchDriver
70285>>>>>>>        Integer retVal
70285>>>>>>>        Get phDispatchDriver to hDispatchDriver
70286>>>>>>>        Send PrepareParams to hDispatchDriver 1
70287>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70288>>>>>>>        Get InvokeComMethod of hDispatchDriver 95 OLE_VT_I4 to retVal
70289>>>>>>>        Function_Return retVal
70290>>>>>>>    End_Function
70291>>>>>>>
70291>>>>>>>    // Returns the record sort field
70291>>>>>>>    Function ComRecordSortField String llsId Integer lliSort Returns String
70293>>>>>>>        Handle hDispatchDriver
70293>>>>>>>        String retVal
70293>>>>>>>        Get phDispatchDriver to hDispatchDriver
70294>>>>>>>        Send PrepareParams to hDispatchDriver 2
70295>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70296>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliSort
70297>>>>>>>        Get InvokeComMethod of hDispatchDriver 96 OLE_VT_BSTR to retVal
70298>>>>>>>        Function_Return retVal
70299>>>>>>>    End_Function
70300>>>>>>>
70300>>>>>>>    // Returns the record sort field
70300>>>>>>>    Procedure Set ComRecordSortField String llsId Integer lliSort String value
70302>>>>>>>        Handle hDispatchDriver
70302>>>>>>>        Get phDispatchDriver to hDispatchDriver
70303>>>>>>>        Send PrepareParams to hDispatchDriver 3
70304>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70305>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliSort
70306>>>>>>>        Set ComProperty of hDispatchDriver 96 OLE_VT_BSTR to value
70307>>>>>>>    End_Procedure
70308>>>>>>>
70308>>>>>>>    // Returns the record sort order
70308>>>>>>>    Function ComRecordSortOrder String llsId Integer lliSort Returns C_drSortOrders
70310>>>>>>>        Handle hDispatchDriver
70310>>>>>>>        C_drSortOrders retVal
70310>>>>>>>        Get phDispatchDriver to hDispatchDriver
70311>>>>>>>        Send PrepareParams to hDispatchDriver 2
70312>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70313>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliSort
70314>>>>>>>        Get InvokeComMethod of hDispatchDriver 97 OLE_VT_I4 to retVal
70315>>>>>>>        Function_Return retVal
70316>>>>>>>    End_Function
70317>>>>>>>
70317>>>>>>>    // Returns the record sort order
70317>>>>>>>    Procedure Set ComRecordSortOrder String llsId Integer lliSort C_drSortOrders value
70319>>>>>>>        Handle hDispatchDriver
70319>>>>>>>        Get phDispatchDriver to hDispatchDriver
70320>>>>>>>        Send PrepareParams to hDispatchDriver 3
70321>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70322>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliSort
70323>>>>>>>        Set ComProperty of hDispatchDriver 97 OLE_VT_I4 to value
70324>>>>>>>    End_Procedure
70325>>>>>>>
70325>>>>>>>    // Deletes a record sort
70325>>>>>>>    Procedure ComRecordSortDelete String llsId Integer lliSort
70327>>>>>>>        Handle hDispatchDriver
70327>>>>>>>        Get phDispatchDriver to hDispatchDriver
70328>>>>>>>        Send PrepareParams to hDispatchDriver 2
70329>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70330>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliSort
70331>>>>>>>        Send InvokeComMethod to hDispatchDriver 98 OLE_VT_VOID
70332>>>>>>>    End_Procedure
70333>>>>>>>
70333>>>>>>>    // Adds a record sort
70333>>>>>>>    Procedure ComRecordSortAdd String llsId String llsField C_drSortOrders lliOrder
70335>>>>>>>        Handle hDispatchDriver
70335>>>>>>>        Get phDispatchDriver to hDispatchDriver
70336>>>>>>>        Send PrepareParams to hDispatchDriver 3
70337>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70338>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsField
70339>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliOrder
70340>>>>>>>        Send InvokeComMethod to hDispatchDriver 99 OLE_VT_VOID
70341>>>>>>>    End_Procedure
70342>>>>>>>
70342>>>>>>>    // Returns the number of record filters
70342>>>>>>>    Function ComRecordFilterCount String llsId Returns Integer
70344>>>>>>>        Handle hDispatchDriver
70344>>>>>>>        Integer retVal
70344>>>>>>>        Get phDispatchDriver to hDispatchDriver
70345>>>>>>>        Send PrepareParams to hDispatchDriver 1
70346>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70347>>>>>>>        Get InvokeComMethod of hDispatchDriver 72 OLE_VT_I4 to retVal
70348>>>>>>>        Function_Return retVal
70349>>>>>>>    End_Function
70350>>>>>>>
70350>>>>>>>    // Returns the record filter field
70350>>>>>>>    Function ComRecordFilterField String llsId Integer lliFilter Returns String
70352>>>>>>>        Handle hDispatchDriver
70352>>>>>>>        String retVal
70352>>>>>>>        Get phDispatchDriver to hDispatchDriver
70353>>>>>>>        Send PrepareParams to hDispatchDriver 2
70354>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70355>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFilter
70356>>>>>>>        Get InvokeComMethod of hDispatchDriver 73 OLE_VT_BSTR to retVal
70357>>>>>>>        Function_Return retVal
70358>>>>>>>    End_Function
70359>>>>>>>
70359>>>>>>>    // Returns the record filter field
70359>>>>>>>    Procedure Set ComRecordFilterField String llsId Integer lliFilter String value
70361>>>>>>>        Handle hDispatchDriver
70361>>>>>>>        Get phDispatchDriver to hDispatchDriver
70362>>>>>>>        Send PrepareParams to hDispatchDriver 3
70363>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70364>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFilter
70365>>>>>>>        Set ComProperty of hDispatchDriver 73 OLE_VT_BSTR to value
70366>>>>>>>    End_Procedure
70367>>>>>>>
70367>>>>>>>    // Returns the record filter operator
70367>>>>>>>    Function ComRecordFilterOperator String llsId Integer lliFilter Returns C_drOperators
70369>>>>>>>        Handle hDispatchDriver
70369>>>>>>>        C_drOperators retVal
70369>>>>>>>        Get phDispatchDriver to hDispatchDriver
70370>>>>>>>        Send PrepareParams to hDispatchDriver 2
70371>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70372>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFilter
70373>>>>>>>        Get InvokeComMethod of hDispatchDriver 74 OLE_VT_I4 to retVal
70374>>>>>>>        Function_Return retVal
70375>>>>>>>    End_Function
70376>>>>>>>
70376>>>>>>>    // Returns the record filter operator
70376>>>>>>>    Procedure Set ComRecordFilterOperator String llsId Integer lliFilter C_drOperators value
70378>>>>>>>        Handle hDispatchDriver
70378>>>>>>>        Get phDispatchDriver to hDispatchDriver
70379>>>>>>>        Send PrepareParams to hDispatchDriver 3
70380>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70381>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFilter
70382>>>>>>>        Set ComProperty of hDispatchDriver 74 OLE_VT_I4 to value
70383>>>>>>>    End_Procedure
70384>>>>>>>
70384>>>>>>>    // Returns the record filter value
70384>>>>>>>    Function ComRecordFilterValue String llsId Integer lliFilter Returns String
70386>>>>>>>        Handle hDispatchDriver
70386>>>>>>>        String retVal
70386>>>>>>>        Get phDispatchDriver to hDispatchDriver
70387>>>>>>>        Send PrepareParams to hDispatchDriver 2
70388>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70389>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFilter
70390>>>>>>>        Get InvokeComMethod of hDispatchDriver 75 OLE_VT_BSTR to retVal
70391>>>>>>>        Function_Return retVal
70392>>>>>>>    End_Function
70393>>>>>>>
70393>>>>>>>    // Returns the record filter value
70393>>>>>>>    Procedure Set ComRecordFilterValue String llsId Integer lliFilter String value
70395>>>>>>>        Handle hDispatchDriver
70395>>>>>>>        Get phDispatchDriver to hDispatchDriver
70396>>>>>>>        Send PrepareParams to hDispatchDriver 3
70397>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70398>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFilter
70399>>>>>>>        Set ComProperty of hDispatchDriver 75 OLE_VT_BSTR to value
70400>>>>>>>    End_Procedure
70401>>>>>>>
70401>>>>>>>    // Deletes a record filter
70401>>>>>>>    Procedure ComRecordFilterDelete String llsId Integer lliFilter
70403>>>>>>>        Handle hDispatchDriver
70403>>>>>>>        Get phDispatchDriver to hDispatchDriver
70404>>>>>>>        Send PrepareParams to hDispatchDriver 2
70405>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70406>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliFilter
70407>>>>>>>        Send InvokeComMethod to hDispatchDriver 76 OLE_VT_VOID
70408>>>>>>>    End_Procedure
70409>>>>>>>
70409>>>>>>>    // Adds a record filter
70409>>>>>>>    Procedure ComRecordFilterAdd String llsId String llsField C_drOperators lliOperator String llsValue
70411>>>>>>>        Handle hDispatchDriver
70411>>>>>>>        Get phDispatchDriver to hDispatchDriver
70412>>>>>>>        Send PrepareParams to hDispatchDriver 4
70413>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70414>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsField
70415>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliOperator
70416>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsValue
70417>>>>>>>        Send InvokeComMethod to hDispatchDriver 77 OLE_VT_VOID
70418>>>>>>>    End_Procedure
70419>>>>>>>
70419>>>>>>>    // Returns the number of parameters
70419>>>>>>>    Function ComParameterCount String llsId Returns Integer
70421>>>>>>>        Handle hDispatchDriver
70421>>>>>>>        Integer retVal
70421>>>>>>>        Get phDispatchDriver to hDispatchDriver
70422>>>>>>>        Send PrepareParams to hDispatchDriver 1
70423>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70424>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_I4 to retVal
70425>>>>>>>        Function_Return retVal
70426>>>>>>>    End_Function
70427>>>>>>>
70427>>>>>>>    // Returns the parameter name
70427>>>>>>>    Function ComParameterName String llsId Integer lliParam Returns String
70429>>>>>>>        Handle hDispatchDriver
70429>>>>>>>        String retVal
70429>>>>>>>        Get phDispatchDriver to hDispatchDriver
70430>>>>>>>        Send PrepareParams to hDispatchDriver 2
70431>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70432>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliParam
70433>>>>>>>        Get InvokeComMethod of hDispatchDriver 41 OLE_VT_BSTR to retVal
70434>>>>>>>        Function_Return retVal
70435>>>>>>>    End_Function
70436>>>>>>>
70436>>>>>>>    // Returns the parameter type
70436>>>>>>>    Function ComParameterType String llsId Integer lliParam Returns Integer
70438>>>>>>>        Handle hDispatchDriver
70438>>>>>>>        Integer retVal
70438>>>>>>>        Get phDispatchDriver to hDispatchDriver
70439>>>>>>>        Send PrepareParams to hDispatchDriver 2
70440>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70441>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliParam
70442>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_I4 to retVal
70443>>>>>>>        Function_Return retVal
70444>>>>>>>    End_Function
70445>>>>>>>
70445>>>>>>>    // Returns the parameter length
70445>>>>>>>    Function ComParameterLength String llsId Integer lliParam Returns Integer
70447>>>>>>>        Handle hDispatchDriver
70447>>>>>>>        Integer retVal
70447>>>>>>>        Get phDispatchDriver to hDispatchDriver
70448>>>>>>>        Send PrepareParams to hDispatchDriver 2
70449>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70450>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliParam
70451>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
70452>>>>>>>        Function_Return retVal
70453>>>>>>>    End_Function
70454>>>>>>>
70454>>>>>>>    // Returns the parameter precision
70454>>>>>>>    Function ComParameterPrecision String llsId Integer lliParam Returns Integer
70456>>>>>>>        Handle hDispatchDriver
70456>>>>>>>        Integer retVal
70456>>>>>>>        Get phDispatchDriver to hDispatchDriver
70457>>>>>>>        Send PrepareParams to hDispatchDriver 2
70458>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70459>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliParam
70460>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
70461>>>>>>>        Function_Return retVal
70462>>>>>>>    End_Function
70463>>>>>>>
70463>>>>>>>    // Returns the parameter value
70463>>>>>>>    Function ComParameterValue String llsId Integer lliParam Returns String
70465>>>>>>>        Handle hDispatchDriver
70465>>>>>>>        String retVal
70465>>>>>>>        Get phDispatchDriver to hDispatchDriver
70466>>>>>>>        Send PrepareParams to hDispatchDriver 2
70467>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70468>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliParam
70469>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_BSTR to retVal
70470>>>>>>>        Function_Return retVal
70471>>>>>>>    End_Function
70472>>>>>>>
70472>>>>>>>    // Returns the parameter value
70472>>>>>>>    Procedure Set ComParameterValue String llsId Integer lliParam String value
70474>>>>>>>        Handle hDispatchDriver
70474>>>>>>>        Get phDispatchDriver to hDispatchDriver
70475>>>>>>>        Send PrepareParams to hDispatchDriver 3
70476>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70477>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lliParam
70478>>>>>>>        Set ComProperty of hDispatchDriver 45 OLE_VT_BSTR to value
70479>>>>>>>    End_Procedure
70480>>>>>>>
70480>>>>>>>    // Finds a parameter by name
70480>>>>>>>    Function ComParameterByName String llsId String llsParameter Returns Integer
70482>>>>>>>        Handle hDispatchDriver
70482>>>>>>>        Integer retVal
70482>>>>>>>        Get phDispatchDriver to hDispatchDriver
70483>>>>>>>        Send PrepareParams to hDispatchDriver 2
70484>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsId
70485>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsParameter
70486>>>>>>>        Get InvokeComMethod of hDispatchDriver 46 OLE_VT_I4 to retVal
70487>>>>>>>        Function_Return retVal
70488>>>>>>>    End_Function
70489>>>>>>>
70489>>>>>>>    // Previews a chart object
70489>>>>>>>    Procedure ComChartPreview Integer llhDC Integer llpData Integer llpRect
70491>>>>>>>        Handle hDispatchDriver
70491>>>>>>>        Get phDispatchDriver to hDispatchDriver
70492>>>>>>>        Send PrepareParams to hDispatchDriver 3
70493>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
70494>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpData
70495>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpRect
70496>>>>>>>        Send InvokeComMethod to hDispatchDriver 151 OLE_VT_VOID
70497>>>>>>>    End_Procedure
70498>>>>>>>End_Class
70499>>>>>>>
70499>>>>>>>// CLSID: {2D492BA4-5BC0-4F66-B85F-90BFD7B1B1DC}
70499>>>>>>>// Event interface for DataFlex Reports 2018 Developer Edition
70499>>>>>>>Class cCom_DataFlexReportsAPIEvents is a Mixin
70500>>>>>>>    Procedure OnComReportError Integer iError String sError
70502>>>>>>>    End_Procedure
70503>>>>>>>
70503>>>>>>>    Procedure OnComReportInfo Integer iError String sError
70505>>>>>>>    End_Procedure
70506>>>>>>>
70506>>>>>>>    Procedure OnComFunctionError String sReportId Integer lliFunctionId String sFunction String sError Integer iLine Integer iCol String sToken
70508>>>>>>>    End_Procedure
70509>>>>>>>
70509>>>>>>>    Procedure OnComReportStatistics C_drStatistics iType Integer iValue
70511>>>>>>>    End_Procedure
70512>>>>>>>
70512>>>>>>>    Procedure OnComProgressRecordsRead Integer iRecords
70514>>>>>>>    End_Procedure
70515>>>>>>>
70515>>>>>>>    Procedure OnComProgressCountPage Integer iPage
70517>>>>>>>    End_Procedure
70518>>>>>>>
70518>>>>>>>    Procedure OnComProgressFormatPage Integer iPage Integer iTotalPages
70520>>>>>>>    End_Procedure
70521>>>>>>>
70521>>>>>>>    Procedure OnComProgressExportPage Integer iPage Integer iTotalPages
70523>>>>>>>    End_Procedure
70524>>>>>>>
70524>>>>>>>    Procedure OnComPreviewShowPage Integer iPage
70526>>>>>>>    End_Procedure
70527>>>>>>>
70527>>>>>>>    Procedure OnComPreviewZoomChanged Integer iZoomFactor
70529>>>>>>>    End_Procedure
70530>>>>>>>
70530>>>>>>>    Procedure OnComPreviewClick C_drHitTests iPos Integer iSectionId String sObject String sValue
70532>>>>>>>    End_Procedure
70533>>>>>>>
70533>>>>>>>    Procedure RegisterComEvents
70535>>>>>>>        Send RegisterComEvent 1 msg_OnComReportError
70536>>>>>>>        Send RegisterComEvent 2 msg_OnComReportInfo
70537>>>>>>>        Send RegisterComEvent 3 msg_OnComFunctionError
70538>>>>>>>        Send RegisterComEvent 10 msg_OnComReportStatistics
70539>>>>>>>        Send RegisterComEvent 20 msg_OnComProgressRecordsRead
70540>>>>>>>        Send RegisterComEvent 21 msg_OnComProgressCountPage
70541>>>>>>>        Send RegisterComEvent 22 msg_OnComProgressFormatPage
70542>>>>>>>        Send RegisterComEvent 23 msg_OnComProgressExportPage
70543>>>>>>>        Send RegisterComEvent 30 msg_OnComPreviewShowPage
70544>>>>>>>        Send RegisterComEvent 31 msg_OnComPreviewZoomChanged
70545>>>>>>>        Send RegisterComEvent 32 msg_OnComPreviewClick
70546>>>>>>>    End_Procedure
70547>>>>>>>End_Class
70548>>>>>>>
70548>>>>>>>// CoClass
70548>>>>>>>// ProgID: DRAPI.Demo.6.2
70548>>>>>>>// CLSID: {72EFE658-9743-42E3-83E9-B568BE9F5799}
70548>>>>>>>// DataFlex Reports 2018 Demo Runtime
70548>>>>>>>Class cDataFlexReportsAPI is a cComActiveXControl
70549>>>>>>>    Import_Class_Protocol cCom_DataFlexReportsAPI
70550>>>>>>>    Import_Class_Protocol cCom_DataFlexReportsAPIEvents
70551>>>>>>>
70551>>>>>>>    Procedure Construct_Object
70553>>>>>>>        Forward Send Construct_Object
70555>>>>>>>        Set psProgID to "{72EFE658-9743-42E3-83E9-B568BE9F5799}"
70556>>>>>>>        Set psEventId to "{8703066E-B5E6-4BBC-9234-91D67111964A}"
70557>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
70558>>>>>>>    End_Procedure
70559>>>>>>>End_Class
70560>>>>>Use PtrModes.pkg
70560>>>>>Use DRLanguage.Inc
Including file: DRLanguage.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguage.Inc)
70560>>>>>>>Use DRLanguageEnglish.Inc
Including file: DRLanguageEnglish.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageEnglish.Inc)
70560>>>>>>>>>// cDRReport.Pkg
70560>>>>>>>>>Define C_$DRNoReportIdSpecified                for "No Report ID specified, Report was not opened?"
70560>>>>>>>>>Define C_$DRInvalidTablenumberPassed           for "Invalid table number (=%1) passed"
70560>>>>>>>>>Define C_$DRFunctionNotFound                   for "Function (%1) not found"
70560>>>>>>>>>Define C_$DRInvalidSubReportNumberPassed       for "Invalid subreport number (=%1) passed"
70560>>>>>>>>>Define C_$DRCannotLocateTable                  for "Cannot locate table %1 in %2 (table number=%3)"
70560>>>>>>>>>Define C_$DRReportOCXNotInitialised            for "The report COM object for (object='%1') is not created"
70560>>>>>>>>>Define C_$DRReportZoomFactorRangeExceeded      for "The zoom factor range specified (=%1) must be -1 or -2 or between 25 and 500"
70560>>>>>>>>>Define C_$DRNoODBCDatabaseType                 for "Database for report (=%1) is not an ODBC data source"
70560>>>>>>>>>Define C_$DRNotTheCorrectDatabaseType          for "Not the correct database type for this method"
70560>>>>>>>>>Define C_$DRInvalidParameternumberPassed       for "Invalid parameter number (=%1) passed"
70560>>>>>>>>>Define C_$DRInvalidSortFieldIndexPassed        for "Invalid sort field index number (=%1) passed"
70560>>>>>>>>>Define C_$DRInvalidColumnNumberPassed          for "Invalid column number (=%1) passed"
70560>>>>>>>>>Define C_$DRNoExportFileNameSpecified          for "No export file name specified"
70560>>>>>>>>>Define C_$DRNoValidExportTypeSpecified         for "No valid export type (=%1) specified"
70560>>>>>>>>>Define C_$DRUnableToProvideCacheFileName       for "Unable to provide cache file name"
70560>>>>>>>>>Define C_$DRXLSVersionNumberIncorrect          for "Invalid XLS version number for export specified"
70560>>>>>>>>>Define C_$DRXLSNewSheetOptionIncorrect         for "Invalid value for XLS new sheets option specified"
70560>>>>>>>>>Define C_$DRXLSIncorrectColumnWidth            for "Invalid value for XLS column width specified"
70560>>>>>>>>>Define C_$DRHTMLExportInvalidPageNumber        for "Invalid value for HTML page number specified"
70560>>>>>>>>>Define C_$DRPDFExportInvalidImageQuality       for "Invalid value for PDF image quality specified"
70560>>>>>>>>>Define C_$DRRTFExportInvalidPageNumber         for "Invalid value for RTF page number specified"
70560>>>>>>>>>Define C_$DRReportOCXCannotLoad                for "Cannot load %1 (Version: %2)"
70560>>>>>>>>>Define C_$DRReportRecordsRead                  for "Records read: %1"
70560>>>>>>>>>Define C_$DRReportFormattingPageNofM           for "Formatting page %1 of %2 pages"
70560>>>>>>>>>Define C_$DRReportFormattingPage               for "Formatting page %1"
70560>>>>>>>>>Define C_$DRNoValidPrintDestinationDefined     for "No valid print destination (= %1) defined/used"
70560>>>>>>>>>Define C_$DRNoExportOptionsDialog              for "No export options dialog (phoExportOptionsDialog) defined"
70560>>>>>>>>>Define C_$DRErrorInFunction                    for "Error in Function"
70560>>>>>>>>>Define C_$DRFunctionName                       for "Function:"
70560>>>>>>>>>Define C_$DRReportName                         for "Report:"
70560>>>>>>>>>Define C_$DRFunctionIdentifier                 for "Studio ID:"
70560>>>>>>>>>Define C_$DRCopyAndClose                       for "Copy ID and Close Dialog"
70560>>>>>>>>>Define C_$DRBuiltInFunction                    for "Built-in Function"
70560>>>>>>>>>Define C_$DRFunctionError                      for "\n\r\n\rFunction: %1\n\rReport: %2\n\r%3"
70560>>>>>>>>>Define C_$DRUseStudioIDToLocateInReport        for "Use Above StudioID to Locate the Function in the Report"
70560>>>>>>>>>Define C_$DRReportDoesNotHaveAWindowHandle     for "The report COM object for (object='%1') does not have a window handle"
70560>>>>>>>>>
70560>>>>>>>>>// cDRPreview.Pkg, DRModalPreview.dg and cDRToolpanelPreview.pkg
70560>>>>>>>>>Define C_$DRFirstPage                          for "First page"
70560>>>>>>>>>Define C_$DRGoToTheFirstPage                   for "Go to the first page"
70560>>>>>>>>>Define C_$DRJumpsToTheFirstPageOfTheReport     for "Jumps to the first page of the report"
70560>>>>>>>>>Define C_$DRCtrlHomeShortCut                   for "Ctrl+Home"
70560>>>>>>>>>Define C_$DRPreviousPage                       for "Previous page"
70560>>>>>>>>>Define C_$DRGoToThePreviousPage                for "Go to the previous page"
70560>>>>>>>>>Define C_$DRJumpsToThePreviousPageOfTheReport  for "Jumps to the previous page of the report"
70560>>>>>>>>>Define C_$DRPageUpShortCut                     for "PgUp"
70560>>>>>>>>>Define C_$DRNextPage                           for "Next page"
70560>>>>>>>>>Define C_$DRGoToTheNextPage                    for "Go to the next page"
70560>>>>>>>>>Define C_$DRJumpsToTheNextPageOfTheReport      for "Jumps to the next page of the report"
70560>>>>>>>>>Define C_$DRPageDownShortCut                   for "PgDn"
70560>>>>>>>>>Define C_$DRLastPage                           for "Last page"
70560>>>>>>>>>Define C_$DRGoToTheLastPage                    for "Go to the last page"
70560>>>>>>>>>Define C_$DRJumpsToTheLastPageOfTheReport      for "Jumps to the last page of the report"
70560>>>>>>>>>Define C_$DRCtrlEndShortCut                    for "Ctrl+End"
70560>>>>>>>>>Define C_$DRRefresh                            for "Refresh"
70560>>>>>>>>>Define C_$DRRefreshTheReport                   for "Refresh the report"
70560>>>>>>>>>Define C_$DRRefreshTheCurrentReport            for "Refresh the current report"
70560>>>>>>>>>Define C_$DRPrintReport                        for "Print report"
70560>>>>>>>>>Define C_$DRPrintTheReportToAPrinter           for "Print the report to a printer"
70560>>>>>>>>>Define C_$DRPrintTheCurrentReportToAPrinter    for "Prints the current report to a printer"
70560>>>>>>>>>Define C_$DRZoom                               for "Zoom:"
70560>>>>>>>>>Define C_$DRExport                             for "Export"
70560>>>>>>>>>Define C_$DRExportTheReport                    for "Export the report"
70560>>>>>>>>>Define C_$DRDataFlexReportsPreview             for "DataFlex Reports Preview"
70560>>>>>>>>>Define C_$DRSearchInPreview                    for "Search:"
70560>>>>>>>>>Define C_$DRSearchInPreviewDescr               for "Search for a text in the preview"
70560>>>>>>>>>Define C_$DRSearchInPreviewTooltip             for "Search for a text in the preview"
70560>>>>>>>>>Define C_$DRSearchHintText                     for "Enter your search value"
70560>>>>>>>>>Define C_$DRSearchInPreviewOptions             for "Options"
70560>>>>>>>>>Define C_$DRSearchInPreviewOptionsTooltip      for "Options for Search in Preview"
70560>>>>>>>>>Define C_$DRSearchInPreviewDown                for "Down"
70560>>>>>>>>>Define C_$DRSearchInPreviewWholeWord           for "Whole Word"
70560>>>>>>>>>Define C_$DRSearchInPreviewMatchCase           for "Match Case"
70560>>>>>>>>>
70560>>>>>>>>>// cDRMenuItem.pkg
70560>>>>>>>>>Define C_$DRNoReportObject for "No Report Object ID present"
70560>>>>>>>>>
70560>>>>>>>>>// DRStatusPanel.dg
70560>>>>>>>>>Define C_$DRDataFlexReports            for "DataFlex Reports"
70560>>>>>>>>>Define C_$DRLoadingReportPleaseWait    for "Loading report, please wait..."
70560>>>>>>>>>
70560>>>>>>>>>// DRExportOptions.dg and ExportReport.wo
70560>>>>>>>>>Define C_$DREnterSelectExportOptions                        for "Enter/Select Export Options"
70560>>>>>>>>>Define C_$DRSelectEnterExportFileName                       for "Select/Enter Export FileName"
70560>>>>>>>>>Define C_$DRExportTo                                        for "Export to:"
70560>>>>>>>>>Define C_$DRPDF                                             for "PDF"
70560>>>>>>>>>Define C_$DRCSV                                             for "CSV"
70560>>>>>>>>>Define C_$DRImage                                           for "Image"
70560>>>>>>>>>Define C_$DRRTF                                             for "RTF"
70560>>>>>>>>>Define C_$DRFileName                                        for "Filename:"
70560>>>>>>>>>Define C_$DRPDFFileExtensionsFilter                         for "Portable Document Format|*.pdf|All Files|*.*"
70560>>>>>>>>>Define C_$DRCSVFileExtensionsFilter                         for "Comma Separated Values|*.csv|All Files|*.*"
70560>>>>>>>>>Define C_$DRJPGFileExtensionsFilter                         for "Joint Photographic Experts Group|*.jpg|Graphics Interchange Format|*.gif|Tagged Image File Format|*.tiff|Portable Network Graphics|*.png|All Files|*.*"
70560>>>>>>>>>Define C_$DRHTMLFileExtensionsFilter                        for "HyperText Markup Language|*.html|All Files|*.*"
70560>>>>>>>>>Define C_$DRXLSFileExtensionsFilter                         for "Excel 97-2003 Workbook|*.xls|Excel Workbook|*.xlsx|All Files|*.*"
70560>>>>>>>>>Define C_$DRRTFFileExtensionsFilter                         for "RTF|*.rtf|All Files|*.*"
70560>>>>>>>>>Define C_$DRPDFOptions                                      for "PDF Options:"
70560>>>>>>>>>Define C_$DRPageMode                                        for "Page Mode:"
70560>>>>>>>>>Define C_$DRNormal                                          for "Normal"
70560>>>>>>>>>Define C_$DROutline                                         for "Outline"
70560>>>>>>>>>Define C_$DRThumbs                                          for "Thumbs"
70560>>>>>>>>>Define C_$DRFullScreen                                      for "FullScreen"
70560>>>>>>>>>Define C_$DROwnerPassword                                   for "Owner pwd:"
70560>>>>>>>>>Define C_$DRPasswordPDFOwner                                for "Password PDF owner"
70560>>>>>>>>>Define C_$DRUserPassword                                    for "User pwd:"
70560>>>>>>>>>Define C_$DRPasswordPDFUser                                 for "Password PDF user"
70560>>>>>>>>>Define C_$DRImgQuality                                      for "Img. Quality:"
70560>>>>>>>>>Define C_$DRImageQuality                                    for "Image Quality"
70560>>>>>>>>>Define C_$DRLow                                             for "Low"
70560>>>>>>>>>Define C_$DRHigh                                            for "High"
70560>>>>>>>>>Define C_$DRCSVOptions                                      for "CSV Options:"
70560>>>>>>>>>Define C_$DRSeparator                                       for "Separator:"
70560>>>>>>>>>Define C_$DRDelimiter                                       for "Delimiter:"
70560>>>>>>>>>Define C_$DRExportPageSections                              for "Export Page Sections"
70560>>>>>>>>>Define C_$DRExportsPageHeaderAndFooterDetailInformation     for "Exports Page Header & Footer detail information"
70560>>>>>>>>>Define C_$DRExportGroupSections                             for "Export Group Sections"
70560>>>>>>>>>Define C_$DRExportGroupHeaderAndFooterDetailInformation     for "Exports Group Header & Group Footer detail information"
70560>>>>>>>>>Define C_$DRExportReportSections                            for "Export Report Sections"
70560>>>>>>>>>Define C_$DRExportsReportHeaderAndFooterDetailInformation   for "Exports Report Header & Footer detail information"
70560>>>>>>>>>Define C_$DRImageOptions                                    for "Image Options:"
70560>>>>>>>>>Define C_$DRType                                            for "Type:"
70560>>>>>>>>>Define C_$DRJPEG                                            for "JPEG"
70560>>>>>>>>>Define C_$DRGIF                                             for "GIF"
70560>>>>>>>>>Define C_$DRTIFF                                            for "TIFF"
70560>>>>>>>>>Define C_$DRPNG                                             for "PNG"
70560>>>>>>>>>Define C_$DRMultiPage                                       for "Multi page"
70560>>>>>>>>>Define C_$DRPageNumber                                      for "Page:"
70560>>>>>>>>>Define C_$DRPageCount                                       for "Page count"
70560>>>>>>>>>Define C_$DRViewPDF                                         for "View Results"
70560>>>>>>>>>Define C_$DRViewPDFToolTip                                  for "Open the PDF after generating PDF"
70560>>>>>>>>>Define C_$DRHTML                                            for "HTML"
70560>>>>>>>>>Define C_$DRXLS                                             for "XLS"
70560>>>>>>>>>Define C_$DRHTMLOptions                                     for "HTML Options"
70560>>>>>>>>>Define C_$DRXLSOptions                                      for "XLS Options"
70560>>>>>>>>>Define C_$DRXLSVersion                                      for "Version:"
70560>>>>>>>>>Define C_$DRXLS2003                                         for "Excel 97-2003"
70560>>>>>>>>>Define C_$DRXLS2007                                         for "Excel"
70560>>>>>>>>>Define C_$DRXLSDataOnly                                     for "Data Only"
70560>>>>>>>>>Define C_$DRXLSPageSections                                 for "Page Sections"
70560>>>>>>>>>Define C_$DRXLSReportSections                               for "Report Sections"
70560>>>>>>>>>Define C_$DRXLSGroupSections                                for "Group Sections"
70560>>>>>>>>>Define C_$DRXLSNewSheets                                    for "New Sheet:"
70560>>>>>>>>>Define C_$DRXLSNoSheets                                     for "None"
70560>>>>>>>>>Define C_$DRXLSSheetsPage                                   for "Per Page"
70560>>>>>>>>>Define C_$DRXLSColumnWidth                                  for "Column Width"
70560>>>>>>>>>Define C_$DRRTFOptions                                      for "RTF Options"
70560>>>>>>>>>Define C_$DRAllPages                                        for "All pages"
70560>>>>>>>>>Define C_$DRDestination                                     for "Destination:"
70560>>>>>>>>>Define C_$DRExportExplanation                               for "Select your desired export option below and click the export report button. The exported report will be given to your browser for download."
70560>>>>>>>>>Define C_$DRCurrentWindow                                   for "Current Window"
70560>>>>>>>>>Define C_$DRNewWindow                                       for "New Window"
70560>>>>>>>>>Define C_$DRNewTab                                          for "New Tab"
70560>>>>>>>>>Define C_$DRExportDataOnly                                  for "Data Only:"
70560>>>>>>>>>Define C_$DRExportColumnWidth                               for "Column Width:"
70560>>>>>>>>>Define C_$DRExportReport                                    for "Export"
70560>>>>>>>>>Define C_$DRMainActions                                     for "MainActions"
70560>>>>>>>>>Define C_$DRSeparatorNoColon                                for "Separator"
70560>>>>>>>>>Define C_$DRDelimiterNoColon                                for "Delimiter"
70560>>>>>>>>>Define C_$DRPDFType                                         for "PDF Type:"
70560>>>>>>>>>Define C_$DRPDFNormal                                       for "Standard PDF"
70560>>>>>>>>>Define C_$DRPDFA                                            for "PDF/A"
70560>>>>>>>>>
70560>>>>>>>>>// cWebDRReportViewer.pkg
70560>>>>>>>>>Define C_$DRphoReportDoesNotContainAValidReport    for "Property phoReport does not contain a valid report"
70560>>>>>>>>>
70560>>>>>>>>>// cDRZoomMenuItem.pkg
70560>>>>>>>>>Define C_$DRZoomPageWidth  for "Page Width"
70560>>>>>>>>>Define C_$DRZoomWholePage  for "Whole Page"
70560>>>>>>>Use DRLanguageCzech.Inc
Including file: DRLanguageCzech.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageCzech.Inc)
70560>>>>>>>Use DRLanguageDansk.Inc
Including file: DRLanguageDansk.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageDansk.Inc)
70560>>>>>>>Use DRLanguageDeutsch.Inc
Including file: DRLanguageDeutsch.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageDeutsch.Inc)
70560>>>>>>>Use DRLanguageEspanol.Inc
Including file: DRLanguageEspanol.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageEspanol.Inc)
70560>>>>>>>>>//****************************
70560>>>>>>>>>// 10/01/2011 Translated by Moose Software for DR 1.4. www.moose-software.com
70560>>>>>>>>>// 20/07/2012 Translated by Moose Software for DR 2.1. www.moose-software.com
70560>>>>>>>>>// 11/05/2013 Translated by Moose Software for DR 3.0. www.moose-software.com
70560>>>>>>>>>// 13/08/2015 Translated by Boris Reyna
70560>>>>>>>>>// 16/08/2015 Revised by by Moose Software for DR 4.0. www.moose-software.com
70560>>>>>>>>>// 01/12/2015 Revised by by Moose Software for DR 5.0. www.moose-software.com
70560>>>>>>>>>// 23/08/2018 Revised by Boris Reyna for DR 6.1
70560>>>>>>>>>//***************************
70560>>>>>>>>>
70560>>>>>>>>>
70560>>>>>>>>>//***************************** end of file **********************
70560>>>>>>>Use DRLanguageFrancais.Inc
Including file: DRLanguageFrancais.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageFrancais.Inc)
70560>>>>>>>Use DRLanguageHungarian.Inc
Including file: DRLanguageHungarian.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageHungarian.Inc)
70560>>>>>>>Use DRLanguageItaliano.Inc
Including file: DRLanguageItaliano.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageItaliano.Inc)
70560>>>>>>>>>// 2015-08-19 Modifications by Luca Vettoretto (cltComputers)
70560>>>>>>>Use DRLanguageNederlands.Inc
Including file: DRLanguageNederlands.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageNederlands.Inc)
70560>>>>>>>Use DRLanguageNorsk.Inc
Including file: DRLanguageNorsk.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageNorsk.Inc)
70560>>>>>>>Use DRLanguagePolish.Inc
Including file: DRLanguagePolish.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguagePolish.Inc)
70560>>>>>>>Use DRLanguagePortugues.Inc
Including file: DRLanguagePortugues.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguagePortugues.Inc)
70560>>>>>>>Use DRLanguageRussian.Inc
Including file: DRLanguageRussian.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageRussian.Inc)
70560>>>>>>>Use DRLanguageSvenska.Inc
Including file: DRLanguageSvenska.Inc    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRLanguageSvenska.Inc)
70560>>>>>Use cApplication.pkg
70560>>>>>Use GlobalFunctionsProcedures.pkg
70560>>>>>Use Dferror.pkg
70560>>>>>Use cPrintDialog.pkg
Including file: cPrintDialog.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cPrintDialog.pkg)
70560>>>>>>>Use cPrintDialog.h.pkg
Including file: cPrintDialog.h.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cPrintDialog.h.pkg)
70560>>>>>>>>>// GlobalAlloc Flags constants:
70560>>>>>>>>>Define GMEM_FIXED          for |CI$0000
70560>>>>>>>>>Define GMEM_MOVEABLE       for |CI$0002
70560>>>>>>>>>Define GMEM_NOCOMPACT      for |CI$0010
70560>>>>>>>>>Define GMEM_NODISCARD      for |CI$0020
70560>>>>>>>>>Define GMEM_ZEROINIT       for |CI$0040
70560>>>>>>>>>Define GMEM_MODIFY         for |CI$0080
70560>>>>>>>>>Define GMEM_DISCARDABLE    for |CI$0100
70560>>>>>>>>>Define GMEM_NOT_BANKED     for |CI$1000
70560>>>>>>>>>Define GMEM_SHARE          for |CI$2000
70560>>>>>>>>>Define GMEM_DDESHARE       for |CI$2000
70560>>>>>>>>>Define GMEM_NOTIFY         for |CI$4000
70560>>>>>>>>>Define GMEM_LOWER          for GMEM_NOT_BANKED
70560>>>>>>>>>
70560>>>>>>>>>// Flags for PrintDlg and PrintDlgEx
70560>>>>>>>>>Define PD_ALLPAGES                              for |CI$00000000 // The default flag that indicates that the All radio button is initially selected. This flag is used as a placeholder to indicate that the PD_PAGENUMS, PD_SELECTION, and PD_CURRENTPAGE flags are not specified.
70560>>>>>>>>>Define PD_SELECTION                             for |CI$00000001 // If this flag is set, the Selection radio button is selected. If none of the PD_PAGENUMS, PD_SELECTION, or PD_CURRENTPAGE flags is set, the All radio button is selected.
70560>>>>>>>>>Define PD_PAGENUMS                              for |CI$00000002 // If this flag is set, the Pages radio button is selected. If none of the PD_PAGENUMS, PD_SELECTION, or PD_CURRENTPAGE flags is set, the All radio button is selected. If this flag is set when the PrintDlgEx function returns, the lpPageRanges member indicates the page ranges specified by the user.
70560>>>>>>>>>Define PD_NOSELECTION                           for |CI$00000004 // Disables the Selection radio button.
70560>>>>>>>>>Define PD_NOPAGENUMS                            for |CI$00000008 // Disables the Pages radio button and the associated edit controls. Also, it causes the Collate check box to appear in the dialog.
70560>>>>>>>>>Define PD_COLLATE                               for |CI$00000010 // If this flag is set, the Collate check box is selected. If this flag is Set when the PrintDlgEx Function Returns, the application must simulate collation of multiple copies. for more information, see the description of the PD_USEDEVMODECOPIESANDCOLLATE flag. See PD_NOPAGENUMS.
70560>>>>>>>>>Define PD_PRINTTOFILE                           for |CI$00000020 // If this flag is set, the Print to File check box is selected. If this flag is set when PrintDlgEx returns, the offset indicated by the wOutputOffset member of the DEVNAMES structure contains the string "FILE:". When you call the StartDoc function to start the printing operation, specify this "FILE:" string in the lpszOutput member of the DOCINFO structure. Specifying this string causes the print subsystem to query the user for the name of the output file.
70560>>>>>>>>>Define PD_PRINTSETUP                            for |CI$00000040
70560>>>>>>>>>Define PD_NOWARNING                             for |CI$00000080 // Prevents the warning message from being displayed when an error occurs.
70560>>>>>>>>>Define PD_RETURNDC                              for |CI$00000100 // Causes PrintDlgEx to return a device context matching the selections the user made in the property sheet. The device context is returned in hDC.
70560>>>>>>>>>Define PD_RETURNIC                              for |CI$00000200 // Similar to the PD_RETURNDC flag, except this flag returns an information context rather than a device context. If neither PD_RETURNDC nor PD_RETURNIC is specified, hDC is undefined on output.
70560>>>>>>>>>Define PD_RETURNDEFAULT                         for |CI$00000400 // If this flag is set, the PrintDlgEx function does not display the property sheet. Instead, it sets the hDevNames and hDevMode members to handles to DEVNAMES and DEVMODE structures that are initialized for the system default printer. Both hDevNames and hDevMode must be NULL, or PrintDlgEx returns an error.
70560>>>>>>>>>Define PD_SHOWHELP                              for |CI$00000800
70560>>>>>>>>>Define PD_ENABLEPRINTHOOK                       for |CI$00001000
70560>>>>>>>>>Define PD_ENABLESETUPHOOK                       for |CI$00002000
70560>>>>>>>>>Define PD_ENABLEPRINTTEMPLATE                   for |CI$00004000 // Indicates that the hInstance and lpPrintTemplateName members specify a replacement for the default dialog box template in the lower portion of the General page. The default template contains controls similar to those of the Print dialog box. The system uses the specified template to create a window that is a child of the General page.
70560>>>>>>>>>Define PD_ENABLESETUPTEMPLATE                   for |CI$00008000
70560>>>>>>>>>Define PD_ENABLEPRINTTEMPLATEHANDLE             for |CI$00010000 // Indicates that the hInstance member identifies a data block that contains a preloaded dialog box template. This template replaces the default dialog box template in the lower portion of the General page. The system uses the specified template to create a window that is a child of the General page. The system ignores the lpPrintTemplateName member if this flag is specified.
70560>>>>>>>>>Define PD_ENABLESETUPTEMPLATEHANDLE             for |CI$00020000
70560>>>>>>>>>Define PD_USEDEVMODECOPIES                      for |CI$00040000 // Same as PD_USEDEVMODECOPIESANDCOLLATE.
70560>>>>>>>>>Define PD_USEDEVMODECOPIESANDCOLLATE            for |CI$00040000 // This flag indicates whether your application supports multiple copies and collation. Set this flag on input to indicate that your application does not support multiple copies and collation. In this case, the nCopies member of the PRINTDLGEX structure always returns 1, and PD_COLLATE is never set in the Flags member. If this flag is not Set, the application is responsible for printing and collating multiple copies. In this Case, the nCopies member of the PRINTDLGEX structure indicates the Number of copies the user wants to Print, and the PD_COLLATE flag in the Flags member indicates whether the user wants collation. Regardless of whether this flag is Set, an application can determine from nCopies and PD_COLLATE how many copies to render and whether to Print them collated. If this flag is Set and the printer driver does not support multiple copies, the Copies edit control is disabled. Similarly, If this flag is Set and the printer driver does not support collation, the Collate check box is disabled. The dmCopies and dmCollate members of the DEVMODE structure contain the copies and collate information used by the printer driver. If this flag is Set and the printer driver supports multiple copies, the    dmCopies member indicates the Number of copies requested by the user. If this flag is Set and the printer driver supports collation, the dmCollate member of the DEVMODE structure indicates whether the user wants collation. If this flag is not Set, the dmCopies member always Returns 1, and the dmCollate member is always zero. In Windows versions prior to Windows Vista, If this flag is not Set by the calling application and the dmCopies member of the DEVMODE structure is greater than 1, Use that value for the number of copies; otherwise, use the value of the nCopies member of the PRINTDLGEX structure.
70560>>>>>>>>>Define PD_DISABLEPRINTTOFILE                    for |CI$00080000 // Disables the Print to File check box.
70560>>>>>>>>>Define PD_HIDEPRINTTOFILE                       for |CI$00100000 // Hides the Print to File check box.
70560>>>>>>>>>Define PD_NONETWORKBUTTON                       for |CI$00200000
70560>>>>>>>>>Define PD_CURRENTPAGE                           for |CI$00400000 // If this flag is set, the Current Page radio button is selected. If none of the PD_PAGENUMS, PD_SELECTION, or PD_CURRENTPAGE flags is set, the All radio button is selected.
70560>>>>>>>>>Define PD_NOCURRENTPAGE                         for |CI$00800000 // Disables the Current Page radio button.
70560>>>>>>>>>Define PD_EXCLUSIONFLAGS                        for |CI$01000000 // Indicates that the ExclusionFlags member identifies items to be excluded from the printer driver property pages. If this flag is not set, items will be excluded by default from the printer driver property pages. The exclusions prevent the duplication of items among the General page, any application-specified pages, and the printer driver pages.
70560>>>>>>>>>Define PD_USELARGETEMPLATE                      for |CI$10000000 // Forces the property sheet to use a large template for the General page. The larger template provides more space for applications that specify a custom template for the lower portion of the General page.
70560>>>>>>>>>
70560>>>>>>>>>// Start page
70560>>>>>>>>>Define START_PAGE_GENERAL                       for 4294967295 // = 0xffffffff
70560>>>>>>>>>
70560>>>>>>>>>// Result codes
70560>>>>>>>>>Define PD_RESULT_CANCEL                         for 0
70560>>>>>>>>>Define PD_RESULT_PRINT                          for 1
70560>>>>>>>>>Define PD_RESULT_APPLY                          for 2
70560>>>>>>>>>
70560>>>>>>>>>// current version of specification
70560>>>>>>>>>Define DM_SPECVERSION                           for |CI$0401    
70560>>>>>>>>>
70560>>>>>>>>>// field selection bits
70560>>>>>>>>>Define DM_ORIENTATION                           for |CI$00000001
70560>>>>>>>>>Define DM_PAPERSIZE                             for |CI$00000002
70560>>>>>>>>>Define DM_PAPERLENGTH                           for |CI$00000004
70560>>>>>>>>>Define DM_PAPERWIDTH                            for |CI$00000008
70560>>>>>>>>>Define DM_SCALE                                 for |CI$00000010
70560>>>>>>>>>Define DM_POSITION                              for |CI$00000020
70560>>>>>>>>>Define DM_NUP                                   for |CI$00000040
70560>>>>>>>>>Define DM_DISPLAYORIENTATION                    for |CI$00000080
70560>>>>>>>>>Define DM_COPIES                                for |CI$00000100
70560>>>>>>>>>Define DM_DEFAULTSOURCE                         for |CI$00000200
70560>>>>>>>>>Define DM_PRINTQUALITY                          for |CI$00000400
70560>>>>>>>>>Define DM_COLOR                                 for |CI$00000800
70560>>>>>>>>>Define DM_DUPLEX                                for |CI$00001000
70560>>>>>>>>>Define DM_YRESOLUTION                           for |CI$00002000
70560>>>>>>>>>Define DM_TTOPTION                              for |CI$00004000
70560>>>>>>>>>Define DM_COLLATE                               for |CI$00008000
70560>>>>>>>>>Define DM_FORMNAME                              for |CI$00010000
70560>>>>>>>>>Define DM_LOGPIXELS                             for |CI$00020000
70560>>>>>>>>>Define DM_BITSPERPEL                            for |CI$00040000
70560>>>>>>>>>Define DM_PELSWIDTH                             for |CI$00080000
70560>>>>>>>>>Define DM_PELSHEIGHT                            for |CI$00100000
70560>>>>>>>>>Define DM_DISPLAYFLAGS                          for |CI$00200000
70560>>>>>>>>>Define DM_DISPLAYFREQUENCY                      for |CI$00400000
70560>>>>>>>>>Define DM_ICMMETHOD                             for |CI$00800000
70560>>>>>>>>>Define DM_ICMINTENT                             for |CI$01000000
70560>>>>>>>>>Define DM_MEDIATYPE                             for |CI$02000000
70560>>>>>>>>>Define DM_DITHERTYPE                            for |CI$04000000
70560>>>>>>>>>Define DM_PANNINGWIDTH                          for |CI$08000000
70560>>>>>>>>>Define DM_PANNINGHEIGHT                         for |CI$10000000
70560>>>>>>>>>Define DM_DISPLAYFIXEDOUTPUT                    for |CI$20000000
70560>>>>>>>>>
70560>>>>>>>>>//  Exclusion flags for PrintDlgEx.
70560>>>>>>>>>Define PD_EXCL_COPIESANDCOLLATE                 for (DM_COPIES ior DM_COLLATE)
70560>>>>>>>>>
70560>>>>>>>>>// orientation selections
70560>>>>>>>>>Define DMORIENT_PORTRAIT                        for 1
70560>>>>>>>>>Define DMORIENT_LANDSCAPE                       for 2
70560>>>>>>>>>
70560>>>>>>>>>// paper selections
70560>>>>>>>>>Define DMPAPER_LETTER                           for 1   // Letter 8 1/2 x 11 in
70560>>>>>>>>>Define DMPAPER_LETTERSMALL                      for 2   // Letter Small 8 1/2 x 11 in
70560>>>>>>>>>Define DMPAPER_TABLOID                          for 3   // Tabloid 11 x 17 in
70560>>>>>>>>>Define DMPAPER_LEDGER                           for 4   // Ledger 17 x 11 in
70560>>>>>>>>>Define DMPAPER_LEGAL                            for 5   // Legal 8 1/2 x 14 in
70560>>>>>>>>>Define DMPAPER_STATEMENT                        for 6   // Statement 5 1/2 x 8 1/2 in
70560>>>>>>>>>Define DMPAPER_EXECUTIVE                        for 7   // Executive 7 1/4 x 10 1/2 in
70560>>>>>>>>>Define DMPAPER_A3                               for 8   // A3 297 x 420 mm
70560>>>>>>>>>Define DMPAPER_A4                               for 9   // A4 210 x 297 mm
70560>>>>>>>>>Define DMPAPER_A4SMALL                          for 10  // A4 Small 210 x 297 mm
70560>>>>>>>>>Define DMPAPER_A5                               for 11  // A5 148 x 210 mm
70560>>>>>>>>>Define DMPAPER_B4                               for 12  // B4 (JIS) 250 x 354
70560>>>>>>>>>Define DMPAPER_B5                               for 13  // B5 (JIS) 182 x 257 mm
70560>>>>>>>>>Define DMPAPER_FOLIO                            for 14  // Folio 8 1/2 x 13 in
70560>>>>>>>>>Define DMPAPER_QUARTO                           for 15  // Quarto 215 x 275 mm
70560>>>>>>>>>Define DMPAPER_10X14                            for 16  // 10x14 in
70560>>>>>>>>>Define DMPAPER_11X17                            for 17  // 11x17 in
70560>>>>>>>>>Define DMPAPER_NOTE                             for 18  // Note 8 1/2 x 11 in
70560>>>>>>>>>Define DMPAPER_ENV_9                            for 19  // Envelope #9 3 7/8 x 8 7/8
70560>>>>>>>>>Define DMPAPER_ENV_10                           for 20  // Envelope #10 4 1/8 x 9 1/2
70560>>>>>>>>>Define DMPAPER_ENV_11                           for 21  // Envelope #11 4 1/2 x 10 3/8
70560>>>>>>>>>Define DMPAPER_ENV_12                           for 22  // Envelope #12 4 \276 x 11
70560>>>>>>>>>Define DMPAPER_ENV_14                           for 23  // Envelope #14 5 x 11 1/2
70560>>>>>>>>>Define DMPAPER_CSHEET                           for 24  // C size sheet
70560>>>>>>>>>Define DMPAPER_DSHEET                           for 25  // D size sheet
70560>>>>>>>>>Define DMPAPER_ESHEET                           for 26  // E size sheet
70560>>>>>>>>>Define DMPAPER_ENV_DL                           for 27  // Envelope DL 110 x 220mm
70560>>>>>>>>>Define DMPAPER_ENV_C5                           for 28  // Envelope C5 162 x 229 mm
70560>>>>>>>>>Define DMPAPER_ENV_C3                           for 29  // Envelope C3  324 x 458 mm
70560>>>>>>>>>Define DMPAPER_ENV_C4                           for 30  // Envelope C4  229 x 324 mm
70560>>>>>>>>>Define DMPAPER_ENV_C6                           for 31  // Envelope C6  114 x 162 mm
70560>>>>>>>>>Define DMPAPER_ENV_C65                          for 32  // Envelope C65 114 x 229 mm
70560>>>>>>>>>Define DMPAPER_ENV_B4                           for 33  // Envelope B4  250 x 353 mm
70560>>>>>>>>>Define DMPAPER_ENV_B5                           for 34  // Envelope B5  176 x 250 mm
70560>>>>>>>>>Define DMPAPER_ENV_B6                           for 35  // Envelope B6  176 x 125 mm
70560>>>>>>>>>Define DMPAPER_ENV_ITALY                        for 36  // Envelope 110 x 230 mm
70560>>>>>>>>>Define DMPAPER_ENV_MONARCH                      for 37  // Envelope Monarch 3.875 x 7.5 in
70560>>>>>>>>>Define DMPAPER_ENV_PERSONAL                     for 38  // 6 3/4 Envelope 3 5/8 x 6 1/2 in
70560>>>>>>>>>Define DMPAPER_FANFOLD_US                       for 39  // US Std Fanfold 14 7/8 x 11 in
70560>>>>>>>>>Define DMPAPER_FANFOLD_STD_GERMAN               for 40  // German Std Fanfold 8 1/2 x 12 in
70560>>>>>>>>>Define DMPAPER_FANFOLD_LGL_GERMAN               for 41  // German Legal Fanfold 8 1/2 x 13 in
70560>>>>>>>>>Define DMPAPER_ISO_B4                           for 42  // B4 (ISO) 250 x 353 mm
70560>>>>>>>>>Define DMPAPER_JAPANESE_POSTCARD                for 43  // Japanese Postcard 100 x 148 mm
70560>>>>>>>>>Define DMPAPER_9X11                             for 44  // 9 x 11 in
70560>>>>>>>>>Define DMPAPER_10X11                            for 45  // 10 x 11 in
70560>>>>>>>>>Define DMPAPER_15X11                            for 46  // 15 x 11 in
70560>>>>>>>>>Define DMPAPER_ENV_INVITE                       for 47  // Envelope Invite 220 x 220 mm
70560>>>>>>>>>Define DMPAPER_RESERVED_48                      for 48  // RESERVED--DO not Use
70560>>>>>>>>>Define DMPAPER_RESERVED_49                      for 49  // RESERVED--DO not Use
70560>>>>>>>>>Define DMPAPER_LETTER_EXTRA                     for 50  // Letter Extra 9 \275 x 12 in
70560>>>>>>>>>Define DMPAPER_LEGAL_EXTRA                      for 51  // Legal Extra 9 \275 x 15 in
70560>>>>>>>>>Define DMPAPER_TABLOID_EXTRA                    for 52  // Tabloid Extra 11.69 x 18 in
70560>>>>>>>>>Define DMPAPER_A4_EXTRA                         for 53  // A4 Extra 9.27 x 12.69 in
70560>>>>>>>>>Define DMPAPER_LETTER_TRANSVERSE                for 54  // Letter Transverse 8 \275 x 11 in
70560>>>>>>>>>Define DMPAPER_A4_TRANSVERSE                    for 55  // A4 Transverse 210 x 297 mm
70560>>>>>>>>>Define DMPAPER_LETTER_EXTRA_TRANSVERSE          for 56  // Letter Extra Transverse 9\275 x 12 in
70560>>>>>>>>>Define DMPAPER_A_PLUS                           for 57  // SuperA/SuperA/A4 227 x 356 mm
70560>>>>>>>>>Define DMPAPER_B_PLUS                           for 58  // SuperB/SuperB/A3 305 x 487 mm
70560>>>>>>>>>Define DMPAPER_LETTER_PLUS                      for 59  // Letter Plus 8.5 x 12.69 in
70560>>>>>>>>>Define DMPAPER_A4_PLUS                          for 60  // A4 Plus 210 x 330 mm
70560>>>>>>>>>Define DMPAPER_A5_TRANSVERSE                    for 61  // A5 Transverse 148 x 210 mm
70560>>>>>>>>>Define DMPAPER_B5_TRANSVERSE                    for 62  // B5 (JIS) Transverse 182 x 257 mm
70560>>>>>>>>>Define DMPAPER_A3_EXTRA                         for 63  // A3 Extra 322 x 445 mm
70560>>>>>>>>>Define DMPAPER_A5_EXTRA                         for 64  // A5 Extra 174 x 235 mm
70560>>>>>>>>>Define DMPAPER_B5_EXTRA                         for 65  // B5 (ISO) Extra 201 x 276 mm
70560>>>>>>>>>Define DMPAPER_A2                               for 66  // A2 420 x 594 mm
70560>>>>>>>>>Define DMPAPER_A3_TRANSVERSE                    for 67  // A3 Transverse 297 x 420 mm
70560>>>>>>>>>Define DMPAPER_A3_EXTRA_TRANSVERSE              for 68  // A3 Extra Transverse 322 x 445 mm
70560>>>>>>>>>Define DMPAPER_DBL_JAPANESE_POSTCARD            for 69  // Japanese Double Postcard 200 x 148 mm
70560>>>>>>>>>Define DMPAPER_A6                               for 70  // A6 105 x 148 mm
70560>>>>>>>>>Define DMPAPER_JENV_KAKU2                       for 71  // Japanese Envelope Kaku #2
70560>>>>>>>>>Define DMPAPER_JENV_KAKU3                       for 72  // Japanese Envelope Kaku #3
70560>>>>>>>>>Define DMPAPER_JENV_CHOU3                       for 73  // Japanese Envelope Chou #3
70560>>>>>>>>>Define DMPAPER_JENV_CHOU4                       for 74  // Japanese Envelope Chou #4
70560>>>>>>>>>Define DMPAPER_LETTER_ROTATED                   for 75  // Letter Rotated 11 x 8 1/2 11 in
70560>>>>>>>>>Define DMPAPER_A3_ROTATED                       for 76  // A3 Rotated 420 x 297 mm
70560>>>>>>>>>Define DMPAPER_A4_ROTATED                       for 77  // A4 Rotated 297 x 210 mm
70560>>>>>>>>>Define DMPAPER_A5_ROTATED                       for 78  // A5 Rotated 210 x 148 mm
70560>>>>>>>>>Define DMPAPER_B4_JIS_ROTATED                   for 79  // B4 (JIS) Rotated 364 x 257 mm
70560>>>>>>>>>Define DMPAPER_B5_JIS_ROTATED                   for 80  // B5 (JIS) Rotated 257 x 182 mm
70560>>>>>>>>>Define DMPAPER_JAPANESE_POSTCARD_ROTATED        for 81  // Japanese Postcard Rotated 148 x 100 mm
70560>>>>>>>>>Define DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED    for 82  // Double Japanese Postcard Rotated 148 x 200 mm
70560>>>>>>>>>Define DMPAPER_A6_ROTATED                       for 83  // A6 Rotated 148 x 105 mm
70560>>>>>>>>>Define DMPAPER_JENV_KAKU2_ROTATED               for 84  // Japanese Envelope Kaku #2 Rotated
70560>>>>>>>>>Define DMPAPER_JENV_KAKU3_ROTATED               for 85  // Japanese Envelope Kaku #3 Rotated
70560>>>>>>>>>Define DMPAPER_JENV_CHOU3_ROTATED               for 86  // Japanese Envelope Chou #3 Rotated
70560>>>>>>>>>Define DMPAPER_JENV_CHOU4_ROTATED               for 87  // Japanese Envelope Chou #4 Rotated
70560>>>>>>>>>Define DMPAPER_B6_JIS                           for 88  // B6 (JIS) 128 x 182 mm
70560>>>>>>>>>Define DMPAPER_B6_JIS_ROTATED                   for 89  // B6 (JIS) Rotated 182 x 128 mm
70560>>>>>>>>>Define DMPAPER_12X11                            for 90  // 12 x 11 in
70560>>>>>>>>>Define DMPAPER_JENV_YOU4                        for 91  // Japanese Envelope You #4
70560>>>>>>>>>Define DMPAPER_JENV_YOU4_ROTATED                for 92  // Japanese Envelope You #4 Rotated
70560>>>>>>>>>Define DMPAPER_P16K                             for 93  // PRC 16K 146 x 215 mm
70560>>>>>>>>>Define DMPAPER_P32K                             for 94  // PRC 32K 97 x 151 mm
70560>>>>>>>>>Define DMPAPER_P32KBIG                          for 95  // PRC 32K(Big) 97 x 151 mm
70560>>>>>>>>>Define DMPAPER_PENV_1                           for 96  // PRC Envelope #1 102 x 165 mm
70560>>>>>>>>>Define DMPAPER_PENV_2                           for 97  // PRC Envelope #2 102 x 176 mm
70560>>>>>>>>>Define DMPAPER_PENV_3                           for 98  // PRC Envelope #3 125 x 176 mm
70560>>>>>>>>>Define DMPAPER_PENV_4                           for 99  // PRC Envelope #4 110 x 208 mm
70560>>>>>>>>>Define DMPAPER_PENV_5                           for 100 // PRC Envelope #5 110 x 220 mm
70560>>>>>>>>>Define DMPAPER_PENV_6                           for 101 // PRC Envelope #6 120 x 230 mm
70560>>>>>>>>>Define DMPAPER_PENV_7                           for 102 // PRC Envelope #7 160 x 230 mm
70560>>>>>>>>>Define DMPAPER_PENV_8                           for 103 // PRC Envelope #8 120 x 309 mm
70560>>>>>>>>>Define DMPAPER_PENV_9                           for 104 // PRC Envelope #9 229 x 324 mm
70560>>>>>>>>>Define DMPAPER_PENV_10                          for 105 // PRC Envelope #10 324 x 458 mm
70560>>>>>>>>>Define DMPAPER_P16K_ROTATED                     for 106 // PRC 16K Rotated
70560>>>>>>>>>Define DMPAPER_P32K_ROTATED                     for 107 // PRC 32K Rotated
70560>>>>>>>>>Define DMPAPER_P32KBIG_ROTATED                  for 108 // PRC 32K(Big) Rotated
70560>>>>>>>>>Define DMPAPER_PENV_1_ROTATED                   for 109 // PRC Envelope #1 Rotated 165 x 102 mm
70560>>>>>>>>>Define DMPAPER_PENV_2_ROTATED                   for 110 // PRC Envelope #2 Rotated 176 x 102 mm
70560>>>>>>>>>Define DMPAPER_PENV_3_ROTATED                   for 111 // PRC Envelope #3 Rotated 176 x 125 mm
70560>>>>>>>>>Define DMPAPER_PENV_4_ROTATED                   for 112 // PRC Envelope #4 Rotated 208 x 110 mm
70560>>>>>>>>>Define DMPAPER_PENV_5_ROTATED                   for 113 // PRC Envelope #5 Rotated 220 x 110 mm
70560>>>>>>>>>Define DMPAPER_PENV_6_ROTATED                   for 114 // PRC Envelope #6 Rotated 230 x 120 mm
70560>>>>>>>>>Define DMPAPER_PENV_7_ROTATED                   for 115 // PRC Envelope #7 Rotated 230 x 160 mm
70560>>>>>>>>>Define DMPAPER_PENV_8_ROTATED                   for 116 // PRC Envelope #8 Rotated 309 x 120 mm
70560>>>>>>>>>Define DMPAPER_PENV_9_ROTATED                   for 117 // PRC Envelope #9 Rotated 324 x 229 mm
70560>>>>>>>>>Define DMPAPER_PENV_10_ROTATED                  for 118 // PRC Envelope #10 Rotated 458 x 324 mm
70560>>>>>>>>>Define DMPAPER_FIRST                            for DMPAPER_LETTER
70560>>>>>>>>>Define DMPAPER_LAST                             for DMPAPER_PENV_10_ROTATED
70560>>>>>>>>>Define DMPAPER_USER                             for 256
70560>>>>>>>>>
70560>>>>>>>>>// bin selections
70560>>>>>>>>>Define DMBIN_UPPER         for 1
70560>>>>>>>>>Define DMBIN_ONLYONE       for 1
70560>>>>>>>>>Define DMBIN_LOWER         for 2
70560>>>>>>>>>Define DMBIN_MIDDLE        for 3
70560>>>>>>>>>Define DMBIN_MANUAL        for 4
70560>>>>>>>>>Define DMBIN_ENVELOPE      for 5
70560>>>>>>>>>Define DMBIN_ENVMANUAL     for 6
70560>>>>>>>>>Define DMBIN_AUTO          for 7
70560>>>>>>>>>Define DMBIN_TRACTOR       for 8
70560>>>>>>>>>Define DMBIN_SMALLFMT      for 9
70560>>>>>>>>>Define DMBIN_LARGEFMT      for 10
70560>>>>>>>>>Define DMBIN_LARGECAPACITY for 11
70560>>>>>>>>>Define DMBIN_CASSETTE      for 14
70560>>>>>>>>>Define DMBIN_FORMSOURCE    for 15
70560>>>>>>>>>Define DMBIN_FIRST         for DMBIN_UPPER
70560>>>>>>>>>Define DMBIN_LAST          for DMBIN_FORMSOURCE
70560>>>>>>>>>Define DMBIN_USER          for 256 // device specific bins start here
70560>>>>>>>>>
70560>>>>>>>>>// print qualities
70560>>>>>>>>>Define DMRES_DRAFT  for (-1)
70560>>>>>>>>>Define DMRES_LOW    for (-2)
70560>>>>>>>>>Define DMRES_MEDIUM for (-3)
70560>>>>>>>>>Define DMRES_HIGH   for (-4)
70560>>>>>>>>>
70560>>>>>>>>>// color enable/disable for color printers
70560>>>>>>>>>Define DMCOLOR_MONOCHROME for 1
70560>>>>>>>>>Define DMCOLOR_COLOR      for 2
70560>>>>>>>>>
70560>>>>>>>>>// duplex enable
70560>>>>>>>>>Define DMDUP_SIMPLEX    for 1
70560>>>>>>>>>Define DMDUP_VERTICAL   for 2
70560>>>>>>>>>Define DMDUP_HORIZONTAL for 3
70560>>>>>>>>>
70560>>>>>>>>>// TrueType options
70560>>>>>>>>>Define DMTT_BITMAP           for 1   // Print TT fonts as graphics
70560>>>>>>>>>Define DMTT_DOWNLOAD         for 2   // download TT fonts as soft fonts
70560>>>>>>>>>Define DMTT_SUBDEV           for 3   // substitute device fonts for TT fonts
70560>>>>>>>>>Define DMTT_DOWNLOAD_OUTLINE for 4   // download TT fonts as outline soft fonts
70560>>>>>>>>>
70560>>>>>>>>>// Collation selections
70560>>>>>>>>>Define DMCOLLATE_FALSE for 0
70560>>>>>>>>>Define DMCOLLATE_TRUE  for 1
70560>>>>>>>>>
70560>>>>>>>>>// DEVMODE dmDisplayOrientation specifiations
70560>>>>>>>>>Define DMDO_DEFAULT for 0
70560>>>>>>>>>Define DMDO_90      for 1
70560>>>>>>>>>Define DMDO_180     for 2
70560>>>>>>>>>Define DMDO_270     for 3
70560>>>>>>>>>
70560>>>>>>>>>// DEVMODE dmDisplayFixedOutput specifiations
70560>>>>>>>>>Define DMDFO_DEFAULT for 0
70560>>>>>>>>>Define DMDFO_STRETCH for 1
70560>>>>>>>>>Define DMDFO_CENTER  for 2
70560>>>>>>>>>
70560>>>>>>>>>// DEVMODE dmDisplayFlags flags
70560>>>>>>>>>Define DM_INTERLACED           for |CI$00000002
70560>>>>>>>>>Define DMDISPLAYFLAGS_TEXTMODE for |CI$00000004
70560>>>>>>>>>
70560>>>>>>>>>// dmNup, multiple logical page per physical page options
70560>>>>>>>>>Define DMNUP_SYSTEM for 1
70560>>>>>>>>>Define DMNUP_ONEUP  for 2
70560>>>>>>>>>
70560>>>>>>>>>// ICM methods
70560>>>>>>>>>Define DMICMMETHOD_NONE   for 1   // ICM disabled
70560>>>>>>>>>Define DMICMMETHOD_SYSTEM for 2   // ICM handled by system
70560>>>>>>>>>Define DMICMMETHOD_DRIVER for 3   // ICM handled by driver
70560>>>>>>>>>Define DMICMMETHOD_DEVICE for 4   // ICM handled by device
70560>>>>>>>>>Define DMICMMETHOD_USER   for 256 // Device-specific methods start here
70560>>>>>>>>>
70560>>>>>>>>>// ICM Intents
70560>>>>>>>>>Define DMICM_SATURATE         for 1   // Maximize color saturation
70560>>>>>>>>>Define DMICM_CONTRAST         for 2   // Maximize color contrast
70560>>>>>>>>>Define DMICM_COLORIMETRIC     for 3   // Use specific color metric
70560>>>>>>>>>Define DMICM_ABS_COLORIMETRIC for 4   // Use specific color metric
70560>>>>>>>>>Define DMICM_USER             for 256 // Device-specific intents start here
70560>>>>>>>>>
70560>>>>>>>>>// Media types
70560>>>>>>>>>Define DMMEDIA_STANDARD     for 1   // Standard paper
70560>>>>>>>>>Define DMMEDIA_TRANSPARENCY for 2   // Transparency
70560>>>>>>>>>Define DMMEDIA_GLOSSY       for 3   // Glossy paper
70560>>>>>>>>>Define DMMEDIA_USER         for 256 // Device-specific media start here
70560>>>>>>>>>
70560>>>>>>>>>// Dither types
70560>>>>>>>>>Define DMDITHER_NONE           for 1   // No dithering
70560>>>>>>>>>Define DMDITHER_COARSE         for 2   // Dither with a coarse brush
70560>>>>>>>>>Define DMDITHER_FINE           for 3   // Dither with a fine brush
70560>>>>>>>>>Define DMDITHER_LINEART        for 4   // LineArt dithering
70560>>>>>>>>>Define DMDITHER_ERRORDIFFUSION for 5   // LineArt dithering
70560>>>>>>>>>Define DMDITHER_RESERVED6      for 6   // LineArt dithering
70560>>>>>>>>>Define DMDITHER_RESERVED7      for 7   // LineArt dithering
70560>>>>>>>>>Define DMDITHER_RESERVED8      for 8   // LineArt dithering
70560>>>>>>>>>Define DMDITHER_RESERVED9      for 9   // LineArt dithering
70560>>>>>>>>>Define DMDITHER_GRAYSCALE      for 10  // Device does grayscaling
70560>>>>>>>>>Define DMDITHER_USER           for 256 // Device-specific dithers start here
70560>>>>>>>>>
70560>>>>>>>>>Define CCHDEVICENAME for 32  // size of a device name String
70560>>>>>>>>>Define CCHFORMNAME   for 32  // size of a form name String
70560>>>>>>>>>
70560>>>>>>>>>Define GMEM_VALID_FLAGS    for |CI$7F72
70560>>>>>>>>>Define GMEM_INVALID_HANDLE for |CI$8000
70560>>>>>>>>>Define GMEM_DISCARDED      for |CI$4000
70560>>>>>>>>>Define GMEM_LOCKCOUNT      for |CI$00FF
70560>>>>>>>>>
70560>>>>>>>>>Define GHND       for (GMEM_MOVEABLE ior GMEM_ZEROINIT)
70560>>>>>>>>>Define GPTR       for (GMEM_FIXED ior GMEM_ZEROINIT)
70560>>>>>>>>>
70560>>>>>>>>>// Common HRESULT values
70560>>>>>>>>>Define S_OK           for |CI$00000000 // Operation successful
70560>>>>>>>>>Define E_ABORT        for |CI$80004004 // Operation aborted
70560>>>>>>>>>Define E_ACCESSDENIED for |CI$80070005 // General access denied error
70560>>>>>>>>>Define E_FAIL         for |CI$80004005 // Unspecified failure
70560>>>>>>>>>Define E_HANDLE       for |CI$80070006 // Handle that is not valid
70560>>>>>>>>>Define E_INVALIDARG   for |CI$80070057 // One or more arguments are not valid
70560>>>>>>>>>Define E_NOINTERFACE  for |CI$80004002 // No such interface supported
70560>>>>>>>>>Define E_NOTIMPL      for |CI$80004001 // not implemented
70560>>>>>>>>>Define E_OUTOFMEMORY  for |CI$8007000E // Failed to allocate necessary memory
70560>>>>>>>>>Define E_POINTER      for |CI$80004003 // Pointer that is not valid
70560>>>>>>>>>Define E_UNEXPECTED   for |CI$8000FFFF // Unexpected failure
70560>>>>>>>>>
70560>>>>>>>>>External_Function GlobalAlloc "GlobalAlloc" kernel32.dll ;    Integer uFlags ;    Integer dwBytes ;    Returns Handle
70561>>>>>>>>>
70561>>>>>>>>>External_Function GlobalDiscard "GlobalDiscard" kernel32.dll ;    Handle hMem ;    Returns Handle
70562>>>>>>>>>
70562>>>>>>>>>External_Function GlobalFree "GlobalFree" kernel32.dll ;    Handle hMem ;    Returns Handle
70563>>>>>>>>>
70563>>>>>>>>>External_Function GlobalHandle "GlobalHandle" kernel32.dll ;    Pointer pMem ;    Returns Handle
70564>>>>>>>>>
70564>>>>>>>>>External_Function GlobalLock "GlobalLock" kernel32.dll ;    Handle hMem ;    Returns Pointer
70565>>>>>>>>>
70565>>>>>>>>>External_Function GlobalReAlloc "GlobalReAlloc" kernel32.dll ;    Handle hMem ;    Integer dwBytes ;    Integer uFlags ;    Returns Handle
70566>>>>>>>>>
70566>>>>>>>>>External_Function GlobalSize "GlobalSize" kernel32.dll ;    Handle hMem ;    Returns Integer
70567>>>>>>>>>
70567>>>>>>>>>External_Function GlobalUnlock "GlobalUnlock" kernel32.dll ;    Handle hMem ;    Returns Boolean
70568>>>>>>>>>
70568>>>>>>>>>External_Function PrintDlgEx "PrintDlgExA" comdlg32.dll ;    Pointer lppd ;    Returns Handle
70569>>>>>>>>>
70569>>>>>>>>>Struct PRINTDLGEX
70569>>>>>>>>>    UInteger lStructSize            // size of structure in bytes
70569>>>>>>>>>    Handle  hwndOwner               // caller's window handle
70569>>>>>>>>>    Handle  hDevMode                // handle to DevMode
70569>>>>>>>>>    Handle  hDevNames               // handle to DevNames
70569>>>>>>>>>    Handle  hDC                     // printer DC/IC or NULL
70569>>>>>>>>>    UInteger Flags                  // PD_ flags
70569>>>>>>>>>    UInteger Flags2                 // reserved
70569>>>>>>>>>    UInteger ExclusionFlags         // items to exclude from driver pages
70569>>>>>>>>>    UInteger nPageRanges            // number of page ranges
70569>>>>>>>>>    UInteger nMaxPageRanges         // max number of page ranges
70569>>>>>>>>>    Pointer lpPageRanges            // array of page ranges
70569>>>>>>>>>    UInteger nMinPage               // min page number
70569>>>>>>>>>    UInteger nMaxPage               // max page number
70569>>>>>>>>>    UInteger nCopies                // number of copies
70569>>>>>>>>>    Handle  hInstance               // instance handle
70569>>>>>>>>>    Pointer lpPrintTemplateName     // template name for app specific area
70569>>>>>>>>>    Pointer lpCallback              // app callback interface
70569>>>>>>>>>    UInteger nPropertyPages         // number of app property pages in lphPropertyPages
70569>>>>>>>>>    Pointer lphPropertyPages        // array of app property page handles
70569>>>>>>>>>    UInteger nStartPage             // start page id
70569>>>>>>>>>    UInteger dwResultAction         // result action if S_OK is returned
70569>>>>>>>>>End_Struct // PRINTDLGEX
70569>>>>>>>>>
70569>>>>>>>>>Struct DEVMODE
70569>>>>>>>>>    UChar[CCHDEVICENAME] dmDeviceName
70569>>>>>>>>>    Short               dmSpecVersion
70569>>>>>>>>>    Short               dmDriverVersion
70569>>>>>>>>>    Short               dmSize
70569>>>>>>>>>    Short               dmDriverExtra
70569>>>>>>>>>    Integer             dmFields
70569>>>>>>>>>    Short               dmOrientation
70569>>>>>>>>>    Short               dmPaperSize
70569>>>>>>>>>    Short               dmPaperLength
70569>>>>>>>>>    Short               dmPaperWidth
70569>>>>>>>>>    Short               dmScale
70569>>>>>>>>>    Short               dmCopies
70569>>>>>>>>>    Short               dmDefaultSource
70569>>>>>>>>>    Short               dmPrintQuality
70569>>>>>>>>>    Short               dmColor
70569>>>>>>>>>    Short               dmDuplex
70569>>>>>>>>>    Short               dmYResolution
70569>>>>>>>>>    Short               dmTTOption
70569>>>>>>>>>    Short               dmCollate
70569>>>>>>>>>    UChar[CCHFORMNAME]  dmFormName
70569>>>>>>>>>    Short               dmLogPixels // Not in use for printers
70569>>>>>>>>>    UInteger            dmBitsPerPel // Not in use for printers
70569>>>>>>>>>    UInteger            dmPelsWidth // Not in use for printers
70569>>>>>>>>>    UInteger            dmPelsHeight // Not in use for printers
70569>>>>>>>>>    UInteger            dmNup
70569>>>>>>>>>    UInteger            dmDisplayFrequency // Not in use for printers
70569>>>>>>>>>    UInteger            dmICMMethod
70569>>>>>>>>>    UInteger            dmICMIntent
70569>>>>>>>>>    UInteger            dmMediaType
70569>>>>>>>>>    UInteger            dmDitherType
70569>>>>>>>>>    UInteger            dmReserved1 // Not used; must be zero
70569>>>>>>>>>    UInteger            dmReserved2 // Not used; must be zero
70569>>>>>>>>>    UInteger            dmPanningWidth // This member must be zero
70569>>>>>>>>>    UInteger            dmPanningHeight // This member must be zero
70569>>>>>>>>>End_Struct // DEVMODE
70569>>>>>>>>>
70569>>>>>>>>>Struct DEVNAMES
70569>>>>>>>>>    Short   wDriverOffset
70569>>>>>>>>>    Short   wDeviceOffset
70569>>>>>>>>>    Short   wOutputOffset
70569>>>>>>>>>    Short   wDefault
70569>>>>>>>>>End_Struct // DEVNAMES
70569>>>>>>>>>
70569>>>>>>>>>Struct PRINTPAGERANGE
70569>>>>>>>>>    Integer nFromPage
70569>>>>>>>>>    Integer nToPage
70569>>>>>>>>>End_Struct // PRINTPAGERANGE
70569>>>>>>>Use GlobalFunctionsProcedures.pkg
70569>>>>>>>Use tPrinter_Info_2.pkg
Including file: tPrinter_Info_2.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\tPrinter_Info_2.pkg)
70569>>>>>>>>>Struct tPrinter_Info_2
70569>>>>>>>>>    Address pServerName          
70569>>>>>>>>>    Address pPrinterName         
70569>>>>>>>>>    Address pShareName           
70569>>>>>>>>>    Address pPortName            
70569>>>>>>>>>    Address pDriverName          
70569>>>>>>>>>    Address pComment             
70569>>>>>>>>>    Address pLocation            
70569>>>>>>>>>    Address pDevMode             
70569>>>>>>>>>    Address pSepFile             
70569>>>>>>>>>    Address pPrintProcessor      
70569>>>>>>>>>    Address pDatatype            
70569>>>>>>>>>    Address pParameters          
70569>>>>>>>>>    Address pSecurityDescriptor  
70569>>>>>>>>>    UInteger Attributes       
70569>>>>>>>>>    UInteger Priority         
70569>>>>>>>>>    UInteger DefaultPriority  
70569>>>>>>>>>    UInteger StartTime        
70569>>>>>>>>>    UInteger UntilTime        
70569>>>>>>>>>    UInteger Status           
70569>>>>>>>>>    UInteger cJobs            
70569>>>>>>>>>    UInteger AveragePPM       
70569>>>>>>>>>End_Struct
70569>>>>>>>
70569>>>>>>>External_Function DR_WinAPI_OpenPrinter "OpenPrinterA" WinSpool.Drv Pointer pPrinterName Pointer hPrinter Pointer pDefault Returns Integer
70570>>>>>>>External_Function DR_WinAPI_ClosePrinter "ClosePrinter" WinSpool.Drv Pointer hPrinter Returns Integer
70571>>>>>>>External_Function DR_WinAPI_GetPrinter "GetPrinterA" WinSpool.Drv Pointer hPrinter Integer Level Pointer pPrinter Integer cbBuf Pointer pcbNeeded Returns Integer
70572>>>>>>>
70572>>>>>>>Class cPrintDialog is a cObject
70573>>>>>>>    Procedure Construct_Object
70575>>>>>>>        Forward Send Construct_Object
70577>>>>>>>
70577>>>>>>>        // Private properties
70577>>>>>>>        Property Handle phDevMode
70578>>>>>>>        Property Handle phDevNames
70579>>>>>>>        Property Handle phPrintDlg // Address of print
70580>>>>>>>        Property Handle phPageRanges
70581>>>>>>>        Property Boolean pbDefaultPrinterSelected
70582>>>>>>>
70582>>>>>>>        // DEVMODE properties
70582>>>>>>>        Property Short peOrientation DMORIENT_PORTRAIT
70583>>>>>>>        Property Short pePaperSize
70584>>>>>>>        Property Short piPaperLength
70585>>>>>>>        Property Short piPaperWidth
70586>>>>>>>        Property Short piScale
70587>>>>>>>        Property Short piCopies 1
70588>>>>>>>        Property Short peDefaultSource
70589>>>>>>>        Property Short pePrintQuality
70590>>>>>>>        Property Short peColor
70591>>>>>>>        Property Short peDuplex
70592>>>>>>>        Property Integer piYResolution
70593>>>>>>>        Property Short peTTOption
70594>>>>>>>        Property Short peCollate
70595>>>>>>>        Property String psFormName
70596>>>>>>>        Property UInteger peNup
70597>>>>>>>        Property UInteger peICMMethod
70598>>>>>>>        Property UInteger peICMIntent
70599>>>>>>>        Property UInteger peMediaType
70600>>>>>>>        Property UInteger peDitherType
70601>>>>>>>
70601>>>>>>>        // DEVNAMES properties
70601>>>>>>>        Property String psDriverName
70602>>>>>>>        Property String psDeviceName
70603>>>>>>>        Property String psOutputName
70604>>>>>>>
70604>>>>>>>        // PRINTDLGEX properties
70604>>>>>>>        Property UInteger piMaxPageRanges 10 // Normally this should be enough
70605>>>>>>>        Property PRINTPAGERANGE[] pPageRanges
70606>>>>>>>        Property Handle phDC // Handle to the device context
70607>>>>>>>        Property UInteger piFlags (PD_NOPAGENUMS ior PD_NOSELECTION ior PD_USEDEVMODECOPIES)
70608>>>>>>>        Property UInteger piMinPage 1
70609>>>>>>>        Property UInteger piMaxPage 999999
70610>>>>>>>    End_Procedure
70611>>>>>>>
70611>>>>>>>    // Convert a string to a fixed length char array
70611>>>>>>>    Function StringToCharArray String sValue Integer iLength Returns UChar[]
70613>>>>>>>        Address aChar
70613>>>>>>>        UChar[iLength] uChars
70614>>>>>>>
70614>>>>>>>        Move (AddressOf (uChars)) to aChar
70615>>>>>>>        Move sValue to aChar
70616>>>>>>>
70616>>>>>>>        Function_Return uChars
70617>>>>>>>    End_Function
70618>>>>>>>
70618>>>>>>>    Procedure FreeAllocatedGlobalMemory
70620>>>>>>>        Handle hDevMode hDevNames hPrintDlg hPageRanges
70620>>>>>>>        Integer iResult
70620>>>>>>>
70620>>>>>>>        Get phDevMode to hDevMode
70621>>>>>>>        If (hDevMode <> 0) Begin
70623>>>>>>>            Move (GlobalFree (hDevMode)) to iResult
70624>>>>>>>            Set phDevMode to 0
70625>>>>>>>        End
70625>>>>>>>>
70625>>>>>>>        
70625>>>>>>>        Get phDevNames to hDevNames
70626>>>>>>>        If (hDevNames <> 0) Begin
70628>>>>>>>            Move (GlobalFree (hDevNames)) to iResult
70629>>>>>>>            Set phDevNames to 0
70630>>>>>>>        End
70630>>>>>>>>
70630>>>>>>>
70630>>>>>>>        Get phPrintDlg to hPrintDlg
70631>>>>>>>        If (hPrintDlg <> 0) Begin
70633>>>>>>>            Move (GlobalFree (hPrintDlg)) to iResult
70634>>>>>>>            Set phPrintDlg to 0
70635>>>>>>>        End
70635>>>>>>>>
70635>>>>>>>        
70635>>>>>>>        Get phPageRanges to hPageRanges
70636>>>>>>>        If (hPageRanges <> 0) Begin
70638>>>>>>>            Move (GlobalFree (hPageRanges)) to iResult
70639>>>>>>>            Set phPageRanges to 0
70640>>>>>>>        End
70640>>>>>>>>
70640>>>>>>>    End_Procedure
70641>>>>>>>
70641>>>>>>>    // While destroying the object release the memory globally allocated
70641>>>>>>>    Procedure Destroy_Object
70643>>>>>>>        Send FreeAllocatedGlobalMemory
70644>>>>>>>        
70644>>>>>>>        Forward Send Destroy_Object
70646>>>>>>>    End_Procedure
70647>>>>>>>
70647>>>>>>>    // Returns the window handle
70647>>>>>>>    Function OwnerHandle Returns Handle
70649>>>>>>>        Handle hoFocus hWnd
70649>>>>>>>
70649>>>>>>>        Get Focus of Desktop to hoFocus
70650>>>>>>>        If (hoFocus <> 0) Begin
70652>>>>>>>            Move (gOwnerWindowHandle (hoFocus)) to hWnd
70653>>>>>>>        End
70653>>>>>>>>
70653>>>>>>>        
70653>>>>>>>        If (hWnd = 0) Begin
70655>>>>>>>            Move (GetDesktopWindow()) to hWnd
70656>>>>>>>        End
70656>>>>>>>>
70656>>>>>>>
70656>>>>>>>        Function_Return hWnd
70657>>>>>>>    End_Function
70658>>>>>>>
70658>>>>>>>    // Initializes the DEVMODE structure and returns handle
70658>>>>>>>    Function InitDevMode Returns Handle
70660>>>>>>>        Pointer pDevmode
70660>>>>>>>        Handle hDevmode
70660>>>>>>>        Integer iResult
70660>>>>>>>        DEVMODE dm
70660>>>>>>>        DEVMODE dm
70660>>>>>>>        String sDeviceName sFormName
70660>>>>>>>
70660>>>>>>>        // Free previously allocated memory
70660>>>>>>>        Get phDevMode to hDevmode
70661>>>>>>>        If (hDevmode <> 0) Begin
70663>>>>>>>            Move (GlobalFree (hDevmode)) to iResult
70664>>>>>>>            Set phDevMode to 0
70665>>>>>>>        End
70665>>>>>>>>
70665>>>>>>>
70665>>>>>>>        // Allocate memory for DEVMODE structure
70665>>>>>>>        Move (GlobalAlloc (GMEM_MOVEABLE, SizeOfType (DEVMODE))) to hDevmode
70666>>>>>>>        If (hDevmode = 0) Begin
70668>>>>>>>            Function_Return 0
70669>>>>>>>        End
70669>>>>>>>>
70669>>>>>>>
70669>>>>>>>        // Lock allocated memory
70669>>>>>>>        Move (GlobalLock (hDevmode)) to pDevmode
70670>>>>>>>        If (pDevmode = 0) Begin
70672>>>>>>>            Move (GlobalFree (hDevmode)) to iResult
70673>>>>>>>            Function_Return 0
70674>>>>>>>        End
70674>>>>>>>>
70674>>>>>>>
70674>>>>>>>        Get psDeviceName to sDeviceName
70675>>>>>>>        Get StringToCharArray sDeviceName CCHDEVICENAME to dm.dmDeviceName
70676>>>>>>>        Move DM_SPECVERSION to dm.dmSpecVersion
70677>>>>>>>        Move (SizeOfType (DEVMODE)) to dm.dmSize
70678>>>>>>>
70678>>>>>>>        Get peOrientation to dm.dmOrientation
70679>>>>>>>        If (dm.dmOrientation <> 0) Begin
70681>>>>>>>            Move (dm.dmFields ior DM_ORIENTATION) to dm.dmFields
70682>>>>>>>        End
70682>>>>>>>>
70682>>>>>>>
70682>>>>>>>        Get pePaperSize to dm.dmPaperSize
70683>>>>>>>        If (dm.dmPaperSize <> 0) Begin
70685>>>>>>>            Move (dm.dmFields ior DM_PAPERSIZE) to dm.dmFields
70686>>>>>>>        End
70686>>>>>>>>
70686>>>>>>>
70686>>>>>>>        Get piPaperLength to dm.dmPaperLength
70687>>>>>>>        If (dm.dmPaperLength <> 0) Begin
70689>>>>>>>            Move (dm.dmFields ior DM_PAPERLENGTH) to dm.dmFields
70690>>>>>>>        End
70690>>>>>>>>
70690>>>>>>>
70690>>>>>>>        Get piPaperWidth to dm.dmPaperWidth
70691>>>>>>>        If (dm.dmPaperWidth <> 0) Begin
70693>>>>>>>            Move (dm.dmFields ior DM_PAPERWIDTH) to dm.dmFields
70694>>>>>>>        End
70694>>>>>>>>
70694>>>>>>>
70694>>>>>>>        Get piScale to dm.dmScale
70695>>>>>>>        If (dm.dmScale <> 0) Begin
70697>>>>>>>            Move (dm.dmFields ior DM_SCALE) to dm.dmFields
70698>>>>>>>        End
70698>>>>>>>>
70698>>>>>>>
70698>>>>>>>        Get piCopies to dm.dmCopies
70699>>>>>>>        If (dm.dmCopies <> 0) Begin
70701>>>>>>>            Move (dm.dmFields ior DM_COPIES) to dm.dmFields
70702>>>>>>>        End
70702>>>>>>>>
70702>>>>>>>
70702>>>>>>>        Get peDefaultSource to dm.dmDefaultSource
70703>>>>>>>        If (dm.dmDefaultSource <> 0) Begin
70705>>>>>>>            Move (dm.dmFields ior DM_DEFAULTSOURCE) to dm.dmFields
70706>>>>>>>        End
70706>>>>>>>>
70706>>>>>>>
70706>>>>>>>        Get pePrintQuality to dm.dmPrintQuality
70707>>>>>>>        If (dm.dmPrintQuality <> 0)  Begin
70709>>>>>>>            Move (dm.dmFields ior DM_PRINTQUALITY) to dm.dmFields
70710>>>>>>>        End
70710>>>>>>>>
70710>>>>>>>
70710>>>>>>>        Get peColor to dm.dmColor
70711>>>>>>>        If (dm.dmColor <> 0) Begin
70713>>>>>>>            Move (dm.dmFields ior DM_COLOR) to dm.dmFields
70714>>>>>>>        End
70714>>>>>>>>
70714>>>>>>>
70714>>>>>>>        Get peDuplex to dm.dmDuplex
70715>>>>>>>        If (dm.dmDuplex <> 0) Begin
70717>>>>>>>            Move (dm.dmFields ior DM_DUPLEX) to dm.dmFields
70718>>>>>>>        End
70718>>>>>>>>
70718>>>>>>>
70718>>>>>>>        Get piYResolution to dm.dmYResolution
70719>>>>>>>        If (dm.dmYResolution <> 0) Begin
70721>>>>>>>            Move (dm.dmFields ior DM_YRESOLUTION) to dm.dmFields
70722>>>>>>>        End
70722>>>>>>>>
70722>>>>>>>
70722>>>>>>>        Get peTTOption to dm.dmTTOption
70723>>>>>>>        If (dm.dmTTOption <> 0) Begin
70725>>>>>>>            Move (dm.dmFields ior DM_TTOPTION) to dm.dmFields
70726>>>>>>>        End
70726>>>>>>>>
70726>>>>>>>
70726>>>>>>>        Get psFormName to sFormName
70727>>>>>>>        Get StringToCharArray sFormName CCHFORMNAME to dm.dmFormName
70728>>>>>>>        If (sFormName <> "") Begin
70730>>>>>>>            Move (dm.dmFields ior DM_FORMNAME) to dm.dmFields
70731>>>>>>>        End
70731>>>>>>>>
70731>>>>>>>
70731>>>>>>>        Get peCollate to dm.dmCollate
70732>>>>>>>        If (dm.dmCollate <> 0) Begin
70734>>>>>>>            Move (dm.dmFields ior DM_COLLATE) to dm.dmFields
70735>>>>>>>        End
70735>>>>>>>>
70735>>>>>>>
70735>>>>>>>        Get peNup to dm.dmNup
70736>>>>>>>        If (dm.dmNup <> 0) Begin
70738>>>>>>>            Move (dm.dmFields ior DM_NUP) to dm.dmFields
70739>>>>>>>        End
70739>>>>>>>>
70739>>>>>>>
70739>>>>>>>        Get peICMMethod to dm.dmICMMethod
70740>>>>>>>        If (dm.dmICMMethod <> 0) Begin
70742>>>>>>>            Move (dm.dmFields ior DM_ICMMETHOD) to dm.dmFields
70743>>>>>>>        End
70743>>>>>>>>
70743>>>>>>>
70743>>>>>>>        Get peICMIntent to dm.dmICMIntent
70744>>>>>>>        If (dm.dmICMIntent <> 0) Begin
70746>>>>>>>            Move (dm.dmFields ior DM_ICMINTENT) to dm.dmFields
70747>>>>>>>        End
70747>>>>>>>>
70747>>>>>>>
70747>>>>>>>        Get peMediaType to dm.dmMediaType
70748>>>>>>>        If (dm.dmMediaType <> 0) Begin
70750>>>>>>>            Move (dm.dmFields ior DM_MEDIATYPE) to dm.dmFields
70751>>>>>>>        End
70751>>>>>>>>
70751>>>>>>>
70751>>>>>>>        Get peDitherType to dm.dmDitherType
70752>>>>>>>        If (dm.dmDitherType <> 0) Begin
70754>>>>>>>            Move (dm.dmFields ior DM_DITHERTYPE) to dm.dmFields
70755>>>>>>>        End
70755>>>>>>>>
70755>>>>>>>
70755>>>>>>>        // Copy the DEVMODE structure and unlock memory
70755>>>>>>>        Move (CopyMemory (pDevmode, AddressOf (dm), SizeOfType (DEVMODE))) to iResult
70756>>>>>>>        Move (GlobalUnlock (hDevmode)) to iResult
70757>>>>>>>        
70757>>>>>>>        // Store the memory handle
70757>>>>>>>        Set phDevMode to hDevmode
70758>>>>>>>
70758>>>>>>>        Function_Return hDevmode
70759>>>>>>>    End_Function
70760>>>>>>>
70760>>>>>>>    // Converts a fixed length char array to a string
70760>>>>>>>    Function CharArrayToString UChar[] uChars Returns String
70762>>>>>>>        Integer iChars iChar
70762>>>>>>>        String sValue
70762>>>>>>>
70762>>>>>>>        Move (SizeOfArray (uChars)) to iChars
70763>>>>>>>        Decrement iChars
70764>>>>>>>        For iChar from 0 to iChars
70770>>>>>>>>
70770>>>>>>>            Move (sValue + Character (uChars[iChar])) to sValue
70771>>>>>>>        Loop
70772>>>>>>>>
70772>>>>>>>
70772>>>>>>>        Function_Return sValue
70773>>>>>>>    End_Function 
70774>>>>>>>
70774>>>>>>>    // Pass on a devmode structure
70774>>>>>>>    Procedure ReadDevModeData DEVMODE dm
70776>>>>>>>        String sDeviceName
70776>>>>>>>
70776>>>>>>>        Get CharArrayToString dm.dmDeviceName to sDeviceName
70777>>>>>>>        Set psDeviceName to sDeviceName
70778>>>>>>>
70778>>>>>>>        If (dm.dmFields iand DM_ORIENTATION) Begin
70780>>>>>>>            Set peOrientation to dm.dmOrientation
70781>>>>>>>        End
70781>>>>>>>>
70781>>>>>>>
70781>>>>>>>        If (dm.dmFields iand DM_PAPERSIZE) Begin
70783>>>>>>>            Set pePaperSize to dm.dmPaperSize
70784>>>>>>>        End
70784>>>>>>>>
70784>>>>>>>
70784>>>>>>>        If (dm.dmFields iand DM_PAPERLENGTH) Begin
70786>>>>>>>            Set piPaperLength to dm.dmPaperLength
70787>>>>>>>        End
70787>>>>>>>>
70787>>>>>>>
70787>>>>>>>        If (dm.dmFields iand DM_PAPERWIDTH) Begin
70789>>>>>>>            Set piPaperWidth to dm.dmPaperWidth
70790>>>>>>>        End
70790>>>>>>>>
70790>>>>>>>
70790>>>>>>>        If (dm.dmFields iand DM_SCALE) Begin
70792>>>>>>>            Set piScale to dm.dmScale
70793>>>>>>>        End
70793>>>>>>>>
70793>>>>>>>
70793>>>>>>>        If (dm.dmFields iand DM_COPIES) Begin
70795>>>>>>>            Set piCopies to dm.dmCopies
70796>>>>>>>        End
70796>>>>>>>>
70796>>>>>>>
70796>>>>>>>        If (dm.dmFields iand DM_DEFAULTSOURCE) Begin
70798>>>>>>>            Set peDefaultSource to dm.dmDefaultSource
70799>>>>>>>        End
70799>>>>>>>>
70799>>>>>>>
70799>>>>>>>        If (dm.dmFields iand DM_PRINTQUALITY) Begin
70801>>>>>>>            Set pePrintQuality to dm.dmPrintQuality
70802>>>>>>>        End
70802>>>>>>>>
70802>>>>>>>
70802>>>>>>>        If (dm.dmFields iand DM_COLOR) Begin
70804>>>>>>>            Set peColor to dm.dmColor
70805>>>>>>>        End
70805>>>>>>>>
70805>>>>>>>
70805>>>>>>>        If (dm.dmFields iand DM_DUPLEX) Begin
70807>>>>>>>            Set peDuplex to dm.dmDuplex
70808>>>>>>>        End
70808>>>>>>>>
70808>>>>>>>
70808>>>>>>>        If (dm.dmFields iand DM_YRESOLUTION) Begin
70810>>>>>>>            Set piYResolution to dm.dmYResolution
70811>>>>>>>        End
70811>>>>>>>>
70811>>>>>>>
70811>>>>>>>        If (dm.dmFields iand DM_TTOPTION) Begin
70813>>>>>>>            Set peTTOption to dm.dmTTOption
70814>>>>>>>        End
70814>>>>>>>>
70814>>>>>>>
70814>>>>>>>        If (dm.dmFields iand DM_COLLATE) Begin
70816>>>>>>>            Set peCollate to dm.dmCollate
70817>>>>>>>        End
70817>>>>>>>>
70817>>>>>>>
70817>>>>>>>        If (dm.dmFields iand DM_FORMNAME) Begin
70819>>>>>>>            Set psFormName to (AddressOf (dm.dmFormName))
70820>>>>>>>        End
70820>>>>>>>>
70820>>>>>>>
70820>>>>>>>        If (dm.dmFields iand DM_ICMMETHOD) Begin
70822>>>>>>>            Set peICMMethod to dm.dmICMMethod
70823>>>>>>>        End
70823>>>>>>>>
70823>>>>>>>
70823>>>>>>>        If (dm.dmFields iand DM_ICMINTENT) Begin
70825>>>>>>>            Set peICMIntent to dm.dmICMIntent
70826>>>>>>>        End
70826>>>>>>>>
70826>>>>>>>
70826>>>>>>>        If (dm.dmFields iand DM_MEDIATYPE) Begin
70828>>>>>>>            Set peMediaType to dm.dmMediaType
70829>>>>>>>        End
70829>>>>>>>>
70829>>>>>>>
70829>>>>>>>        If (dm.dmFields iand DM_DITHERTYPE) Begin
70831>>>>>>>            Set peDitherType to dm.dmDitherType
70832>>>>>>>        End
70832>>>>>>>>
70832>>>>>>>
70832>>>>>>>        If (dm.dmFields iand DM_NUP) Begin
70834>>>>>>>            Set peNup to dm.dmNup
70835>>>>>>>        End
70835>>>>>>>>
70835>>>>>>>    End_Procedure
70836>>>>>>>
70836>>>>>>>    Procedure ReadDevMode
70838>>>>>>>        Integer iResult iVoid
70838>>>>>>>        Handle hDevMode
70838>>>>>>>        Pointer pDevMode
70838>>>>>>>        DEVMODE dm
70838>>>>>>>        DEVMODE dm
70838>>>>>>>
70838>>>>>>>        Get phDevMode to hDevMode
70839>>>>>>>        If (hDevMode = 0) Begin
70841>>>>>>>            Procedure_Return
70842>>>>>>>        End
70842>>>>>>>>
70842>>>>>>>
70842>>>>>>>        // Lock allocated memory
70842>>>>>>>        Move (GlobalLock (hDevmode)) to pDevMode
70843>>>>>>>        If (pDevmode = 0) Begin
70845>>>>>>>            Procedure_Return
70846>>>>>>>        End
70846>>>>>>>>
70846>>>>>>>
70846>>>>>>>        // Copy the information from the memory pointer
70846>>>>>>>        Move (CopyMemory (AddressOf (dm), pDevMode, SizeOfType (DEVMODE))) to iVoid
70847>>>>>>>
70847>>>>>>>        // Copy the devmode data to properties of the cPrintDialog object
70847>>>>>>>        Send ReadDevModeData dm
70848>>>>>>>
70848>>>>>>>        // Unlock the memory
70848>>>>>>>        Move (GlobalUnlock (hDevMode)) to iResult
70849>>>>>>>    End_Procedure
70850>>>>>>>
70850>>>>>>>    // Initializes the DEVNAMES structure and returns handle
70850>>>>>>>    Function InitDevNames Returns Handle
70852>>>>>>>        String sDriverName sDeviceName sOutputName
70852>>>>>>>        Integer iResult iSize
70852>>>>>>>        Pointer pDevNames
70852>>>>>>>        Handle hDevNames
70852>>>>>>>        DEVNAMES dn
70852>>>>>>>        DEVNAMES dn
70852>>>>>>>
70852>>>>>>>        // Free peviously allocated memory
70852>>>>>>>        Get phDevNames to hDevNames
70853>>>>>>>        If (hDevNames) Begin
70855>>>>>>>            Move (GlobalFree (hDevNames)) to iResult
70856>>>>>>>            Set phDevNames to 0
70857>>>>>>>        End
70857>>>>>>>>
70857>>>>>>>
70857>>>>>>>        // Calculate size
70857>>>>>>>        Get psDriverName to sDriverName
70858>>>>>>>        Get psDeviceName to sDeviceName
70859>>>>>>>        Get psOutputName to sOutputName
70860>>>>>>>
70860>>>>>>>        Move (sDriverName + Character(0)) to sDriverName
70861>>>>>>>        Move (sDeviceName + Character(0)) to sDeviceName
70862>>>>>>>        Move (sOutputName + Character(0)) to sOutputName
70863>>>>>>>
70863>>>>>>>        Move (Length (sDriverName) + Length (sDeviceName) + Length (sOutputName)) to iSize
70864>>>>>>>
70864>>>>>>>        // Allocate memory for DEVNAMES structure
70864>>>>>>>        Move (GlobalAlloc (GMEM_MOVEABLE, SizeOfType (DEVNAMES) + iSize)) to hDevNames
70865>>>>>>>        If (hDevNames = 0) Begin
70867>>>>>>>            Function_Return 0
70868>>>>>>>        End
70868>>>>>>>>
70868>>>>>>>
70868>>>>>>>        // Lock allocated memory
70868>>>>>>>        Move (GlobalLock (hDevNames)) to pDevNames
70869>>>>>>>        If (pDevNames = 0) Begin
70871>>>>>>>            Move (GlobalFree (hDevNames)) to iResult
70872>>>>>>>            Function_Return 0
70873>>>>>>>        End
70873>>>>>>>>
70873>>>>>>>
70873>>>>>>>        // Copy the driver, device and output names in the extension of the struct
70873>>>>>>>        Move (SizeOfType (DEVNAMES)) to iSize
70874>>>>>>>        Move iSize to dn.wDriverOffset
70875>>>>>>>        Move (CopyMemory (pDevNames + iSize, AddressOf (sDriverName), Length (sDriverName))) to iResult
70876>>>>>>>
70876>>>>>>>        Move (iSize + Length (sDriverName)) to iSize
70877>>>>>>>        Move iSize to dn.wDeviceOffset
70878>>>>>>>        Move (CopyMemory (pDevNames + iSize, AddressOf (sDeviceName), Length (sDeviceName))) to iResult
70879>>>>>>>
70879>>>>>>>        Move (iSize + Length (sDeviceName)) to iSize
70880>>>>>>>        Move iSize to dn.wOutputOffset
70881>>>>>>>        Move (CopyMemory (pDevNames + iSize, AddressOf (sOutputName), Length (sOutputName))) to iResult
70882>>>>>>>
70882>>>>>>>        // Copy the DEVNAMES structure and unlock memory
70882>>>>>>>        Move (CopyMemory (pDevNames, AddressOf (dn), SizeOfType (DEVNAMES))) to iResult
70883>>>>>>>        Move (GlobalUnlock (hDevNames)) to iResult
70884>>>>>>>        
70884>>>>>>>        // Store the memory handle
70884>>>>>>>        Set phDevNames to hDevNames
70885>>>>>>>
70885>>>>>>>        Function_Return hDevNames
70886>>>>>>>    End_Function
70887>>>>>>>
70887>>>>>>>    Procedure ReadDevNames
70889>>>>>>>        Integer iResult iVoid
70889>>>>>>>        Handle hDevNames
70889>>>>>>>        Pointer pDevNames
70889>>>>>>>        DEVNAMES dn
70889>>>>>>>        DEVNAMES dn
70889>>>>>>>        Address aData
70889>>>>>>>
70889>>>>>>>        Get phDevNames to hDevNames
70890>>>>>>>        If (hDevNames = 0) Begin
70892>>>>>>>            Procedure_Return
70893>>>>>>>        End
70893>>>>>>>>
70893>>>>>>>
70893>>>>>>>        // Lock memory
70893>>>>>>>        Move (GlobalLock (hDevNames)) to pDevNames
70894>>>>>>>        If (pDevNames = 0) Begin
70896>>>>>>>            Procedure_Return
70897>>>>>>>        End
70897>>>>>>>>
70897>>>>>>>
70897>>>>>>>        // Copy the the devnames structure, devnames structure only contains the pointers to the names 
70897>>>>>>>        Move (CopyMemory (AddressOf (dn), pDevNames, SizeOfType (DEVNAMES))) to iVoid
70898>>>>>>>
70898>>>>>>>        // Copy the drivername from the memory pointer to the DataFlex property
70898>>>>>>>        Move (pDevNames + dn.wDriverOffset) to aData
70899>>>>>>>        Set psDriverName to aData
70900>>>>>>>
70900>>>>>>>        // Copy the devicename from the memory pointer to the DataFlex property
70900>>>>>>>        Move (pDevNames + dn.wDeviceOffset) to aData
70901>>>>>>>        Set psDeviceName to aData
70902>>>>>>>
70902>>>>>>>        // Copy the outputname from the memory pointer to the DataFlex property
70902>>>>>>>        Move (pDevNames + dn.wOutputOffset) to aData
70903>>>>>>>        Set psOutputName to aData
70904>>>>>>>
70904>>>>>>>        Set pbDefaultPrinterSelected to dn.wDefault
70905>>>>>>>
70905>>>>>>>        // Unlock memory
70905>>>>>>>        Move (GlobalUnlock (hDevNames)) to iResult
70906>>>>>>>    End_Procedure
70907>>>>>>>        
70907>>>>>>>    // Initializes the PAGERANGES structure in case the developer did not do that to avoid
70907>>>>>>>    // a 0x80070057 (Invalid Parameter) error if the flag PD_NOPAGENUMS is not set
70907>>>>>>>    Procedure InitPageRanges Integer iLastPage
70909>>>>>>>            PRINTPAGERANGE[] PageRanges
70909>>>>>>>            PRINTPAGERANGE[] PageRanges
70910>>>>>>>                
70910>>>>>>>            Get pPageRanges to PageRanges
70911>>>>>>>            If (SizeOfArray (PageRanges) = 0) Begin
70913>>>>>>>                Move 1 to PageRanges[0].nFromPage
70914>>>>>>>                Move iLastPage to PageRanges[0].nToPage
70915>>>>>>>                Set pPageRanges to PageRanges
70916>>>>>>>        End
70916>>>>>>>>
70916>>>>>>>    End_Procedure
70917>>>>>>>
70917>>>>>>>    // Shows the print dialog
70917>>>>>>>    Function PrintDialog Returns Integer
70919>>>>>>>        Handle hDevMode hDevNames hPrintDlg hResult hPageRanges
70919>>>>>>>        Integer iResult iVoid
70919>>>>>>>        UInteger iFlags
70919>>>>>>>        PRINTDLGEX pd
70919>>>>>>>        PRINTDLGEX pd
70919>>>>>>>        PRINTPAGERANGE[] PageRanges
70919>>>>>>>        PRINTPAGERANGE[] PageRanges
70920>>>>>>>
70920>>>>>>>        // Free previously allocated memory
70920>>>>>>>        Send FreeAllocatedGlobalMemory
70921>>>>>>>
70921>>>>>>>        // Allocate memory for PRINTDLGEX structure
70921>>>>>>>        Move (GlobalAlloc (GPTR, SizeOfType (PRINTDLGEX))) to hPrintDlg
70922>>>>>>>        If (hPrintDlg = 0) Begin
70924>>>>>>>            Function_Return False
70925>>>>>>>        End
70925>>>>>>>>
70925>>>>>>>
70925>>>>>>>        Get piFlags to iFlags
70926>>>>>>>
70926>>>>>>>        // Return the printer device context
70926>>>>>>>        Move (iFlags ior PD_RETURNDC) to iFlags
70927>>>>>>>        
70927>>>>>>>        // Copy the page ranges array information
70927>>>>>>>        If (not (IsFlagIn (PD_NOPAGENUMS, iFlags))) Begin
70929>>>>>>>            Get piMaxPageRanges to pd.nMaxPageRanges
70930>>>>>>>            If (pd.nMaxPageRanges <= 0) Begin
70932>>>>>>>                Move 10 to pd.nMaxPageRanges
70933>>>>>>>                Set piMaxPageRanges to 10
70934>>>>>>>            End
70934>>>>>>>>
70934>>>>>>>            Get pPageRanges to PageRanges
70935>>>>>>>            Move (SizeOfArray (PageRanges)) to pd.nPageRanges
70936>>>>>>>            If (pd.nPageRanges > 0) Begin
70938>>>>>>>                Move (GlobalAlloc (GPTR, pd.nPageRanges * SizeOfType (PRINTPAGERANGE))) to hPageRanges
70939>>>>>>>                If (hPageRanges = 0) Begin
70941>>>>>>>                    Move 0 to pd.nPageRanges
70942>>>>>>>                End
70942>>>>>>>>
70942>>>>>>>                Else Begin
70943>>>>>>>                    Move (CopyMemory (hPageRanges, AddressOf (PageRanges), pd.nPageRanges * SizeOfType (PRINTPAGERANGE))) to iResult
70944>>>>>>>                    Move hPageRanges to pd.lpPageRanges
70945>>>>>>>                    Set phPageRanges to hPageRanges
70946>>>>>>>                End
70946>>>>>>>>
70946>>>>>>>            End
70946>>>>>>>>
70946>>>>>>>        End
70946>>>>>>>>
70946>>>>>>>
70946>>>>>>>        // Filter unsupported flags
70946>>>>>>>        If (IsFlagIn (PD_ENABLEPRINTTEMPLATE, iFlags)) Begin
70948>>>>>>>            Move (iFlags - PD_ENABLEPRINTTEMPLATE) to iFlags
70949>>>>>>>        End
70949>>>>>>>>
70949>>>>>>>        If (IsFlagIn (PD_ENABLEPRINTTEMPLATEHANDLE, iFlags)) Begin
70951>>>>>>>            Move (iFlags - PD_ENABLEPRINTTEMPLATEHANDLE) to iFlags
70952>>>>>>>        End
70952>>>>>>>>
70952>>>>>>>        If (IsFlagIn (PD_USELARGETEMPLATE, iFlags)) Begin
70954>>>>>>>            Move (iFlags - PD_USELARGETEMPLATE) to iFlags
70955>>>>>>>        End
70955>>>>>>>>
70955>>>>>>>
70955>>>>>>>        // If the PD_RETURNDEFAULT flag is set the hDevMode and hDevNames must be zero
70955>>>>>>>        If (IsFlagIn (PD_RETURNDEFAULT, iFlags)) Begin
70957>>>>>>>            Move 0 to hDevMode
70958>>>>>>>            Move 0 to hDevNames
70959>>>>>>>        End
70959>>>>>>>>
70959>>>>>>>        Else Begin
70960>>>>>>>            Get InitDevMode to hDevMode
70961>>>>>>>            If (hDevMode = 0) Begin
70963>>>>>>>                Function_Return PD_RESULT_CANCEL
70964>>>>>>>            End
70964>>>>>>>>
70964>>>>>>>            Get InitDevNames to hDevNames
70965>>>>>>>            If (hDevNames = 0) Begin
70967>>>>>>>                Function_Return PD_RESULT_CANCEL
70968>>>>>>>            End
70968>>>>>>>>
70968>>>>>>>        End
70968>>>>>>>>
70968>>>>>>>
70968>>>>>>>        Move (SizeOfType (PRINTDLGEX)) to pd.lStructSize
70969>>>>>>>        Get OwnerHandle to pd.hwndOwner
70970>>>>>>>        Move hDevMode to pd.hDevMode
70971>>>>>>>        Move hDevNames to pd.hDevNames
70972>>>>>>>        Move iFlags to pd.Flags
70973>>>>>>>        Get piMinPage to pd.nMinPage
70974>>>>>>>        Get piMaxPage to pd.nMaxPage
70975>>>>>>>        Get piCopies to pd.nCopies
70976>>>>>>>        Move START_PAGE_GENERAL to pd.nStartPage
70977>>>>>>>
70977>>>>>>>        // Copy the PRINTDLGEX structure
70977>>>>>>>        Move (CopyMemory (hPrintDlg, AddressOf (pd), SizeOfType (PRINTDLGEX))) to iVoid
70978>>>>>>>
70978>>>>>>>        // Call the printdlgex function, this may open a dialog
70978>>>>>>>        Move (PrintDlgEx (hPrintDlg)) to hResult
70979>>>>>>>        If (hResult = S_OK) Begin
70981>>>>>>>            Set phPrintDlg to hPrintDlg
70982>>>>>>>
70982>>>>>>>            Move (CopyMemory (AddressOf (pd), hPrintDlg, SizeOfType (PRINTDLGEX))) to iVoid
70983>>>>>>>
70983>>>>>>>            Set piFlags to pd.Flags
70984>>>>>>>            Set piMinPage to pd.nMinPage
70985>>>>>>>            Set piMaxPage to pd.nMaxPage
70986>>>>>>>            Set piCopies to pd.nCopies
70987>>>>>>>            If (not (IsFlagIn (PD_NOPAGENUMS, pd.Flags))) Begin
70989>>>>>>>                Set piMaxPageRanges to pd.nMaxPageRanges
70990>>>>>>>                If (pd.lpPageRanges <> 0) Begin
70992>>>>>>>                    Move (CopyMemory (AddressOf (PageRanges), pd.lpPageRanges, pd.nPageRanges * SizeOfType (PRINTPAGERANGE))) to iVoid
70993>>>>>>>                    Set pPageRanges to PageRanges
70994>>>>>>>                End
70994>>>>>>>>
70994>>>>>>>            End
70994>>>>>>>>
70994>>>>>>>            Set phDC to pd.hDC
70995>>>>>>>            Set phDevMode to pd.hDevMode
70996>>>>>>>            Set phDevNames to pd.hDevNames
70997>>>>>>>
70997>>>>>>>            Send ReadDevMode
70998>>>>>>>            Send ReadDevNames
70999>>>>>>>
70999>>>>>>>            If (IsFlagIn (PD_RETURNDEFAULT, pd.Flags)) Begin
71001>>>>>>>                Function_Return PD_RESULT_PRINT
71002>>>>>>>            End
71002>>>>>>>>
71002>>>>>>>
71002>>>>>>>            Function_Return pd.dwResultAction
71003>>>>>>>        End
71003>>>>>>>>
71003>>>>>>>        Else Begin
71004>>>>>>>            Function_Return iResult
71005>>>>>>>        End
71005>>>>>>>>
71005>>>>>>>    End_Function
71006>>>>>>>
71006>>>>>>>    Function SelectPrinter Returns Boolean
71008>>>>>>>        Handle hDevMode hDevNames hPrintDlg hPageRanges
71008>>>>>>>        Integer iResult iVoid iMaxPageRanges
71008>>>>>>>        UInteger iFlags
71008>>>>>>>        String sDeviceName
71008>>>>>>>        PRINTDLGEX pd
71008>>>>>>>        PRINTDLGEX pd
71008>>>>>>>        PRINTPAGERANGE[] PageRanges
71008>>>>>>>        PRINTPAGERANGE[] PageRanges
71009>>>>>>>
71009>>>>>>>        // Free previously allocated memory
71009>>>>>>>        Send FreeAllocatedGlobalMemory
71010>>>>>>>
71010>>>>>>>        Get InitDevNames to hDevNames
71011>>>>>>>        If (hDevNames = 0) Begin
71013>>>>>>>            Function_Return PD_RESULT_CANCEL
71014>>>>>>>        End
71014>>>>>>>>
71014>>>>>>>        
71014>>>>>>>        Get InitDevMode to hDevMode
71015>>>>>>>        If (hDevMode = 0) Begin
71017>>>>>>>            Function_Return PD_RESULT_CANCEL
71018>>>>>>>        End
71018>>>>>>>>
71018>>>>>>>
71018>>>>>>>        Get psDeviceName to sDeviceName
71019>>>>>>>        If (sDeviceName = '') Begin
71021>>>>>>>            Function_Return PD_RESULT_CANCEL
71022>>>>>>>        End
71022>>>>>>>>
71022>>>>>>>
71022>>>>>>>        // Allocate memory for PRINTDLGEX structure
71022>>>>>>>        Move (GlobalAlloc (GPTR, SizeOfType (PRINTDLGEX))) to hPrintDlg
71023>>>>>>>        If (hPrintDlg = 0) Begin
71025>>>>>>>            Function_Return False
71026>>>>>>>        End
71026>>>>>>>>
71026>>>>>>>
71026>>>>>>>        Get piFlags to iFlags
71027>>>>>>>
71027>>>>>>>        // Return the printer device context
71027>>>>>>>        Move (iFlags ior PD_RETURNDC) to iFlags
71028>>>>>>>
71028>>>>>>>        // Filter unsupported flags
71028>>>>>>>        If (IsFlagIn (PD_ENABLEPRINTTEMPLATE, iFlags)) Begin
71030>>>>>>>            Move (iFlags - PD_ENABLEPRINTTEMPLATE) to iFlags
71031>>>>>>>        End
71031>>>>>>>>
71031>>>>>>>        If (IsFlagIn (PD_ENABLEPRINTTEMPLATEHANDLE, iFlags)) Begin
71033>>>>>>>            Move (iFlags - PD_ENABLEPRINTTEMPLATEHANDLE) to iFlags
71034>>>>>>>        End
71034>>>>>>>>
71034>>>>>>>        If (IsFlagIn (PD_USELARGETEMPLATE, iFlags)) Begin
71036>>>>>>>            Move (iFlags - PD_USELARGETEMPLATE) to iFlags
71037>>>>>>>        End
71037>>>>>>>>
71037>>>>>>>
71037>>>>>>>        Move (SizeOfType (PRINTDLGEX)) to pd.lStructSize
71038>>>>>>>        Get OwnerHandle to pd.hwndOwner
71039>>>>>>>        Move hDevMode to pd.hDevMode
71040>>>>>>>        Move hDevNames to pd.hDevNames
71041>>>>>>>        Move iFlags to pd.Flags
71042>>>>>>>        Get piMinPage to pd.nMinPage
71043>>>>>>>        Get piMaxPage to pd.nMaxPage
71044>>>>>>>        Get piCopies to pd.nCopies
71045>>>>>>>        Move START_PAGE_GENERAL to pd.nStartPage
71046>>>>>>>
71046>>>>>>>        // Copy the page ranges array information
71046>>>>>>>        Get piMaxPageRanges to iMaxPageRanges
71047>>>>>>>        If (iMaxPageRanges > 0) Begin
71049>>>>>>>            Get pPageRanges to PageRanges
71050>>>>>>>            Move (SizeOfArray (PageRanges)) to pd.nPageRanges
71051>>>>>>>            If (pd.nPageRanges > 0) Begin
71053>>>>>>>                Move (GlobalAlloc (GPTR, pd.nPageRanges * SizeOfType (PRINTPAGERANGE))) to hPageRanges
71054>>>>>>>                If (hPageRanges = 0) Begin
71056>>>>>>>                    Move 0 to pd.nPageRanges
71057>>>>>>>                End
71057>>>>>>>>
71057>>>>>>>                Else Begin
71058>>>>>>>                    Move (CopyMemory (hPageRanges, AddressOf (PageRanges), pd.nPageRanges * SizeOfType (PRINTPAGERANGE))) to iResult
71059>>>>>>>                    Move hPageRanges to pd.lpPageRanges
71060>>>>>>>                    Set phPageRanges to hPageRanges
71061>>>>>>>                End
71061>>>>>>>>
71061>>>>>>>            End
71061>>>>>>>>
71061>>>>>>>        End
71061>>>>>>>>
71061>>>>>>>
71061>>>>>>>        Move (CopyMemory (hPrintDlg, AddressOf (pd), SizeOfType (PRINTDLGEX))) to iVoid
71062>>>>>>>        Set phPrintDlg to hPrintDlg
71063>>>>>>>
71063>>>>>>>        Function_Return PD_RESULT_PRINT
71064>>>>>>>    End_Function
71065>>>>>>>
71065>>>>>>>    Function DRPrinterDevMode String sPrinterName Returns Boolean
71067>>>>>>>        Handle hPrinter hDevMode hPrintDlg hDevNames
71067>>>>>>>        Pointer pDevMode
71067>>>>>>>        Address aData
71067>>>>>>>        Integer iResult cbNeeded iBytes iFlags
71067>>>>>>>        Boolean bPrinterDataRead
71067>>>>>>>        tPrinter_Info_2 PrinterInfo
71067>>>>>>>        tPrinter_Info_2 PrinterInfo
71067>>>>>>>        DEVMODE PrinterInfoDevMode
71067>>>>>>>        DEVMODE PrinterInfoDevMode
71067>>>>>>>        PRINTDLGEX pd
71067>>>>>>>        PRINTDLGEX pd
71067>>>>>>>
71067>>>>>>>        If (sPrinterName <> "") Begin
71069>>>>>>>            // Free previously allocated memory
71069>>>>>>>            Send FreeAllocatedGlobalMemory
71070>>>>>>>
71070>>>>>>>            Move 0 to hPrinter
71071>>>>>>>            Move (DR_WinAPI_OpenPrinter (AddressOf (sPrinterName), AddressOf (hPrinter), 0)) to iResult
71072>>>>>>>            If (iResult <> 0) Begin
71074>>>>>>>                Move 0 to cbNeeded
71075>>>>>>>                Move (DR_WinAPI_GetPrinter (hPrinter, 2, 0, 0, AddressOf (cbNeeded))) to iResult
71076>>>>>>>                If (iResult = 0) Begin
71078>>>>>>>                    Move (Alloc (cbNeeded)) to aData
71079>>>>>>>                    Move (DR_WinAPI_GetPrinter (hPrinter, 2, aData, cbNeeded, AddressOf (cbNeeded))) to iResult
71080>>>>>>>                    If (iResult <> 0) Begin
71082>>>>>>>                        Move (MemCopy (AddressOf (PrinterInfo), aData, SizeOfType (tPrinter_Info_2))) to iResult
71083>>>>>>>                        Move (MemCopy (AddressOf (PrinterInfoDevMode), PrinterInfo.pDevMode, SizeOfType (DEVMODE))) to iResult
71084>>>>>>>                        Send ReadDevModeData PrinterInfoDevMode
71085>>>>>>>                        Move (SizeOfType (DEVMODE) + PrinterInfoDevMode.dmDriverExtra) to iBytes
71086>>>>>>>
71086>>>>>>>                        // Allocate memory for the extended DEVMODE structure
71086>>>>>>>                        Move (GlobalAlloc (GMEM_MOVEABLE, iBytes)) to hDevmode
71087>>>>>>>                        If (hDevmode = 0) Begin
71089>>>>>>>                            Move (Free (aData)) to iResult
71090>>>>>>>                            Function_Return False
71091>>>>>>>                        End
71091>>>>>>>>
71091>>>>>>>
71091>>>>>>>                        // Lock allocated memory
71091>>>>>>>                        Move (GlobalLock (hDevmode)) to pDevmode
71092>>>>>>>                        If (pDevmode = 0) Begin
71094>>>>>>>                            Move (Free (aData)) to iResult
71095>>>>>>>                            Move (GlobalFree (hDevmode)) to iResult
71096>>>>>>>                            Function_Return False
71097>>>>>>>                        End
71097>>>>>>>>
71097>>>>>>>
71097>>>>>>>                        Move (MemCopy (pDevMode, PrinterInfo.pDevMode, iBytes)) to iResult
71098>>>>>>>
71098>>>>>>>                        // Should be done after the devmode handling as the devmode information can contain wrong information
71098>>>>>>>                        Set psDeviceName to PrinterInfo.pPrinterName
71099>>>>>>>                        Set psOutputName to PrinterInfo.pPortName
71100>>>>>>>                        Set psDriverName to PrinterInfo.pDriverName
71101>>>>>>>
71101>>>>>>>                        // Free previously allocated memory
71101>>>>>>>                        Get phPrintDlg to hPrintDlg
71102>>>>>>>                        If (hPrintDlg <> 0) Begin
71104>>>>>>>                            Move (GlobalFree (hPrintDlg)) to iResult
71105>>>>>>>                            Set phPrintDlg to 0
71106>>>>>>>                        End
71106>>>>>>>>
71106>>>>>>>
71106>>>>>>>                        // Allocate memory for PRINTDLGEX structure
71106>>>>>>>                        Move (GlobalAlloc (GPTR, SizeOfType (PRINTDLGEX))) to hPrintDlg
71107>>>>>>>                        If (hPrintDlg = 0) Begin
71109>>>>>>>                            Move (Free (aData)) to iResult
71110>>>>>>>                            If (pDevMode <> 0) Begin
71112>>>>>>>                                Move (GlobalUnlock (hDevMode)) to iResult
71113>>>>>>>                            End
71113>>>>>>>>
71113>>>>>>>                            Move (GlobalFree (hDevmode)) to iResult
71114>>>>>>>                            Function_Return False
71115>>>>>>>                        End
71115>>>>>>>>
71115>>>>>>>
71115>>>>>>>                        Get piFlags to iFlags
71116>>>>>>>
71116>>>>>>>                        // Return the printer device context
71116>>>>>>>                        Move (iFlags ior PD_RETURNDC) to iFlags
71117>>>>>>>
71117>>>>>>>                        // Filter unsupported flags
71117>>>>>>>                        If (IsFlagIn (PD_ENABLEPRINTTEMPLATE, iFlags)) Begin
71119>>>>>>>                            Move (iFlags - PD_ENABLEPRINTTEMPLATE) to iFlags
71120>>>>>>>                        End
71120>>>>>>>>
71120>>>>>>>                        If (IsFlagIn (PD_ENABLEPRINTTEMPLATEHANDLE, iFlags)) Begin
71122>>>>>>>                            Move (iFlags - PD_ENABLEPRINTTEMPLATEHANDLE) to iFlags
71123>>>>>>>                        End
71123>>>>>>>>
71123>>>>>>>                        If (IsFlagIn (PD_USELARGETEMPLATE, iFlags)) Begin
71125>>>>>>>                            Move (iFlags - PD_USELARGETEMPLATE) to iFlags
71126>>>>>>>                        End
71126>>>>>>>>
71126>>>>>>>
71126>>>>>>>                        Move (SizeOfType (PRINTDLGEX)) to pd.lStructSize
71127>>>>>>>                        Get OwnerHandle to pd.hwndOwner
71128>>>>>>>                        Move hDevMode to pd.hDevMode
71129>>>>>>>                        Get InitDevNames to pd.hDevNames
71130>>>>>>>                        Move iFlags to pd.Flags
71131>>>>>>>                        Get piMinPage to pd.nMinPage
71132>>>>>>>                        Get piMaxPage to pd.nMaxPage
71133>>>>>>>                        Get piCopies to pd.nCopies
71134>>>>>>>                        Move START_PAGE_GENERAL to pd.nStartPage
71135>>>>>>>
71135>>>>>>>                        // Copy the data from the pd Structure onto the locked memory retrieved before
71135>>>>>>>                        Move (MemCopy (hPrintDlg, AddressOf (pd), SizeOfType (PRINTDLGEX))) to iResult
71136>>>>>>>                        Set phPrintDlg to hPrintDlg
71137>>>>>>>
71137>>>>>>>                        // Release the memory lock and copy the handle to the phDevMode property
71137>>>>>>>                        Move (GlobalUnlock (hDevmode)) to iResult
71138>>>>>>>                        Set phDevMode to hDevmode
71139>>>>>>>                        
71139>>>>>>>                        Move True to bPrinterDataRead
71140>>>>>>>                    End
71140>>>>>>>>
71140>>>>>>>                    Move (Free (aData)) to iResult
71141>>>>>>>                End
71141>>>>>>>>
71141>>>>>>>                Move (DR_WinAPI_ClosePrinter (hPrinter)) to iResult
71142>>>>>>>            End
71142>>>>>>>>
71142>>>>>>>        End
71142>>>>>>>>
71142>>>>>>>
71142>>>>>>>        Function_Return bPrinterDataRead
71143>>>>>>>    End_Function
71144>>>>>>>
71144>>>>>>>    Function ReadPrinterDevMode String sPrinterName Returns Integer
71146>>>>>>>        Boolean bPrinterDataRead
71146>>>>>>>
71146>>>>>>>        Get DRPrinterDevMode sPrinterName to bPrinterDataRead
71147>>>>>>>        If (not (bPrinterDataRead)) Begin
71149>>>>>>>            Set psDeviceName to ''
71150>>>>>>>            Function_Return PD_RESULT_CANCEL
71151>>>>>>>        End
71151>>>>>>>>
71151>>>>>>>
71151>>>>>>>        Function_Return PD_RESULT_PRINT
71152>>>>>>>    End_Function
71153>>>>>>>End_Class
71154>>>>>Use cVersionInfo.pkg
71154>>>>>Use cDR.h.pkg
Including file: cDR.h.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDR.h.pkg)
71154>>>>>>>Use VdfBase.pkg
71154>>>>>>>use SQLDatatypes.h.pkg
Including file: SQLDatatypes.h.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\SQLDatatypes.h.pkg)
71154>>>>>>>>>Define C_drColumnType for Integer
71154>>>>>>>>>
71154>>>>>>>>>Define SQL_UNKNOWN_TYPE                         for 0
71154>>>>>>>>>Define SQL_CHAR                                 for 1
71154>>>>>>>>>Define SQL_NUMERIC                              for 2
71154>>>>>>>>>Define SQL_DECIMAL                              for 3
71154>>>>>>>>>Define SQL_INTEGER                              for 4
71154>>>>>>>>>Define SQL_SMALLINT                             for 5
71154>>>>>>>>>Define SQL_FLOAT                                for 6
71154>>>>>>>>>Define SQL_REAL                                 for 7
71154>>>>>>>>>Define SQL_DOUBLE                               for 8
71154>>>>>>>>>Define SQL_DATETIME                             for 9
71154>>>>>>>>>Define SQL_TIME                                 for 10
71154>>>>>>>>>Define SQL_TIMESTAMP                            for 11
71154>>>>>>>>>Define SQL_VARCHAR                              for 12
71154>>>>>>>>>Define SQL_LONGVARCHAR                          for (-1)
71154>>>>>>>>>Define SQL_BINARY                               for (-2)
71154>>>>>>>>>Define SQL_VARBINARY                            for (-3)
71154>>>>>>>>>Define SQL_LONGVARBINARY                        for (-4)
71154>>>>>>>>>Define SQL_BIGINT                               for (-5)
71154>>>>>>>>>Define SQL_TINYINT                              for (-6)
71154>>>>>>>>>Define SQL_BIT                                  for (-7)
71154>>>>>>>>>Define SQL_GUID                                 for (-11)
71154>>>>>>>>>Define SQL_TYPE_DATE                            for 91
71154>>>>>>>>>Define SQL_TYPE_TIME                            for 92
71154>>>>>>>>>Define SQL_TYPE_TIMESTAMP                       for 93
71154>>>>>>>
71154>>>>>>>Define C_DR_OCX_VERSION    for "6.2"
71154>>>>>>>Define C_DR_OCX_NAME       for "DataFlex Reports 2018 Developer Edition API.ocx"
71154>>>>>>>
71154>>>>>>>Define DFERR_DATAFLEX_REPORTS for 4425
71154>>>>>>>
71154>>>>>>>// Comes from CLI.PKG
71154>>>>>>>Define DF_FILE_TABLE_NAME for 609
71154>>>>>>>
71154>>>>>>>    Send AddUserError of Error_Object_Id DFERR_DATAFLEX_REPORTS
71155>>>>>>>
71155>>>>>>>Define C_USEMAINDRREPORTID for ""
71155>>>>>>>
71155>>>>>>>Struct tReportFunctionId
71155>>>>>>>    String sReportId
71155>>>>>>>    Integer iFunction
71155>>>>>>>End_Struct
71155>>>>>>>
71155>>>>>>>Struct tReportParameterId
71155>>>>>>>    String sReportId
71155>>>>>>>    Integer iParameter
71155>>>>>>>End_Struct
71155>>>>>>>
71155>>>>>>>Struct tDRTableName
71155>>>>>>>    String sReportId
71155>>>>>>>    Integer iTable
71155>>>>>>>    String sTableName
71155>>>>>>>End_Struct
71155>>>>>>>
71155>>>>>>>Struct tDRParameter
71155>>>>>>>    String sName
71155>>>>>>>    Integer iType
71155>>>>>>>    Integer iLength
71155>>>>>>>    Integer iPrecision
71155>>>>>>>End_Struct
71155>>>>>>>
71155>>>>>>>Struct tDRFunctionErrorInfo
71155>>>>>>>    String sReportId
71155>>>>>>>    Integer iFunctionId
71155>>>>>>>    String sError
71155>>>>>>>End_Struct
71155>>>>>>>
71155>>>>>>>// Same as tDataSourceRow but struct not available in Web projects.
71155>>>>>>>Struct tDRDataSourceRow
71155>>>>>>>    RowID riID
71155>>>>>>>    Boolean bNewRow
71155>>>>>>>    Variant vTag
71155>>>>>>>    String[] sValue
71155>>>>>>>End_Struct
71155>>>>>>>
71155>>>>>>>External_Function DR_WinAPI_GetLongPathName "GetLongPathNameA" Kernel32.dll Pointer lpszShortPath Pointer lpszLongPath Integer cchBuffer Returns Integer
71156>>>>>>>External_Function DR_WinAPI_EnumProcessModules "EnumProcessModules" Psapi.Dll Handle hProcess Address lphModule Integer cb Pointer lpcbNeeded Returns Integer
71157>>>>>>>External_Function DR_WinAPI_GetCurrentProcessId "GetCurrentProcessId" Kernel32.Dll Returns Integer
71158>>>>>>>External_Function DR_WinAPI_OpenProcess "OpenProcess" Kernel32.Dll DWord dwDesiredAccess Boolean bInheritHandle DWord dwProcessId Returns Handle
71159>>>>>>>External_Function DR_WinAPI_CloseHandle "CloseHandle" Kernel32.Dll Handle hObject Returns Integer
71160>>>>>>>External_Function DR_WinAPI_ShellExecute "ShellExecuteA" Shell32.Dll Handle hwnd Address aOperation Address aFile Address aParameters Address aDirectory Integer nShowCmd Returns Integer
71161>>>>>>>External_Function DR_WinAPI_PathIsDirectory "PathIsDirectoryA" SHLWAPI.DLL Pointer lpszPath Returns Integer
71162>>>>>>>External_Function DR_WinAPI_IsZoomed "IsZoomed" User32.dll Handle hWnd Returns Boolean
71163>>>>>>>External_Function DR_WinAPI_DefWindowProc "DefWindowProcA" user32.dll Handle hWnd UInteger uiMsg Integer wParam Integer lParam Returns Integer
71164>>>>>>>External_Function DR_WINAPI_GetUpdateRect "GetUpdateRect" user32.dll Handle hWnd Pointer lpRect Boolean bErase Returns Boolean
71165>>>>>>>External_Function DR_WINAPI_SetDCBrushColor "SetDCBrushColor" gdi32.dll Handle hdc Integer crColor Returns Integer
71166>>>>>>>External_Function DR_WINAPI_SetParent "SetParent" user32.dll Handle hwndChild Handle hwndNewParent Returns Integer
71167>>>>>>>External_Function DR_WinAPI_PathFindExtension "PathFindExtensionA" SHLWAPI.DLL Pointer lpszPath Returns Pointer
71168>>>>>>>External_Function DR_WinAPI_PathFindFileName "PathFindFileNameA" SHLWAPI.DLL Pointer lpszPath Returns Pointer
71169>>>>>>>
71169>>>>>>>Define PROCESS_TERMINATE         for |CI$0001
71169>>>>>>>Define PROCESS_CREATE_THREAD     for |CI$0002
71169>>>>>>>Define PROCESS_SET_SESSIONID     for |CI$0004
71169>>>>>>>Define PROCESS_VM_OPERATION      for |CI$0008
71169>>>>>>>Define PROCESS_VM_READ           for |CI$0010
71169>>>>>>>Define PROCESS_VM_WRITE          for |CI$0020
71169>>>>>>>Define PROCESS_DUP_HANDLE        for |CI$0040
71169>>>>>>>Define PROCESS_CREATE_PROCESS    for |CI$0080
71169>>>>>>>Define PROCESS_SET_QUOTA         for |CI$0100
71169>>>>>>>Define PROCESS_SET_INFORMATION   for |CI$0200
71169>>>>>>>Define PROCESS_QUERY_INFORMATION for |CI$0400
71169>>>>>>>Define PROCESS_ALL_ACCESS        for (STANDARD_RIGHTS_REQUIRED ior SYNCHRONIZE ior |CI$FFFF)
71169>>>>>>>
71169>>>>>>>// Language definitions
71169>>>>>>>Define LANG_NEUTRAL                 for |CI$0
71169>>>>>>>Define LANG_DEFAULT                 for LANG_NEUTRAL
71169>>>>>>>Define LANG_AFRIKAANS               for |CI$36
71169>>>>>>>Define LANG_ALBANIAN                for |CI$1c
71169>>>>>>>Define LANG_ARABIC                  for |CI$01
71169>>>>>>>Define LANG_ARMENIAN                for |CI$2b
71169>>>>>>>Define LANG_ASSAMESE                for |CI$4d
71169>>>>>>>Define LANG_AZERI                   for |CI$2c
71169>>>>>>>Define LANG_BASQUE                  for |CI$2d
71169>>>>>>>Define LANG_BELARUSIAN              for |CI$23
71169>>>>>>>Define LANG_BENGALI                 for |CI$45
71169>>>>>>>Define LANG_BULGARIAN               for |CI$02
71169>>>>>>>Define LANG_CATALAN                 for |CI$03
71169>>>>>>>Define LANG_CHINESE                 for |CI$04
71169>>>>>>>Define LANG_CROATIAN                for |CI$1a
71169>>>>>>>Define LANG_CZECH                   for |CI$05
71169>>>>>>>Define LANG_DANISH                  for |CI$06
71169>>>>>>>Define LANG_DIVEHI                  for |CI$65
71169>>>>>>>Define LANG_DUTCH                   for |CI$13
71169>>>>>>>Define LANG_ENGLISH                 for |CI$09
71169>>>>>>>Define LANG_ESTONIAN                for |CI$25
71169>>>>>>>Define LANG_FAEROESE                for |CI$38
71169>>>>>>>Define LANG_FARSI                   for |CI$29
71169>>>>>>>Define LANG_FINNISH                 for |CI$0b
71169>>>>>>>Define LANG_FRENCH                  for |CI$0c
71169>>>>>>>Define LANG_GALICIAN                for |CI$56
71169>>>>>>>Define LANG_GEORGIAN                for |CI$37
71169>>>>>>>Define LANG_GERMAN                  for |CI$07
71169>>>>>>>Define LANG_GREEK                   for |CI$08
71169>>>>>>>Define LANG_GUJARATI                for |CI$47
71169>>>>>>>Define LANG_HEBREW                  for |CI$0d
71169>>>>>>>Define LANG_HINDI                   for |CI$39
71169>>>>>>>Define LANG_HUNGARIAN               for |CI$0e
71169>>>>>>>Define LANG_ICELANDIC               for |CI$0f
71169>>>>>>>Define LANG_INDONESIAN              for |CI$21
71169>>>>>>>Define LANG_ITALIAN                 for |CI$10
71169>>>>>>>Define LANG_JAPANESE                for |CI$11
71169>>>>>>>Define LANG_KANNADA                 for |CI$4b
71169>>>>>>>Define LANG_KASHMIRI                for |CI$60
71169>>>>>>>Define LANG_KAZAK                   for |CI$3f
71169>>>>>>>Define LANG_KONKANI                 for |CI$57
71169>>>>>>>Define LANG_KOREAN                  for |CI$12
71169>>>>>>>Define LANG_KYRGYZ                  for |CI$40
71169>>>>>>>Define LANG_LATVIAN                 for |CI$26
71169>>>>>>>Define LANG_LITHUANIAN              for |CI$27
71169>>>>>>>Define LANG_MACEDONIAN              for |CI$2f
71169>>>>>>>Define LANG_MALAY                   for |CI$3e
71169>>>>>>>Define LANG_MALAYALAM               for |CI$4c
71169>>>>>>>Define LANG_MANIPURI                for |CI$58
71169>>>>>>>Define LANG_MARATHI                 for |CI$4e
71169>>>>>>>Define LANG_MONGOLIAN               for |CI$50
71169>>>>>>>Define LANG_NEPALI                  for |CI$61
71169>>>>>>>Define LANG_NORWEGIAN               for |CI$14
71169>>>>>>>Define LANG_ORIYA                   for |CI$48
71169>>>>>>>Define LANG_POLISH                  for |CI$15
71169>>>>>>>Define LANG_PORTUGUESE              for |CI$16
71169>>>>>>>Define LANG_PUNJABI                 for |CI$46
71169>>>>>>>Define LANG_ROMANIAN                for |CI$18
71169>>>>>>>Define LANG_RUSSIAN                 for |CI$19
71169>>>>>>>Define LANG_SANSKRIT                for |CI$4f
71169>>>>>>>Define LANG_SERBIAN                 for |CI$1a
71169>>>>>>>Define LANG_SINDHI                  for |CI$59
71169>>>>>>>Define LANG_SLOVAK                  for |CI$1b
71169>>>>>>>Define LANG_SLOVENIAN               for |CI$24
71169>>>>>>>Define LANG_SPANISH                 for |CI$0a
71169>>>>>>>Define LANG_SWAHILI                 for |CI$41
71169>>>>>>>Define LANG_SWEDISH                 for |CI$1d
71169>>>>>>>Define LANG_SYRIAC                  for |CI$5a
71169>>>>>>>Define LANG_TAMIL                   for |CI$49
71169>>>>>>>Define LANG_TATAR                   for |CI$44
71169>>>>>>>Define LANG_TELUGU                  for |CI$4a
71169>>>>>>>Define LANG_THAI                    for |CI$1e
71169>>>>>>>Define LANG_TURKISH                 for |CI$1f
71169>>>>>>>Define LANG_UKRAINIAN               for |CI$22
71169>>>>>>>Define LANG_URDU                    for |CI$20
71169>>>>>>>Define LANG_UZBEK                   for |CI$43
71169>>>>>>>Define LANG_VIETNAMESE              for |CI$2a
71169>>>>>>>
71169>>>>>>>Define FILE_ATTRIBUTE_ARCHIVE               for 32 // a file or directory that is an archive file or directory. Applications typically Use this attribute to mark files for backup or removal .
71169>>>>>>>Define FILE_ATTRIBUTE_COMPRESSED            for 2048 // a file or directory that is compressed. for a file, all of the data in the file is compressed. for a directory, compression is the default for newly created files and subdirectories.
71169>>>>>>>Define FILE_ATTRIBUTE_DEVICE                for 64 // This value is reserved for system Use.
71169>>>>>>>Define FILE_ATTRIBUTE_DIRECTORY             for 16 // The Handle that identifies a directory.
71169>>>>>>>Define FILE_ATTRIBUTE_ENCRYPTED             for 16384 // a file or directory that is encrypted. for a file, all data streams in the file are encrypted. for a directory, encryption is the default for newly created files and subdirectories.
71169>>>>>>>Define FILE_ATTRIBUTE_HIDDEN                for 2 // The file or directory is hidden. It is not included in an ordinary directory listing.
71169>>>>>>>Define FILE_ATTRIBUTE_INTEGRITY_STREAM      for 32768 // The directory or user data stream is configured with integrity (only supported on ReFS volumes). It is not included in an ordinary directory listing. The integrity setting persists with the file If it's renamed. If a file is copied the destination file will have integrity set if either the source file or destination directory have integrity set. Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  This flag is not supported Until Windows Server 2012.
71169>>>>>>>Define FILE_ATTRIBUTE_NORMAL                for 128 // a file that does not have other attributes Set. This attribute is valid only when used alone.
71169>>>>>>>Define FILE_ATTRIBUTE_NOT_CONTENT_INDEXED   for 8192 // The file or directory is not to be indexed by the content indexing service.
71169>>>>>>>Define FILE_ATTRIBUTE_NO_SCRUB_DATA         for 131072 // The user data stream not to be Read by the background data integrity scanner (AKA scrubber). When Set on a directory it only provides inheritance. This flag is only supported on Storage Spaces and ReFS volumes. It is not included in an ordinary directory listing. Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  This flag is not supported Until Windows 8 and Windows Server 2012.
71169>>>>>>>Define FILE_ATTRIBUTE_OFFLINE               for 4096 // The data of a file is not available immediately. This attribute indicates that the file data is physically moved to offline storage. This attribute is used by Remote Storage, which is the hierarchical storage management software. Applications should not arbitrarily change this attribute.
71169>>>>>>>Define FILE_ATTRIBUTE_READONLY              for 1 // a file that is Read-only. Applications can Read the file, but cannot Write to it or Delete it. This attribute is not honored on directories. for more information, see You cannot view or change the Read-only or the System attributes of folders in Windows Server 2003, in Windows XP, in Windows Vista or in Windows 7.
71169>>>>>>>Define FILE_ATTRIBUTE_REPARSE_POINT         for 1024 // a file or directory that has an associated reparse point, or a file that is a symbolic link.
71169>>>>>>>Define FILE_ATTRIBUTE_SPARSE_FILE           for 512 // a file that is a sparse file.
71169>>>>>>>Define FILE_ATTRIBUTE_SYSTEM                for 4 // a file or directory that the operating system uses a part of, or uses exclusively.
71169>>>>>>>Define FILE_ATTRIBUTE_TEMPORARY             for 256 // a file that is being used for temporary storage. File systems avoid writing data back to mass storage If sufficient cache memory is available, because typically, an application deletes a temporary file after the Handle is closed. In that scenario, the system can entirely avoid writing the data. Otherwise, the data is written after the Handle is closed.
71169>>>>>>>Define FILE_ATTRIBUTE_VIRTUAL               for 65536 // This value is reserved for system use
71169>>>>>>>
71169>>>>>>>Function DRPathFindExtension Desktop String sPath Returns String
71171>>>>>>>    String sRetVal
71171>>>>>>>    Pointer pExtension pPath
71171>>>>>>>
71171>>>>>>>    Move (sPath - Character (0)) to sPath
71172>>>>>>>    Move (AddressOf (sPath)) to pPath
71173>>>>>>>    Move (DR_WinAPI_PathFindExtension (pPath)) to pExtension
71174>>>>>>>    Move (pExtension - pPath) to pPath
71175>>>>>>>    Move (Right (sPath, Length (sPath) - pPath)) to sRetVal
71176>>>>>>>
71176>>>>>>>    Function_Return (Trim (CString (sRetVal)))
71177>>>>>>>End_Function
71178>>>>>>>
71178>>>>>>>Function DRPathFindFileName Desktop String sPath Returns String
71180>>>>>>>    String sRetVal
71180>>>>>>>    Pointer pFileName pPath
71180>>>>>>>
71180>>>>>>>    Move (sPath - Character (0)) to sPath
71181>>>>>>>    Move (AddressOf (sPath)) to pPath
71182>>>>>>>    Move (DR_WinAPI_PathFindFileName (pPath)) to pFileName
71183>>>>>>>    Move (pFileName - pPath) to pPath
71184>>>>>>>    Move (Right (sPath, Length (sPath) - pPath)) to sRetVal
71185>>>>>>>
71185>>>>>>>    Function_Return (Trim (CString (sRetVal)))
71186>>>>>>>End_Function
71187>>>>>Use WinUuid.pkg
Including file: WinUuid.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\WinUuid.pkg)
71187>>>>>>>External_Function WinAPI_UuidCreate "UuidCreate" Rpcrt4.dll Address Uuid Returns Integer
71188>>>>>>>External_Function WinAPI_UuidToString  "UuidToStringA" Rpcrt4.dll Address aUuid Address lpUUIDString Returns Integer
71189>>>>>>>External_Function WinAPI_UuidCreateSequential "UuidCreateSequential" Rpcrt4.dll Address aUuid Returns Integer
71190>>>>>>>External_Function WinAPI_RpcStringFree "RpcStringFreeA" Rpcrt4.dll Address pStr Returns Integer
71191>>>>>>>
71191>>>>>>>// Returns a 'random' Universally Unique Identifier string as a 32 digit hex number.
71191>>>>>>>Function RandomHexUUID Global Returns String
71193>>>>>>>    Address pUUID pUUIDStr
71193>>>>>>>    Integer iRetval iOffset iChar
71193>>>>>>>    String sUUID sKey
71193>>>>>>>    
71193>>>>>>>    Move (Alloc(16)) to pUUID
71194>>>>>>>    
71194>>>>>>>    Move (WinAPI_UuidCreate (pUUID)) to iRetval
71195>>>>>>>    
71195>>>>>>>    If (iRetval = 0) Begin
71197>>>>>>>        Move 0 to pUUIDStr
71198>>>>>>>        
71198>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
71199>>>>>>>        If (iRetval = 0) Begin
71201>>>>>>>            Move pUUIDStr to sUUID
71202>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
71203>>>>>>>            
71203>>>>>>>            Move (Uppercase (sUUID)) to sUUID
71204>>>>>>>        End
71204>>>>>>>>
71204>>>>>>>    End
71204>>>>>>>>
71204>>>>>>>    
71204>>>>>>>    Move (Free(pUUID)) to iRetval
71205>>>>>>>    
71205>>>>>>>    Function_Return sUUID
71206>>>>>>>End_Function
71207>>>>>>>
71207>>>>>>>
71207>>>>>>>// Returns a sequential Universally Unique Identifier string as a 32 digit hex number.
71207>>>>>>>Function SeqHexUUID Global Returns String
71209>>>>>>>    Address pUUID pUUIDStr
71209>>>>>>>    Integer iRetval iOffset iChar
71209>>>>>>>    String sUUID sKey
71209>>>>>>>    
71209>>>>>>>    Move (Alloc(16)) to pUUID
71210>>>>>>>    
71210>>>>>>>    Move (WinAPI_UuidCreateSequential (pUUID)) to iRetval
71211>>>>>>>    
71211>>>>>>>    If (iRetval = 0) Begin
71213>>>>>>>        Move 0 to pUUIDStr
71214>>>>>>>        
71214>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
71215>>>>>>>        If (iRetval = 0) Begin
71217>>>>>>>            Move pUUIDStr to sUUID
71218>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
71219>>>>>>>            
71219>>>>>>>            Move (Uppercase (sUUID)) to sUUID
71220>>>>>>>        End
71220>>>>>>>>
71220>>>>>>>    End
71220>>>>>>>>
71220>>>>>>>    
71220>>>>>>>    Move (Free(pUUID)) to iRetval
71221>>>>>>>    
71221>>>>>>>    Function_Return sUUID
71222>>>>>>>End_Function
71223>>>>>Use cDRPreview.pkg
Including file: cDRPreview.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRPreview.pkg)
71223>>>>>>>Use Windows.pkg
71223>>>>>>>Use Dfadlg.pkg
71223>>>>>>>Use DRLanguage.Inc
71223>>>>>>>Use cDRCommandBarSystem.pkg
Including file: cDRCommandBarSystem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRCommandBarSystem.pkg)
71223>>>>>>>>>Use cCJCommandBarSystem.pkg
71223>>>>>>>>>
71223>>>>>>>>>Class cDRCommandBarSystem is a cCJCommandBarSystem
71224>>>>>>>>>    Procedure OnCreate
71226>>>>>>>>>        Integer eTheme
71226>>>>>>>>>
71226>>>>>>>>>        // Apply the same visual theme used by the global commandbars
71226>>>>>>>>>        If (ghoCommandBars) Begin
71228>>>>>>>>>            Get peVisualTheme of ghoCommandBars to eTheme
71229>>>>>>>>>            Set peVisualTheme to eTheme
71230>>>>>>>>>        End
71230>>>>>>>>>>
71230>>>>>>>>>
71230>>>>>>>>>        Set pbAutoResizeIcons to True
71231>>>>>>>>>
71231>>>>>>>>>        Forward Send OnCreate
71233>>>>>>>>>    End_Procedure
71234>>>>>>>>>
71234>>>>>>>>>    // The buddybuttonclick is as feature not
71234>>>>>>>>>    Procedure BuddyButtonClicked Variant vControl
71236>>>>>>>>>        // Empty stub in case there is no control that understands the message
71236>>>>>>>>>    End_Procedure
71237>>>>>>>>>
71237>>>>>>>>>    // Augmented to see if the user clicked a buddy button item in one of the commandbar controls. If
71237>>>>>>>>>    // clicked send the buddybuttonclicked message to the control.
71237>>>>>>>>>    Procedure OnComControlNotify Variant vControl Integer iCode Variant vNotifyData Variant vHandled
71239>>>>>>>>>        Handle hoControl hoAction hoActionPointer
71239>>>>>>>>>        Variant vAction
71239>>>>>>>>>
71239>>>>>>>>>        If (iCode = XTP_EN_BUDDYBUTTONCLICK) Begin
71241>>>>>>>>>            Get Create (RefClass (cCJCommandBarControl)) to hoControl
71242>>>>>>>>>            Get Create (RefClass (cCJCommandBarAction)) to hoAction
71243>>>>>>>>>
71243>>>>>>>>>            Set pvComObject of hoControl to vControl
71244>>>>>>>>>            Get ComAction of hoControl to vAction
71245>>>>>>>>>
71245>>>>>>>>>            If (not (IsNullComObject (vAction))) Begin
71247>>>>>>>>>                Set pvComObject of hoAction to vAction
71248>>>>>>>>>                // Contains the object ID of the control
71248>>>>>>>>>                Get ComTag of hoAction to hoActionPointer
71249>>>>>>>>>            End
71249>>>>>>>>>>
71249>>>>>>>>>
71249>>>>>>>>>            Send Destroy of hoAction
71250>>>>>>>>>            Send Destroy of hoControl
71251>>>>>>>>>
71251>>>>>>>>>            If (hoActionPointer <> 0) Begin
71253>>>>>>>>>                Send BuddyButtonClicked of hoActionPointer vControl
71254>>>>>>>>>            End
71254>>>>>>>>>>
71254>>>>>>>>>        End
71254>>>>>>>>>>
71254>>>>>>>>>    End_Procedure
71255>>>>>>>>>End_Class
71256>>>>>>>Use cDRMenuItem.pkg
Including file: cDRMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRMenuItem.pkg)
71256>>>>>>>>>Use cCJCommandBarSystem.pkg
71256>>>>>>>>>
71256>>>>>>>>>Class cDRMenuItem is a cCJMenuItem
71257>>>>>>>>>    Procedure Construct_Object
71259>>>>>>>>>        Forward Send Construct_Object
71261>>>>>>>>>
71261>>>>>>>>>        Property Handle phoReport -1
71262>>>>>>>>>    End_Procedure
71263>>>>>>>>>    
71263>>>>>>>>>    Function ReportObject Returns Handle
71265>>>>>>>>>        Handle hoReport hoParent
71265>>>>>>>>>        
71265>>>>>>>>>        Get phoReport to hoReport
71266>>>>>>>>>        If (hoReport = -1) Begin
71268>>>>>>>>>            Get Parent to hoParent
71269>>>>>>>>>            While (hoReport = -1 and hoParent > Desktop)
71273>>>>>>>>>                Get phoReport of hoParent to hoReport
71274>>>>>>>>>                Get Parent of hoParent to hoParent
71275>>>>>>>>>            Loop
71276>>>>>>>>>>
71276>>>>>>>>>        End
71276>>>>>>>>>>
71276>>>>>>>>>        
71276>>>>>>>>>        Function_Return hoReport
71277>>>>>>>>>    End_Function
71278>>>>>>>>>
71278>>>>>>>>>    Function IsEnabled Returns Boolean
71280>>>>>>>>>        Handle hoReport
71280>>>>>>>>>        String sReportId
71280>>>>>>>>>
71280>>>>>>>>>        Get ReportObject to hoReport
71281>>>>>>>>>        If (hoReport > 0) Begin
71283>>>>>>>>>            Get psReportId of hoReport to sReportId
71284>>>>>>>>>            Function_Return (sReportId <> "")
71285>>>>>>>>>        End
71285>>>>>>>>>>
71285>>>>>>>>>        Else Begin
71286>>>>>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportObject
71287>>>>>>>>>>
71287>>>>>>>>>        End
71287>>>>>>>>>>
71287>>>>>>>>>
71287>>>>>>>>>        Function_Return False
71288>>>>>>>>>    End_Function
71289>>>>>>>>>End_Class
71290>>>>>>>Use cDRZoomMenuItem.pkg
Including file: cDRZoomMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRZoomMenuItem.pkg)
71290>>>>>>>>>Use cDRMenuItem.pkg
71290>>>>>>>>>Use DRLanguage.Inc
71290>>>>>>>>>
71290>>>>>>>>>Class cDRZoomMenuItem is a cDRMenuItem
71291>>>>>>>>>    Procedure Construct_Object
71293>>>>>>>>>        Forward Send Construct_Object
71295>>>>>>>>>        
71295>>>>>>>>>        Set peControlType to xtpControlComboBox
71296>>>>>>>>>        Set peControlStyle to xtpButtonCaption
71297>>>>>>>>>        Set psCaption to C_$DRZoom
71298>>>>>>>>>        Set pbControlBeginGroup to True        
71299>>>>>>>>>    End_Procedure
71300>>>>>>>>>    
71300>>>>>>>>>    Procedure OnCreateControl Handle hoCombo
71302>>>>>>>>>        Set ComDropDownListStyle of hoCombo to True
71303>>>>>>>>>        Set ComEditStyle of hoCombo to xtpEditStyleRight
71304>>>>>>>>>        Send FillComboList hoCombo
71305>>>>>>>>>    End_Procedure
71306>>>>>>>>>
71306>>>>>>>>>    Procedure AddComboItem Handle hoCombo Integer iZoomPercentage Integer iIndex Integer ByRef iMaxTextWidth
71308>>>>>>>>>        Integer iTextSize
71308>>>>>>>>>        String sText
71308>>>>>>>>>        
71308>>>>>>>>>        Case Begin
71308>>>>>>>>>            Case (iZoomPercentage = -1)
71310>>>>>>>>>                Move C_$DRZoomPageWidth to sText
71311>>>>>>>>>                Case Break
71312>>>>>>>>>            Case (iZoomPercentage = -2)
71315>>>>>>>>>                Move C_$DRZoomWholePage to sText
71316>>>>>>>>>                Case Break
71317>>>>>>>>>            Case Else
71317>>>>>>>>>                Move (String (iZoomPercentage) + '%') to sText
71318>>>>>>>>>                Case Break
71319>>>>>>>>>        Case End
71319>>>>>>>>>
71319>>>>>>>>>        Send ComAddItem of hoCombo sText iIndex
71320>>>>>>>>>        Set ComItemData of hoCombo iIndex to iZoomPercentage
71321>>>>>>>>>        Get Text_Extent sText to iTextSize
71322>>>>>>>>>        Move (Low (iTextSize)) to iTextSize
71323>>>>>>>>>        
71323>>>>>>>>>        Move (iMaxTextWidth max iTextSize) to iMaxTextWidth
71324>>>>>>>>>    End_Procedure
71325>>>>>>>>>    
71325>>>>>>>>>    Procedure FillComboList Handle hoCombo
71327>>>>>>>>>        String sCaption
71327>>>>>>>>>        Integer iMaxTextWidth iTextSize iLabelWidth iThumbWidth
71327>>>>>>>>>        
71327>>>>>>>>>        Send ComClear of hoCombo
71328>>>>>>>>>        Send AddComboItem hoCombo 500 1 (&iMaxTextWidth)
71329>>>>>>>>>        Send AddComboItem hoCombo 400 2 (&iMaxTextWidth)
71330>>>>>>>>>        Send AddComboItem hoCombo 300 3 (&iMaxTextWidth)
71331>>>>>>>>>        Send AddComboItem hoCombo 200 4 (&iMaxTextWidth)
71332>>>>>>>>>        Send AddComboItem hoCombo 100 5 (&iMaxTextWidth)
71333>>>>>>>>>        Send AddComboItem hoCombo 75 6 (&iMaxTextWidth)
71334>>>>>>>>>        Send AddComboItem hoCombo 50 7 (&iMaxTextWidth)
71335>>>>>>>>>        Send AddComboItem hoCombo 25 8 (&iMaxTextWidth)
71336>>>>>>>>>        Send AddComboItem hoCombo -1 9 (&iMaxTextWidth)
71337>>>>>>>>>        Send AddComboItem hoCombo -2 10 (&iMaxTextWidth)
71338>>>>>>>>>
71338>>>>>>>>>        Get psCaption to sCaption
71339>>>>>>>>>        Get Text_Extent sCaption to iTextSize
71340>>>>>>>>>        Move (Low (iTextSize)) to iLabelWidth
71341>>>>>>>>>        Move (iMaxTextWidth + iLabelWidth) to iMaxTextWidth
71342>>>>>>>>>        
71342>>>>>>>>>        Move (GetSystemMetrics (SM_CXVSCROLL)) to iThumbWidth
71343>>>>>>>>>        Move (iMaxTextWidth + iThumbWidth) to iMaxTextWidth
71344>>>>>>>>>
71344>>>>>>>>>        Set ComDropDownWidth Of hoCombo To iMaxTextWidth
71345>>>>>>>>>        Set ComListIndex of hoCombo to 5
71346>>>>>>>>>        Set ComWidth of hoCombo to iMaxTextWidth
71347>>>>>>>>>    End_Procedure
71348>>>>>>>>>
71348>>>>>>>>>    Function ToInteger String sValue Returns Integer
71350>>>>>>>>>        Integer iLength iPos
71350>>>>>>>>>        String sChar sOutput
71350>>>>>>>>>        
71350>>>>>>>>>        Move (Length (sValue)) to iLength
71351>>>>>>>>>        For iPos from 1 to iLength
71357>>>>>>>>>>
71357>>>>>>>>>            Move (Mid (sValue, 1, iPos)) to sChar
71358>>>>>>>>>            If ("0123456789" contains sChar) Begin
71360>>>>>>>>>                Move (sOutput + sChar) to sOutput
71361>>>>>>>>>            End
71361>>>>>>>>>>
71361>>>>>>>>>        Loop
71362>>>>>>>>>>
71362>>>>>>>>>        
71362>>>>>>>>>        Function_Return sOutput
71363>>>>>>>>>    End_Function
71364>>>>>>>>>
71364>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71366>>>>>>>>>        Integer iIndex iZoomFactor
71366>>>>>>>>>        Handle hoCombo hoReport
71366>>>>>>>>>        String sValue
71366>>>>>>>>>
71366>>>>>>>>>        Get CreateProxyControl vCommandBarControl to hoCombo
71367>>>>>>>>>        Get ComListIndex of hoCombo to iIndex
71368>>>>>>>>>        If (iIndex > 0) Begin
71370>>>>>>>>>            Get ComItemData of hoCombo iIndex to iZoomFactor
71371>>>>>>>>>        End
71371>>>>>>>>>>
71371>>>>>>>>>        Else Begin
71372>>>>>>>>>            Get ComText of hoCombo to sValue
71373>>>>>>>>>            Get ToInteger sValue to iZoomFactor
71374>>>>>>>>>        End
71374>>>>>>>>>>
71374>>>>>>>>>        If (iZoomFactor = -1 or iZoomFactor = -2 or (iZoomFactor >= 25 and iZoomFactor <= 500)) Begin
71376>>>>>>>>>            Get ReportObject to hoReport
71377>>>>>>>>>            Set piPreviewZoom of hoReport to iZoomFactor
71378>>>>>>>>>        End
71378>>>>>>>>>>
71378>>>>>>>>>
71378>>>>>>>>>        Send Destroy of hoCombo
71379>>>>>>>>>    End_Procedure
71380>>>>>>>>>
71380>>>>>>>>>    Procedure Set psText String sValue
71382>>>>>>>>>        Handle hoEdit
71382>>>>>>>>>        Boolean bCreated
71382>>>>>>>>>
71382>>>>>>>>>        Get IsComObjectCreated to bCreated
71383>>>>>>>>>        If (bCreated) Begin
71385>>>>>>>>>            Get CreateFirstProxyControl to hoEdit
71386>>>>>>>>>            If (hoEdit) Begin
71388>>>>>>>>>                Set ComText of hoEdit to sValue
71389>>>>>>>>>                Send Destroy of hoEdit
71390>>>>>>>>>            End
71390>>>>>>>>>>
71390>>>>>>>>>        End
71390>>>>>>>>>>
71390>>>>>>>>>    End_Procedure
71391>>>>>>>>>End_Class
71392>>>>>>>Use cDRCurrentPageMenuItem.pkg
Including file: cDRCurrentPageMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRCurrentPageMenuItem.pkg)
71392>>>>>>>>>Use cDRMenuItem.pkg
71392>>>>>>>>>
71392>>>>>>>>>Class cDRCurrentPageMenuItem is a cDRMenuItem
71393>>>>>>>>>    Procedure OnCreateControl Handle hoEdit
71395>>>>>>>>>        Set ComText of hoEdit to 0
71396>>>>>>>>>        Set ComWidth of hoEdit to 50
71397>>>>>>>>>        Set ComShowSpinButtons of hoEdit to True
71398>>>>>>>>>        Set ComEditStyle of hoEdit to xtpEditStyleRight
71399>>>>>>>>>    End_Procedure
71400>>>>>>>>>
71400>>>>>>>>>    Procedure Set psText String sValue
71402>>>>>>>>>        Handle hoEdit
71402>>>>>>>>>        Boolean bCreated
71402>>>>>>>>>
71402>>>>>>>>>        Get IsComObjectCreated to bCreated
71403>>>>>>>>>        If (bCreated) Begin
71405>>>>>>>>>            Get CreateFirstProxyControl to hoEdit
71406>>>>>>>>>            If (hoEdit > 0) Begin
71408>>>>>>>>>                Set ComText of hoEdit to sValue
71409>>>>>>>>>                Send Destroy of hoEdit
71410>>>>>>>>>            End
71410>>>>>>>>>>
71410>>>>>>>>>        End
71410>>>>>>>>>>
71410>>>>>>>>>    End_Procedure
71411>>>>>>>>>    
71411>>>>>>>>>    Function ToInteger String sValue Returns Integer
71413>>>>>>>>>        Integer iLength iPos
71413>>>>>>>>>        String sChar sOutput
71413>>>>>>>>>        
71413>>>>>>>>>        Move (Length (sValue)) to iLength
71414>>>>>>>>>        For iPos from 1 to iLength
71420>>>>>>>>>>
71420>>>>>>>>>            Move (Mid (sValue, 1, iPos)) to sChar
71421>>>>>>>>>            If ("0123456789" contains sChar) Begin
71423>>>>>>>>>                Move (sOutput + sChar) to sOutput
71424>>>>>>>>>            End
71424>>>>>>>>>>
71424>>>>>>>>>        Loop
71425>>>>>>>>>>
71425>>>>>>>>>        
71425>>>>>>>>>        Function_Return sOutput
71426>>>>>>>>>    End_Function
71427>>>>>>>>>
71427>>>>>>>>>    Function psText Returns String
71429>>>>>>>>>        Handle hoEdit
71429>>>>>>>>>        String sText
71429>>>>>>>>>        Boolean bCreated
71429>>>>>>>>>
71429>>>>>>>>>        Get IsComObjectCreated to bCreated
71430>>>>>>>>>        If (bCreated) Begin
71432>>>>>>>>>            Get CreateFirstProxyControl to hoEdit
71433>>>>>>>>>            If (hoEdit) Begin
71435>>>>>>>>>                Get ComText of hoEdit to sText
71436>>>>>>>>>                Get ToInteger sText to sText
71437>>>>>>>>>                Send Destroy of hoEdit
71438>>>>>>>>>            End
71438>>>>>>>>>>
71438>>>>>>>>>        End
71438>>>>>>>>>>
71438>>>>>>>>>        Function_Return sText
71439>>>>>>>>>    End_Function
71440>>>>>>>>>
71440>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71442>>>>>>>>>        Integer iPage
71442>>>>>>>>>        Handle hoReport
71442>>>>>>>>>
71442>>>>>>>>>        Get psText to iPage
71443>>>>>>>>>        Get ReportObject to hoReport
71444>>>>>>>>>        Set piPreviewCurrentPage of hoReport to iPage
71445>>>>>>>>>    End_Procedure
71446>>>>>>>>>
71446>>>>>>>>>    Procedure OnChange
71448>>>>>>>>>        Integer iPage
71448>>>>>>>>>        Handle hoReport
71448>>>>>>>>>
71448>>>>>>>>>        Get psText to iPage
71449>>>>>>>>>        If (iPage >= 0) Begin
71451>>>>>>>>>            Get ReportObject to hoReport
71452>>>>>>>>>            Set piPreviewCurrentPage of hoReport to iPage
71453>>>>>>>>>        End
71453>>>>>>>>>>
71453>>>>>>>>>    End_Procedure
71454>>>>>>>>>End_Class
71455>>>>>>>Use cDRExportMenuItem.pkg
Including file: cDRExportMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRExportMenuItem.pkg)
71455>>>>>>>>>Use cCJCommandBarSystem.pkg
71455>>>>>>>>>Use cDRMenuItem.pkg
71455>>>>>>>>>Use DRLanguage.Inc
71455>>>>>>>>>
71455>>>>>>>>>Class cDRExportMenuItem is a cDRMenuItem
71456>>>>>>>>>    Procedure Construct_Object
71458>>>>>>>>>        Forward Send Construct_Object
71460>>>>>>>>>        
71460>>>>>>>>>        Property Handle phoExportOptionsDialog 0
71461>>>>>>>>>
71461>>>>>>>>>        Set psCaption to C_$DRExport
71462>>>>>>>>>        Set psToolTip to C_$DRExportTheReport
71463>>>>>>>>>        Set pbControlBeginGroup to True
71464>>>>>>>>>        Set psImage to "DRExport.ico"
71465>>>>>>>>>    End_Procedure
71466>>>>>>>>>    
71466>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71468>>>>>>>>>        Handle hoReport hoExportOptionsDialog
71468>>>>>>>>>        
71468>>>>>>>>>        Get ReportObject to hoReport
71469>>>>>>>>>        If (hoReport > 0) Begin
71471>>>>>>>>>            Get phoExportOptionsDialog to hoExportOptionsDialog
71472>>>>>>>>>            If (hoExportOptionsDialog > 0) Begin
71474>>>>>>>>>                Send ExportReport of hoExportOptionsDialog hoReport
71475>>>>>>>>>            End
71475>>>>>>>>>>
71475>>>>>>>>>        End
71475>>>>>>>>>>
71475>>>>>>>>>        Else Begin
71476>>>>>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
71477>>>>>>>>>>
71477>>>>>>>>>        End
71477>>>>>>>>>>
71477>>>>>>>>>    End_Procedure
71478>>>>>>>>>End_Class
71479>>>>>>>Use cDRPrintMenuItem.pkg
Including file: cDRPrintMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRPrintMenuItem.pkg)
71479>>>>>>>>>Use cDRMenuItem.pkg
71479>>>>>>>>>Use DRLanguage.Inc
71479>>>>>>>>>
71479>>>>>>>>>Class cDRPrintMenuItem is a cDRMenuItem 
71480>>>>>>>>>    Procedure Construct_Object
71482>>>>>>>>>        Forward Send Construct_Object
71484>>>>>>>>>        
71484>>>>>>>>>        Set psCaption to C_$DRPrintReport
71485>>>>>>>>>        Set psToolTip to C_$DRPrintTheReportToAPrinter
71486>>>>>>>>>        Set psDescription to C_$DRPrintTheCurrentReportToAPrinter
71487>>>>>>>>>        Set psImage to "DRPrint.ico"
71488>>>>>>>>>    End_Procedure
71489>>>>>>>>>                   
71489>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71491>>>>>>>>>        Handle hoReport
71491>>>>>>>>>        
71491>>>>>>>>>        Get ReportObject to hoReport
71492>>>>>>>>>        If (hoReport > 0) Begin
71494>>>>>>>>>            Send PrintReport of hoReport 0
71495>>>>>>>>>        End
71495>>>>>>>>>>
71495>>>>>>>>>        Else Begin
71496>>>>>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
71497>>>>>>>>>>
71497>>>>>>>>>        End
71497>>>>>>>>>>
71497>>>>>>>>>    End_Procedure
71498>>>>>>>>>End_Class
71499>>>>>>>Use cDRFirstPageMenuItem.pkg
Including file: cDRFirstPageMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRFirstPageMenuItem.pkg)
71499>>>>>>>>>Use cDRMenuItem.pkg
71499>>>>>>>>>Use DRLanguage.Inc
71499>>>>>>>>>
71499>>>>>>>>>Class cDRFirstPageMenuItem is a cDRMenuItem
71500>>>>>>>>>    Procedure Construct_Object
71502>>>>>>>>>        Forward Send Construct_Object
71504>>>>>>>>>        
71504>>>>>>>>>        Set psCaption to C_$DRFirstPage
71505>>>>>>>>>        Set psToolTip to C_$DRGoToTheFirstPage
71506>>>>>>>>>        Set psDescription to C_$DRJumpsToTheFirstPageOfTheReport
71507>>>>>>>>>        Set psShortcut to C_$DRCtrlHomeShortCut
71508>>>>>>>>>        Set psImage to "DRFirstPage.ico"
71509>>>>>>>>>    End_Procedure
71510>>>>>>>>>    
71510>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71512>>>>>>>>>        Handle hoReport
71512>>>>>>>>>        
71512>>>>>>>>>        Get ReportObject to hoReport
71513>>>>>>>>>        If (hoReport > 0) Begin
71515>>>>>>>>>            Send PreviewFirstPage of hoReport
71516>>>>>>>>>        End
71516>>>>>>>>>>
71516>>>>>>>>>        Else Begin
71517>>>>>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
71518>>>>>>>>>>
71518>>>>>>>>>        End
71518>>>>>>>>>>
71518>>>>>>>>>    End_Procedure
71519>>>>>>>>>End_Class
71520>>>>>>>Use cDRPreviousPageMenuItem.pkg
Including file: cDRPreviousPageMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRPreviousPageMenuItem.pkg)
71520>>>>>>>>>Use cDRMenuItem.pkg
71520>>>>>>>>>Use DRLanguage.Inc
71520>>>>>>>>>
71520>>>>>>>>>Class cDRPreviousPageMenuItem is a cDRMenuItem
71521>>>>>>>>>    Procedure Construct_Object
71523>>>>>>>>>        Forward Send Construct_Object
71525>>>>>>>>>        
71525>>>>>>>>>        Set psCaption to C_$DRPreviousPage
71526>>>>>>>>>        Set psToolTip to C_$DRGoToThePreviousPage
71527>>>>>>>>>        Set psDescription to C_$DRJumpsToThePreviousPageOfTheReport
71528>>>>>>>>>        Set psShortcut to C_$DRPageUpShortCut
71529>>>>>>>>>        Set psImage to "DRPreviousPage.ico"
71530>>>>>>>>>    End_Procedure
71531>>>>>>>>>    
71531>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71533>>>>>>>>>        Handle hoReport
71533>>>>>>>>>        
71533>>>>>>>>>        Get ReportObject to hoReport
71534>>>>>>>>>        If (hoReport > 0) Begin
71536>>>>>>>>>            Send PreviewPreviousPage of hoReport
71537>>>>>>>>>        End
71537>>>>>>>>>>
71537>>>>>>>>>        Else Begin
71538>>>>>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
71539>>>>>>>>>>
71539>>>>>>>>>        End
71539>>>>>>>>>>
71539>>>>>>>>>    End_Procedure
71540>>>>>>>>>End_Class
71541>>>>>>>Use cDRNextPageMenuItem.pkg
Including file: cDRNextPageMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRNextPageMenuItem.pkg)
71541>>>>>>>>>Use cDRMenuItem.pkg
71541>>>>>>>>>Use DRLanguage.Inc
71541>>>>>>>>>
71541>>>>>>>>>Class cDRNextPageMenuItem is a cDRMenuItem
71542>>>>>>>>>    Procedure Construct_Object
71544>>>>>>>>>        Forward Send Construct_Object
71546>>>>>>>>>        
71546>>>>>>>>>        Set psCaption to C_$DRNextPage
71547>>>>>>>>>        Set psToolTip to C_$DRGoToTheNextPage
71548>>>>>>>>>        Set psDescription to C_$DRJumpsToTheNextPageOfTheReport
71549>>>>>>>>>        Set psShortcut to C_$DRPageDownShortCut
71550>>>>>>>>>        Set psImage to "DRNextPage.ico"
71551>>>>>>>>>    End_Procedure
71552>>>>>>>>>    
71552>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71554>>>>>>>>>        Handle hoReport
71554>>>>>>>>>        
71554>>>>>>>>>        Get ReportObject to hoReport
71555>>>>>>>>>        If (hoReport > 0) Begin
71557>>>>>>>>>            Send PreviewNextPage of hoReport
71558>>>>>>>>>        End
71558>>>>>>>>>>
71558>>>>>>>>>        Else Begin
71559>>>>>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
71560>>>>>>>>>>
71560>>>>>>>>>        End
71560>>>>>>>>>>
71560>>>>>>>>>    End_Procedure
71561>>>>>>>>>End_Class
71562>>>>>>>Use cDRLastPageMenuItem.pkg
Including file: cDRLastPageMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRLastPageMenuItem.pkg)
71562>>>>>>>>>Use cDRMenuItem.pkg
71562>>>>>>>>>Use DRLanguage.Inc
71562>>>>>>>>>
71562>>>>>>>>>Class cDRLastPageMenuItem is a cDRMenuItem
71563>>>>>>>>>    Procedure Construct_Object
71565>>>>>>>>>        Forward Send Construct_Object
71567>>>>>>>>>        
71567>>>>>>>>>        Set psCaption to C_$DRLastPage
71568>>>>>>>>>        Set psToolTip to C_$DRGoToTheLastPage
71569>>>>>>>>>        Set psDescription to C_$DRJumpsToTheLastPageOfTheReport
71570>>>>>>>>>        Set psShortcut to C_$DRCtrlEndShortCut
71571>>>>>>>>>        Set psImage to "DRLastPage.ico"
71572>>>>>>>>>    End_Procedure
71573>>>>>>>>>    
71573>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71575>>>>>>>>>        Handle hoReport
71575>>>>>>>>>        
71575>>>>>>>>>        Get ReportObject to hoReport
71576>>>>>>>>>        If (hoReport > 0) Begin
71578>>>>>>>>>            Send PreviewLastPage of hoReport
71579>>>>>>>>>        End
71579>>>>>>>>>>
71579>>>>>>>>>        Else Begin
71580>>>>>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
71581>>>>>>>>>>
71581>>>>>>>>>        End
71581>>>>>>>>>>
71581>>>>>>>>>    End_Procedure
71582>>>>>>>>>End_Class
71583>>>>>>>Use cDRRefreshMenuItem.pkg
Including file: cDRRefreshMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRRefreshMenuItem.pkg)
71583>>>>>>>>>Use cDRMenuItem.pkg
71583>>>>>>>>>Use DRLanguage.Inc
71583>>>>>>>>>
71583>>>>>>>>>Class cDRRefreshMenuItem is a cDRMenuItem
71584>>>>>>>>>    Procedure Construct_Object
71586>>>>>>>>>        Forward Send Construct_Object
71588>>>>>>>>>        
71588>>>>>>>>>        Set psCaption to C_$DRRefresh
71589>>>>>>>>>        Set psDescription to C_$DRRefreshTheReport
71590>>>>>>>>>        Set psToolTip to C_$DRRefreshTheCurrentReport
71591>>>>>>>>>        Set pbActiveUpdate to True
71592>>>>>>>>>        Set psImage to "DRRefresh.Ico"
71593>>>>>>>>>        Set pbControlBeginGroup to True
71594>>>>>>>>>    End_Procedure
71595>>>>>>>>>    
71595>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
71597>>>>>>>>>        Handle hoReport
71597>>>>>>>>>        
71597>>>>>>>>>        Get ReportObject to hoReport
71598>>>>>>>>>        If (hoReport > 0) Begin
71600>>>>>>>>>            Send RefreshReport of hoReport
71601>>>>>>>>>        End
71601>>>>>>>>>>
71601>>>>>>>>>        Else Begin
71602>>>>>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
71603>>>>>>>>>>
71603>>>>>>>>>        End
71603>>>>>>>>>>
71603>>>>>>>>>    End_Procedure
71604>>>>>>>>>End_Class
71605>>>>>>>Use cDRReport.pkg
71605>>>>>>>Use DRExportOptions.dg
Including file: DRExportOptions.dg    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRExportOptions.dg)
71605>>>>>>>>>Use Windows.pkg
71605>>>>>>>>>Use File_dlg.pkg
71605>>>>>>>>>Use dfSpnFrm.pkg
71605>>>>>>>>>Use cDRAPI.pkg
71605>>>>>>>>>Use Dfcursor.pkg
71605>>>>>>>>>Use DRLanguage.Inc
71605>>>>>>>>>Use cDR.h.pkg
71605>>>>>>>>>Use cDRExportOptionsGroup.pkg
Including file: cDRExportOptionsGroup.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRExportOptionsGroup.pkg)
71605>>>>>>>>>>>Use Windows.Pkg
71605>>>>>>>>>>>
71605>>>>>>>>>>>Class cDRExportOptionsGroup is a Group
71606>>>>>>>>>>>    Procedure Construct_Object
71608>>>>>>>>>>>        Forward Send Construct_Object
71610>>>>>>>>>>>        
71610>>>>>>>>>>>        Set Visible_State to False
71611>>>>>>>>>>>        Set Enabled_State to False
71612>>>>>>>>>>>    End_Procedure
71613>>>>>>>>>>>    
71613>>>>>>>>>>>    Procedure ShowGroup Boolean bShow
71615>>>>>>>>>>>        Set Visible_State to bShow
71616>>>>>>>>>>>        Set Enabled_State to bShow        
71617>>>>>>>>>>>    End_Procedure
71618>>>>>>>>>>>End_Class
71619>>>>>>>>>
71619>>>>>>>>>Object oDRExportOptionsDialog is a ModalPanel
71621>>>>>>>>>    Set Size to 144 306
71622>>>>>>>>>    Set Label to C_$DREnterSelectExportOptions
71623>>>>>>>>>    Set piMinSize to 89 211
71624>>>>>>>>>    Set Location to 2 2
71625>>>>>>>>>    Set Border_Style to Border_Thick
71626>>>>>>>>>    Set Icon to "DR.Ico"
71627>>>>>>>>>
71627>>>>>>>>>    Property Handle phoReport
71629>>>>>>>>>
71629>>>>>>>>>    Object oSaveAsFileDialog is a SaveAsDialog
71631>>>>>>>>>        Set NoChangeDir_State to True
71632>>>>>>>>>        Set Dialog_Caption to C_$DRSelectEnterExportFileName
71633>>>>>>>>>    End_Object
71634>>>>>>>>>
71634>>>>>>>>>    Object oOKButton is a Button
71636>>>>>>>>>        Set Label to C_$OK
71637>>>>>>>>>        Set Location to 127 195
71638>>>>>>>>>        Set peAnchors to anBottomRight
71639>>>>>>>>>
71639>>>>>>>>>        Procedure OnClick
71642>>>>>>>>>            Handle hoReport hWnd
71642>>>>>>>>>            Integer iExportToOption iRetval
71642>>>>>>>>>            String sFileName sOperation
71642>>>>>>>>>            Boolean bViewPDF
71642>>>>>>>>>
71642>>>>>>>>>            Get phoReport to hoReport
71643>>>>>>>>>            Get Value of oFileNameForm to sFileName
71644>>>>>>>>>
71644>>>>>>>>>            Get ExportToOption of oExportToComboForm to iExportToOption
71645>>>>>>>>>            Case Begin
71645>>>>>>>>>                Case (iExportToOption = C_DRPDF)
71647>>>>>>>>>                    Get CollectPDFExportOptions of oPDFOptionsGroup hoReport to bViewPDF
71648>>>>>>>>>                    Send ExportReport of hoReport C_DRPDF sFileName
71649>>>>>>>>>                    If (bViewPDF) Begin
71651>>>>>>>>>                        Get Window_Handle to hWnd
71652>>>>>>>>>                        Move "OPEN" to sOperation
71653>>>>>>>>>                        Move (DR_WinAPI_ShellExecute (hWnd, AddressOf (sOperation), AddressOf (sFileName), 0, 0, SW_SHOWDEFAULT)) to iRetval
71654>>>>>>>>>                    End
71654>>>>>>>>>>
71654>>>>>>>>>                    Case Break
71655>>>>>>>>>                Case (iExportToOption = C_DRCSV)
71658>>>>>>>>>                    Send CollectCSVExportOptions of oCSVOptionsGroup hoReport
71659>>>>>>>>>                    Send ExportReport of hoReport C_DRCSV sFileName
71660>>>>>>>>>                    Case Break
71661>>>>>>>>>                Case (iExportToOption = C_DRImage)
71664>>>>>>>>>                    Send CollectImageOptions of oImageOptionsGroup hoReport
71665>>>>>>>>>                    Send ExportReport of hoReport C_DRImage sFileName
71666>>>>>>>>>                    Case Break
71667>>>>>>>>>                Case (iExportToOption = C_DRHTML)
71670>>>>>>>>>                    Send CollectHTMLOptions of oHTMLOptionsGroup hoReport
71671>>>>>>>>>                    Send ExportReport of hoReport C_DRHTML sFileName
71672>>>>>>>>>                    Case Break
71673>>>>>>>>>                Case (iExportToOption = C_DRXLS)
71676>>>>>>>>>                    Send CollectXLSOptions of oXLSOptionsGroup hoReport
71677>>>>>>>>>                    Send ExportReport of hoReport C_DRXLS sFileName
71678>>>>>>>>>                    Case Break
71679>>>>>>>>>                Case (iExportToOption = C_DRRTF)
71682>>>>>>>>>                    Send CollectRTFOptions of oRTFOptionsGroup hoReport
71683>>>>>>>>>                    Send ExportReport of hoReport C_DRRTF sFileName
71684>>>>>>>>>                    Case Break
71685>>>>>>>>>            Case End
71685>>>>>>>>>
71685>>>>>>>>>            Send Close_Panel
71686>>>>>>>>>        End_Procedure
71687>>>>>>>>>    End_Object
71688>>>>>>>>>
71688>>>>>>>>>    Object oCancelButton is a Button
71690>>>>>>>>>        Set Label to C_$Cancel
71691>>>>>>>>>        Set Location to 127 250
71692>>>>>>>>>        Set peAnchors to anBottomRight
71693>>>>>>>>>
71693>>>>>>>>>        Procedure OnClick
71696>>>>>>>>>            Send Close_Panel
71697>>>>>>>>>        End_Procedure
71698>>>>>>>>>    End_Object
71699>>>>>>>>>
71699>>>>>>>>>    Object oExportToComboForm is a ComboForm
71701>>>>>>>>>        Set Size to 13 61
71702>>>>>>>>>        Set Location to 5 70
71703>>>>>>>>>        Set Entry_State to False
71704>>>>>>>>>        Set Combo_Sort_State to False
71705>>>>>>>>>        Set Label to C_$DRExportTo
71706>>>>>>>>>        Set Label_Justification_Mode to JMode_Right
71707>>>>>>>>>        Set Label_Col_Offset to 2
71708>>>>>>>>>
71708>>>>>>>>>        Procedure Combo_Fill_List
71711>>>>>>>>>            Send Combo_Add_Item C_$DRPDF
71712>>>>>>>>>            Send Combo_Add_Item C_$DRCSV
71713>>>>>>>>>            Send Combo_Add_Item C_$DRImage
71714>>>>>>>>>            Send Combo_Add_Item C_$DRHTML
71715>>>>>>>>>            Send Combo_Add_Item C_$DRXLS
71716>>>>>>>>>            Send Combo_Add_Item C_$DRRTF
71717>>>>>>>>>        End_Procedure
71718>>>>>>>>>
71718>>>>>>>>>        Procedure Activating
71721>>>>>>>>>            Handle hoReport
71721>>>>>>>>>            Integer eExportType
71721>>>>>>>>>            String sExportChoice
71721>>>>>>>>>
71721>>>>>>>>>            Forward Send Activating
71723>>>>>>>>>
71723>>>>>>>>>            Get phoReport to hoReport
71724>>>>>>>>>            Get peExportType of hoReport to eExportType
71725>>>>>>>>>            Get Combo_Value eExportType to sExportChoice
71726>>>>>>>>>            Set Value to sExportChoice
71727>>>>>>>>>        End_Procedure
71728>>>>>>>>>
71728>>>>>>>>>        Function ExportToOption Returns Integer
71731>>>>>>>>>            String sExportChoice
71731>>>>>>>>>            Integer iItem
71731>>>>>>>>>
71731>>>>>>>>>            Get Value to sExportChoice
71732>>>>>>>>>            Get Combo_Item_Matching sExportChoice to iItem
71733>>>>>>>>>
71733>>>>>>>>>            Function_Return iItem
71734>>>>>>>>>        End_Function
71735>>>>>>>>>
71735>>>>>>>>>        Procedure OnChange
71738>>>>>>>>>            Integer eOption
71738>>>>>>>>>
71738>>>>>>>>>            Get ExportToOption to eOption
71739>>>>>>>>>
71739>>>>>>>>>            Send ShowGroup of oPDFOptionsGroup (eOption = C_DRPDF)
71740>>>>>>>>>            Send ShowGroup of oCSVOptionsGroup (eOption = C_DRCSV)
71741>>>>>>>>>            Send ShowGroup of oImageOptionsGroup (eOption = C_DRImage)
71742>>>>>>>>>            Send ShowGroup of oHTMLOptionsGroup (eOption = C_DRHTML)
71743>>>>>>>>>            Send ShowGroup of oXLSOptionsGroup (eOption = C_DRXLS)
71744>>>>>>>>>            Send ShowGroup of oRTFOptionsGroup (eOption = C_DRRTF)
71745>>>>>>>>>        End_Procedure
71746>>>>>>>>>    End_Object
71747>>>>>>>>>
71747>>>>>>>>>    Object oFileNameForm is a Form
71749>>>>>>>>>        Set Size to 13 231
71750>>>>>>>>>        Set Location to 20 70
71751>>>>>>>>>        Set Prompt_Button_Mode to PB_PromptOn
71752>>>>>>>>>        Set Label to C_$DRFileName
71753>>>>>>>>>        Set Label_Justification_Mode to JMode_Right
71754>>>>>>>>>        Set Label_Col_Offset to 2
71755>>>>>>>>>        Set peAnchors to anTopLeftRight
71756>>>>>>>>>
71756>>>>>>>>>        Procedure CheckFileExtension String sExtension
71759>>>>>>>>>            String sFileName sFileExtension
71759>>>>>>>>>
71759>>>>>>>>>            Get Value to sFileName
71760>>>>>>>>>            Get DRPathFindExtension sFileName to sFileExtension
71761>>>>>>>>>            Move (Lowercase (sFileExtension)) to sFileExtension
71762>>>>>>>>>            If (sFileExtension <> sExtension) Begin
71764>>>>>>>>>                Move (sFileName - sExtension) to sFileName
71765>>>>>>>>>                Set Value to sFileName
71766>>>>>>>>>            End
71766>>>>>>>>>>
71766>>>>>>>>>        End_Procedure
71767>>>>>>>>>
71767>>>>>>>>>        Procedure Activating
71770>>>>>>>>>            Handle hoReport
71770>>>>>>>>>            String sFileName
71770>>>>>>>>>
71770>>>>>>>>>            Forward Send Activating
71772>>>>>>>>>
71772>>>>>>>>>            Get phoReport to hoReport
71773>>>>>>>>>            Get psExportFileName of hoReport to sFileName
71774>>>>>>>>>            Set Value to sFileName
71775>>>>>>>>>        End_Procedure
71776>>>>>>>>>
71776>>>>>>>>>        Procedure OnChange
71779>>>>>>>>>            String sFileName
71779>>>>>>>>>            Boolean bEnabled
71779>>>>>>>>>
71779>>>>>>>>>            Get Value to sFileName
71780>>>>>>>>>            Move (sFileName <> "") to bEnabled
71781>>>>>>>>>
71781>>>>>>>>>            Set Enabled_State of oOKButton to bEnabled
71782>>>>>>>>>        End_Procedure
71783>>>>>>>>>
71783>>>>>>>>>        Procedure Prompt
71786>>>>>>>>>            Integer iExportToOption iImageType
71786>>>>>>>>>            String sFileName
71786>>>>>>>>>            Boolean bSelected
71786>>>>>>>>>
71786>>>>>>>>>            Get ExportToOption of oExportToComboForm to iExportToOption
71787>>>>>>>>>
71787>>>>>>>>>            Case Begin
71787>>>>>>>>>                Case (iExportToOption = C_DRPDF)
71789>>>>>>>>>                    Set Filter_String of oSaveAsFileDialog to C_$DRPDFFileExtensionsFilter
71790>>>>>>>>>                    Set Filter_Index of oSaveAsFileDialog to 1
71791>>>>>>>>>                    Case Break
71792>>>>>>>>>                Case (iExportToOption = C_DRCSV)
71795>>>>>>>>>                    Set Filter_String of oSaveAsFileDialog to C_$DRCSVFileExtensionsFilter
71796>>>>>>>>>                    Set Filter_Index of oSaveAsFileDialog to 1
71797>>>>>>>>>                    Case Break
71798>>>>>>>>>                Case (iExportToOption = C_DRImage)
71801>>>>>>>>>                    Set Filter_String of oSaveAsFileDialog to C_$DRJPGFileExtensionsFilter
71802>>>>>>>>>                    Get ImageType of oImageTypeComboForm to iImageType
71803>>>>>>>>>                    Set Filter_Index of oSaveAsFileDialog to iImageType
71804>>>>>>>>>                    Case Break
71805>>>>>>>>>                Case (iExportToOption = C_DRHTML)
71808>>>>>>>>>                    Set Filter_String of oSaveAsFileDialog to C_$DRHTMLFileExtensionsFilter
71809>>>>>>>>>                    Set Filter_Index of oSaveAsFileDialog to 1
71810>>>>>>>>>                    Case Break
71811>>>>>>>>>                Case (iExportToOption = C_DRXLS)
71814>>>>>>>>>                    Set Filter_String of oSaveAsFileDialog to C_$DRXLSFileExtensionsFilter
71815>>>>>>>>>                    Set Filter_Index of oSaveAsFileDialog to 1
71816>>>>>>>>>                    Case Break
71817>>>>>>>>>                Case (iExportToOption = C_DRRTF)
71820>>>>>>>>>                    Set Filter_String of oSaveAsFileDialog to C_$DRRTFFileExtensionsFilter
71821>>>>>>>>>                    Set Filter_Index of oSaveAsFileDialog to 1
71822>>>>>>>>>                    Case Break
71823>>>>>>>>>            Case End
71823>>>>>>>>>
71823>>>>>>>>>            Get Value to sFileName
71824>>>>>>>>>            Set File_Title of oSaveAsFileDialog to sFileName
71825>>>>>>>>>            Get Show_Dialog of oSaveAsFileDialog to bSelected
71826>>>>>>>>>            If (bSelected) Begin
71828>>>>>>>>>                Get File_Name of oSaveAsFileDialog to sFileName
71829>>>>>>>>>                Set Value to sFileName
71830>>>>>>>>>            End
71830>>>>>>>>>>
71830>>>>>>>>>        End_Procedure
71831>>>>>>>>>    End_Object
71832>>>>>>>>>
71832>>>>>>>>>    Object oPDFOptionsGroup is a cDRExportOptionsGroup
71834>>>>>>>>>        Set Size to 90 295
71835>>>>>>>>>        Set Location to 35 5
71836>>>>>>>>>        Set Label to C_$DRPDFOptions
71837>>>>>>>>>        Set peAnchors to anTopLeftRight
71838>>>>>>>>>
71838>>>>>>>>>        Function CollectPDFExportOptions Handle hoReport Returns Boolean
71841>>>>>>>>>            drPDFExportOptions PDFExportOptions
71841>>>>>>>>>            drPDFExportOptions PDFExportOptions
71841>>>>>>>>>            Boolean bViewPDF
71841>>>>>>>>>            Integer iPages
71841>>>>>>>>>
71841>>>>>>>>>            Send CheckFileExtension of oFileNameForm ".pdf"
71842>>>>>>>>>
71842>>>>>>>>>            Get DefaultPDFExportOptions of hoReport to PDFExportOptions
71843>>>>>>>>>            Get PDFType of oPDFTypeComboForm to PDFExportOptions.iPDFType
71844>>>>>>>>>            Get PageMode of oPageModeComboForm to PDFExportOptions.iPageMode
71845>>>>>>>>>            Get Value of oOwnerPasswordForm to PDFExportOptions.sOwnerPassword
71846>>>>>>>>>            Get Value of oUserPasswordForm to PDFExportOptions.sUserPassword
71847>>>>>>>>>            Get ImageQuality of oImageQualityComboForm to PDFExportOptions.iImageQuality
71848>>>>>>>>>            Get Checked_State of oAllPagesCheckBox to PDFExportOptions.bAllPages
71849>>>>>>>>>            Get Value of oPageSpinForm to PDFExportOptions.iPage
71850>>>>>>>>>            If (not (PDFExportOptions.bAllPages)) Begin
71852>>>>>>>>>                Get ReportPageCount of hoReport to iPages
71853>>>>>>>>>                Move ((PDFExportOptions.iPage max 1) min iPages) to PDFExportOptions.iPage
71854>>>>>>>>>            End
71854>>>>>>>>>>
71854>>>>>>>>>            Set pPDFExportOptions of hoReport to PDFExportOptions
71855>>>>>>>>>            Get Checked_State of oOpenPDFCheckBox to bViewPDF
71856>>>>>>>>>
71856>>>>>>>>>            Function_Return bViewPDF
71857>>>>>>>>>        End_Function
71858>>>>>>>>>
71858>>>>>>>>>        Object oPageModeComboForm is a ComboForm
71860>>>>>>>>>            Set Size to 13 69
71861>>>>>>>>>            Set Location to 11 65
71862>>>>>>>>>            Set Entry_State to False
71863>>>>>>>>>            Set Combo_Sort_State to False
71864>>>>>>>>>            Set Label to C_$DRPageMode
71865>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
71866>>>>>>>>>            Set Label_Col_Offset to 2
71867>>>>>>>>>
71867>>>>>>>>>            Procedure Activating
71870>>>>>>>>>                drPDFExportOptions PDFExportOptions
71870>>>>>>>>>                drPDFExportOptions PDFExportOptions
71870>>>>>>>>>                Handle hoReport
71870>>>>>>>>>                String sValue
71870>>>>>>>>>
71870>>>>>>>>>                Forward Send Activating
71872>>>>>>>>>
71872>>>>>>>>>                Get phoReport to hoReport
71873>>>>>>>>>                Get DefaultPDFExportOptions of hoReport to PDFExportOptions
71874>>>>>>>>>                Get Combo_Value PDFExportOptions.iPageMode to sValue
71875>>>>>>>>>                Set Value to sValue
71876>>>>>>>>>            End_Procedure
71877>>>>>>>>>
71877>>>>>>>>>            Function PageMode Returns Integer
71880>>>>>>>>>                String sPageMode
71880>>>>>>>>>                Integer iPageMode
71880>>>>>>>>>
71880>>>>>>>>>                Get Value to sPageMode
71881>>>>>>>>>                Get Combo_Item_Matching sPageMode to iPageMode
71882>>>>>>>>>
71882>>>>>>>>>                Function_Return iPageMode
71883>>>>>>>>>            End_Function
71884>>>>>>>>>
71884>>>>>>>>>            Procedure Combo_Fill_List
71887>>>>>>>>>                Send Combo_Add_Item C_$DRNormal
71888>>>>>>>>>                Send Combo_Add_Item C_$DROutline
71889>>>>>>>>>                Send Combo_Add_Item C_$DRThumbs
71890>>>>>>>>>                Send Combo_Add_Item C_$DRFullScreen
71891>>>>>>>>>            End_Procedure
71892>>>>>>>>>        End_Object
71893>>>>>>>>>
71893>>>>>>>>>        Object oAllPagesCheckBox is a CheckBox
71895>>>>>>>>>            Set Size to 12 64
71896>>>>>>>>>            Set Location to 11 144
71897>>>>>>>>>            Set Label to C_$DRAllPages
71898>>>>>>>>>
71898>>>>>>>>>            Procedure Activating
71901>>>>>>>>>                drPDFExportOptions PDFExportOptions
71901>>>>>>>>>                drPDFExportOptions PDFExportOptions
71901>>>>>>>>>                Handle hoReport
71901>>>>>>>>>
71901>>>>>>>>>                Forward Send Activating
71903>>>>>>>>>
71903>>>>>>>>>                Get phoReport to hoReport
71904>>>>>>>>>                Get DefaultPDFExportOptions of hoReport to PDFExportOptions
71905>>>>>>>>>                Set Checked_State to PDFExportOptions.bAllPages
71906>>>>>>>>>            End_Procedure
71907>>>>>>>>>
71907>>>>>>>>>            Procedure OnChange
71910>>>>>>>>>                Boolean bChecked
71910>>>>>>>>>
71910>>>>>>>>>                Get Checked_State to bChecked
71911>>>>>>>>>
71911>>>>>>>>>                Set Enabled_State of oPageSpinForm to (not (bChecked))
71912>>>>>>>>>            End_Procedure
71913>>>>>>>>>        End_Object
71914>>>>>>>>>
71914>>>>>>>>>        Object oPageSpinForm is a SpinForm
71916>>>>>>>>>            Set Size to 13 49
71917>>>>>>>>>            Set Location to 11 235
71918>>>>>>>>>            Set Label to C_$DRPageNumber
71919>>>>>>>>>            Set Label_Col_Offset to 2
71920>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
71921>>>>>>>>>            Set Label_Shadow_Display_Mode to TBSHADOW_ON_NONE
71922>>>>>>>>>            Set Value to 1
71923>>>>>>>>>            Set Minimum_Position to 1
71924>>>>>>>>>
71924>>>>>>>>>            Procedure Activating
71927>>>>>>>>>                drPDFExportOptions PDFExportOptions
71927>>>>>>>>>                drPDFExportOptions PDFExportOptions
71927>>>>>>>>>                Handle hoReport
71927>>>>>>>>>
71927>>>>>>>>>                Forward Send Activating
71929>>>>>>>>>
71929>>>>>>>>>                Get phoReport to hoReport
71930>>>>>>>>>                Get DefaultPDFExportOptions of hoReport to PDFExportOptions
71931>>>>>>>>>                Set Value to PDFExportOptions.iPage
71932>>>>>>>>>            End_Procedure
71933>>>>>>>>>        End_Object
71934>>>>>>>>>
71934>>>>>>>>>        Object oOwnerPasswordForm is a Form
71936>>>>>>>>>            Set Size to 13 219
71937>>>>>>>>>            Set Location to 26 65
71938>>>>>>>>>            Set Label to C_$DROwnerPassword
71939>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
71940>>>>>>>>>            Set Label_Col_Offset to 2
71941>>>>>>>>>            Set Password_State to True
71942>>>>>>>>>            Set peAnchors to anTopLeftRight
71943>>>>>>>>>            Set psToolTip to C_$DRPasswordPDFOwner
71944>>>>>>>>>
71944>>>>>>>>>            Procedure Activating
71947>>>>>>>>>                drPDFExportOptions PDFExportOptions
71947>>>>>>>>>                drPDFExportOptions PDFExportOptions
71947>>>>>>>>>                Handle hoReport
71947>>>>>>>>>
71947>>>>>>>>>                Forward Send Activating
71949>>>>>>>>>
71949>>>>>>>>>                Get phoReport to hoReport
71950>>>>>>>>>                Get DefaultPDFExportOptions of hoReport to PDFExportOptions
71951>>>>>>>>>                Set Value to PDFExportOptions.sOwnerPassword
71952>>>>>>>>>            End_Procedure
71953>>>>>>>>>        End_Object
71954>>>>>>>>>
71954>>>>>>>>>        Object oUserPasswordForm is a Form
71956>>>>>>>>>            Set Size to 13 219
71957>>>>>>>>>            Set Location to 41 65
71958>>>>>>>>>            Set Label to C_$DRUserPassword
71959>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
71960>>>>>>>>>            Set Label_Col_Offset to 2
71961>>>>>>>>>            Set Password_State to True
71962>>>>>>>>>            Set peAnchors to anTopLeftRight
71963>>>>>>>>>            Set psToolTip to C_$DRPasswordPDFUser
71964>>>>>>>>>
71964>>>>>>>>>            Procedure Activating
71967>>>>>>>>>                drPDFExportOptions PDFExportOptions
71967>>>>>>>>>                drPDFExportOptions PDFExportOptions
71967>>>>>>>>>                Handle hoReport
71967>>>>>>>>>
71967>>>>>>>>>                Forward Send Activating
71969>>>>>>>>>
71969>>>>>>>>>                Get phoReport to hoReport
71970>>>>>>>>>                Get DefaultPDFExportOptions of hoReport to PDFExportOptions
71971>>>>>>>>>                Set Value to PDFExportOptions.sUserPassword
71972>>>>>>>>>            End_Procedure
71973>>>>>>>>>        End_Object
71974>>>>>>>>>
71974>>>>>>>>>        Object oImageQualityComboForm is a ComboForm
71976>>>>>>>>>            Set Size to 13 69
71977>>>>>>>>>            Set Location to 56 65
71978>>>>>>>>>            Set Entry_State to False
71979>>>>>>>>>            Set Label to C_$DRImgQuality
71980>>>>>>>>>            Set Label_Col_Offset to 2
71981>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
71982>>>>>>>>>            Set Combo_Sort_State to False
71983>>>>>>>>>            Set psToolTip to C_$DRImageQuality
71984>>>>>>>>>
71984>>>>>>>>>            Procedure Activating
71987>>>>>>>>>                drPDFExportOptions PDFExportOptions
71987>>>>>>>>>                drPDFExportOptions PDFExportOptions
71987>>>>>>>>>                Handle hoReport
71987>>>>>>>>>                String sValue
71987>>>>>>>>>
71987>>>>>>>>>                Forward Send Activating
71989>>>>>>>>>
71989>>>>>>>>>                Get phoReport to hoReport
71990>>>>>>>>>                Get DefaultPDFExportOptions of hoReport to PDFExportOptions
71991>>>>>>>>>                Get Combo_Value PDFExportOptions.iImageQuality to sValue
71992>>>>>>>>>                Set Value to sValue
71993>>>>>>>>>            End_Procedure
71994>>>>>>>>>
71994>>>>>>>>>            Procedure Combo_Fill_List
71997>>>>>>>>>                Send Combo_Add_Item C_$DRLow
71998>>>>>>>>>                Send Combo_Add_Item C_$DRHigh
71999>>>>>>>>>            End_Procedure
72000>>>>>>>>>
72000>>>>>>>>>            Function ImageQuality Returns Integer
72003>>>>>>>>>                String sQuality
72003>>>>>>>>>                Integer iQuality
72003>>>>>>>>>
72003>>>>>>>>>                Get Value to sQuality
72004>>>>>>>>>                Get Combo_Item_Matching sQuality to iQuality
72005>>>>>>>>>
72005>>>>>>>>>                Function_Return iQuality
72006>>>>>>>>>            End_Function
72007>>>>>>>>>        End_Object
72008>>>>>>>>>
72008>>>>>>>>>        Object oOpenPDFCheckBox is a CheckBox
72010>>>>>>>>>            Set Size to 10 50
72011>>>>>>>>>            Set Location to 59 174
72012>>>>>>>>>            Set Label to C_$DRViewPDF
72013>>>>>>>>>            Set psToolTip to C_$DRViewPDFToolTip
72014>>>>>>>>>            Set Checked_State to True
72015>>>>>>>>>        End_Object
72016>>>>>>>>>
72016>>>>>>>>>        Object oPDFTypeComboForm is a ComboForm
72018>>>>>>>>>            Set Size to 13 69
72019>>>>>>>>>            Set Location to 71 65
72020>>>>>>>>>            Set Entry_State to False
72021>>>>>>>>>            Set Label to C_$DRPDFType
72022>>>>>>>>>            Set Label_Col_Offset to 2
72023>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72024>>>>>>>>>            Set Combo_Sort_State to False
72025>>>>>>>>>            Set psToolTip to C_$DRPDFType
72026>>>>>>>>>
72026>>>>>>>>>            Procedure Activating
72029>>>>>>>>>                drPDFExportOptions PDFExportOptions
72029>>>>>>>>>                drPDFExportOptions PDFExportOptions
72029>>>>>>>>>                Handle hoReport
72029>>>>>>>>>                String sValue
72029>>>>>>>>>
72029>>>>>>>>>                Forward Send Activating
72031>>>>>>>>>
72031>>>>>>>>>                Get phoReport to hoReport
72032>>>>>>>>>                Get DefaultPDFExportOptions of hoReport to PDFExportOptions
72033>>>>>>>>>                Get Combo_Value PDFExportOptions.iPDFType to sValue
72034>>>>>>>>>                Set Value to sValue
72035>>>>>>>>>            End_Procedure
72036>>>>>>>>>
72036>>>>>>>>>            Procedure Combo_Fill_List
72039>>>>>>>>>                Send Combo_Add_Item C_$DRPDFNormal
72040>>>>>>>>>                Send Combo_Add_Item C_$DRPDFA
72041>>>>>>>>>            End_Procedure
72042>>>>>>>>>
72042>>>>>>>>>            Function PDFType Returns Integer
72045>>>>>>>>>                String sType
72045>>>>>>>>>                Integer iType
72045>>>>>>>>>
72045>>>>>>>>>                Get Value to sType
72046>>>>>>>>>                Get Combo_Item_Matching sType to iType
72047>>>>>>>>>
72047>>>>>>>>>                Function_Return iType
72048>>>>>>>>>            End_Function
72049>>>>>>>>>        End_Object
72050>>>>>>>>>    End_Object
72051>>>>>>>>>
72051>>>>>>>>>    Object oCSVOptionsGroup is a cDRExportOptionsGroup
72053>>>>>>>>>        Set Size to 74 295
72054>>>>>>>>>        Set Location to 35 5
72055>>>>>>>>>        Set Label to C_$DRCSVOptions
72056>>>>>>>>>        Set peAnchors to anTopLeftRight
72057>>>>>>>>>
72057>>>>>>>>>        Procedure CollectCSVExportOptions Handle hoReport
72060>>>>>>>>>            drCSVExportOptions CSVExportOptions
72060>>>>>>>>>            drCSVExportOptions CSVExportOptions
72060>>>>>>>>>            Integer iPages
72060>>>>>>>>>
72060>>>>>>>>>            Send CheckFileExtension of oFileNameForm ".csv"
72061>>>>>>>>>
72061>>>>>>>>>            Get DefaultCSVExportOptions of hoReport to CSVExportOptions
72062>>>>>>>>>            Get Value of oCharacterDelimiterForm to CSVExportOptions.cFieldSeparator
72063>>>>>>>>>            Get Value of oValueSeparatorForm to CSVExportOptions.cFieldDelimiter
72064>>>>>>>>>            Get Checked_State of oExportGroupSectionsCheckBox to CSVExportOptions.bExportGroupSections
72065>>>>>>>>>            Get Checked_State of oExportPageSectionsCheckBox to CSVExportOptions.bExportPageSections
72066>>>>>>>>>            Get Checked_State of oExportReportSectionsCheckBox to CSVExportOptions.bExportReportSections
72067>>>>>>>>>            Get Checked_State of oAllPagesCheckBox to CSVExportOptions.bAllPages
72068>>>>>>>>>            Get Value of oPageSpinForm to CSVExportOptions.iPage
72069>>>>>>>>>            If (not (CSVExportOptions.bAllPages)) Begin
72071>>>>>>>>>                Get ReportPageCount of hoReport to iPages
72072>>>>>>>>>                Move ((CSVExportOptions.iPage max 1) min iPages) to CSVExportOptions.iPage
72073>>>>>>>>>            End
72073>>>>>>>>>>
72073>>>>>>>>>            Set pCSVExportOptions of hoReport to CSVExportOptions
72074>>>>>>>>>        End_Procedure
72075>>>>>>>>>
72075>>>>>>>>>        Object oCharacterDelimiterForm is a Form
72077>>>>>>>>>            Set Size to 13 40
72078>>>>>>>>>            Set Location to 11 80
72079>>>>>>>>>            Set Label to C_$DRDelimiter
72080>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72081>>>>>>>>>            Set Label_Col_Offset to 2
72082>>>>>>>>>
72082>>>>>>>>>            Procedure Activating
72085>>>>>>>>>                drCSVExportOptions CSVExportOptions
72085>>>>>>>>>                drCSVExportOptions CSVExportOptions
72085>>>>>>>>>                Handle hoReport
72085>>>>>>>>>
72085>>>>>>>>>                Forward Send Activating
72087>>>>>>>>>
72087>>>>>>>>>                Get phoReport to hoReport
72088>>>>>>>>>                Get DefaultCSVExportOptions of hoReport to CSVExportOptions
72089>>>>>>>>>                Set Value to CSVExportOptions.cFieldDelimiter
72090>>>>>>>>>            End_Procedure
72091>>>>>>>>>        End_Object
72092>>>>>>>>>
72092>>>>>>>>>        Object oValueSeparatorForm is a Form
72094>>>>>>>>>            Set Size to 13 40
72095>>>>>>>>>            Set Location to 26 80
72096>>>>>>>>>            Set Label to C_$DRSeparator
72097>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72098>>>>>>>>>            Set Label_Col_Offset to 2
72099>>>>>>>>>
72099>>>>>>>>>            Procedure Activating
72102>>>>>>>>>                drCSVExportOptions CSVExportOptions
72102>>>>>>>>>                drCSVExportOptions CSVExportOptions
72102>>>>>>>>>                Handle hoReport
72102>>>>>>>>>
72102>>>>>>>>>                Forward Send Activating
72104>>>>>>>>>
72104>>>>>>>>>                Get phoReport to hoReport
72105>>>>>>>>>                Get DefaultCSVExportOptions of hoReport to CSVExportOptions
72106>>>>>>>>>                Set Value to CSVExportOptions.cFieldSeparator
72107>>>>>>>>>            End_Procedure
72108>>>>>>>>>        End_Object
72109>>>>>>>>>
72109>>>>>>>>>        Object oExportPageSectionsCheckBox is a CheckBox
72111>>>>>>>>>            Set Size to 10 50
72112>>>>>>>>>            Set Location to 11 140
72113>>>>>>>>>            Set Label to C_$DRExportPageSections
72114>>>>>>>>>            Set psToolTip to C_$DRExportsPageHeaderAndFooterDetailInformation
72115>>>>>>>>>
72115>>>>>>>>>            Procedure Activating
72118>>>>>>>>>                drCSVExportOptions CSVExportOptions
72118>>>>>>>>>                drCSVExportOptions CSVExportOptions
72118>>>>>>>>>                Handle hoReport
72118>>>>>>>>>
72118>>>>>>>>>                Forward Send Activating
72120>>>>>>>>>
72120>>>>>>>>>                Get phoReport to hoReport
72121>>>>>>>>>                Get DefaultCSVExportOptions of hoReport to CSVExportOptions
72122>>>>>>>>>                Set Checked_State to CSVExportOptions.bExportPageSections
72123>>>>>>>>>            End_Procedure
72124>>>>>>>>>        End_Object
72125>>>>>>>>>
72125>>>>>>>>>        Object oExportGroupSectionsCheckBox is a CheckBox
72127>>>>>>>>>            Set Size to 10 50
72128>>>>>>>>>            Set Location to 23 140
72129>>>>>>>>>            Set Label to C_$DRExportGroupSections
72130>>>>>>>>>            Set psToolTip to C_$DRExportGroupHeaderAndFooterDetailInformation
72131>>>>>>>>>
72131>>>>>>>>>            Procedure Activating
72134>>>>>>>>>                drCSVExportOptions CSVExportOptions
72134>>>>>>>>>                drCSVExportOptions CSVExportOptions
72134>>>>>>>>>                Handle hoReport
72134>>>>>>>>>
72134>>>>>>>>>                Forward Send Activating
72136>>>>>>>>>
72136>>>>>>>>>                Get phoReport to hoReport
72137>>>>>>>>>                Get DefaultCSVExportOptions of hoReport to CSVExportOptions
72138>>>>>>>>>                Set Checked_State to CSVExportOptions.bExportGroupSections
72139>>>>>>>>>            End_Procedure
72140>>>>>>>>>        End_Object
72141>>>>>>>>>
72141>>>>>>>>>        Object oExportReportSectionsCheckBox is a CheckBox
72143>>>>>>>>>            Set Size to 10 50
72144>>>>>>>>>            Set Location to 35 140
72145>>>>>>>>>            Set Label to C_$DRExportReportSections
72146>>>>>>>>>            Set psToolTip to C_$DRExportsReportHeaderAndFooterDetailInformation
72147>>>>>>>>>
72147>>>>>>>>>            Procedure Activating
72150>>>>>>>>>                drCSVExportOptions CSVExportOptions
72150>>>>>>>>>                drCSVExportOptions CSVExportOptions
72150>>>>>>>>>                Handle hoReport
72150>>>>>>>>>
72150>>>>>>>>>                Forward Send Activating
72152>>>>>>>>>
72152>>>>>>>>>                Get phoReport to hoReport
72153>>>>>>>>>                Get DefaultCSVExportOptions of hoReport to CSVExportOptions
72154>>>>>>>>>                Set Checked_State to CSVExportOptions.bExportReportSections
72155>>>>>>>>>            End_Procedure
72156>>>>>>>>>        End_Object
72157>>>>>>>>>
72157>>>>>>>>>        Object oAllPagesCheckBox is a CheckBox
72159>>>>>>>>>            Set Size to 10 50
72160>>>>>>>>>            Set Location to 47 140
72161>>>>>>>>>            Set Label to C_$DRAllPages
72162>>>>>>>>>
72162>>>>>>>>>            Procedure Activating
72165>>>>>>>>>                drCSVExportOptions CSVExportOptions
72165>>>>>>>>>                drCSVExportOptions CSVExportOptions
72165>>>>>>>>>                Handle hoReport
72165>>>>>>>>>
72165>>>>>>>>>                Forward Send Activating
72167>>>>>>>>>
72167>>>>>>>>>                Get phoReport to hoReport
72168>>>>>>>>>                Get DefaultCSVExportOptions of hoReport to CSVExportOptions
72169>>>>>>>>>                Set Checked_State to CSVExportOptions.bAllPages
72170>>>>>>>>>            End_Procedure
72171>>>>>>>>>
72171>>>>>>>>>            Procedure OnChange
72174>>>>>>>>>                Boolean bChecked
72174>>>>>>>>>
72174>>>>>>>>>                Get Checked_State to bChecked
72175>>>>>>>>>
72175>>>>>>>>>                Set Enabled_State of oPageSpinForm to (not (bChecked))
72176>>>>>>>>>            End_Procedure
72177>>>>>>>>>        End_Object
72178>>>>>>>>>
72178>>>>>>>>>        Object oPageSpinForm is a SpinForm
72180>>>>>>>>>            Set Size to 13 49
72181>>>>>>>>>            Set Location to 41 80
72182>>>>>>>>>            Set Label to C_$DRPageNumber
72183>>>>>>>>>            Set Label_Col_Offset to 2
72184>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72185>>>>>>>>>            Set Label_Shadow_Display_Mode to TBSHADOW_ON_NONE
72186>>>>>>>>>            Set Value to 1
72187>>>>>>>>>            Set Minimum_Position to 1
72188>>>>>>>>>
72188>>>>>>>>>            Procedure Activating
72191>>>>>>>>>                drCSVExportOptions CSVExportOptions
72191>>>>>>>>>                drCSVExportOptions CSVExportOptions
72191>>>>>>>>>                Handle hoReport
72191>>>>>>>>>
72191>>>>>>>>>                Forward Send Activating
72193>>>>>>>>>
72193>>>>>>>>>                Get phoReport to hoReport
72194>>>>>>>>>                Get DefaultCSVExportOptions of hoReport to CSVExportOptions
72195>>>>>>>>>                Set Value to CSVExportOptions.iPage
72196>>>>>>>>>                Set Enabled_State to (not (CSVExportOptions.bAllPages))
72197>>>>>>>>>            End_Procedure
72198>>>>>>>>>        End_Object
72199>>>>>>>>>    End_Object
72200>>>>>>>>>
72200>>>>>>>>>    Object oImageOptionsGroup is a cDRExportOptionsGroup
72202>>>>>>>>>        Set Size to 43 295
72203>>>>>>>>>        Set Location to 35 5
72204>>>>>>>>>        Set Label to C_$DRImageOptions
72205>>>>>>>>>        Set peAnchors to anTopLeftRight
72206>>>>>>>>>
72206>>>>>>>>>        Procedure CollectImageOptions Handle hoReport
72209>>>>>>>>>            DRImageExportOptions ImageExportOptions
72209>>>>>>>>>            DRImageExportOptions ImageExportOptions
72209>>>>>>>>>            Integer iPages
72209>>>>>>>>>
72209>>>>>>>>>            Get DefaultImageExportOptions of hoReport to ImageExportOptions
72210>>>>>>>>>            Get ImageType of oImageTypeComboForm to ImageExportOptions.iImageType
72211>>>>>>>>>            Case Begin
72211>>>>>>>>>                Case (ImageExportOptions.iImageType = C_drJPEG)
72213>>>>>>>>>                    Send CheckFileExtension of oFileNameForm ".jpg"
72214>>>>>>>>>                    Case Break
72215>>>>>>>>>                Case (ImageExportOptions.iImageType = C_drGIF)
72218>>>>>>>>>                    Send CheckFileExtension of oFileNameForm ".gif"
72219>>>>>>>>>                    Case Break
72220>>>>>>>>>                Case (ImageExportOptions.iImageType = C_drTIFF)
72223>>>>>>>>>                    Send CheckFileExtension of oFileNameForm ".tiff"
72224>>>>>>>>>                    Case Break
72225>>>>>>>>>                Case (ImageExportOptions.iImageType = C_drPNG)
72228>>>>>>>>>                    Send CheckFileExtension of oFileNameForm ".png"
72229>>>>>>>>>                    Case Break
72230>>>>>>>>>            Case End
72230>>>>>>>>>            Get Checked_State of oMultiPageCheckBox to ImageExportOptions.bMultiPage
72231>>>>>>>>>            Get Value of oPageSpinForm to ImageExportOptions.iPage
72232>>>>>>>>>            If (not (ImageExportOptions.bMultiPage)) Begin
72234>>>>>>>>>                Get ReportPageCount of hoReport to iPages
72235>>>>>>>>>                Move ((ImageExportOptions.iPage max 1) min iPages) to ImageExportOptions.iPage
72236>>>>>>>>>            End
72236>>>>>>>>>>
72236>>>>>>>>>            Set pImageExportOptions of hoReport to ImageExportOptions
72237>>>>>>>>>        End_Procedure
72238>>>>>>>>>
72238>>>>>>>>>        Object oImageTypeComboForm is a ComboForm
72240>>>>>>>>>            Set Size to 13 100
72241>>>>>>>>>            Set Location to 11 65
72242>>>>>>>>>            Set Entry_State to False
72243>>>>>>>>>            Set Combo_Sort_State to False
72244>>>>>>>>>            Set Label to C_$DRType
72245>>>>>>>>>            Set Label_Col_Offset to 2
72246>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72247>>>>>>>>>
72247>>>>>>>>>            Procedure Activating
72250>>>>>>>>>                drImageExportOptions ImageExportOptions
72250>>>>>>>>>                drImageExportOptions ImageExportOptions
72250>>>>>>>>>                Handle hoReport
72250>>>>>>>>>                String sValue
72250>>>>>>>>>
72250>>>>>>>>>                Forward Send Activating
72252>>>>>>>>>
72252>>>>>>>>>                Get phoReport to hoReport
72253>>>>>>>>>                Get DefaultImageExportOptions of hoReport to ImageExportOptions
72254>>>>>>>>>                Get Combo_Value of oImageTypeComboForm ImageExportOptions.iImageType to sValue
72255>>>>>>>>>                Set Value of oImageTypeComboForm to sValue
72256>>>>>>>>>            End_Procedure
72257>>>>>>>>>
72257>>>>>>>>>            Function ImageType Returns Integer
72260>>>>>>>>>                String sImageType
72260>>>>>>>>>                Integer iImageType
72260>>>>>>>>>
72260>>>>>>>>>                Get Value to sImageType
72261>>>>>>>>>                Get Combo_Item_Matching sImageType to iImageType
72262>>>>>>>>>                Increment iImageType // DR Image constants start at 1
72263>>>>>>>>>
72263>>>>>>>>>                Function_Return iImageType
72264>>>>>>>>>            End_Function
72265>>>>>>>>>
72265>>>>>>>>>            Procedure OnChange
72268>>>>>>>>>                Integer iImageType
72268>>>>>>>>>
72268>>>>>>>>>                Get ImageType to iImageType
72269>>>>>>>>>                Set Enabled_State of oMultiPageCheckBox to (iImageType = C_DRTIFF)
72270>>>>>>>>>            End_Procedure
72271>>>>>>>>>
72271>>>>>>>>>            Procedure Combo_Fill_List
72274>>>>>>>>>                Send Combo_Add_Item C_$DRJPEG
72275>>>>>>>>>                Send Combo_Add_Item C_$DRGIF
72276>>>>>>>>>                Send Combo_Add_Item C_$DRTIFF
72277>>>>>>>>>                Send Combo_Add_Item C_$DRPNG
72278>>>>>>>>>            End_Procedure
72279>>>>>>>>>        End_Object
72280>>>>>>>>>
72280>>>>>>>>>        Object oMultiPageCheckBox is a CheckBox
72282>>>>>>>>>            Set Size to 10 50
72283>>>>>>>>>            Set Location to 11 185
72284>>>>>>>>>            Set Label to C_$DRMultiPage
72285>>>>>>>>>
72285>>>>>>>>>            Procedure Activating
72288>>>>>>>>>                drImageExportOptions ImageExportOptions
72288>>>>>>>>>                drImageExportOptions ImageExportOptions
72288>>>>>>>>>                Handle hoReport
72288>>>>>>>>>
72288>>>>>>>>>                Forward Send Activating
72290>>>>>>>>>
72290>>>>>>>>>                Get phoReport to hoReport
72291>>>>>>>>>                Get DefaultImageExportOptions of hoReport to ImageExportOptions
72292>>>>>>>>>                Set Value to ImageExportOptions.bMultiPage
72293>>>>>>>>>            End_Procedure
72294>>>>>>>>>        End_Object
72295>>>>>>>>>
72295>>>>>>>>>        Object oPageSpinForm is a SpinForm
72297>>>>>>>>>            Set Size to 13 49
72298>>>>>>>>>            Set Location to 26 65
72299>>>>>>>>>            Set Label to C_$DRPageNumber
72300>>>>>>>>>            Set Label_Col_Offset to 2
72301>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72302>>>>>>>>>            Set Value to 1
72303>>>>>>>>>            Set Minimum_Position to 1
72304>>>>>>>>>
72304>>>>>>>>>            Procedure Activating
72307>>>>>>>>>                drImageExportOptions ImageExportOptions
72307>>>>>>>>>                drImageExportOptions ImageExportOptions
72307>>>>>>>>>                Handle hoReport
72307>>>>>>>>>
72307>>>>>>>>>                Forward Send Activating
72309>>>>>>>>>
72309>>>>>>>>>                Get phoReport to hoReport
72310>>>>>>>>>                Get DefaultImageExportOptions of hoReport to ImageExportOptions
72311>>>>>>>>>                Set Value to ImageExportOptions.iPage
72312>>>>>>>>>            End_Procedure
72313>>>>>>>>>        End_Object
72314>>>>>>>>>
72314>>>>>>>>>        Object oPageCountButton is a Button
72316>>>>>>>>>            Set Size to 14 65
72317>>>>>>>>>            Set Location to 26 120
72318>>>>>>>>>            Set Label to C_$DRPageCount
72319>>>>>>>>>
72319>>>>>>>>>            Procedure OnClick
72322>>>>>>>>>                Handle hoReport
72322>>>>>>>>>                Integer iPages
72322>>>>>>>>>
72322>>>>>>>>>                Send Cursor_Wait of Cursor_Control
72323>>>>>>>>>                Get phoReport to hoReport
72324>>>>>>>>>                Get ReportPageCount of hoReport to iPages
72325>>>>>>>>>                Set Value of oPageSpinForm to iPages
72326>>>>>>>>>                Set Maximum_Position of oPageSpinForm to iPages
72327>>>>>>>>>                Send Cursor_Ready of Cursor_Control
72328>>>>>>>>>            End_Procedure
72329>>>>>>>>>        End_Object
72330>>>>>>>>>    End_Object
72331>>>>>>>>>
72331>>>>>>>>>    Object oHTMLOptionsGroup is a cDRExportOptionsGroup
72333>>>>>>>>>        Set Size to 43 295
72334>>>>>>>>>        Set Location to 35 5
72335>>>>>>>>>        Set Label to C_$DRHTMLOptions
72336>>>>>>>>>        Set peAnchors to anTopLeftRight
72337>>>>>>>>>
72337>>>>>>>>>        Procedure CollectHTMLOptions Handle hoReport
72340>>>>>>>>>            drHTMLExportOptions HTMLExportOptions
72340>>>>>>>>>            drHTMLExportOptions HTMLExportOptions
72340>>>>>>>>>            Integer iPages
72340>>>>>>>>>
72340>>>>>>>>>            Send CheckFileExtension of oFileNameForm ".html"
72341>>>>>>>>>
72341>>>>>>>>>            Get DefaultHTMLExportOptions of hoReport to HTMLExportOptions
72342>>>>>>>>>            Get Checked_State of oMultiPageCheckBox to HTMLExportOptions.bMultiPage
72343>>>>>>>>>            Get Value of oPageSpinForm to HTMLExportOptions.iPage
72344>>>>>>>>>            If (not (HTMLExportOptions.bMultiPage)) Begin
72346>>>>>>>>>                Get ReportPageCount of hoReport to iPages
72347>>>>>>>>>                Move ((HTMLExportOptions.iPage max 1) min iPages) to HTMLExportOptions.iPage
72348>>>>>>>>>            End
72348>>>>>>>>>>
72348>>>>>>>>>            Set pHTMLExportOptions of hoReport to HTMLExportOptions
72349>>>>>>>>>        End_Procedure
72350>>>>>>>>>
72350>>>>>>>>>        Object oMultiPageCheckBox is a CheckBox
72352>>>>>>>>>            Set Size to 10 50
72353>>>>>>>>>            Set Location to 11 50
72354>>>>>>>>>            Set Label to C_$DRMultiPage
72355>>>>>>>>>
72355>>>>>>>>>            Procedure Activating
72358>>>>>>>>>                drHTMLExportOptions HTMLExportOptions
72358>>>>>>>>>                drHTMLExportOptions HTMLExportOptions
72358>>>>>>>>>                Handle hoReport
72358>>>>>>>>>
72358>>>>>>>>>                Forward Send Activating
72360>>>>>>>>>
72360>>>>>>>>>                Get phoReport to hoReport
72361>>>>>>>>>                Get DefaultHTMLExportOptions of hoReport to HTMLExportOptions
72362>>>>>>>>>                Set Checked_State to HTMLExportOptions.bMultiPage
72363>>>>>>>>>            End_Procedure
72364>>>>>>>>>        End_Object
72365>>>>>>>>>
72365>>>>>>>>>        Object oPageSpinForm is a SpinForm
72367>>>>>>>>>            Set Size to 13 49
72368>>>>>>>>>            Set Location to 26 50
72369>>>>>>>>>            Set Label to C_$DRPageNumber
72370>>>>>>>>>            Set Label_Col_Offset to 2
72371>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72372>>>>>>>>>            Set Value to 1
72373>>>>>>>>>            Set Minimum_Position to 1
72374>>>>>>>>>
72374>>>>>>>>>            Procedure Activating
72377>>>>>>>>>                drHTMLExportOptions HTMLExportOptions
72377>>>>>>>>>                drHTMLExportOptions HTMLExportOptions
72377>>>>>>>>>                Handle hoReport
72377>>>>>>>>>
72377>>>>>>>>>                Forward Send Activating
72379>>>>>>>>>
72379>>>>>>>>>                Get phoReport to hoReport
72380>>>>>>>>>                Get DefaultHTMLExportOptions of hoReport to HTMLExportOptions
72381>>>>>>>>>                Set Value to HTMLExportOptions.iPage
72382>>>>>>>>>            End_Procedure
72383>>>>>>>>>        End_Object
72384>>>>>>>>>
72384>>>>>>>>>        Object oPageCountButton is a Button
72386>>>>>>>>>            Set Location to 26 104
72387>>>>>>>>>            Set Label to C_$DRPageCount
72388>>>>>>>>>
72388>>>>>>>>>            Procedure OnClick
72391>>>>>>>>>                Handle hoReport
72391>>>>>>>>>                Integer iPages
72391>>>>>>>>>
72391>>>>>>>>>                Send Cursor_Wait of Cursor_Control
72392>>>>>>>>>                Get phoReport to hoReport
72393>>>>>>>>>                Get ReportPageCount of hoReport to iPages
72394>>>>>>>>>                Set Value of oPageSpinForm to iPages
72395>>>>>>>>>                Set Maximum_Position of oPageSpinForm to iPages
72396>>>>>>>>>                Send Cursor_Ready of Cursor_Control
72397>>>>>>>>>            End_Procedure
72398>>>>>>>>>        End_Object
72399>>>>>>>>>    End_Object
72400>>>>>>>>>
72400>>>>>>>>>    Object oXLSOptionsGroup is a cDRExportOptionsGroup
72402>>>>>>>>>        Set Size to 74 295
72403>>>>>>>>>        Set Location to 35 5
72404>>>>>>>>>        Set Label to C_$DRXLSOptions
72405>>>>>>>>>        Set peAnchors to anTopLeftRight
72406>>>>>>>>>
72406>>>>>>>>>        Procedure CollectXLSOptions Handle hoReport
72409>>>>>>>>>            drXLSExportOptions XLSExportOptions
72409>>>>>>>>>            drXLSExportOptions XLSExportOptions
72409>>>>>>>>>            Integer iPages
72409>>>>>>>>>
72409>>>>>>>>>            Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72410>>>>>>>>>            Get XLSVersion of oXLSVersionComboForm to XLSExportOptions.iXLSVersion
72411>>>>>>>>>            Get NewSheetsOption of oNewSheetsComboForm to XLSExportOptions.iNewSheet
72412>>>>>>>>>            Get Value of oColumnWidthForm to XLSExportOptions.iColumnWidth
72413>>>>>>>>>            Get Checked_State of oPageSectionsCheckBox to XLSExportOptions.bExportPageSections
72414>>>>>>>>>            Get Checked_State of oReportSectionsCheckBox to XLSExportOptions.bExportReportSections
72415>>>>>>>>>            Get Checked_State of oGroupSectionsCheckBox to XLSExportOptions.bExportGroupSections
72416>>>>>>>>>            Get Checked_State of oDataOnlyCheckBox to XLSExportOptions.bExportDataOnly
72417>>>>>>>>>            Get Checked_State of oAllPagesCheckBox to XLSExportOptions.bAllPages
72418>>>>>>>>>            Get Value of oPageSpinForm to XLSExportOptions.iPage
72419>>>>>>>>>            If (not (XLSExportOptions.bAllPages)) Begin
72421>>>>>>>>>                Get ReportPageCount of hoReport to iPages
72422>>>>>>>>>                Move ((XLSExportOptions.iPage max 1) min iPages) to XLSExportOptions.iPage
72423>>>>>>>>>            End
72423>>>>>>>>>>
72423>>>>>>>>>
72423>>>>>>>>>            If (XLSExportOptions.iXLSVersion = C_drXLS2003) Begin
72425>>>>>>>>>                Send CheckFileExtension of oFileNameForm ".xls"
72426>>>>>>>>>            End
72426>>>>>>>>>>
72426>>>>>>>>>            Else Begin
72427>>>>>>>>>                Send CheckFileExtension of oFileNameForm ".xlsx"
72428>>>>>>>>>            End
72428>>>>>>>>>>
72428>>>>>>>>>
72428>>>>>>>>>            Set pXLSExportOptions of hoReport to XLSExportOptions
72429>>>>>>>>>        End_Procedure
72430>>>>>>>>>
72430>>>>>>>>>        Object oXLSVersionComboForm is a ComboForm
72432>>>>>>>>>            Set Size to 12 80
72433>>>>>>>>>            Set Location to 11 70
72434>>>>>>>>>            Set Entry_State 0 to False
72435>>>>>>>>>            Set Label to C_$DRXLSVersion
72436>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72437>>>>>>>>>            Set Label_Col_Offset to 2
72438>>>>>>>>>            Set Combo_Sort_State to False
72439>>>>>>>>>
72439>>>>>>>>>            Procedure Activating
72442>>>>>>>>>                drXLSExportOptions XLSExportOptions
72442>>>>>>>>>                drXLSExportOptions XLSExportOptions
72442>>>>>>>>>                Handle hoReport
72442>>>>>>>>>                String sValue
72442>>>>>>>>>
72442>>>>>>>>>                Forward Send Activating
72444>>>>>>>>>
72444>>>>>>>>>                Get phoReport to hoReport
72445>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72446>>>>>>>>>                Get Combo_Value XLSExportOptions.iXLSVersion to sValue
72447>>>>>>>>>                Set Value to sValue
72448>>>>>>>>>            End_Procedure
72449>>>>>>>>>
72449>>>>>>>>>            Function XLSVersion Returns Integer
72452>>>>>>>>>                String sValue
72452>>>>>>>>>                Integer iItem
72452>>>>>>>>>
72452>>>>>>>>>                Get Value to sValue
72453>>>>>>>>>                Get Combo_Item_Matching sValue to iItem
72454>>>>>>>>>
72454>>>>>>>>>                Function_Return iItem
72455>>>>>>>>>            End_Function
72456>>>>>>>>>
72456>>>>>>>>>            Procedure Combo_Fill_List
72459>>>>>>>>>                Send Combo_Add_Item C_$DRXLS2003
72460>>>>>>>>>                Send Combo_Add_Item C_$DRXLS2007
72461>>>>>>>>>            End_Procedure
72462>>>>>>>>>        End_Object
72463>>>>>>>>>
72463>>>>>>>>>        Object oNewSheetsComboForm is a ComboForm
72465>>>>>>>>>            Set Size to 12 80
72466>>>>>>>>>            Set Location to 25 70
72467>>>>>>>>>            Set Entry_State 0 to False
72468>>>>>>>>>            Set Label to C_$DRXLSNewSheets
72469>>>>>>>>>            Set Label_Col_Offset to 2
72470>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72471>>>>>>>>>            Set Combo_Sort_State to False
72472>>>>>>>>>
72472>>>>>>>>>            Procedure Activating
72475>>>>>>>>>                drXLSExportOptions XLSExportOptions
72475>>>>>>>>>                drXLSExportOptions XLSExportOptions
72475>>>>>>>>>                Handle hoReport
72475>>>>>>>>>                String sValue
72475>>>>>>>>>
72475>>>>>>>>>                Forward Send Activating
72477>>>>>>>>>
72477>>>>>>>>>                Get phoReport to hoReport
72478>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72479>>>>>>>>>                Get Combo_Value XLSExportOptions.iNewSheet to sValue
72480>>>>>>>>>                Set Value to sValue
72481>>>>>>>>>            End_Procedure
72482>>>>>>>>>
72482>>>>>>>>>            Function NewSheetsOption Returns Integer
72485>>>>>>>>>                String sValue
72485>>>>>>>>>                Integer iItem
72485>>>>>>>>>
72485>>>>>>>>>                Get Value to sValue
72486>>>>>>>>>                Get Combo_Item_Matching sValue to iItem
72487>>>>>>>>>
72487>>>>>>>>>                Function_Return iItem
72488>>>>>>>>>            End_Function
72489>>>>>>>>>
72489>>>>>>>>>            Procedure Combo_Fill_List
72492>>>>>>>>>                Send Combo_Add_Item C_$DRXLSNoSheets
72493>>>>>>>>>                Send Combo_Add_Item C_$DRXLSSheetsPage
72494>>>>>>>>>            End_Procedure
72495>>>>>>>>>        End_Object
72496>>>>>>>>>
72496>>>>>>>>>        Object oColumnWidthForm is a Form
72498>>>>>>>>>            Set Size to 13 33
72499>>>>>>>>>            Set Location to 39 70
72500>>>>>>>>>            Set Form_Datatype to 0
72501>>>>>>>>>            Set Label_Col_Offset to 2
72502>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72503>>>>>>>>>            Set Label to C_$DRXLSColumnWidth
72504>>>>>>>>>
72504>>>>>>>>>            Procedure Activating
72507>>>>>>>>>                drXLSExportOptions XLSExportOptions
72507>>>>>>>>>                drXLSExportOptions XLSExportOptions
72507>>>>>>>>>                Handle hoReport
72507>>>>>>>>>
72507>>>>>>>>>                Forward Send Activating
72509>>>>>>>>>
72509>>>>>>>>>                Get phoReport to hoReport
72510>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72511>>>>>>>>>                Set Value to XLSExportOptions.iColumnWidth
72512>>>>>>>>>            End_Procedure
72513>>>>>>>>>        End_Object
72514>>>>>>>>>
72514>>>>>>>>>        Object oPageSpinForm is a SpinForm
72516>>>>>>>>>            Set Size to 13 49
72517>>>>>>>>>            Set Location to 54 70
72518>>>>>>>>>            Set Label to C_$DRPageNumber
72519>>>>>>>>>            Set Label_Col_Offset to 2
72520>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72521>>>>>>>>>            Set Label_Shadow_Display_Mode to TBSHADOW_ON_NONE
72522>>>>>>>>>            Set Value to 1
72523>>>>>>>>>            Set Minimum_Position to 1
72524>>>>>>>>>
72524>>>>>>>>>            Procedure Activating
72527>>>>>>>>>                drXLSExportOptions XLSExportOptions
72527>>>>>>>>>                drXLSExportOptions XLSExportOptions
72527>>>>>>>>>                Handle hoReport
72527>>>>>>>>>
72527>>>>>>>>>                Forward Send Activating
72529>>>>>>>>>
72529>>>>>>>>>                Get phoReport to hoReport
72530>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72531>>>>>>>>>                Set Value to XLSExportOptions.iPage
72532>>>>>>>>>                Set Enabled_State to (not (XLSExportOptions.bAllPages))
72533>>>>>>>>>            End_Procedure
72534>>>>>>>>>        End_Object
72535>>>>>>>>>
72535>>>>>>>>>        Object oPageSectionsCheckBox is a CheckBox
72537>>>>>>>>>            Set Size to 13 56
72538>>>>>>>>>            Set Location to 11 161
72539>>>>>>>>>            Set Label to C_$DRXLSPageSections
72540>>>>>>>>>
72540>>>>>>>>>            Procedure Activating
72543>>>>>>>>>                drXLSExportOptions XLSExportOptions
72543>>>>>>>>>                drXLSExportOptions XLSExportOptions
72543>>>>>>>>>                Handle hoReport
72543>>>>>>>>>
72543>>>>>>>>>                Forward Send Activating
72545>>>>>>>>>
72545>>>>>>>>>                Get phoReport to hoReport
72546>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72547>>>>>>>>>                Set Checked_State to XLSExportOptions.bExportPageSections
72548>>>>>>>>>            End_Procedure
72549>>>>>>>>>        End_Object
72550>>>>>>>>>
72550>>>>>>>>>        Object oDataOnlyCheckBox is a CheckBox
72552>>>>>>>>>            Set Size to 13 44
72553>>>>>>>>>            Set Location to 23 161
72554>>>>>>>>>            Set Label to C_$DRXLSDataOnly
72555>>>>>>>>>
72555>>>>>>>>>            Procedure Activating
72558>>>>>>>>>                drXLSExportOptions XLSExportOptions
72558>>>>>>>>>                drXLSExportOptions XLSExportOptions
72558>>>>>>>>>                Handle hoReport
72558>>>>>>>>>
72558>>>>>>>>>                Forward Send Activating
72560>>>>>>>>>
72560>>>>>>>>>                Get phoReport to hoReport
72561>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72562>>>>>>>>>                Set Checked_State to XLSExportOptions.bExportDataOnly
72563>>>>>>>>>            End_Procedure
72564>>>>>>>>>        End_Object
72565>>>>>>>>>
72565>>>>>>>>>        Object oReportSectionsCheckBox is a CheckBox
72567>>>>>>>>>            Set Size to 13 61
72568>>>>>>>>>            Set Location to 35 161
72569>>>>>>>>>            Set Label to C_$DRXLSReportSections
72570>>>>>>>>>
72570>>>>>>>>>            Procedure Activating
72573>>>>>>>>>                drXLSExportOptions XLSExportOptions
72573>>>>>>>>>                drXLSExportOptions XLSExportOptions
72573>>>>>>>>>                Handle hoReport
72573>>>>>>>>>
72573>>>>>>>>>                Forward Send Activating
72575>>>>>>>>>
72575>>>>>>>>>                Get phoReport to hoReport
72576>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72577>>>>>>>>>                Set Checked_State to XLSExportOptions.bExportReportSections
72578>>>>>>>>>            End_Procedure
72579>>>>>>>>>        End_Object
72580>>>>>>>>>
72580>>>>>>>>>        Object oGroupSectionsCheckBox is a CheckBox
72582>>>>>>>>>            Set Size to 13 60
72583>>>>>>>>>            Set Location to 47 161
72584>>>>>>>>>            Set Label to C_$DRXLSGroupSections
72585>>>>>>>>>
72585>>>>>>>>>            Procedure Activating
72588>>>>>>>>>                drXLSExportOptions XLSExportOptions
72588>>>>>>>>>                drXLSExportOptions XLSExportOptions
72588>>>>>>>>>                Handle hoReport
72588>>>>>>>>>
72588>>>>>>>>>                Forward Send Activating
72590>>>>>>>>>
72590>>>>>>>>>                Get phoReport to hoReport
72591>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72592>>>>>>>>>                Set Checked_State to XLSExportOptions.bExportGroupSections
72593>>>>>>>>>            End_Procedure
72594>>>>>>>>>        End_Object
72595>>>>>>>>>
72595>>>>>>>>>        Object oAllPagesCheckBox is a CheckBox
72597>>>>>>>>>            Set Size to 10 50
72598>>>>>>>>>            Set Location to 59 161
72599>>>>>>>>>            Set Label to C_$DRAllPages
72600>>>>>>>>>
72600>>>>>>>>>            Procedure Activating
72603>>>>>>>>>                drXLSExportOptions XLSExportOptions
72603>>>>>>>>>                drXLSExportOptions XLSExportOptions
72603>>>>>>>>>                Handle hoReport
72603>>>>>>>>>
72603>>>>>>>>>                Forward Send Activating
72605>>>>>>>>>
72605>>>>>>>>>                Get phoReport to hoReport
72606>>>>>>>>>                Get DefaultXLSExportOptions of hoReport to XLSExportOptions
72607>>>>>>>>>                Set Checked_State to XLSExportOptions.bAllPages
72608>>>>>>>>>            End_Procedure
72609>>>>>>>>>
72609>>>>>>>>>            Procedure OnChange
72612>>>>>>>>>                Boolean bChecked
72612>>>>>>>>>
72612>>>>>>>>>                Get Checked_State to bChecked
72613>>>>>>>>>
72613>>>>>>>>>                Set Enabled_State of oPageSpinForm to (not (bChecked))
72614>>>>>>>>>            End_Procedure
72615>>>>>>>>>        End_Object
72616>>>>>>>>>    End_Object
72617>>>>>>>>>
72617>>>>>>>>>    Object oRTFOptionsGroup is a cDRExportOptionsGroup
72619>>>>>>>>>        Set Size to 43 295
72620>>>>>>>>>        Set Location to 35 5
72621>>>>>>>>>        Set Label to C_$DRRTFOptions
72622>>>>>>>>>        Set peAnchors to anTopLeftRight
72623>>>>>>>>>
72623>>>>>>>>>        Procedure CollectRTFOptions Handle hoReport
72626>>>>>>>>>            drRTFExportOptions RTFExportOptions
72626>>>>>>>>>            drRTFExportOptions RTFExportOptions
72626>>>>>>>>>            Integer iPages
72626>>>>>>>>>
72626>>>>>>>>>            Send CheckFileExtension of oFileNameForm ".rtf"
72627>>>>>>>>>
72627>>>>>>>>>            Get DefaultRTFExportOptions of hoReport to RTFExportOptions
72628>>>>>>>>>            Get Checked_State of oAllPagesCheckBox to RTFExportOptions.bAllPages
72629>>>>>>>>>            Get Value of oPageSpinForm to RTFExportOptions.iPage
72630>>>>>>>>>            If (not (RTFExportOptions.bAllPages)) Begin
72632>>>>>>>>>                Get ReportPageCount of hoReport to iPages
72633>>>>>>>>>                Move ((RTFExportOptions.iPage max 1) min iPages) to RTFExportOptions.iPage
72634>>>>>>>>>            End
72634>>>>>>>>>>
72634>>>>>>>>>            Set pRTFExportOptions of hoReport to RTFExportOptions
72635>>>>>>>>>        End_Procedure
72636>>>>>>>>>
72636>>>>>>>>>        Object oAllPagesCheckBox is a CheckBox
72638>>>>>>>>>            Set Size to 10 50
72639>>>>>>>>>            Set Location to 11 50
72640>>>>>>>>>            Set Label to C_$DRAllPages
72641>>>>>>>>>
72641>>>>>>>>>            Procedure Activating
72644>>>>>>>>>                drRTFExportOptions RTFExportOptions
72644>>>>>>>>>                drRTFExportOptions RTFExportOptions
72644>>>>>>>>>                Handle hoReport
72644>>>>>>>>>
72644>>>>>>>>>                Forward Send Activating
72646>>>>>>>>>
72646>>>>>>>>>                Get phoReport to hoReport
72647>>>>>>>>>                Get DefaultRTFExportOptions of hoReport to RTFExportOptions
72648>>>>>>>>>                Set Checked_State to RTFExportOptions.bAllPages
72649>>>>>>>>>            End_Procedure
72650>>>>>>>>>
72650>>>>>>>>>            Procedure OnChange
72653>>>>>>>>>                Boolean bChecked
72653>>>>>>>>>
72653>>>>>>>>>                Get Checked_State to bChecked
72654>>>>>>>>>
72654>>>>>>>>>                Set Enabled_State of oPageSpinForm to (not (bChecked))
72655>>>>>>>>>            End_Procedure
72656>>>>>>>>>        End_Object
72657>>>>>>>>>
72657>>>>>>>>>        Object oPageSpinForm is a SpinForm
72659>>>>>>>>>            Set Size to 13 49
72660>>>>>>>>>            Set Location to 26 50
72661>>>>>>>>>            Set Label to C_$DRPageNumber
72662>>>>>>>>>            Set Label_Col_Offset to 2
72663>>>>>>>>>            Set Label_Justification_Mode to JMode_Right
72664>>>>>>>>>            Set Label_Shadow_Display_Mode to TBSHADOW_ON_NONE
72665>>>>>>>>>            Set Value to 1
72666>>>>>>>>>            Set Minimum_Position to 1
72667>>>>>>>>>
72667>>>>>>>>>            Procedure Activating
72670>>>>>>>>>                drRTFExportOptions RTFExportOptions
72670>>>>>>>>>                drRTFExportOptions RTFExportOptions
72670>>>>>>>>>                Handle hoReport
72670>>>>>>>>>
72670>>>>>>>>>                Forward Send Activating
72672>>>>>>>>>
72672>>>>>>>>>                Get phoReport to hoReport
72673>>>>>>>>>                Get DefaultRTFExportOptions of hoReport to RTFExportOptions
72674>>>>>>>>>                Set Value to RTFExportOptions.iPage
72675>>>>>>>>>            End_Procedure
72676>>>>>>>>>        End_Object
72677>>>>>>>>>
72677>>>>>>>>>        Object oPageCountButton is a Button
72679>>>>>>>>>            Set Location to 26 104
72680>>>>>>>>>            Set Label to C_$DRPageCount
72681>>>>>>>>>
72681>>>>>>>>>            Procedure OnClick
72684>>>>>>>>>                Handle hoReport
72684>>>>>>>>>                Integer iPages
72684>>>>>>>>>
72684>>>>>>>>>                Send Cursor_Wait of Cursor_Control
72685>>>>>>>>>                Get phoReport to hoReport
72686>>>>>>>>>                Get ReportPageCount of hoReport to iPages
72687>>>>>>>>>                Set Value of oPageSpinForm to iPages
72688>>>>>>>>>                Set Maximum_Position of oPageSpinForm to iPages
72689>>>>>>>>>                Send Cursor_Ready of Cursor_Control
72690>>>>>>>>>            End_Procedure
72691>>>>>>>>>        End_Object
72692>>>>>>>>>    End_Object
72693>>>>>>>>>
72693>>>>>>>>>    Procedure ExportReport Handle hoReport
72696>>>>>>>>>        Set phoReport to hoReport
72697>>>>>>>>>
72697>>>>>>>>>        Set Enabled_State of oOKButton to False
72698>>>>>>>>>
72698>>>>>>>>>        Send Popup_Modal
72699>>>>>>>>>    End_Procedure
72700>>>>>>>>>
72700>>>>>>>>>    On_Key Key_Alt+Key_O Send KeyAction of oOKButton
72701>>>>>>>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancelButton
72702>>>>>>>>>    On_Key Key_Escape Send KeyAction of oCancelButton
72703>>>>>>>>>End_Object
72704>>>>>>>Use cDRPreviewWindow.pkg
Including file: cDRPreviewWindow.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRPreviewWindow.pkg)
72704>>>>>>>>>Use Windows.pkg
72704>>>>>>>>>Use cWinControl.pkg
Including file: cWinControl.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cWinControl.pkg)
72704>>>>>>>>>>>Use Windows.pkg
72704>>>>>>>>>>>
72704>>>>>>>>>>>// Key State Masks for Mouse Messages
72704>>>>>>>>>>>
72704>>>>>>>>>>>Define MK_LBUTTON  for |CI$0001
72704>>>>>>>>>>>Define MK_RBUTTON  for |CI$0002
72704>>>>>>>>>>>Define MK_SHIFT    for |CI$0004
72704>>>>>>>>>>>Define MK_CONTROL  for |CI$0008
72704>>>>>>>>>>>Define MK_MBUTTON  for |CI$0010
72704>>>>>>>>>>>Define MK_XBUTTON1 for |CI$0020
72704>>>>>>>>>>>Define MK_XBUTTON2 for |CI$0040
72704>>>>>>>>>>>
72704>>>>>>>>>>>Enum_List // Mouse Key Flags
72704>>>>>>>>>>>    Define mkLeft    for MK_LBUTTON
72704>>>>>>>>>>>    Define mkMiddle  for MK_MBUTTON
72704>>>>>>>>>>>    Define mkRight   for MK_RBUTTON
72704>>>>>>>>>>>    Define mkX1      for MK_XBUTTON1
72704>>>>>>>>>>>    Define mkX2      for MK_XBUTTON2
72704>>>>>>>>>>>    Define mkShift   for MK_SHIFT
72704>>>>>>>>>>>    Define mkControl for MK_CONTROL
72704>>>>>>>>>>>End_Enum_List
72704>>>>>>>>>>>
72704>>>>>>>>>>>Enum_List // Mouse Buttons. Used in OnMouseXXX messages
72704>>>>>>>>>>>    Define mbLeft
72704>>>>>>>>>>>    Define mbMiddle
72704>>>>>>>>>>>    Define mbRight
72704>>>>>>>>>>>    Define mbX1
72704>>>>>>>>>>>    Define mbX2
72704>>>>>>>>>>>End_Enum_List
72704>>>>>>>>>>>
72704>>>>>>>>>>>Class cWinControl is a DfBaseControl
72705>>>>>>>>>>>    Procedure Construct_Object
72707>>>>>>>>>>>        Forward Send Construct_Object
72709>>>>>>>>>>>        Property Integer private_pbEnabled True
72710>>>>>>>>>>>        Property Integer private_pbVisible True
72711>>>>>>>>>>>    End_Procedure
72712>>>>>>>>>>>    
72712>>>>>>>>>>>    Procedure End_Construct_Object
72714>>>>>>>>>>>        Forward Send End_Construct_Object
72716>>>>>>>>>>>        
72716>>>>>>>>>>>        Set External_Message WM_LBUTTONDOWN   to msg_OnWmLButtonDown
72717>>>>>>>>>>>        Set External_Message WM_MBUTTONDOWN   to msg_OnWmMButtonDown
72718>>>>>>>>>>>        Set External_Message WM_RBUTTONDOWN   to msg_OnWmRButtonDown
72719>>>>>>>>>>>        Set External_Message WM_LBUTTONUP     to msg_OnWmLButtonUp
72720>>>>>>>>>>>        Set External_Message WM_MBUTTONUP     to msg_OnWmMButtonUp
72721>>>>>>>>>>>        Set External_Message WM_RBUTTONUP     to msg_OnWmRButtonUp
72722>>>>>>>>>>>        Set External_Message WM_LBUTTONDBLCLK to msg_OnWmLButtonDblClk
72723>>>>>>>>>>>        Set External_Message WM_MBUTTONDBLCLK to msg_OnWmMButtonDblClk
72724>>>>>>>>>>>        Set External_Message WM_RBUTTONDBLCLK to msg_OnWmRButtonDblClk
72725>>>>>>>>>>>        Set External_Message WM_MOUSEMOVE     to msg_OnWmMouseMove
72726>>>>>>>>>>>    End_Procedure
72727>>>>>>>>>>>    
72727>>>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
72729>>>>>>>>>>>        //Intentionally cancelled
72729>>>>>>>>>>>    End_Procedure
72730>>>>>>>>>>>    
72730>>>>>>>>>>>    Procedure Command Integer wParam Integer lParam
72732>>>>>>>>>>>        //Intentionally cancelled
72732>>>>>>>>>>>    End_Procedure
72733>>>>>>>>>>>    
72733>>>>>>>>>>>    Procedure DoRecreateWindow
72735>>>>>>>>>>>        // Recreates the window
72735>>>>>>>>>>>        If (Window_Handle(Self)) Begin
72737>>>>>>>>>>>            // attempt to do this without disturbing the focus tree.
72737>>>>>>>>>>>            Send Page_delete // prior to 8.3 this was Send Page_Object 0
72738>>>>>>>>>>>            Send Page 1      //                       Send Page_Object 1
72739>>>>>>>>>>>        End
72739>>>>>>>>>>>>
72739>>>>>>>>>>>    End_Procedure
72740>>>>>>>>>>>    
72740>>>>>>>>>>>    Procedure DoUpdateWindow
72742>>>>>>>>>>>        // Forces windows to update the window by bypassing WM_PAINT
72742>>>>>>>>>>>        Handle hWnd
72742>>>>>>>>>>>        
72742>>>>>>>>>>>        Get Window_Handle to hWnd
72743>>>>>>>>>>>        If hWnd ;            Move (UpdateWindow(hWnd)) to hWnd
72746>>>>>>>>>>>    End_Procedure
72747>>>>>>>>>>>    
72747>>>>>>>>>>>    Procedure Page Integer iState
72749>>>>>>>>>>>        Set Window_Style to WS_DISABLED (private_pbEnabled(Self) =False)
72750>>>>>>>>>>>        Set Window_Style to WS_VISIBLE (private_pbVisible(Self))
72751>>>>>>>>>>>        Forward Send Page iState
72753>>>>>>>>>>>    End_Procedure
72754>>>>>>>>>>>    
72754>>>>>>>>>>>    Procedure OnWmLButtonUp Integer wParam Integer lParam
72756>>>>>>>>>>>        Integer x y eButton
72756>>>>>>>>>>>        
72756>>>>>>>>>>>        Move (Hi(lParam))  to y
72757>>>>>>>>>>>        Move (Low(lParam)) to x
72758>>>>>>>>>>>        
72758>>>>>>>>>>>        Send OnMouseUp mbLeft x y wParam
72759>>>>>>>>>>>    End_Procedure
72760>>>>>>>>>>>    
72760>>>>>>>>>>>    Procedure OnWmMButtonUp Integer wParam Integer lParam
72762>>>>>>>>>>>        Integer x y eButton
72762>>>>>>>>>>>        
72762>>>>>>>>>>>        Move (Hi(lParam))  to y
72763>>>>>>>>>>>        Move (Low(lParam)) to x
72764>>>>>>>>>>>        
72764>>>>>>>>>>>        Send OnMouseUp mbMiddle x y wParam
72765>>>>>>>>>>>    End_Procedure
72766>>>>>>>>>>>    
72766>>>>>>>>>>>    Procedure OnWmRButtonUp Integer wParam Integer lParam
72768>>>>>>>>>>>        Integer x y eButton
72768>>>>>>>>>>>        
72768>>>>>>>>>>>        Move (Hi(lParam))  to y
72769>>>>>>>>>>>        Move (Low(lParam)) to x
72770>>>>>>>>>>>        
72770>>>>>>>>>>>        Send OnMouseUp mbRight x y wParam
72771>>>>>>>>>>>    End_Procedure
72772>>>>>>>>>>>    
72772>>>>>>>>>>>    Procedure OnWmLButtonDown Integer wParam Integer lParam
72774>>>>>>>>>>>        Integer x y eButton fKeys
72774>>>>>>>>>>>        
72774>>>>>>>>>>>        Move (Hi(lParam))  to y
72775>>>>>>>>>>>        Move (Low(lParam)) to x
72776>>>>>>>>>>>        
72776>>>>>>>>>>>        Send OnMouseDown mbLeft x y wParam
72777>>>>>>>>>>>    End_Procedure
72778>>>>>>>>>>>    Procedure OnWmMButtonDown Integer wParam Integer lParam
72780>>>>>>>>>>>        Integer x y eButton
72780>>>>>>>>>>>        
72780>>>>>>>>>>>        Move (Hi(lParam))  to y
72781>>>>>>>>>>>        Move (Low(lParam)) to x
72782>>>>>>>>>>>        
72782>>>>>>>>>>>        Send OnMouseDown mbMiddle x y wParam
72783>>>>>>>>>>>    End_Procedure
72784>>>>>>>>>>>    Procedure OnWmRButtonDown Integer wParam Integer lParam
72786>>>>>>>>>>>        Integer x y eButton
72786>>>>>>>>>>>        
72786>>>>>>>>>>>        Move (Hi(lParam))  to y
72787>>>>>>>>>>>        Move (Low(lParam)) to x
72788>>>>>>>>>>>        
72788>>>>>>>>>>>        Send OnMouseDown mbRight x y wParam
72789>>>>>>>>>>>    End_Procedure
72790>>>>>>>>>>>    
72790>>>>>>>>>>>    Procedure OnWmLButtonDblClk Integer wParam Integer lParam
72792>>>>>>>>>>>        Integer x y eButton
72792>>>>>>>>>>>        
72792>>>>>>>>>>>        Move (Hi(lParam))  to y
72793>>>>>>>>>>>        Move (Low(lParam)) to x
72794>>>>>>>>>>>        
72794>>>>>>>>>>>        Send OnMouseDoubleClick mbLeft x y wParam
72795>>>>>>>>>>>    End_Procedure
72796>>>>>>>>>>>    Procedure OnWmMButtonDblClk Integer wParam Integer lParam
72798>>>>>>>>>>>        Integer x y eButton
72798>>>>>>>>>>>        
72798>>>>>>>>>>>        Move (Hi(lParam))  to y
72799>>>>>>>>>>>        Move (Low(lParam)) to x
72800>>>>>>>>>>>        
72800>>>>>>>>>>>        Send OnMouseDoubleClick mbMiddle x y wParam
72801>>>>>>>>>>>    End_Procedure
72802>>>>>>>>>>>    Procedure OnWmRButtonDblClk Integer wParam Integer lParam
72804>>>>>>>>>>>        Integer x y eButton
72804>>>>>>>>>>>        
72804>>>>>>>>>>>        Move (Hi(lParam))  to y
72805>>>>>>>>>>>        Move (Low(lParam)) to x
72806>>>>>>>>>>>        
72806>>>>>>>>>>>        Send OnMouseDoubleClick mbRight x y wParam
72807>>>>>>>>>>>    End_Procedure
72808>>>>>>>>>>>    
72808>>>>>>>>>>>    Procedure OnWmMouseMove Integer wParam Integer lParam
72810>>>>>>>>>>>        Integer x y eButton
72810>>>>>>>>>>>        
72810>>>>>>>>>>>        Move (Hi(lParam))  to y
72811>>>>>>>>>>>        Move (Low(lParam)) to x
72812>>>>>>>>>>>        
72812>>>>>>>>>>>        Send OnMouseMove x y wParam
72813>>>>>>>>>>>    End_Procedure
72814>>>>>>>>>>>    
72814>>>>>>>>>>>    Procedure OnMouseDown Integer eButton Integer x Integer y Integer fKeys
72816>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
72816>>>>>>>>>>>        //String sButton
72816>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
72816>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
72816>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
72816>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
72816>>>>>>>>>>>        
72816>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
72816>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
72816>>>>>>>>>>>        //Showln 'OnMouseDown ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
72816>>>>>>>>>>>    End_Procedure
72817>>>>>>>>>>>    
72817>>>>>>>>>>>    Procedure OnMouseUp Integer eButton Integer x Integer y Integer fKeys
72819>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
72819>>>>>>>>>>>        //String sButton
72819>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
72819>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
72819>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
72819>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
72819>>>>>>>>>>>        
72819>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
72819>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
72819>>>>>>>>>>>        //Showln 'OnMouseUp ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
72819>>>>>>>>>>>    End_Procedure
72820>>>>>>>>>>>    
72820>>>>>>>>>>>    Procedure OnMouseDoubleClick Integer eButton Integer x Integer y Integer fKeys
72822>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
72822>>>>>>>>>>>        //String sButton
72822>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
72822>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
72822>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
72822>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
72822>>>>>>>>>>>        
72822>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
72822>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
72822>>>>>>>>>>>        //Showln 'OnMouseDblClk ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
72822>>>>>>>>>>>    End_Procedure
72823>>>>>>>>>>>    
72823>>>>>>>>>>>    Procedure OnMouseMove Integer x Integer y Integer fKeys
72825>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
72825>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
72825>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
72825>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
72825>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
72825>>>>>>>>>>>        
72825>>>>>>>>>>>        //Showln 'OnMouseMove ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
72825>>>>>>>>>>>    End_Procedure
72826>>>>>>>>>>>    
72826>>>>>>>>>>>    Procedure Set pbEnabled Boolean bEnabled
72828>>>>>>>>>>>        Handle hWnd
72828>>>>>>>>>>>        
72828>>>>>>>>>>>        If (bEnabled <> private_pbEnabled(Self)) Begin
72830>>>>>>>>>>>            Set private_pbEnabled to bEnabled
72831>>>>>>>>>>>            Get Window_Handle to hWnd
72832>>>>>>>>>>>            If hWnd ;                Move (EnableWindow(hWnd, bEnabled)) to hWnd
72835>>>>>>>>>>>        End
72835>>>>>>>>>>>>
72835>>>>>>>>>>>    End_Procedure
72836>>>>>>>>>>>    Function pbEnabled Returns Boolean
72838>>>>>>>>>>>        Function_Return (private_pbEnabled(Self))
72839>>>>>>>>>>>    End_Function
72840>>>>>>>>>>>    
72840>>>>>>>>>>>    Procedure Set pbVisible Boolean bVisible
72842>>>>>>>>>>>        Handle  hWnd
72842>>>>>>>>>>>        Integer iVoid
72842>>>>>>>>>>>        
72842>>>>>>>>>>>        If (bVisible <> private_pbVisible(Self)) Begin
72844>>>>>>>>>>>            Set private_pbVisible to bVisible
72845>>>>>>>>>>>            Get Window_Handle to hWnd
72846>>>>>>>>>>>            If hWnd ;                Move (ShowWindow(hWnd, If (bVisible, SW_SHOWNA, SW_HIDE))) to iVoid
72849>>>>>>>>>>>        End
72849>>>>>>>>>>>>
72849>>>>>>>>>>>    End_Procedure
72850>>>>>>>>>>>    Function pbVisible Returns Boolean
72852>>>>>>>>>>>        Function_Return (private_pbVisible(Self))
72853>>>>>>>>>>>    End_Function
72854>>>>>>>>>>>    
72854>>>>>>>>>>>End_Class
72855>>>>>>>>>Use cDR.h.pkg
72855>>>>>>>>>
72855>>>>>>>>>Use navigate.pkg
72855>>>>>>>>>Use nesting.pkg
72855>>>>>>>>>
72855>>>>>>>>>Define WM_MOUSEWHEEL                    for |CI$020A
72855>>>>>>>>>Define WM_MOUSEHOVER                    for |CI$02A1
72855>>>>>>>>>Define WM_MOUSELEAVE                    for |CI$02A3
72855>>>>>>>>>
72855>>>>>>>>>// SetScollInfo() constants
72855>>>>>>>>>Define SB_COLRIGHT                      for 256
72855>>>>>>>>>Define SB_COLLEFT                       for 257
72855>>>>>>>>>Define SB_ROWUP                         for 258
72855>>>>>>>>>Define SB_ROWDOWN                       for 259
72855>>>>>>>>>
72855>>>>>>>>>Define DC_BRUSH                             for 18
72855>>>>>>>>>Define DC_PEN                               for 19
72855>>>>>>>>>
72855>>>>>>>>>Class cDRPreviewWindow is a cWinControl
72856>>>>>>>>>    Procedure Construct_Object        
72858>>>>>>>>>        Forward Send Construct_Object
72860>>>>>>>>>        
72860>>>>>>>>>        Set External_Class_Name "cDRPreviewWindow40" to "static"
72861>>>>>>>>>        
72861>>>>>>>>>        Set External_Message WM_PAINT           to msg_OnPaint
72862>>>>>>>>>        Set External_Message WM_HSCROLL         to msg_OnHScroll
72863>>>>>>>>>        Set External_Message WM_VSCROLL         to msg_OnVScroll
72864>>>>>>>>>        Set External_Message WM_MOUSEWHEEL      to msg_OnMouseWheel
72865>>>>>>>>>        Set External_Message WM_ERASEBKGND      to msg_OnEraseBkgnd
72866>>>>>>>>>        
72866>>>>>>>>>        Set External_Message WM_NCHITTEST       to msg_OnNCHitTest
72867>>>>>>>>>        Set External_Message WM_NCLBUTTONDOWN   to msg_OnNCLButtonDown        
72868>>>>>>>>>        
72868>>>>>>>>>        Set External_Message WM_LBUTTONDOWN     to msg_OnLButtonDown        
72869>>>>>>>>>        
72869>>>>>>>>>        Set Window_Style to WS_HSCROLL True
72870>>>>>>>>>        Set Window_Style to WS_VSCROLL True
72871>>>>>>>>>        Set Window_Style to WS_TABSTOP True
72872>>>>>>>>>        Set Window_Style to WS_CHILD True
72873>>>>>>>>>        Set Window_Style to SS_NOTIFY True
72874>>>>>>>>>        
72874>>>>>>>>>        Set Focus_Mode to Focusable
72875>>>>>>>>>        Set Border_Style to Border_None
72876>>>>>>>>>
72876>>>>>>>>>        Send Define_Navigation
72877>>>>>>>>>        Send Define_Standard_Object_Mixin
72878>>>>>>>>>        Send Define_Dflabel_Mixin
72879>>>>>>>>>        Send Define_Shadow_Mixin
72880>>>>>>>>>        Send Define_Nesting
72881>>>>>>>>>
72881>>>>>>>>>        On_Key Key_PgDn Send PreviewNextPage
72882>>>>>>>>>        On_Key Key_PgUp Send PreviewPreviousPage
72883>>>>>>>>>        On_Key Key_Ctrl+Key_Home Send PreviewFirstPage
72884>>>>>>>>>        On_Key Key_Ctrl+Key_End Send PreviewLastPage
72885>>>>>>>>>    End_Procedure
72886>>>>>>>>>    
72886>>>>>>>>>    Import_Class_Protocol Navigate_Mixin
72887>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
72888>>>>>>>>>    Import_Class_Protocol DFLabel_Mixin
72889>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
72890>>>>>>>>>    Import_Class_Protocol Nesting_mixin
72891>>>>>>>>>    
72891>>>>>>>>>    // The OCX is informed about the changed size of the preview window and recalculates the scrollbars
72891>>>>>>>>>    Procedure Set GUISize Integer iY Integer iX
72893>>>>>>>>>        Integer iSize
72893>>>>>>>>>        Handle hWnd hoReport
72893>>>>>>>>>        Boolean bIsCreated
72893>>>>>>>>>
72893>>>>>>>>>        Get Window_Handle to hWnd
72894>>>>>>>>>        Get GUISize to iSize
72895>>>>>>>>>
72895>>>>>>>>>        Forward Set GUISize to iY iX
72897>>>>>>>>>
72897>>>>>>>>>        If (BuildingObjectId <> 0 or hWnd = 0) Begin
72899>>>>>>>>>            Procedure_Return
72900>>>>>>>>>        End
72900>>>>>>>>>>
72900>>>>>>>>>
72900>>>>>>>>>        If (Hi(iSize) <> iY or Low(iSize) <> iX) Begin
72902>>>>>>>>>            Get phoReport to hoReport
72903>>>>>>>>>            If (hoReport <> 0) Begin
72905>>>>>>>>>                Get IsComObjectCreated of hoReport to bIsCreated
72906>>>>>>>>>                If (bIsCreated) Begin
72908>>>>>>>>>                    Set ComPreviewHWND of hoReport to hWnd 
72909>>>>>>>>>                    Send ComPreviewPaint of hoReport False
72910>>>>>>>>>                End
72910>>>>>>>>>>
72910>>>>>>>>>            End
72910>>>>>>>>>>
72910>>>>>>>>>        End
72910>>>>>>>>>>
72910>>>>>>>>>    End_Procedure
72911>>>>>>>>>
72911>>>>>>>>>    // Handles WM_ERASEBKGND and paints the background light gray
72911>>>>>>>>>    Procedure OnEraseBkgnd Integer wParam Integer lParam
72913>>>>>>>>>        Handle hWnd hDC
72913>>>>>>>>>        Integer iResult
72913>>>>>>>>>        tWinRect BackgroundRect
72913>>>>>>>>>        tWinRect BackgroundRect
72913>>>>>>>>>
72913>>>>>>>>>        Get Window_Handle to hWnd
72914>>>>>>>>>        If (hWnd <> 0) Begin
72916>>>>>>>>>            Move wParam to hDC
72917>>>>>>>>>            
72917>>>>>>>>>            Move (GetClientRect (hWnd, AddressOf(BackgroundRect))) to iResult
72918>>>>>>>>>            Move (SelectObject (hDC, GetStockObject (DC_BRUSH))) to iResult
72919>>>>>>>>>            Move (DR_WINAPI_SetDCBrushColor (hDC, clLtGray)) to iResult
72920>>>>>>>>>            Move (Rectangle (hDC, BackgroundRect.left-1, BackgroundRect.top-1, BackgroundRect.right+1, BackgroundRect.bottom+1)) to iResult
72921>>>>>>>>>    
72921>>>>>>>>>            Set Windows_Override_State to True
72922>>>>>>>>>            Procedure_Return 1 // handled
72923>>>>>>>>>        End
72923>>>>>>>>>>
72923>>>>>>>>>    End_Procedure
72924>>>>>>>>>
72924>>>>>>>>>    // On WM_PAINT send a message to repaint the previewer
72924>>>>>>>>>    Procedure OnPaint Integer wParam Integer lParam
72926>>>>>>>>>        Handle hWnd hDc hoReport
72926>>>>>>>>>        tWinPaintStruct PaintData
72926>>>>>>>>>        tWinPaintStruct PaintData
72926>>>>>>>>>        tWinRect PaintRect
72926>>>>>>>>>        tWinRect PaintRect
72926>>>>>>>>>        Boolean bOk bIsCreated
72926>>>>>>>>>
72926>>>>>>>>>        Get Window_Handle to hWnd
72927>>>>>>>>>        If (hWnd <> 0) Begin
72929>>>>>>>>>            Get phoReport to hoReport
72930>>>>>>>>>            If (hoReport <> 0) Begin
72932>>>>>>>>>                Get Object_Id of hoReport to hoReport // Is handle still OK
72933>>>>>>>>>                If (hoReport <> 0) Begin
72935>>>>>>>>>                    Get IsComObjectCreated of hoReport to bIsCreated
72936>>>>>>>>>                    If (bIsCreated) Begin
72938>>>>>>>>>                        Move (DR_WINAPI_GetUpdateRect (hWnd, AddressOf (PaintRect), False)) to bOk
72939>>>>>>>>>                        If (bOk) Begin
72941>>>>>>>>>                            Move (BeginPaint (hWnd, AddressOf (PaintData))) to hDc
72942>>>>>>>>>                            Send PreviewPaint
72943>>>>>>>>>                            Move (EndPaint (hWnd, AddressOf (PaintData))) to hDC
72944>>>>>>>>>                        End
72944>>>>>>>>>>
72944>>>>>>>>>                        Set Windows_Override_State to True
72945>>>>>>>>>                        Procedure_Return False // Handled                    
72946>>>>>>>>>                    End
72946>>>>>>>>>>
72946>>>>>>>>>                End
72946>>>>>>>>>>
72946>>>>>>>>>            End
72946>>>>>>>>>>
72946>>>>>>>>>        End
72946>>>>>>>>>>
72946>>>>>>>>>    End_Procedure
72947>>>>>>>>>    
72947>>>>>>>>>    // On WM_HSCROLL scroll the contents horizontally
72947>>>>>>>>>    Procedure OnHScroll Integer wParam Integer lParam
72949>>>>>>>>>        Send PreviewHScroll (Low(wParam)) (Hi(wParam))
72950>>>>>>>>>    End_Procedure
72951>>>>>>>>>
72951>>>>>>>>>    // On WM_VSCROLL scroll the contents vertically
72951>>>>>>>>>    Procedure OnVScroll Integer wParam Integer lParam
72953>>>>>>>>>        Send PreviewVScroll (Low(wParam)) (Hi(wParam))
72954>>>>>>>>>    End_Procedure
72955>>>>>>>>>
72955>>>>>>>>>    // On WM_MOUSEWHEEL scroll the preview window contents or zoom in/out
72955>>>>>>>>>    Procedure OnMouseWheel Integer wParam Integer lParam
72957>>>>>>>>>        Integer iResult iDelta iFactor
72957>>>>>>>>>        
72957>>>>>>>>>        Get piPreviewZoom to iFactor
72958>>>>>>>>>
72958>>>>>>>>>        Move (Hi(wParam)) to iResult
72959>>>>>>>>>        Move (Cast(iResult,Short)) to iDelta
72960>>>>>>>>>
72960>>>>>>>>>        Case Begin
72960>>>>>>>>>            Case (Low(wParam) = MK_CONTROL)
72962>>>>>>>>>                // Zoom window
72962>>>>>>>>>                If (iDelta < 0) Begin
72964>>>>>>>>>                    Set piPreviewZoom to ((iFactor - 10) max 25)
72965>>>>>>>>>                End
72965>>>>>>>>>>
72965>>>>>>>>>                Else Begin
72966>>>>>>>>>                    If (iDelta > 0) Begin
72968>>>>>>>>>                        Set piPreviewZoom to ((iFactor + 10) min 500)
72969>>>>>>>>>                    End
72969>>>>>>>>>>
72969>>>>>>>>>                End
72969>>>>>>>>>>
72969>>>>>>>>>                Case Break
72970>>>>>>>>>            Case (Low(wParam) = MK_SHIFT)
72973>>>>>>>>>                Case Break // no action
72974>>>>>>>>>            Case Else
72974>>>>>>>>>                // Scroll window
72974>>>>>>>>>                If (iDelta < 0) Begin
72976>>>>>>>>>                    Send PreviewVScroll SB_ROWDOWN 0
72977>>>>>>>>>                End
72977>>>>>>>>>>
72977>>>>>>>>>                Else Begin
72978>>>>>>>>>                    If (iDelta > 0) Begin
72980>>>>>>>>>                        Send PreviewVScroll SB_ROWUP 0
72981>>>>>>>>>                    End
72981>>>>>>>>>>
72981>>>>>>>>>                End
72981>>>>>>>>>>
72981>>>>>>>>>                Case Break
72982>>>>>>>>>        Case End
72982>>>>>>>>>    End_Procedure
72983>>>>>>>>>    
72983>>>>>>>>>    // Handles WM_NCHITTEST by passing it to DefWindowProc()
72983>>>>>>>>>    Procedure OnNCHitTest Integer wParam Integer lParam
72985>>>>>>>>>        Handle hWnd
72985>>>>>>>>>        Integer iResult
72985>>>>>>>>>
72985>>>>>>>>>        Get Window_Handle to hWnd
72986>>>>>>>>>        If (hWnd <> 0) Begin
72988>>>>>>>>>        Move (DR_WinAPI_DefWindowProc(hWnd,WM_NCHITTEST,wParam,lParam)) to iResult
72989>>>>>>>>>            Set Windows_Override_State to True
72990>>>>>>>>>        End
72990>>>>>>>>>>
72990>>>>>>>>>        
72990>>>>>>>>>        Procedure_Return iResult
72991>>>>>>>>>    End_Procedure
72992>>>>>>>>>
72992>>>>>>>>>    // Handles WM_NCLBUTTONDOWN by passing it to DefWindowProc()
72992>>>>>>>>>    Procedure OnNCLButtonDown Integer wParam Integer lParam
72994>>>>>>>>>        Handle hWnd
72994>>>>>>>>>        Integer iResult
72994>>>>>>>>>
72994>>>>>>>>>        Get Window_Handle to hWnd
72995>>>>>>>>>        If (hWnd <> 0) Begin
72997>>>>>>>>>        Move (DR_WinAPI_DefWindowProc(hWnd,WM_NCLBUTTONDOWN,wParam,lParam)) to iResult
72998>>>>>>>>>            Set Windows_Override_State to True
72999>>>>>>>>>        End
72999>>>>>>>>>>
72999>>>>>>>>>        
72999>>>>>>>>>        Procedure_Return iResult
73000>>>>>>>>>    End_Procedure
73001>>>>>>>>>
73001>>>>>>>>>    // Handles WM_LBUTTONDOWN by passing it to the OCX
73001>>>>>>>>>    Procedure OnLButtonDown Integer wParam Integer lParam
73003>>>>>>>>>        Send PreviewClick wParam lParam
73004>>>>>>>>>
73004>>>>>>>>>        Set Windows_Override_State to True
73005>>>>>>>>>        
73005>>>>>>>>>        Procedure_Return False // handled
73006>>>>>>>>>    End_Procedure
73007>>>>>>>>>End_Class
73008>>>>>>>Use cDRSearchPreviewMenuItem.pkg
Including file: cDRSearchPreviewMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRSearchPreviewMenuItem.pkg)
73008>>>>>>>>>Use cDRMenuItem.pkg
73008>>>>>>>>>Use DRLanguage.Inc
73008>>>>>>>>>
73008>>>>>>>>>Class cDRSearchPreviewMenuItem is a cDRMenuItem
73009>>>>>>>>>    Procedure Construct_Object
73011>>>>>>>>>        Forward Send Construct_Object
73013>>>>>>>>>
73013>>>>>>>>>        Set peControlType to xtpControlEdit
73014>>>>>>>>>        Set peControlStyle to xtpButtonCaption
73015>>>>>>>>>        Set psCaption to C_$DRSearchInPreview
73016>>>>>>>>>        Set psDescription to C_$DRSearchInPreviewDescr
73017>>>>>>>>>        Set psTooltip to C_$DRSearchInPreviewTooltip
73018>>>>>>>>>        Set pbControlBeginGroup to True
73019>>>>>>>>>
73019>>>>>>>>>        Property Boolean pbDown True
73020>>>>>>>>>        Property Boolean pbWholeWord False
73021>>>>>>>>>        Property Boolean pbMatchCase False
73022>>>>>>>>>
73022>>>>>>>>>        Property String psBuddyButtonImage "DRPreviewFind.ico"
73023>>>>>>>>>        Property Handle phmBuddyButtonClicked (RefProc (OnExecute))
73024>>>>>>>>>
73024>>>>>>>>>        Set pbActiveUpdate to True
73025>>>>>>>>>    End_Procedure
73026>>>>>>>>>
73026>>>>>>>>>    Procedure OnCreateControl Handle hoEdit
73028>>>>>>>>>        Handle hoCommandBars
73028>>>>>>>>>        String sImage
73028>>>>>>>>>        Integer iTextSize iImageId
73028>>>>>>>>>
73028>>>>>>>>>        Set ComText of hoEdit to ''
73029>>>>>>>>>        Get Text_Extent C_$DRSearchHintText to iTextSize
73030>>>>>>>>>        Get DialogToGui (hi (iTextSize)) (Low (iTextSize)) to iTextSize
73031>>>>>>>>>        Set ComWidth of hoEdit to (Low (iTextSize) max 250)
73032>>>>>>>>>        Set ComEditStyle of hoEdit to xtpEditStyleLeft
73033>>>>>>>>>        Set ComEditHint of hoEdit to C_$DRSearchHintText
73034>>>>>>>>>
73034>>>>>>>>>        Get psBuddyButtonImage to sImage
73035>>>>>>>>>        If (sImage <> "") Begin
73037>>>>>>>>>            Get CommandBarSystemObject to hoCommandBars
73038>>>>>>>>>            Get AddImage of hoCommandBars sImage 0 xtpImageNormal to iImageId
73039>>>>>>>>>            Set ComBuddyButtonId of hoEdit to iImageId
73040>>>>>>>>>        End
73040>>>>>>>>>>
73040>>>>>>>>>    End_Procedure
73041>>>>>>>>>
73041>>>>>>>>>    Function psText Returns String
73043>>>>>>>>>        Handle hoEdit
73043>>>>>>>>>        String sText
73043>>>>>>>>>        Boolean bCreated
73043>>>>>>>>>
73043>>>>>>>>>        Get IsComObjectCreated to bCreated
73044>>>>>>>>>        If (bCreated) Begin
73046>>>>>>>>>            Get CreateFirstProxyControl to hoEdit
73047>>>>>>>>>            If (hoEdit) Begin
73049>>>>>>>>>                Get ComText of hoEdit to sText
73050>>>>>>>>>                Send Destroy of hoEdit
73051>>>>>>>>>            End
73051>>>>>>>>>>
73051>>>>>>>>>        End
73051>>>>>>>>>>
73051>>>>>>>>>
73051>>>>>>>>>        Function_Return sText
73052>>>>>>>>>    End_Function
73053>>>>>>>>>
73053>>>>>>>>>    Procedure BuddyButtonClicked Variant vControl
73055>>>>>>>>>        Handle hmBuddyButtonClicked
73055>>>>>>>>>
73055>>>>>>>>>        Get phmBuddyButtonClicked to hmBuddyButtonClicked
73056>>>>>>>>>        If (hmBuddyButtonClicked <> 0) Begin
73058>>>>>>>>>            Send hmBuddyButtonClicked vControl
73059>>>>>>>>>        End
73059>>>>>>>>>>
73059>>>>>>>>>    End_Procedure
73060>>>>>>>>>
73060>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
73062>>>>>>>>>        String sSearchValue
73062>>>>>>>>>        Handle hoReport
73062>>>>>>>>>        Boolean bDown bWholeWord bMatchCase bFound
73062>>>>>>>>>
73062>>>>>>>>>        Get psText to sSearchValue
73063>>>>>>>>>        Get ReportObject to hoReport
73064>>>>>>>>>
73064>>>>>>>>>        Get pbDown to bDown
73065>>>>>>>>>        Get pbWholeWord to bWholeWord
73066>>>>>>>>>        Get pbMatchCase to bMatchCase
73067>>>>>>>>>
73067>>>>>>>>>        Get PreviewFind of hoReport sSearchValue bDown bWholeWord bMatchCase to bFound
73068>>>>>>>>>        If (bFound) Begin
73070>>>>>>>>>            Send PreviewPaint of hoReport
73071>>>>>>>>>        End
73071>>>>>>>>>>
73071>>>>>>>>>        Else Begin
73072>>>>>>>>>            Send PreviewFindReset of hoReport
73073>>>>>>>>>            Send PreviewFirstPage of hoReport
73074>>>>>>>>>            Get PreviewFind of hoReport sSearchValue bDown bWholeWord bMatchCase to bFound
73075>>>>>>>>>            If (bFound) Begin
73077>>>>>>>>>                Send PreviewPaint of hoReport
73078>>>>>>>>>            End
73078>>>>>>>>>>
73078>>>>>>>>>        End
73078>>>>>>>>>>
73078>>>>>>>>>    End_Procedure
73079>>>>>>>>>End_Class
73080>>>>>>>Use cDRSearchPreviewOptionsMenuItem.pkg
Including file: cDRSearchPreviewOptionsMenuItem.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRSearchPreviewOptionsMenuItem.pkg)
73080>>>>>>>>>Use cDRMenuItem.pkg
73080>>>>>>>>>
73080>>>>>>>>>Class cDRSearchPreviewOptionsMenuItem is a cDRMenuItem
73081>>>>>>>>>    Procedure Construct_Object
73083>>>>>>>>>        Forward Send Construct_Object
73085>>>>>>>>>        
73085>>>>>>>>>        Property Handle phmSearchOptionGet 0
73086>>>>>>>>>        Property Handle phmSearchOptionSet 0
73087>>>>>>>>>        Property Handle phoSearchMenuItem
73088>>>>>>>>>
73088>>>>>>>>>        Set pbActiveUpdate to True
73089>>>>>>>>>    End_Procedure
73090>>>>>>>>>    
73090>>>>>>>>>    // This automatically called routine returns the result of the GET operation on the property in the searchmenu item
73090>>>>>>>>>    // Internally does: Get pbDown of oSearchMenuItem to bValue
73090>>>>>>>>>    // Where pbDown is specified in phmSearchOptionGet and oSearchMenuItem is specified via phoSearchMenuItem
73090>>>>>>>>>    Function IsChecked Returns Boolean
73092>>>>>>>>>        Handle hoSearchMenuItem hmSearchOption
73092>>>>>>>>>        Boolean bValue
73092>>>>>>>>>        
73092>>>>>>>>>        Get phmSearchOptionGet to hmSearchOption
73093>>>>>>>>>        If (hmSearchOption <> 0) Begin
73095>>>>>>>>>            Get phoSearchMenuItem to hoSearchMenuItem
73096>>>>>>>>>            Get hmSearchOption of hoSearchMenuItem to bValue
73097>>>>>>>>>        End
73097>>>>>>>>>>
73097>>>>>>>>>        
73097>>>>>>>>>        Function_Return bValue
73098>>>>>>>>>    End_Function
73099>>>>>>>>>    
73099>>>>>>>>>    // When the user clicks on the item the code retrieves the current value of the connected property and reverses
73099>>>>>>>>>    // its value. 
73099>>>>>>>>>    // Internally: 
73099>>>>>>>>>    //      Get pbDown of oSearchMenuItem to bValue
73099>>>>>>>>>    //      Set pbDown of oSearchMenuItem to (not (bValue))
73099>>>>>>>>>    Procedure OnExecute Variant vCommandBarControl
73101>>>>>>>>>        Handle hoSearchMenuItem hmSearchOption
73101>>>>>>>>>        Boolean bValue
73101>>>>>>>>>
73101>>>>>>>>>        Get phmSearchOptionGet to hmSearchOption
73102>>>>>>>>>        If (hmSearchOption <> 0) Begin
73104>>>>>>>>>            Get phoSearchMenuItem to hoSearchMenuItem
73105>>>>>>>>>            Get hmSearchOption of hoSearchMenuItem to bValue
73106>>>>>>>>>            Get phmSearchOptionSet to hmSearchOption
73107>>>>>>>>>            Set hmSearchoption of hoSearchMenuItem to (not (bValue))
73108>>>>>>>>>        End
73108>>>>>>>>>>
73108>>>>>>>>>    End_Procedure
73109>>>>>>>>>End_Class
73110>>>>>>>
73110>>>>>>>Class cDRPreview is a View
73111>>>>>>>    Procedure Construct_Object
73113>>>>>>>        Forward Send Construct_Object
73115>>>>>>>
73115>>>>>>>        Set Size to 273 614
73116>>>>>>>        Set Location to 2 2
73117>>>>>>>        Set Border_Style to Border_Thick
73118>>>>>>>        Set Icon to "DR.Ico"
73119>>>>>>>        Set pbDisableSaveEnvironment to True
73120>>>>>>>        Set Name to "oDRPreview"
73121>>>>>>>
73121>>>>>>>        Property Handle phoReport 0
73122>>>>>>>
73122>>>>>>>        Object oDRPreviewer is a cDRPreviewWindow
73124>>>>>>>            Set Size to 228 602
73125>>>>>>>            Set Location to 21 5
73126>>>>>>>            Set peAnchors to anAll
73127>>>>>>>        End_Object
73128>>>>>>>
73128>>>>>>>        Object oCommandBars is a cDRCommandBarSystem
73130>>>>>>>            Set pbAutoResizeIcons to True
73131>>>>>>>
73131>>>>>>>            Object oDRToolBar is a cCJToolbar
73133>>>>>>>                Set pbCloseable to False
73134>>>>>>>                Set pbEnableDocking to False
73135>>>>>>>                Set pbGripper to False
73136>>>>>>>                Set peStretched to stStretch
73137>>>>>>>                Set pbDockNextTo to False
73138>>>>>>>                Set pbHideWrap to True
73139>>>>>>>                Set pbCustomizable to False
73140>>>>>>>
73140>>>>>>>                Object oFirstPage is a cDRFirstPageMenuItem
73142>>>>>>>                End_Object
73143>>>>>>>
73143>>>>>>>                Object oPreviousPage is a cDRPreviousPageMenuItem
73145>>>>>>>                End_Object
73146>>>>>>>
73146>>>>>>>                Object oCurrentPage is a cDRCurrentPageMenuItem
73148>>>>>>>                    Set peControlType to xtpControlEdit
73149>>>>>>>                End_Object
73150>>>>>>>
73150>>>>>>>                Object oNextPage is a cDRNextPageMenuItem
73152>>>>>>>                End_Object
73153>>>>>>>
73153>>>>>>>                Object oLastPage is a cDRLastPageMenuItem
73155>>>>>>>                End_Object
73156>>>>>>>
73156>>>>>>>                Object oRefresh is a cDRRefreshMenuItem
73158>>>>>>>                End_Object
73159>>>>>>>
73159>>>>>>>                Object oPrint is a cDRPrintMenuItem
73161>>>>>>>                End_Object
73162>>>>>>>
73162>>>>>>>                Object oZoom is a cDRZoomMenuItem
73164>>>>>>>                End_Object
73165>>>>>>>
73165>>>>>>>                Object oExport is a cDRExportMenuItem
73167>>>>>>>                    Set phoExportOptionsDialog to (oDRExportOptionsDialog)
73168>>>>>>>                End_Object
73169>>>>>>>
73169>>>>>>>                Object oSearchInPreview is a cDRSearchPreviewMenuItem
73171>>>>>>>                End_Object
73172>>>>>>>
73172>>>>>>>                Object oSearchInPreviewOptions is a cDRMenuItem
73174>>>>>>>                    Set peControlType to xtpControlSplitButtonPopup
73175>>>>>>>                    Set psCaption to C_$DRSearchInPreviewOptions
73176>>>>>>>                    Set psTooltip to C_$DRSearchInPreviewOptionsTooltip
73177>>>>>>>                    Set peControlStyle to xtpButtonIconAndCaption
73178>>>>>>>                    Set psImage to "DRFind.Ico"
73179>>>>>>>
73179>>>>>>>                    Object oDownMenuItem is a cDRSearchPreviewOptionsMenuItem
73181>>>>>>>                        Set psCaption to C_$DRSearchInPreviewDown
73182>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbDown))
73183>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbDown))
73184>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
73185>>>>>>>                    End_Object
73186>>>>>>>
73186>>>>>>>                    Object oWholeWordMenuItem is a cDRSearchPreviewOptionsMenuItem
73188>>>>>>>                        Set psCaption to C_$DRSearchInPreviewWholeWord
73189>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbWholeWord))
73190>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbWholeWord))
73191>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
73192>>>>>>>                    End_Object
73193>>>>>>>
73193>>>>>>>                    Object oMatchCaseMenuItem is a cDRSearchPreviewOptionsMenuItem
73195>>>>>>>                        Set psCaption to C_$DRSearchInPreviewMatchCase
73196>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbMatchCase))
73197>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbMatchCase))
73198>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
73199>>>>>>>                    End_Object
73200>>>>>>>                End_Object
73201>>>>>>>            End_Object
73202>>>>>>>        End_Object
73203>>>>>>>
73203>>>>>>>        Object oCloseButton is a Button
73205>>>>>>>            Set Label to C_$Close
73206>>>>>>>            Set Location to 254 559
73207>>>>>>>            Set peAnchors to anBottomRight
73208>>>>>>>            Set Message 0 to Close_Panel
73209>>>>>>>        End_Object
73210>>>>>>>
73210>>>>>>>        On_Key Key_Escape Send KeyAction of oCloseButton
73211>>>>>>>    End_Procedure
73212>>>>>>>
73212>>>>>>>    Procedure AssignPreviewHWND
73214>>>>>>>        Handle hoReport hWnd
73214>>>>>>>        String sReportId
73214>>>>>>>
73214>>>>>>>        Get Window_Handle of oDRPreviewer to hWnd
73215>>>>>>>        If (hWnd <> 0) Begin
73217>>>>>>>            Get phoReport to hoReport
73218>>>>>>>            If (hoReport <> 0) Begin
73220>>>>>>>                Set PreviewWindowHandle of hoReport to hWnd
73221>>>>>>>            End
73221>>>>>>>>
73221>>>>>>>        End
73221>>>>>>>>
73221>>>>>>>    End_Procedure
73222>>>>>>>
73222>>>>>>>    Procedure PreviewClick Integer wParam Integer lParam
73224>>>>>>>        Handle hoReport
73224>>>>>>>
73224>>>>>>>        Get phoReport to hoReport
73225>>>>>>>        If (hoReport <> 0) Begin
73227>>>>>>>            Send PreviewClick of hoReport wParam lParam
73228>>>>>>>        End
73228>>>>>>>>
73228>>>>>>>    End_Procedure
73229>>>>>>>
73229>>>>>>>    Procedure PreviewNextPage
73231>>>>>>>        Handle hoReport
73231>>>>>>>
73231>>>>>>>        Get phoReport to hoReport
73232>>>>>>>        If (hoReport <> 0) Begin
73234>>>>>>>            Send PreviewNextPage of hoReport
73235>>>>>>>        End
73235>>>>>>>>
73235>>>>>>>    End_Procedure
73236>>>>>>>
73236>>>>>>>    Procedure PreviewPreviousPage
73238>>>>>>>        Handle hoReport
73238>>>>>>>
73238>>>>>>>        Get phoReport to hoReport
73239>>>>>>>        If (hoReport <> 0) Begin
73241>>>>>>>            Send PreviewPreviousPage of hoReport
73242>>>>>>>        End
73242>>>>>>>>
73242>>>>>>>    End_Procedure
73243>>>>>>>
73243>>>>>>>    Procedure PreviewFirstPage
73245>>>>>>>        Handle hoReport
73245>>>>>>>
73245>>>>>>>        Get phoReport to hoReport
73246>>>>>>>        If (hoReport <> 0) Begin
73248>>>>>>>            Send PreviewFirstPage of hoReport
73249>>>>>>>        End
73249>>>>>>>>
73249>>>>>>>    End_Procedure
73250>>>>>>>
73250>>>>>>>    Procedure PreviewLastPage
73252>>>>>>>        Handle hoReport
73252>>>>>>>
73252>>>>>>>        Get phoReport to hoReport
73253>>>>>>>        If (hoReport <> 0) Begin
73255>>>>>>>            Send PreviewLastPage of hoReport
73256>>>>>>>        End
73256>>>>>>>>
73256>>>>>>>    End_Procedure
73257>>>>>>>
73257>>>>>>>    Procedure PreviewPaint
73259>>>>>>>        Handle hoReport
73259>>>>>>>
73259>>>>>>>        Get phoReport to hoReport
73260>>>>>>>        If (hoReport <> 0) Begin
73262>>>>>>>            Send PreviewPaint of hoReport
73263>>>>>>>        End
73263>>>>>>>>
73263>>>>>>>    End_Procedure
73264>>>>>>>
73264>>>>>>>    Function piPreviewZoom Returns Integer
73266>>>>>>>        Handle hoReport
73266>>>>>>>        Integer iFactor
73266>>>>>>>
73266>>>>>>>        Get phoReport to hoReport
73267>>>>>>>        If (hoReport <> 0) Begin
73269>>>>>>>            Get piPreviewZoom of hoReport to iFactor
73270>>>>>>>            Function_Return iFactor
73271>>>>>>>        End
73271>>>>>>>>
73271>>>>>>>    End_Function
73272>>>>>>>
73272>>>>>>>        Procedure Set piPreviewZoom Integer iFactor
73274>>>>>>>        Handle hoReport
73274>>>>>>>
73274>>>>>>>        Get phoReport to hoReport
73275>>>>>>>        If (hoReport <> 0) Begin
73277>>>>>>>            Set piPreviewZoom of hoReport to iFactor
73278>>>>>>>        End
73278>>>>>>>>
73278>>>>>>>    End_Procedure
73279>>>>>>>
73279>>>>>>>    Procedure PreviewVScroll Integer iType Integer iPos
73281>>>>>>>        Handle hoReport
73281>>>>>>>
73281>>>>>>>        Get phoReport to hoReport
73282>>>>>>>        If (hoReport <> 0) Begin
73284>>>>>>>            Send PreviewVScroll of hoReport iType iPos
73285>>>>>>>        End
73285>>>>>>>>
73285>>>>>>>    End_Procedure
73286>>>>>>>
73286>>>>>>>    Procedure PreviewHScroll Integer iType Integer iPos
73288>>>>>>>        Handle hoReport
73288>>>>>>>
73288>>>>>>>        Get phoReport to hoReport
73289>>>>>>>        If (hoReport <> 0) Begin
73291>>>>>>>            Send PreviewHScroll of hoReport iType iPos
73292>>>>>>>        End
73292>>>>>>>>
73292>>>>>>>    End_Procedure
73293>>>>>>>
73293>>>>>>>    Procedure OnPageChanged Integer iPage
73295>>>>>>>        Set psText of (oCurrentPage (oDRToolBar (oCommandBars))) to (String (iPage))
73296>>>>>>>    End_Procedure
73297>>>>>>>
73297>>>>>>>    Procedure OnZoomChanged Integer iFactor
73299>>>>>>>        Set psText of (oZoom (oDRToolBar (oCommandBars))) to (String (iFactor) + "%")
73300>>>>>>>    End_Procedure
73301>>>>>>>
73301>>>>>>>    Procedure AdjustViewSize
73303>>>>>>>        Boolean bComObjectCreated
73303>>>>>>>        Boolean bTabbedWorkspaces
73303>>>>>>>        Integer iLeft iTop iRight iBottom iHeight iWidth iSize
73303>>>>>>>
73303>>>>>>>        If (ghoCommandBars) Begin
73305>>>>>>>            Get IsComObjectCreated of ghoCommandBars to bComObjectCreated
73306>>>>>>>            If (bComObjectCreated) Begin
73308>>>>>>>                Get pbTabbedWorkspaces of ghoCommandBars to bTabbedWorkspaces
73309>>>>>>>                If (not (bTabbedWorkspaces)) Begin
73311>>>>>>>                    Send ComGetClientRect of ghoCommandBars (&iLeft) (&iTop) (&iRight) (&iBottom)
73312>>>>>>>                    Move ((iBottom - iTop) * 0.80) to iHeight
73313>>>>>>>                    Move ((iRight - iLeft) * 0.90) to iWidth
73314>>>>>>>                    Get GuiToDialog iHeight iWidth to iSize
73315>>>>>>>                    Set Size to (Hi (iSize)) (Low (iSize))
73316>>>>>>>                End
73316>>>>>>>>
73316>>>>>>>            End
73316>>>>>>>>
73316>>>>>>>        End
73316>>>>>>>>
73316>>>>>>>        Else Begin
73317>>>>>>>            Move (GetSystemMetrics (SM_CYSCREEN) * 0.80) to iHeight
73318>>>>>>>            Move (GetSystemMetrics (SM_CXSCREEN) * 0.90) to iWidth
73319>>>>>>>            Get GuiToDialog iHeight iWidth to iSize
73320>>>>>>>            Set Size to (Hi (iSize)) (Low (iSize))
73321>>>>>>>        End
73321>>>>>>>>
73321>>>>>>>    End_Procedure
73322>>>>>>>
73322>>>>>>>    Procedure UpdateViewer
73324>>>>>>>        Boolean bAllowMaximizeView
73324>>>>>>>        Boolean bTabbedWorkspaces
73324>>>>>>>        Handle hoReport hoClient hWnd
73324>>>>>>>
73324>>>>>>>        Get phoReport to hoReport
73325>>>>>>>        If (hoReport <> 0) Begin
73327>>>>>>>            If (ghoCommandBars) Begin
73329>>>>>>>                Get pbTabbedWorkspaces of ghoCommandBars to bTabbedWorkspaces
73330>>>>>>>                If (not (bTabbedWorkspaces)) Begin
73332>>>>>>>                    Get pbAllowMaximizeView of hoReport to bAllowMaximizeView
73333>>>>>>>                    Set Maximize_Icon to bAllowMaximizeView
73334>>>>>>>                End
73334>>>>>>>>
73334>>>>>>>            End
73334>>>>>>>>
73334>>>>>>>            Send OnShowPreviewer of hoReport
73335>>>>>>>        End
73335>>>>>>>>
73335>>>>>>>
73335>>>>>>>        Send AssignPreviewHWND
73336>>>>>>>
73336>>>>>>>        Get Client_Id to hoClient
73337>>>>>>>        If (hoClient <> 0) Begin
73339>>>>>>>            Get Window_Handle of hoClient to hWnd
73340>>>>>>>            If (hWnd <> 0) Begin
73342>>>>>>>                Move (UpdateWindow (hWnd)) to hWnd
73343>>>>>>>            End
73343>>>>>>>>
73343>>>>>>>        End
73343>>>>>>>>
73343>>>>>>>    End_Procedure
73344>>>>>>>
73344>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
73346>>>>>>>        Forward Send Add_Focus hoParent
73348>>>>>>>
73348>>>>>>>        Send AdjustViewSize
73349>>>>>>>        Send UpdateViewer
73350>>>>>>>    End_Procedure
73351>>>>>>>
73351>>>>>>>    // Close the report when it the dialog is closed. Destroy the dialog.
73351>>>>>>>    Procedure Close_Panel
73353>>>>>>>        Handle hoReport
73353>>>>>>>        Integer iRet
73353>>>>>>>
73353>>>>>>>        Get phoReport to hoReport
73354>>>>>>>        Get Object_Id of hoReport to hoReport // Check if this is still a valid handle
73355>>>>>>>        If (hoReport <> 0) Begin
73357>>>>>>>            Send OnClosePreviewer of hoReport
73358>>>>>>>            Set phoPreviewContainer of hoReport to 0
73359>>>>>>>            Send CancelReport of hoReport
73360>>>>>>>            Set PreviewWindowHandle of hoReport to 0 // reset
73361>>>>>>>        End
73361>>>>>>>>
73361>>>>>>>
73361>>>>>>>        Forward Send Close_Panel
73363>>>>>>>    End_Procedure
73364>>>>>>>End_Class
73365>>>>>Use cCJSkinFramework.pkg
Including file: cCJSkinFramework.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCJSkinFramework.pkg)
73365>>>>>>>Use windows.pkg
73365>>>>>>>Use cCJComSkinFramework.pkg
Including file: cCJComSkinFramework.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCJComSkinFramework.pkg)
73365>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v18.3.0\Bin\Codejock.SkinFramework.v18.3.0.ocx
73365>>>>>>>>>Use FlexCom20.pkg
73365>>>>>>>>>
73365>>>>>>>>>// Changes to Imported package
73365>>>>>>>>>//     OLEXTPxx to XTPxx
73365>>>>>>>>>//     OLExtpxx to xtpxx
73365>>>>>>>>>//     OLESkinFramework to SkinFramework
73365>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
73365>>>>>>>>>//     cCom classes to cCJ
73365>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
73365>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
73365>>>>>>>>>//     cCJSkinFramework to cCJComSkinFramework
73365>>>>>>>>>//     Use statements as noted below (classes moved to these files)
73365>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
73365>>>>>>>>>
73365>>>>>>>>>// These have been extracted from this class and moved into seperate packages
73365>>>>>>>>>// because other Codejock classes use these.
73365>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
73365>>>>>>>>>
73365>>>>>>>>>Define SkinFrameworkApplyOptions for Integer
73365>>>>>>>>>    Define xtpSkinApplyMetrics for 1
73365>>>>>>>>>    Define xtpSkinApplyFrame for 2
73365>>>>>>>>>    Define xtpSkinApplyColors for 4
73365>>>>>>>>>    Define xtpSkinApplyMenus for 8
73365>>>>>>>>>
73365>>>>>>>>>// CLSID: {C0DE1830-28D7-4F2C-87A7-7266367B4655}
73365>>>>>>>>>// Dispatch interface for SkinFramework Control
73365>>>>>>>>>Class cCJ_DSkinFramework is a Mixin
73366>>>>>>>>>
73366>>>>>>>>>    Function ComApplyOptions Returns SkinFrameworkApplyOptions
73368>>>>>>>>>        SkinFrameworkApplyOptions retVal
73368>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
73369>>>>>>>>>        Function_Return retVal
73370>>>>>>>>>    End_Function
73371>>>>>>>>>
73371>>>>>>>>>    Procedure Set ComApplyOptions SkinFrameworkApplyOptions value
73373>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
73374>>>>>>>>>    End_Procedure
73375>>>>>>>>>
73375>>>>>>>>>    Function ComAutoApplyNewWindows Returns Boolean
73377>>>>>>>>>        Boolean retVal
73377>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
73378>>>>>>>>>        Function_Return retVal
73379>>>>>>>>>    End_Function
73380>>>>>>>>>
73380>>>>>>>>>    Procedure Set ComAutoApplyNewWindows Boolean value
73382>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
73383>>>>>>>>>    End_Procedure
73384>>>>>>>>>
73384>>>>>>>>>    Function ComAutoApplyNewThreads Returns Boolean
73386>>>>>>>>>        Boolean retVal
73386>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
73387>>>>>>>>>        Function_Return retVal
73388>>>>>>>>>    End_Function
73389>>>>>>>>>
73389>>>>>>>>>    Procedure Set ComAutoApplyNewThreads Boolean value
73391>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
73392>>>>>>>>>    End_Procedure
73393>>>>>>>>>
73393>>>>>>>>>    Function ComLoadSkin String llResourcePath String llIniFileName Returns Boolean
73395>>>>>>>>>        Handle hDispatchDriver
73395>>>>>>>>>        Boolean retVal
73395>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73396>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73397>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
73398>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
73399>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
73400>>>>>>>>>        Function_Return retVal
73401>>>>>>>>>    End_Function
73402>>>>>>>>>
73402>>>>>>>>>    Procedure ComApplyWindow OLE_HANDLE llhWnd
73404>>>>>>>>>        Handle hDispatchDriver
73404>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73405>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73406>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
73407>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
73408>>>>>>>>>    End_Procedure
73409>>>>>>>>>
73409>>>>>>>>>    Procedure ComEnableThemeDialogTexture OLE_HANDLE llhWnd Integer llFlags
73411>>>>>>>>>        Handle hDispatchDriver
73411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73412>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73413>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
73414>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFlags
73415>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
73416>>>>>>>>>    End_Procedure
73417>>>>>>>>>
73417>>>>>>>>>    Procedure ComRemoveWindow OLE_HANDLE llhWnd
73419>>>>>>>>>        Handle hDispatchDriver
73419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73420>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73421>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
73422>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
73423>>>>>>>>>    End_Procedure
73424>>>>>>>>>
73424>>>>>>>>>    Procedure ComRemoveAllWindows
73426>>>>>>>>>        Handle hDispatchDriver
73426>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73427>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
73428>>>>>>>>>    End_Procedure
73429>>>>>>>>>
73429>>>>>>>>>    Procedure ComAddWindowClass String llClassName String llBaseClassName
73431>>>>>>>>>        Handle hDispatchDriver
73431>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73432>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73433>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
73434>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llBaseClassName
73435>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
73436>>>>>>>>>    End_Procedure
73437>>>>>>>>>
73437>>>>>>>>>    Procedure ComRemoveWindowClass String llClassName
73439>>>>>>>>>        Handle hDispatchDriver
73439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73440>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73441>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
73442>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
73443>>>>>>>>>    End_Procedure
73444>>>>>>>>>
73444>>>>>>>>>    Function ComEnumerateSkinDirectory String llPath Boolean llRecursive Returns Variant
73446>>>>>>>>>        Handle hDispatchDriver
73446>>>>>>>>>        Variant retVal
73446>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73447>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73448>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
73449>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRecursive
73450>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
73451>>>>>>>>>        Function_Return retVal
73452>>>>>>>>>    End_Function
73453>>>>>>>>>
73453>>>>>>>>>    Function ComEnumerateSkinFile String llPath Returns Variant
73455>>>>>>>>>        Handle hDispatchDriver
73455>>>>>>>>>        Variant retVal
73455>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73456>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73457>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
73458>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
73459>>>>>>>>>        Function_Return retVal
73460>>>>>>>>>    End_Function
73461>>>>>>>>>
73461>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
73463>>>>>>>>>        Handle hDispatchDriver
73463>>>>>>>>>        OLE_COLOR retVal
73463>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73464>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73465>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
73466>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_I4 to retVal
73467>>>>>>>>>        Function_Return retVal
73468>>>>>>>>>    End_Function
73469>>>>>>>>>
73469>>>>>>>>>    Procedure ComExcludeModule String llModuleName
73471>>>>>>>>>        Handle hDispatchDriver
73471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73472>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73473>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llModuleName
73474>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
73475>>>>>>>>>    End_Procedure
73476>>>>>>>>>
73476>>>>>>>>>    Function ComCreateSchema String llResourcePath String llIniFileName Returns Variant
73478>>>>>>>>>        Handle hDispatchDriver
73478>>>>>>>>>        Variant retVal
73478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73479>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73480>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
73481>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
73482>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
73483>>>>>>>>>        Function_Return retVal
73484>>>>>>>>>    End_Function
73485>>>>>>>>>
73485>>>>>>>>>    Procedure ComSetWindowTheme OLE_HANDLE llhWnd Variant llSchema
73487>>>>>>>>>        Handle hDispatchDriver
73487>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73488>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73489>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
73490>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llSchema
73491>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
73492>>>>>>>>>    End_Procedure
73493>>>>>>>>>
73493>>>>>>>>>    Procedure ComAboutBox
73495>>>>>>>>>        Handle hDispatchDriver
73495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73496>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
73497>>>>>>>>>    End_Procedure
73498>>>>>>>>>End_Class
73499>>>>>>>>>
73499>>>>>>>>>// CLSID: {C0DE1830-4463-4030-B324-AC6A8075FEC8}
73499>>>>>>>>>// Event interface for SkinFramework Control
73499>>>>>>>>>Class cCJ_DSkinFrameworkEvents is a Mixin
73500>>>>>>>>>
73500>>>>>>>>>    Procedure RegisterComEvents
73502>>>>>>>>>    End_Procedure
73503>>>>>>>>>End_Class
73504>>>>>>>>>
73504>>>>>>>>>// CoClass
73504>>>>>>>>>// ProgID: Codejock.SkinFramework.18.3.0
73504>>>>>>>>>// CLSID: {C0DE1830-2217-42EE-B1B0-82C890431F17}
73504>>>>>>>>>// SkinFramework Control
73504>>>>>>>>>Class cCJComSkinFramework is a cComActiveXControl
73505>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFramework
73506>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFrameworkEvents
73507>>>>>>>>>
73507>>>>>>>>>    Procedure Construct_Object
73509>>>>>>>>>        Forward Send Construct_Object
73511>>>>>>>>>        Set psProgID to "{C0DE1830-2217-42EE-B1B0-82C890431F17}"
73512>>>>>>>>>        Set psEventId to "{C0DE1830-4463-4030-B324-AC6A8075FEC8}"
73513>>>>>>>>>        Set psLicenseKey to ("Skin Framework Control Copyright (c) 1998-2018 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.SkinFramework.ActiveX.v18.3"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: GGE-OLD-QQR-EJS")
73514>>>>>>>>>        Set peAutoCreate to acAutoCreate
73515>>>>>>>>>    End_Procedure
73516>>>>>>>>>End_Class
73517>>>>>>>>>
73517>>>>>>>>>// CLSID: {C0DE1830-CA9A-4AA9-8601-0AB7F551AA3D}
73517>>>>>>>>>// SkinFramework Global Settings
73517>>>>>>>>>Class cCJISkinFrameworkGlobalSettings is a Mixin
73518>>>>>>>>>
73518>>>>>>>>>    Function ComLicense Returns String
73520>>>>>>>>>        String retVal
73520>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
73521>>>>>>>>>        Function_Return retVal
73522>>>>>>>>>    End_Function
73523>>>>>>>>>
73523>>>>>>>>>    Procedure Set ComLicense String value
73525>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
73526>>>>>>>>>    End_Procedure
73527>>>>>>>>>
73527>>>>>>>>>    Function ComTitle Returns String
73529>>>>>>>>>        String retVal
73529>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
73530>>>>>>>>>        Function_Return retVal
73531>>>>>>>>>    End_Function
73532>>>>>>>>>
73532>>>>>>>>>    Procedure Set ComTitle String value
73534>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
73535>>>>>>>>>    End_Procedure
73536>>>>>>>>>
73536>>>>>>>>>    Function ComVersion Returns String
73538>>>>>>>>>        Handle hDispatchDriver
73538>>>>>>>>>        String retVal
73538>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73539>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
73540>>>>>>>>>        Function_Return retVal
73541>>>>>>>>>    End_Function
73542>>>>>>>>>
73542>>>>>>>>>    Function ComUnicode Returns Boolean
73544>>>>>>>>>        Handle hDispatchDriver
73544>>>>>>>>>        Boolean retVal
73544>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73545>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
73546>>>>>>>>>        Function_Return retVal
73547>>>>>>>>>    End_Function
73548>>>>>>>>>
73548>>>>>>>>>    Function ComOcxPath Returns String
73550>>>>>>>>>        Handle hDispatchDriver
73550>>>>>>>>>        String retVal
73550>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73551>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
73552>>>>>>>>>        Function_Return retVal
73553>>>>>>>>>    End_Function
73554>>>>>>>>>End_Class
73555>>>>>>>>>
73555>>>>>>>>>// CoClass
73555>>>>>>>>>// ProgID: Codejock.SkinFrameworkGlobalSettings.18.3.0
73555>>>>>>>>>// CLSID: {C0DE1830-F744-4373-B38D-29CE83EF0EE5}
73555>>>>>>>>>// SkinFramework Global Settings
73555>>>>>>>>>Class cCJComSkinFrameworkGlobalSettings is a cComAutomationObject
73556>>>>>>>>>    Import_Class_Protocol cCJISkinFrameworkGlobalSettings
73557>>>>>>>>>
73557>>>>>>>>>    Procedure Construct_Object
73559>>>>>>>>>        Forward Send Construct_Object
73561>>>>>>>>>        Set psProgID to "{C0DE1830-F744-4373-B38D-29CE83EF0EE5}"
73562>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
73563>>>>>>>>>    End_Procedure
73564>>>>>>>>>End_Class
73565>>>>>>>>>
73565>>>>>>>>>// CLSID: {C0DE1830-1038-498E-A936-361F08B4C4AA}
73565>>>>>>>>>Class cCJSkinIniFile is a cComAutomationObject
73566>>>>>>>>>
73566>>>>>>>>>    Function ComColorScheme Returns String
73568>>>>>>>>>        String retVal
73568>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
73569>>>>>>>>>        Function_Return retVal
73570>>>>>>>>>    End_Function
73571>>>>>>>>>
73571>>>>>>>>>    Procedure Set ComColorScheme String value
73573>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
73574>>>>>>>>>    End_Procedure
73575>>>>>>>>>
73575>>>>>>>>>    Function ComFontSize Returns String
73577>>>>>>>>>        String retVal
73577>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
73578>>>>>>>>>        Function_Return retVal
73579>>>>>>>>>    End_Function
73580>>>>>>>>>
73580>>>>>>>>>    Procedure Set ComFontSize String value
73582>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
73583>>>>>>>>>    End_Procedure
73584>>>>>>>>>
73584>>>>>>>>>    Function ComIniFileName Returns String
73586>>>>>>>>>        String retVal
73586>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
73587>>>>>>>>>        Function_Return retVal
73588>>>>>>>>>    End_Function
73589>>>>>>>>>
73589>>>>>>>>>    Procedure Set ComIniFileName String value
73591>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
73592>>>>>>>>>    End_Procedure
73593>>>>>>>>>End_Class
73594>>>>>>>>>
73594>>>>>>>>>// CLSID: {C0DE1830-4834-499E-95B4-30E0C3F43A10}
73594>>>>>>>>>Class cCJSkinDescription is a cComAutomationObject
73595>>>>>>>>>
73595>>>>>>>>>    Function ComName Returns String
73597>>>>>>>>>        String retVal
73597>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
73598>>>>>>>>>        Function_Return retVal
73599>>>>>>>>>    End_Function
73600>>>>>>>>>
73600>>>>>>>>>    Procedure Set ComName String value
73602>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
73603>>>>>>>>>    End_Procedure
73604>>>>>>>>>
73604>>>>>>>>>    Function ComPath Returns String
73606>>>>>>>>>        String retVal
73606>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
73607>>>>>>>>>        Function_Return retVal
73608>>>>>>>>>    End_Function
73609>>>>>>>>>
73609>>>>>>>>>    Procedure Set ComPath String value
73611>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
73612>>>>>>>>>    End_Procedure
73613>>>>>>>>>
73613>>>>>>>>>    Function ComCount Returns Integer
73615>>>>>>>>>        Handle hDispatchDriver
73615>>>>>>>>>        Integer retVal
73615>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73616>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
73617>>>>>>>>>        Function_Return retVal
73618>>>>>>>>>    End_Function
73619>>>>>>>>>
73619>>>>>>>>>    Function ComIniFile Integer llIndex Returns Variant
73621>>>>>>>>>        Handle hDispatchDriver
73621>>>>>>>>>        Variant retVal
73621>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73622>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73623>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
73624>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
73625>>>>>>>>>        Function_Return retVal
73626>>>>>>>>>    End_Function
73627>>>>>>>>>
73627>>>>>>>>>    Function Com_NewEnum Returns Variant
73629>>>>>>>>>        Handle hDispatchDriver
73629>>>>>>>>>        Variant retVal
73629>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73630>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
73631>>>>>>>>>        Function_Return retVal
73632>>>>>>>>>    End_Function
73633>>>>>>>>>End_Class
73634>>>>>>>>>
73634>>>>>>>>>// CLSID: {C0DE1830-FB37-4B08-A2B9-F6F8B253D697}
73634>>>>>>>>>Class cCJSkinDescriptions is a cComAutomationObject
73635>>>>>>>>>
73635>>>>>>>>>    Function ComCount Returns Integer
73637>>>>>>>>>        Handle hDispatchDriver
73637>>>>>>>>>        Integer retVal
73637>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73638>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
73639>>>>>>>>>        Function_Return retVal
73640>>>>>>>>>    End_Function
73641>>>>>>>>>
73641>>>>>>>>>    Function ComSkin Integer llIndex Returns Variant
73643>>>>>>>>>        Handle hDispatchDriver
73643>>>>>>>>>        Variant retVal
73643>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73644>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73645>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
73646>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
73647>>>>>>>>>        Function_Return retVal
73648>>>>>>>>>    End_Function
73649>>>>>>>>>
73649>>>>>>>>>    Function Com_NewEnum Returns Variant
73651>>>>>>>>>        Handle hDispatchDriver
73651>>>>>>>>>        Variant retVal
73651>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73652>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
73653>>>>>>>>>        Function_Return retVal
73654>>>>>>>>>    End_Function
73655>>>>>>>>>End_Class
73656>>>>>>>>>
73656>>>>>>>>>// CLSID: {C0DE1830-C56F-43C0-BCF1-8193B35FE4C4}
73656>>>>>>>>>Class cCJSkinSchema is a cComAutomationObject
73657>>>>>>>>>
73657>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
73659>>>>>>>>>        Handle hDispatchDriver
73659>>>>>>>>>        OLE_COLOR retVal
73659>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73660>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73661>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
73662>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
73663>>>>>>>>>        Function_Return retVal
73664>>>>>>>>>    End_Function
73665>>>>>>>>>End_Class
73666>>>>>>>Use cApplication.pkg
73666>>>>>>>
73666>>>>>>>Struct tSkinInformation
73666>>>>>>>    String sName     // description of the skin
73666>>>>>>>    String sSkinfile // file path. Can be relative or full
73666>>>>>>>    String sSkinIni  // section name
73666>>>>>>>End_Struct
73666>>>>>>>
73666>>>>>>>
73666>>>>>>>Class cCJSkinFramework is a cCJComSkinFramework
73667>>>>>>>    
73667>>>>>>>    Procedure Construct_Object
73669>>>>>>>        Forward Send Construct_Object
73671>>>>>>>        
73671>>>>>>>        Property String psSkinFile ""
73672>>>>>>>        Property String psSkinIni ""
73673>>>>>>>        Property Boolean pbLoadPreference False
73674>>>>>>>        
73674>>>>>>>        Set peAutoCreate to acAutoCreate
73675>>>>>>>        
73675>>>>>>>        Move Self to ghoSkinFramework
73676>>>>>>>    End_Procedure
73677>>>>>>>    
73677>>>>>>>    // return the default skin path, which is the programs directory.
73677>>>>>>>    // This requires an application object.
73677>>>>>>>    // If you want to different skin path, override this.
73677>>>>>>>    Function SkinPath Returns String
73679>>>>>>>        String sPath sPaths
73679>>>>>>>        Handle hoWorkspace
73679>>>>>>>        If ghoApplication Begin
73681>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
73682>>>>>>>            Get psProgramPath of hoWorkspace to sPaths
73683>>>>>>>            Get PathAtIndex of hoWorkspace sPaths 1 to sPath
73684>>>>>>>        End
73684>>>>>>>>
73684>>>>>>>        Else Begin
73685>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
73686>>>>>>>>
73686>>>>>>>        End
73686>>>>>>>>
73686>>>>>>>        Function_Return sPath
73687>>>>>>>    End_Function
73688>>>>>>>    
73688>>>>>>>    // Returns the Qualified name of psSkinFile. If the file is already qualified it just
73688>>>>>>>    // returns itself. If it is not, it uses SkinPath to get the path.
73688>>>>>>>    Function SkinQFile Returns String
73690>>>>>>>        String sFile sPath sSep
73690>>>>>>>        Boolean bQualified
73690>>>>>>>        Get psSkinFile to sFile
73691>>>>>>>        If not (IsFileNameQualified(sFile)) Begin
73693>>>>>>>            Get SkinPath to sPath
73694>>>>>>>            Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
73695>>>>>>>            Move (sPath - sSep - sFile) to sFile
73696>>>>>>>        End
73696>>>>>>>>
73696>>>>>>>        Function_Return sFile
73697>>>>>>>    End_Function
73698>>>>>>>    
73698>>>>>>>    // defines the default VDF window class mapping.
73698>>>>>>>    Procedure OnAddVDFWindowClasses
73700>>>>>>>        Send ComAddWindowClass "DFlistbox"               "ListBox"
73701>>>>>>>        Send ComAddWindowClass "DFentry"                 "Edit"
73702>>>>>>>        Send ComAddWindowClass "DFtextbox"               "Edit"
73703>>>>>>>        Send ComAddWindowClass "DFRichEditCtrl"          "Edit"
73704>>>>>>>        Send ComAddWindowClass "DFcombobox"              "ComboBox"
73705>>>>>>>        Send ComAddWindowClass "DFformlist"              "Edit"
73706>>>>>>>        Send ComAddWindowClass "DFFormListHeader"        "SysHeader32"
73707>>>>>>>        Send ComAddWindowClass "DFbutton"                "Button"
73708>>>>>>>        Send ComAddWindowClass "HPromptBtn"              "Button"
73709>>>>>>>        Send ComAddWindowClass "Hspinbtn"                "msctls_updown32"
73710>>>>>>>        Send ComAddWindowClass "DFSysTabControl32"       "SysTabControl32"
73711>>>>>>>        Send ComAddWindowClass "DFMDIClient"             "MDIClient"
73712>>>>>>>        Send ComAddWindowClass "DFedit"                  "edit"
73713>>>>>>>        Send ComAddWindowClass "DFlistedit"              "edit"
73714>>>>>>>        Send ComAddWindowClass "DFscrollbar"             "scrollbar"
73715>>>>>>>        Send ComAddWindowClass "DFgroup"                 "Button"
73716>>>>>>>        Send ComAddWindowClass "DFComboGrid"             "ComboBox"
73717>>>>>>>        // External class
73717>>>>>>>        Send ComAddWindowClass "cVdfAnimation"           "SysAnimate32"
73718>>>>>>>        Send ComAddWindowClass "cVdfProgressBar"         "msctls_progress32"
73719>>>>>>>        Send ComAddWindowClass "cVdfStatusBar"           "msctls_statusbar32"
73720>>>>>>>        Send ComAddWindowClass "cVdfToolbar"             "ToolbarWindow32"
73721>>>>>>>        Send ComAddWindowClass "cObsoleteVdfProgressBar" "msctls_progress32"
73722>>>>>>>        Send ComAddWindowClass "cVdfTrackBar"            "msctls_trackbar32"
73723>>>>>>>        Send ComAddWindowClass "cObsoleteBasicStatusBar" "msctls_statusbar32"
73724>>>>>>>        Send ComAddWindowClass "cVdfTreeView"            "SysTreeView32"
73725>>>>>>>    End_Procedure
73726>>>>>>>    
73726>>>>>>>    // Used to support developer designed class mappings (e.g. COM controls)
73726>>>>>>>    Procedure OnAddCustomWindowClasses
73728>>>>>>>    End_Procedure
73729>>>>>>>    
73729>>>>>>>    // called when object is created during end_construct_object.
73729>>>>>>>    Procedure OnCreate
73731>>>>>>>        Integer iOpts
73731>>>>>>>        Boolean bUseWindowsFont
73731>>>>>>>        Forward Send OnCreate
73733>>>>>>>        
73733>>>>>>>        // if we are using the windows fonts we will disable the apply metrics which
73733>>>>>>>        // never really looked good anyway. This test only exists or legacy purposes
73733>>>>>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
73734>>>>>>>        If bUseWindowsFont Begin
73736>>>>>>>            Get ComApplyOptions to iOpts
73737>>>>>>>            Set ComApplyOptions to (RemoveBitValue(xtpSkinApplyMetrics, iOpts))
73738>>>>>>>        End
73738>>>>>>>>
73738>>>>>>>        
73738>>>>>>>        // this works around a CJ issue where skins applied to other threads causes an exception upon close down.
73738>>>>>>>        // We saw this with our mssql driver but it could occur elsewhere. This has been reported in the CJ newsgroup
73738>>>>>>>        // and this was the suggested workaround.
73738>>>>>>>        Set ComAutoApplyNewThreads to False
73739>>>>>>>        
73739>>>>>>>        Send OnAddVDFWindowClasses
73740>>>>>>>        Send OnAddCustomWindowClasses
73741>>>>>>>        
73741>>>>>>>        // if preferences are used, it will set psSkinFile and psSkinIni
73741>>>>>>>        If (pbLoadPreference(Self)) Begin
73743>>>>>>>            Send LoadSkinPreference
73744>>>>>>>        End
73744>>>>>>>>
73744>>>>>>>        // if a skin file name exists, we apply the skin.
73744>>>>>>>        If (psSkinFile(Self)<>"") Begin
73746>>>>>>>            Send ApplySkin
73747>>>>>>>        End
73747>>>>>>>>
73747>>>>>>>    End_Procedure
73748>>>>>>>    
73748>>>>>>>    // called by framework as part of application exit.
73748>>>>>>>    Procedure Broadcast_Notify_Exit_Application
73750>>>>>>>        Send Notify_Exit_Application
73751>>>>>>>    End_Procedure
73752>>>>>>>    
73752>>>>>>>    Procedure Notify_Exit_Application
73754>>>>>>>        If (pbLoadPreference(Self)) Begin
73756>>>>>>>            Send SaveSkinPreference
73757>>>>>>>        End
73757>>>>>>>>
73757>>>>>>>    End_Procedure
73758>>>>>>>    
73758>>>>>>>    Procedure NotifyPreApplySkin
73760>>>>>>>        Broadcast Send OnPreApplySkin of Desktop True
73762>>>>>>>    End_Procedure
73763>>>>>>>    
73763>>>>>>>    Procedure NotifyPostApplySkin
73765>>>>>>>        Broadcast Send OnPostApplySkin of Desktop True
73767>>>>>>>    End_Procedure
73768>>>>>>>    
73768>>>>>>>    // returns an array of all skins in the path. If path is "", use the default path.
73768>>>>>>>    // If the default path is used, returns the file names as relative names, else use full path.
73768>>>>>>>    Function EnumerateSkins String sPath Boolean bRecursive Returns tSkinInformation[]
73770>>>>>>>        tSkinInformation[] Skins
73770>>>>>>>        tSkinInformation[] Skins
73771>>>>>>>        String sSkinName sSkinFile sDefaultPath sSep
73771>>>>>>>        Variant vSkinDescriptions vSkinDescription vSkinIniFile
73771>>>>>>>        Handle hSkinDescriptions hSkinDescription hSkinIniFile
73771>>>>>>>        Integer iSkinsCount iSkinFilesCount iNumSkins iNumSkinFiles iArrayItem
73771>>>>>>>        Integer iPos iDfltLen
73771>>>>>>>        Boolean bUseRelativePath
73771>>>>>>>        
73771>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
73772>>>>>>>        
73772>>>>>>>        Get SkinPath to sDefaultPath
73773>>>>>>>        If (sPath="") Begin
73775>>>>>>>            Move sDefaultPath to sPath
73776>>>>>>>        End
73776>>>>>>>>
73776>>>>>>>        Move (Uppercase(sDefaultPath)) to sDefaultPath
73777>>>>>>>        Move (Length(sDefaultPath)) to iDfltLen
73778>>>>>>>        Move (sDefaultPath=Uppercase(sPath)) to bUseRelativePath
73779>>>>>>>        
73779>>>>>>>        Get ComEnumerateSkinDirectory sPath bRecursive to vSkinDescriptions
73780>>>>>>>        If (not(IsNullComObject(vSkinDescriptions))) Begin
73782>>>>>>>            
73782>>>>>>>            Get Create U_cCJSkinDescriptions to hSkinDescriptions
73783>>>>>>>            Get Create U_cCJSkinDescription to hSkinDescription
73784>>>>>>>            Get Create U_cCJSkinIniFile to hSkinIniFile
73785>>>>>>>            
73785>>>>>>>            Set pvComObject of hSkinDescriptions to vSkinDescriptions
73786>>>>>>>            Get ComCount of hSkinDescriptions to iNumSkinFiles
73787>>>>>>>            
73787>>>>>>>            For iSkinFilesCount from 0 to (iNumSkinFiles-1)
73793>>>>>>>>
73793>>>>>>>                Get ComSkin of hSkinDescriptions iSkinFilesCount to vSkinDescription
73794>>>>>>>                Set pvComObject of hSkinDescription to vSkinDescription
73795>>>>>>>                
73795>>>>>>>                Get ComCount of hSkinDescription to iNumSkins
73796>>>>>>>                
73796>>>>>>>                For iSkinsCount from 0 to (iNumSkins-1)
73802>>>>>>>>
73802>>>>>>>                    Get ComIniFile of hSkinDescription iSkinsCount to vSkinIniFile
73803>>>>>>>                    Set pvComObject of hSkinIniFile to vSkinIniFile
73804>>>>>>>                    
73804>>>>>>>                    Get ComName of hSkinDescription to Skins[iArrayItem].sName
73805>>>>>>>                    Get ComPath of hSkinDescription to sSkinFile
73806>>>>>>>                    If bUseRelativePath Begin
73808>>>>>>>                        Move (pos(sDefaultPath,uppercase(sSkinFile))) to iPos
73809>>>>>>>                        If iPos Begin
73811>>>>>>>                            Move (Remove(sSkinFile,iPos,iDfltLen)) to sSkinFile
73812>>>>>>>                            While (Left(sSkinFile,1)=sSep)
73816>>>>>>>                                Move (Remove(sSkinFile,1,1)) to sSkinFile
73817>>>>>>>                            Loop
73818>>>>>>>>
73818>>>>>>>                        End
73818>>>>>>>>
73818>>>>>>>                    End
73818>>>>>>>>
73818>>>>>>>                    Move sSkinFile to Skins[iArrayItem].sSkinfile
73819>>>>>>>                    Get ComIniFileName of hSkinIniFile to Skins[iArrayItem].sSkinIni
73820>>>>>>>                    
73820>>>>>>>                    Increment iArrayItem
73821>>>>>>>                Loop
73822>>>>>>>>
73822>>>>>>>            Loop
73823>>>>>>>>
73823>>>>>>>            
73823>>>>>>>            Send Destroy of hSkinDescriptions
73824>>>>>>>            Send Destroy of hSkinDescription
73825>>>>>>>            Send Destroy of hSkinIniFile
73826>>>>>>>            
73826>>>>>>>        End
73826>>>>>>>>
73826>>>>>>>        Function_Return Skins
73827>>>>>>>    End_Function
73828>>>>>>>    
73828>>>>>>>    // Save the skin preference. This requires an application object.
73828>>>>>>>    // Only do this if the application object allows it.
73828>>>>>>>    // This is called during startup if pbLoadPreference is True
73828>>>>>>>    // Suitable for override
73828>>>>>>>    Procedure SaveSkinPreference
73830>>>>>>>        String sSkin sIni
73830>>>>>>>        If ghoApplication Begin
73832>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
73834>>>>>>>                Get psSkinFile to sSkin
73835>>>>>>>                Get psSkinIni to sIni
73836>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinFile" sSkin
73837>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinIni" sIni
73838>>>>>>>            End
73838>>>>>>>>
73838>>>>>>>        End
73838>>>>>>>>
73838>>>>>>>        Else Begin
73839>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
73840>>>>>>>>
73840>>>>>>>        End
73840>>>>>>>>
73840>>>>>>>    End_Procedure
73841>>>>>>>    
73841>>>>>>>    // Load the skin preference. This requires an application object.
73841>>>>>>>    // Only do this if the application object allows it.
73841>>>>>>>    // This is called during startup if pbLoadPreference is True
73841>>>>>>>    // Suitable for override
73841>>>>>>>    Procedure LoadSkinPreference
73843>>>>>>>        String sSkin sIni
73843>>>>>>>        Boolean bExists
73843>>>>>>>        If ghoApplication Begin
73845>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
73847>>>>>>>                Get ValueExists of ghoApplication "Preferences" "SkinFile" to bExists
73848>>>>>>>                If bExists Begin
73850>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinFile" "" to sSkin
73851>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinIni" "" to sIni
73852>>>>>>>                    Set psSkinFile to sSkin
73853>>>>>>>                    Set psSkinIni to sIni
73854>>>>>>>                End
73854>>>>>>>>
73854>>>>>>>            End
73854>>>>>>>>
73854>>>>>>>        End
73854>>>>>>>>
73854>>>>>>>        Else Begin
73855>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
73856>>>>>>>>
73856>>>>>>>        End
73856>>>>>>>>
73856>>>>>>>    End_Procedure
73857>>>>>>>    
73857>>>>>>>    // Can be called to apply the current skin.
73857>>>>>>>    Procedure ApplySkin
73859>>>>>>>        Boolean bOk
73859>>>>>>>        String sSkin sIni
73859>>>>>>>        If (IsComObjectCreated(Self)) Begin
73861>>>>>>>            Get SkinQFile to sSkin
73862>>>>>>>            Get psSkinIni to sIni
73863>>>>>>>            
73863>>>>>>>            Send NotifyPreApplySkin
73864>>>>>>>            // when skins are used we don't want to use built in Visual Styles
73864>>>>>>>            Send EnableVisualStyles of Desktop (sSkin="")
73865>>>>>>>            Get ComLoadSkin sSkin sIni to bOK
73866>>>>>>>            If (sSkin<>"" and not(bOk)) Begin
73868>>>>>>>                // if not ok, no skin was appied. Enable visual styles
73868>>>>>>>                Send EnableVisualStyles of Desktop True
73869>>>>>>>            End
73869>>>>>>>>
73869>>>>>>>            Send NotifyPostApplySkin
73870>>>>>>>        End
73870>>>>>>>>
73870>>>>>>>    End_Procedure
73871>>>>>>>    
73871>>>>>>>    
73871>>>>>>>End_Class
73872>>>>>Use DRExportOptions.dg
73872>>>>>Use cDRToolPanelPreview.pkg
Including file: cDRToolPanelPreview.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRToolPanelPreview.pkg)
73872>>>>>>>Use Windows.pkg
73872>>>>>>>Use DRLanguage.Inc
73872>>>>>>>Use cDRCommandBarSystem.pkg
73872>>>>>>>Use cDRMenuItem.pkg
73872>>>>>>>Use cDRZoomMenuItem.pkg
73872>>>>>>>Use cDRCurrentPageMenuItem.pkg
73872>>>>>>>Use cDRExportMenuItem.pkg
73872>>>>>>>Use cDRPrintMenuItem.pkg
73872>>>>>>>Use cDRFirstPageMenuItem.pkg
73872>>>>>>>Use cDRPreviousPageMenuItem.pkg
73872>>>>>>>Use cDRNextPageMenuItem.pkg
73872>>>>>>>Use cDRLastPageMenuItem.pkg
73872>>>>>>>Use cDRRefreshMenuItem.pkg
73872>>>>>>>Use cDRReport.pkg
73872>>>>>>>Use DRExportOptions.dg
73872>>>>>>>Use cDRPreviewWindow.pkg
73872>>>>>>>Use cDRSearchPreviewMenuItem.pkg
73872>>>>>>>Use cDRSearchPreviewOptionsMenuItem.pkg
73872>>>>>>>
73872>>>>>>>Class cDRToolPanelPreview is a ToolPanel
73873>>>>>>>    Procedure Construct_Object
73875>>>>>>>        Forward Send Construct_Object
73877>>>>>>>
73877>>>>>>>        Property Handle phoReport 0
73878>>>>>>>
73878>>>>>>>        Set Size to 273 448
73879>>>>>>>        Set Icon to "DR.Ico"
73880>>>>>>>        Set Name to "oDRToolPanelPreview"
73881>>>>>>>
73881>>>>>>>        Object oDRPreviewer is a cDRPreviewWindow
73883>>>>>>>            Set Size to 231 440
73884>>>>>>>            Set Location to 18 4
73885>>>>>>>            Set peAnchors to anAll
73886>>>>>>>        End_Object
73887>>>>>>>
73887>>>>>>>        Object oCloseButton is a Button
73889>>>>>>>            Set Label to C_$Close
73890>>>>>>>            Set Location to 254 394
73891>>>>>>>            Set peAnchors to anBottomRight
73892>>>>>>>            Set Message 0 to Close_Panel
73893>>>>>>>        End_Object
73894>>>>>>>
73894>>>>>>>        Object oCommandBars is a cDRCommandBarSystem
73896>>>>>>>            Set pbAutoResizeIcons to True
73897>>>>>>>
73897>>>>>>>            Object oDRToolBar is a cCJToolbar
73899>>>>>>>                Set pbCloseable to False
73900>>>>>>>                Set pbEnableDocking to False
73901>>>>>>>                Set pbGripper to False
73902>>>>>>>                Set peStretched to stStretch
73903>>>>>>>                Set pbDockNextTo to False
73904>>>>>>>                Set pbHideWrap to True
73905>>>>>>>                Set pbCustomizable to False
73906>>>>>>>
73906>>>>>>>                Object oFirstPage is a cDRFirstPageMenuItem
73908>>>>>>>                End_Object
73909>>>>>>>
73909>>>>>>>                Object oPreviousPage is a cDRPreviousPageMenuItem
73911>>>>>>>                End_Object
73912>>>>>>>
73912>>>>>>>                Object oCurrentPage is a cDRCurrentPageMenuItem
73914>>>>>>>                    Set peControlType to xtpControlEdit
73915>>>>>>>                End_Object
73916>>>>>>>
73916>>>>>>>                Object oNextPage is a cDRNextPageMenuItem
73918>>>>>>>                End_Object
73919>>>>>>>
73919>>>>>>>                Object oLastPage is a cDRLastPageMenuItem
73921>>>>>>>                End_Object
73922>>>>>>>
73922>>>>>>>                Object oRefresh is a cDRRefreshMenuItem
73924>>>>>>>                End_Object
73925>>>>>>>
73925>>>>>>>                Object oPrint is a cDRPrintMenuItem
73927>>>>>>>                End_Object
73928>>>>>>>
73928>>>>>>>                Object oZoom is a cDRZoomMenuItem
73930>>>>>>>                End_Object
73931>>>>>>>
73931>>>>>>>                Object oExport is a cDRExportMenuItem
73933>>>>>>>                    Set phoExportOptionsDialog to (oDRExportOptionsDialog)
73934>>>>>>>                End_Object
73935>>>>>>>
73935>>>>>>>                Object oSearchInPreview is a cDRSearchPreviewMenuItem
73937>>>>>>>                End_Object
73938>>>>>>>
73938>>>>>>>                Object oSearchInPreviewOptions is a cDRMenuItem
73940>>>>>>>                    Set peControlType to xtpControlSplitButtonPopup
73941>>>>>>>                    Set psCaption to C_$DRSearchInPreviewOptions
73942>>>>>>>                    Set psTooltip to C_$DRSearchInPreviewOptionsTooltip
73943>>>>>>>                    Set peControlStyle to xtpButtonIconAndCaption
73944>>>>>>>                    Set psImage to "DRFind.Ico"
73945>>>>>>>
73945>>>>>>>                    Object oDownMenuItem is a cDRSearchPreviewOptionsMenuItem
73947>>>>>>>                        Set psCaption to C_$DRSearchInPreviewDown
73948>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbDown))
73949>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbDown))
73950>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
73951>>>>>>>                    End_Object
73952>>>>>>>
73952>>>>>>>                    Object oWholeWordMenuItem is a cDRSearchPreviewOptionsMenuItem
73954>>>>>>>                        Set psCaption to C_$DRSearchInPreviewWholeWord
73955>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbWholeWord))
73956>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbWholeWord))
73957>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
73958>>>>>>>                    End_Object
73959>>>>>>>
73959>>>>>>>                    Object oMatchCaseMenuItem is a cDRSearchPreviewOptionsMenuItem
73961>>>>>>>                        Set psCaption to C_$DRSearchInPreviewMatchCase
73962>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbMatchCase))
73963>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbMatchCase))
73964>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
73965>>>>>>>                    End_Object
73966>>>>>>>                End_Object
73967>>>>>>>            End_Object
73968>>>>>>>        End_Object
73969>>>>>>>
73969>>>>>>>        On_Key Key_Escape Send KeyAction of oCloseButton
73970>>>>>>>    End_Procedure
73971>>>>>>>
73971>>>>>>>    // Same method can be used by preview view or toolpanel
73971>>>>>>>    Procedure Activate_View
73973>>>>>>>        Send Activate
73974>>>>>>>    End_Procedure
73975>>>>>>>
73975>>>>>>>    Procedure AssignPreviewHWND
73977>>>>>>>        Handle hoReport hWnd
73977>>>>>>>        String sReportId
73977>>>>>>>
73977>>>>>>>        Get Window_Handle of oDRPreviewer to hWnd
73978>>>>>>>        If (hWnd <> 0) Begin
73980>>>>>>>            Get phoReport to hoReport
73981>>>>>>>            If (hoReport <> 0) Begin
73983>>>>>>>                Set PreviewWindowHandle of hoReport to hWnd
73984>>>>>>>            End
73984>>>>>>>>
73984>>>>>>>        End
73984>>>>>>>>
73984>>>>>>>    End_Procedure
73985>>>>>>>
73985>>>>>>>        Procedure PreviewClick Integer wParam Integer lParam
73987>>>>>>>        Handle hoReport
73987>>>>>>>
73987>>>>>>>        Get phoReport to hoReport
73988>>>>>>>        If (hoReport <> 0) Begin
73990>>>>>>>            Send PreviewClick of hoReport wParam lParam
73991>>>>>>>        End
73991>>>>>>>>
73991>>>>>>>    End_Procedure
73992>>>>>>>
73992>>>>>>>    Procedure PreviewNextPage
73994>>>>>>>        Handle hoReport
73994>>>>>>>
73994>>>>>>>        Get phoReport to hoReport
73995>>>>>>>        If (hoReport <> 0) Begin
73997>>>>>>>            Send PreviewNextPage of hoReport
73998>>>>>>>        End
73998>>>>>>>>
73998>>>>>>>    End_Procedure
73999>>>>>>>
73999>>>>>>>    Procedure PreviewPreviousPage
74001>>>>>>>        Handle hoReport
74001>>>>>>>
74001>>>>>>>        Get phoReport to hoReport
74002>>>>>>>        If (hoReport <> 0) Begin
74004>>>>>>>            Send PreviewPreviousPage of hoReport
74005>>>>>>>        End
74005>>>>>>>>
74005>>>>>>>    End_Procedure
74006>>>>>>>
74006>>>>>>>    Procedure PreviewFirstPage
74008>>>>>>>        Handle hoReport
74008>>>>>>>
74008>>>>>>>        Get phoReport to hoReport
74009>>>>>>>        If (hoReport <> 0) Begin
74011>>>>>>>            Send PreviewFirstPage of hoReport
74012>>>>>>>        End
74012>>>>>>>>
74012>>>>>>>    End_Procedure
74013>>>>>>>
74013>>>>>>>    Procedure PreviewLastPage
74015>>>>>>>        Handle hoReport
74015>>>>>>>
74015>>>>>>>        Get phoReport to hoReport
74016>>>>>>>        If (hoReport <> 0) Begin
74018>>>>>>>            Send PreviewLastPage of hoReport
74019>>>>>>>        End
74019>>>>>>>>
74019>>>>>>>    End_Procedure
74020>>>>>>>
74020>>>>>>>    Procedure PreviewPaint
74022>>>>>>>        Handle hoReport
74022>>>>>>>
74022>>>>>>>        Get phoReport to hoReport
74023>>>>>>>        If (hoReport <> 0) Begin
74025>>>>>>>            Send PreviewPaint of hoReport
74026>>>>>>>        End
74026>>>>>>>>
74026>>>>>>>    End_Procedure
74027>>>>>>>
74027>>>>>>>    Function piPreviewZoom Returns Integer
74029>>>>>>>        Handle hoReport
74029>>>>>>>        Integer iFactor
74029>>>>>>>
74029>>>>>>>        Get phoReport to hoReport
74030>>>>>>>        If (hoReport <> 0) Begin
74032>>>>>>>            Get piPreviewZoom of hoReport to iFactor
74033>>>>>>>            Function_Return iFactor
74034>>>>>>>        End
74034>>>>>>>>
74034>>>>>>>    End_Function
74035>>>>>>>
74035>>>>>>>    Procedure Set piPreviewZoom Integer iFactor
74037>>>>>>>        Handle hoReport
74037>>>>>>>
74037>>>>>>>        Get phoReport to hoReport
74038>>>>>>>        If (hoReport <> 0) Begin
74040>>>>>>>            Set piPreviewZoom of hoReport to iFactor
74041>>>>>>>        End
74041>>>>>>>>
74041>>>>>>>    End_Procedure
74042>>>>>>>
74042>>>>>>>    Procedure PreviewVScroll Integer iType Integer iPos
74044>>>>>>>        Handle hoReport
74044>>>>>>>
74044>>>>>>>        Get phoReport to hoReport
74045>>>>>>>        If (hoReport <> 0) Begin
74047>>>>>>>            Send PreviewVScroll of hoReport iType iPos
74048>>>>>>>        End
74048>>>>>>>>
74048>>>>>>>    End_Procedure
74049>>>>>>>
74049>>>>>>>    Procedure PreviewHScroll Integer iType Integer iPos
74051>>>>>>>        Handle hoReport
74051>>>>>>>
74051>>>>>>>        Get phoReport to hoReport
74052>>>>>>>        If (hoReport <> 0) Begin
74054>>>>>>>            Send PreviewHScroll of hoReport iType iPos
74055>>>>>>>        End
74055>>>>>>>>
74055>>>>>>>    End_Procedure
74056>>>>>>>
74056>>>>>>>    Procedure OnPageChanged Integer iPage
74058>>>>>>>        Set psText of (oCurrentPage (oDRToolBar (oCommandBars))) to (String (iPage))
74059>>>>>>>    End_Procedure
74060>>>>>>>
74060>>>>>>>    Procedure OnZoomChanged Integer iFactor
74062>>>>>>>        Set psText of (oZoom (oDRToolBar (oCommandBars))) to (String (iFactor) + "%")
74063>>>>>>>    End_Procedure
74064>>>>>>>
74064>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
74066>>>>>>>        Forward Send Add_Focus hoParent
74068>>>>>>>
74068>>>>>>>        Send AdjustPanelSize
74069>>>>>>>        Send UpdateViewer
74070>>>>>>>    End_Procedure
74071>>>>>>>
74071>>>>>>>    Procedure AdjustPanelSize
74073>>>>>>>        Handle hoMain hWnd hoClient
74073>>>>>>>        Integer iLocation iPanelSize
74073>>>>>>>
74073>>>>>>>        Get Main_Window to hoMain
74074>>>>>>>        Send Adjust_Logicals of hoMain
74075>>>>>>>
74075>>>>>>>        Set Location to 0 0
74076>>>>>>>        Get Size of hoMain to iPanelSize
74077>>>>>>>        Get Window_Handle of hoMain to hWnd
74078>>>>>>>        If (DR_WinAPI_IsZoomed (hWnd)) Begin
74080>>>>>>>            Set Size to (Hi (iPanelSize) - 75) (Low (iPanelSize) - 75)
74081>>>>>>>        End
74081>>>>>>>>
74081>>>>>>>        Else Begin
74082>>>>>>>            Set Size to (Hi (iPanelSize)) (Low (iPanelSize))
74083>>>>>>>        End
74083>>>>>>>>
74083>>>>>>>
74083>>>>>>>        Get Location of hoMain to iLocation
74084>>>>>>>        Set Location to (Hi (iLocation) + 25) (Low (iLocation) + 25)
74085>>>>>>>    End_Procedure
74086>>>>>>>
74086>>>>>>>        Procedure UpdateViewer
74088>>>>>>>        Handle hoReport hoClient hWnd
74088>>>>>>>
74088>>>>>>>        Get phoReport to hoReport
74089>>>>>>>        If (hoReport <> 0) Begin
74091>>>>>>>            Send OnShowPreviewer of hoReport
74092>>>>>>>        End
74092>>>>>>>>
74092>>>>>>>
74092>>>>>>>        Send AssignPreviewHWND
74093>>>>>>>
74093>>>>>>>        Get Client_Id to hoClient
74094>>>>>>>        If (hoClient <> 0) Begin
74096>>>>>>>            Get Window_Handle of hoClient to hWnd
74097>>>>>>>            If (hWnd <> 0) Begin
74099>>>>>>>                Move (UpdateWindow (hWnd)) to hWnd
74100>>>>>>>            End
74100>>>>>>>>
74100>>>>>>>        End
74100>>>>>>>>
74100>>>>>>>    End_Procedure
74101>>>>>>>
74101>>>>>>>    // Close the report when it the dialog is closed. Destroy the dialog.
74101>>>>>>>    Procedure Close_Panel
74103>>>>>>>        Handle hoReport
74103>>>>>>>
74103>>>>>>>        Get phoReport to hoReport
74104>>>>>>>        Get Object_Id of hoReport to hoReport // Check if this is still a valid handle
74105>>>>>>>        If (hoReport <> 0) Begin
74107>>>>>>>            Send OnClosePreviewer of hoReport
74108>>>>>>>            Set phoPreviewContainer of hoReport to 0
74109>>>>>>>            Send CancelReport of hoReport
74110>>>>>>>            Set PreviewWindowHandle of hoReport to 0 // reset
74111>>>>>>>        End
74111>>>>>>>>
74111>>>>>>>
74111>>>>>>>        Forward Send Close_Panel
74113>>>>>>>    End_Procedure
74114>>>>>>>End_Class
74115>>>>>Use cDRDesktopPreview.pkg
Including file: cDRDesktopPreview.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRDesktopPreview.pkg)
74115>>>>>>>Use Windows.pkg
74115>>>>>>>Use DRLanguage.Inc
74115>>>>>>>Use cDRCommandBarSystem.pkg
74115>>>>>>>Use cDRMenuItem.pkg
74115>>>>>>>Use cDRZoomMenuItem.pkg
74115>>>>>>>Use cDRCurrentPageMenuItem.pkg
74115>>>>>>>Use cDRExportMenuItem.pkg
74115>>>>>>>Use cDRPrintMenuItem.pkg
74115>>>>>>>Use cDRFirstPageMenuItem.pkg
74115>>>>>>>Use cDRPreviousPageMenuItem.pkg
74115>>>>>>>Use cDRNextPageMenuItem.pkg
74115>>>>>>>Use cDRLastPageMenuItem.pkg
74115>>>>>>>Use cDRRefreshMenuItem.pkg
74115>>>>>>>Use cDRReport.pkg
74115>>>>>>>Use DRExportOptions.dg
74115>>>>>>>Use cDRPreviewWindow.pkg
74115>>>>>>>Use cDRSearchPreviewMenuItem.pkg
74115>>>>>>>Use cDRSearchPreviewOptionsMenuItem.pkg
74115>>>>>>>
74115>>>>>>>Class cDRDesktopPreview is a DfBaseDialog
74116>>>>>>>    Import_Class_Protocol Label_Mixin
74117>>>>>>>
74117>>>>>>>    Procedure Construct_Object
74119>>>>>>>        Forward Send Construct_Object
74121>>>>>>>
74121>>>>>>>        Set Window_Style WS_CAPTION to True
74122>>>>>>>
74122>>>>>>>        Set Size to 273 614
74123>>>>>>>        Set Location to 10 10
74124>>>>>>>        Set Border_Style to Border_Thick
74125>>>>>>>        Set Icon to "DR.Ico"
74126>>>>>>>        Set pbSizeToClientArea to False
74127>>>>>>>        Set Name to "oDRDesktopPreview"
74128>>>>>>>
74128>>>>>>>        Property Handle phoReport 0
74129>>>>>>>
74129>>>>>>>        Object oDRPreviewer is a cDRPreviewWindow
74131>>>>>>>            Set Size to 228 602
74132>>>>>>>            Set Location to 21 5
74133>>>>>>>            Set peAnchors to anAll
74134>>>>>>>        End_Object
74135>>>>>>>
74135>>>>>>>        Object oCommandBars is a cDRCommandBarSystem
74137>>>>>>>            Set pbAutoResizeIcons to True
74138>>>>>>>
74138>>>>>>>            Object oDRToolBar is a cCJToolbar
74140>>>>>>>                Set pbCloseable to False
74141>>>>>>>                Set pbEnableDocking to False
74142>>>>>>>                Set pbGripper to False
74143>>>>>>>                Set peStretched to stStretch
74144>>>>>>>                Set pbDockNextTo to False
74145>>>>>>>                Set pbHideWrap to True
74146>>>>>>>                Set pbCustomizable to False
74147>>>>>>>
74147>>>>>>>                Object oFirstPage is a cDRFirstPageMenuItem
74149>>>>>>>                End_Object
74150>>>>>>>
74150>>>>>>>                Object oPreviousPage is a cDRPreviousPageMenuItem
74152>>>>>>>                End_Object
74153>>>>>>>
74153>>>>>>>                Object oCurrentPage is a cDRCurrentPageMenuItem
74155>>>>>>>                    Set peControlType to xtpControlEdit
74156>>>>>>>                End_Object
74157>>>>>>>
74157>>>>>>>                Object oNextPage is a cDRNextPageMenuItem
74159>>>>>>>                End_Object
74160>>>>>>>
74160>>>>>>>                Object oLastPage is a cDRLastPageMenuItem
74162>>>>>>>                End_Object
74163>>>>>>>
74163>>>>>>>                Object oRefresh is a cDRRefreshMenuItem
74165>>>>>>>                End_Object
74166>>>>>>>
74166>>>>>>>                Object oPrint is a cDRPrintMenuItem
74168>>>>>>>                End_Object
74169>>>>>>>
74169>>>>>>>                Object oZoom is a cDRZoomMenuItem
74171>>>>>>>                End_Object
74172>>>>>>>
74172>>>>>>>                Object oExport is a cDRExportMenuItem
74174>>>>>>>                    Set phoExportOptionsDialog to (oDRExportOptionsDialog)
74175>>>>>>>                End_Object
74176>>>>>>>
74176>>>>>>>                Object oSearchInPreview is a cDRSearchPreviewMenuItem
74178>>>>>>>                End_Object
74179>>>>>>>
74179>>>>>>>                Object oSearchInPreviewOptions is a cDRMenuItem
74181>>>>>>>                    Set peControlType to xtpControlSplitButtonPopup
74182>>>>>>>                    Set psCaption to C_$DRSearchInPreviewOptions
74183>>>>>>>                    Set psTooltip to C_$DRSearchInPreviewOptionsTooltip
74184>>>>>>>                    Set peControlStyle to xtpButtonIconAndCaption
74185>>>>>>>                    Set psImage to "DRFind.Ico"
74186>>>>>>>
74186>>>>>>>                    Object oDownMenuItem is a cDRSearchPreviewOptionsMenuItem
74188>>>>>>>                        Set psCaption to C_$DRSearchInPreviewDown
74189>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbDown))
74190>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbDown))
74191>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
74192>>>>>>>                    End_Object
74193>>>>>>>
74193>>>>>>>                    Object oWholeWordMenuItem is a cDRSearchPreviewOptionsMenuItem
74195>>>>>>>                        Set psCaption to C_$DRSearchInPreviewWholeWord
74196>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbWholeWord))
74197>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbWholeWord))
74198>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
74199>>>>>>>                    End_Object
74200>>>>>>>
74200>>>>>>>                    Object oMatchCaseMenuItem is a cDRSearchPreviewOptionsMenuItem
74202>>>>>>>                        Set psCaption to C_$DRSearchInPreviewMatchCase
74203>>>>>>>                        Set phmSearchOptionGet to (RefFunc (pbMatchCase))
74204>>>>>>>                        Set phmSearchOptionSet to (RefProcSet (pbMatchCase))
74205>>>>>>>                        Set phoSearchMenuItem to oSearchInPreview
74206>>>>>>>                    End_Object
74207>>>>>>>                End_Object
74208>>>>>>>            End_Object
74209>>>>>>>        End_Object
74210>>>>>>>
74210>>>>>>>        Object oCloseButton is a Button
74212>>>>>>>            Set Label to C_$Close
74213>>>>>>>            Set Location to 254 559
74214>>>>>>>            Set peAnchors to anBottomRight
74215>>>>>>>            Set Message 0 to Close_Panel
74216>>>>>>>        End_Object
74217>>>>>>>
74217>>>>>>>        On_Key Key_Escape Send KeyAction of oCloseButton
74218>>>>>>>    End_Procedure
74219>>>>>>>
74219>>>>>>>    Procedure Activate_View
74221>>>>>>>        Send Activate
74222>>>>>>>    End_Procedure
74223>>>>>>>
74223>>>>>>>    Procedure Page Integer iPageObject
74225>>>>>>>        Integer iVoid
74225>>>>>>>        Handle hWnd
74225>>>>>>>
74225>>>>>>>        Forward Send Page iPageObject
74227>>>>>>>        If (iPageObject <> 0) Begin
74229>>>>>>>            Get Window_Handle to hWnd
74230>>>>>>>            If (hWnd <> 0) Begin
74232>>>>>>>                Move (DR_WINAPI_SetParent (hWnd, 0)) to iVoid
74233>>>>>>>                Set Window_Style WS_CHILDWINDOW to False
74234>>>>>>>                Set Window_Style WS_POPUP to True
74235>>>>>>>                Set Sysmenu_Icon to True
74236>>>>>>>                Set Minimize_Icon to True
74237>>>>>>>                Set Maximize_Icon to True
74238>>>>>>>            End
74238>>>>>>>>
74238>>>>>>>        End
74238>>>>>>>>
74238>>>>>>>    End_Procedure
74239>>>>>>>
74239>>>>>>>    Procedure AssignPreviewHWND
74241>>>>>>>        Handle hoReport hWnd
74241>>>>>>>        String sReportId
74241>>>>>>>
74241>>>>>>>        Get Window_Handle of oDRPreviewer to hWnd
74242>>>>>>>        If (hWnd <> 0) Begin
74244>>>>>>>            Get phoReport to hoReport
74245>>>>>>>            If (hoReport <> 0) Begin
74247>>>>>>>                Set PreviewWindowHandle of hoReport to hWnd
74248>>>>>>>            End
74248>>>>>>>>
74248>>>>>>>        End
74248>>>>>>>>
74248>>>>>>>    End_Procedure
74249>>>>>>>
74249>>>>>>>        Procedure PreviewClick Integer wParam Integer lParam
74251>>>>>>>        Handle hoReport
74251>>>>>>>
74251>>>>>>>        Get phoReport to hoReport
74252>>>>>>>        If (hoReport <> 0) Begin
74254>>>>>>>            Send PreviewClick of hoReport wParam lParam
74255>>>>>>>        End
74255>>>>>>>>
74255>>>>>>>    End_Procedure
74256>>>>>>>
74256>>>>>>>        Procedure PreviewNextPage
74258>>>>>>>        Handle hoReport
74258>>>>>>>
74258>>>>>>>        Get phoReport to hoReport
74259>>>>>>>        If (hoReport <> 0) Begin
74261>>>>>>>            Send PreviewNextPage of hoReport
74262>>>>>>>        End
74262>>>>>>>>
74262>>>>>>>    End_Procedure
74263>>>>>>>
74263>>>>>>>    Procedure PreviewPreviousPage
74265>>>>>>>        Handle hoReport
74265>>>>>>>
74265>>>>>>>        Get phoReport to hoReport
74266>>>>>>>        If (hoReport <> 0) Begin
74268>>>>>>>            Send PreviewPreviousPage of hoReport
74269>>>>>>>        End
74269>>>>>>>>
74269>>>>>>>    End_Procedure
74270>>>>>>>
74270>>>>>>>    Procedure PreviewFirstPage
74272>>>>>>>        Handle hoReport
74272>>>>>>>
74272>>>>>>>        Get phoReport to hoReport
74273>>>>>>>        If (hoReport <> 0) Begin
74275>>>>>>>            Send PreviewFirstPage of hoReport
74276>>>>>>>        End
74276>>>>>>>>
74276>>>>>>>    End_Procedure
74277>>>>>>>
74277>>>>>>>        Procedure PreviewLastPage
74279>>>>>>>        Handle hoReport
74279>>>>>>>
74279>>>>>>>        Get phoReport to hoReport
74280>>>>>>>        If (hoReport <> 0) Begin
74282>>>>>>>            Send PreviewLastPage of hoReport
74283>>>>>>>        End
74283>>>>>>>>
74283>>>>>>>    End_Procedure
74284>>>>>>>
74284>>>>>>>    Procedure PreviewPaint
74286>>>>>>>        Handle hoReport
74286>>>>>>>
74286>>>>>>>        Get phoReport to hoReport
74287>>>>>>>        If (hoReport <> 0) Begin
74289>>>>>>>            Send PreviewPaint of hoReport
74290>>>>>>>        End
74290>>>>>>>>
74290>>>>>>>    End_Procedure
74291>>>>>>>
74291>>>>>>>    Function piPreviewZoom Returns Integer
74293>>>>>>>        Handle hoReport
74293>>>>>>>        Integer iFactor
74293>>>>>>>
74293>>>>>>>        Get phoReport to hoReport
74294>>>>>>>        If (hoReport <> 0) Begin
74296>>>>>>>            Get piPreviewZoom of hoReport to iFactor
74297>>>>>>>            Function_Return iFactor
74298>>>>>>>        End
74298>>>>>>>>
74298>>>>>>>    End_Function
74299>>>>>>>
74299>>>>>>>    Procedure Set piPreviewZoom Integer iFactor
74301>>>>>>>        Handle hoReport
74301>>>>>>>
74301>>>>>>>        Get phoReport to hoReport
74302>>>>>>>        If (hoReport <> 0) Begin
74304>>>>>>>            Set piPreviewZoom of hoReport to iFactor
74305>>>>>>>        End
74305>>>>>>>>
74305>>>>>>>    End_Procedure
74306>>>>>>>
74306>>>>>>>    Procedure PreviewVScroll Integer iType Integer iPos
74308>>>>>>>        Handle hoReport
74308>>>>>>>
74308>>>>>>>        Get phoReport to hoReport
74309>>>>>>>        If (hoReport <> 0) Begin
74311>>>>>>>            Send PreviewVScroll of hoReport iType iPos
74312>>>>>>>        End
74312>>>>>>>>
74312>>>>>>>    End_Procedure
74313>>>>>>>
74313>>>>>>>    Procedure PreviewHScroll Integer iType Integer iPos
74315>>>>>>>        Handle hoReport
74315>>>>>>>
74315>>>>>>>        Get phoReport to hoReport
74316>>>>>>>        If (hoReport <> 0) Begin
74318>>>>>>>            Send PreviewHScroll of hoReport iType iPos
74319>>>>>>>        End
74319>>>>>>>>
74319>>>>>>>    End_Procedure
74320>>>>>>>
74320>>>>>>>    Procedure OnPageChanged Integer iPage
74322>>>>>>>        Set psText of (oCurrentPage (oDRToolBar (oCommandBars))) to (String (iPage))
74323>>>>>>>    End_Procedure
74324>>>>>>>
74324>>>>>>>    Procedure OnZoomChanged Integer iFactor
74326>>>>>>>        Set psText of (oZoom (oDRToolBar (oCommandBars))) to (String (iFactor) + "%")
74327>>>>>>>    End_Procedure
74328>>>>>>>
74328>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
74330>>>>>>>        Forward Send Add_Focus hoParent
74332>>>>>>>
74332>>>>>>>        Send AdjustPanelSize
74333>>>>>>>        Send UpdateViewer
74334>>>>>>>    End_Procedure
74335>>>>>>>
74335>>>>>>>    Procedure AdjustPanelSize
74337>>>>>>>        Integer iHeight iWidth iSize
74337>>>>>>>
74337>>>>>>>        Move (GetSystemMetrics (SM_CYSCREEN) * 0.95) to iHeight
74338>>>>>>>        Move (GetSystemMetrics (SM_CXSCREEN) * 0.98) to iWidth
74339>>>>>>>        Get GuiToDialog iHeight iWidth to iSize
74340>>>>>>>        Set Size to (Hi (iSize)) (Low (iSize))
74341>>>>>>>    End_Procedure
74342>>>>>>>
74342>>>>>>>    Procedure UpdateViewer
74344>>>>>>>        Boolean bAllowMaximizeView
74344>>>>>>>        Handle hoReport
74344>>>>>>>
74344>>>>>>>        Get phoReport to hoReport
74345>>>>>>>        If (hoReport <> 0) Begin
74347>>>>>>>            Get pbAllowMaximizeView of hoReport to bAllowMaximizeView
74348>>>>>>>            Set Maximize_Icon to bAllowMaximizeView
74349>>>>>>>            Send OnShowPreviewer of hoReport
74350>>>>>>>        End
74350>>>>>>>>
74350>>>>>>>
74350>>>>>>>        Send AssignPreviewHWND
74351>>>>>>>    End_Procedure
74352>>>>>>>
74352>>>>>>>    Procedure Exit_Application
74354>>>>>>>        Send Close_Panel
74355>>>>>>>    End_Procedure
74356>>>>>>>
74356>>>>>>>    // Close the report when it the dialog is closed. Destroy the dialog.
74356>>>>>>>    Procedure Close_Panel
74358>>>>>>>        Handle hoReport
74358>>>>>>>
74358>>>>>>>        Get phoReport to hoReport
74359>>>>>>>        Get Object_Id of hoReport to hoReport // Check if this is still a valid handle
74360>>>>>>>        If (hoReport <> 0) Begin
74362>>>>>>>            Send OnClosePreviewer of hoReport
74363>>>>>>>            Set phoPreviewContainer of hoReport to 0
74364>>>>>>>            Send CancelReport of hoReport
74365>>>>>>>            Set PreviewWindowHandle of hoReport to 0 // reset
74366>>>>>>>        End
74366>>>>>>>>
74366>>>>>>>
74366>>>>>>>        Send Deactivate
74367>>>>>>>    End_Procedure
74368>>>>>>>End_Class
74369>>>>>Use FunctionError.dg
Including file: FunctionError.dg    (C:\test\BuildTools\DataFlex Reports\AppSrc\FunctionError.dg)
74369>>>>>>>Use Windows.pkg
74369>>>>>>>Use cDR.h.pkg
74369>>>>>>>Use DRLanguage.Inc
74369>>>>>>>
74369>>>>>>>Object oFunctionErrorDialog is a ModalPanel
74371>>>>>>>    Set Size to 68 309
74372>>>>>>>    Set Label to C_$DRErrorInFunction
74373>>>>>>>    Set piMinSize to 68 211
74374>>>>>>>    Set Locate_Mode to CENTER_ON_PARENT
74375>>>>>>>    Set Location to 2 2
74376>>>>>>>    Set Border_Style to Border_Dialog
74377>>>>>>>    Set Icon to "dr.Ico"
74378>>>>>>>
74378>>>>>>>    Procedure Page Integer iPageObject
74381>>>>>>>        Forward Send Page iPageObject
74383>>>>>>>        If (iPageObject <> 0) Begin
74385>>>>>>>            Set Icon to "dr.ico"
74386>>>>>>>        End
74386>>>>>>>>
74386>>>>>>>    End_Procedure
74387>>>>>>>    
74387>>>>>>>    Object oFunctionNameBox is a Form
74389>>>>>>>        Set Size to 13 249
74390>>>>>>>        Set Location to 5 55
74391>>>>>>>        Set Label to C_$DRFunctionName
74392>>>>>>>        Set Label_Col_Offset to 2
74393>>>>>>>        Set Label_Justification_Mode to JMode_Right
74394>>>>>>>        Set Enabled_State to False
74395>>>>>>>    End_Object
74396>>>>>>>
74396>>>>>>>    Object oReportNameBox is a Form
74398>>>>>>>        Set Size to 13 249
74399>>>>>>>        Set Location to 20 55
74400>>>>>>>        Set Label to C_$DRReportName
74401>>>>>>>        Set Label_Col_Offset to 2
74402>>>>>>>        Set Label_Justification_Mode to JMode_Right
74403>>>>>>>        Set Enabled_State to False
74404>>>>>>>    End_Object
74405>>>>>>>
74405>>>>>>>    Object oFunctionIDBox is a Form
74407>>>>>>>        Set Size to 13 249
74408>>>>>>>        Set Location to 35 55
74409>>>>>>>        Set Label to C_$DRFunctionIdentifier
74410>>>>>>>        Set Label_Col_Offset to 2
74411>>>>>>>        Set Label_Justification_Mode to JMode_Right
74412>>>>>>>        Set Enabled_State to False
74413>>>>>>>    End_Object
74414>>>>>>>
74414>>>>>>>    Object oCloseButton is a Button
74416>>>>>>>        Set Label to C_$Close
74417>>>>>>>        Set Location to 50 255
74418>>>>>>>        Set psToolTip to C_$DRCopyAndClose
74419>>>>>>>
74419>>>>>>>        Procedure OnClick
74422>>>>>>>            Send Select_All of oFunctionIDBox
74423>>>>>>>            Send Copy of oFunctionIDBox
74424>>>>>>>            Send Close_Panel
74425>>>>>>>        End_Procedure
74426>>>>>>>    End_Object
74427>>>>>>>    
74427>>>>>>>    Procedure CheckFunctionErrorAndDisplayInfo Handle hoReport
74430>>>>>>>        tDRFunctionErrorInfo FunctionErrorInfo
74430>>>>>>>        tDRFunctionErrorInfo FunctionErrorInfo
74430>>>>>>>        String sValue
74430>>>>>>>        
74430>>>>>>>        Get pFunctionErrorInfo of hoReport to FunctionErrorInfo
74431>>>>>>>        If (FunctionErrorInfo.sReportId <> "") Begin
74433>>>>>>>            Get ComReportName of hoReport FunctionErrorInfo.sReportId to sValue
74434>>>>>>>            Set Value of oReportNameBox to sValue
74435>>>>>>>            Get psFunctionName of hoReport FunctionErrorInfo.sReportId FunctionErrorInfo.iFunctionId to sValue
74436>>>>>>>            If (sValue = '') Begin
74438>>>>>>>                Move C_$DRBuiltInFunction to sValue
74439>>>>>>>            End
74439>>>>>>>>
74439>>>>>>>            Set Value of oFunctionNameBox to sValue
74440>>>>>>>            Set Value of oFunctionIDBox to (SFormat ("%1{%2}", FunctionErrorInfo.sReportId, FunctionErrorInfo.iFunctionId))
74441>>>>>>>            Send Popup
74442>>>>>>>        End
74442>>>>>>>>
74442>>>>>>>    End_Procedure
74443>>>>>>>End_Object
74444>>>>>Use cDRReportHelper.pkg
Including file: cDRReportHelper.pkg    (C:\test\BuildTools\DataFlex Reports\AppSrc\cDRReportHelper.pkg)
74444>>>>>>>Use VdfBase.pkg
74444>>>>>>>
74444>>>>>>>Class cDRReportHelper is a cObject
74445>>>>>>>    // The AddFilter function expects a string. If you move a DateTime to a string the format
74445>>>>>>>    // is incorrect for SQL. With this function we can convert the DateTime to string in the appropriate
74445>>>>>>>    // format (this is yyyy-mm-dd hh:mm:ss)). The prefix zeroes are important.
74445>>>>>>>    Function DateTimeToString DateTime dtIn Returns String
74447>>>>>>>        String sDateTimeResult
74447>>>>>>>
74447>>>>>>>        Move (DateGetYear (dtIn)) to sDateTimeResult
74448>>>>>>>        Move (sDateTimeResult - '-' - (Right ('0' + String (DateGetMonth (dtIn)), 2))) to sDateTimeResult
74449>>>>>>>        Move (sDateTimeResult - '-' - (Right ('0' + String (DateGetDay (dtIn)), 2))) to sDateTimeResult
74450>>>>>>>        Move (sDateTimeResult * (Right ('0' + String (DateGetHour (dtIn)), 2))) to sDateTimeResult
74451>>>>>>>        Move (sDateTimeResult - ':' - (Right ('0' + String (DateGetMinute (dtIn)), 2))) to sDateTimeResult
74452>>>>>>>        Move (sDateTimeResult - ':' - (Right ('0' + String (DateGetSecond (dtIn)), 2))) to sDateTimeResult
74453>>>>>>>
74453>>>>>>>        Function_Return sDateTimeResult
74454>>>>>>>    End_Function
74455>>>>>>>
74455>>>>>>>    // The AddFilter function expects a string. If you move a Date to a string the format
74455>>>>>>>    // is incorrect for SQL. With this function we can convert the Date to string first in the appropriate
74455>>>>>>>    // format (this is yyyy-mm-dd). The prefix zero's are important.
74455>>>>>>>    Function DateToString Date dIn Returns String
74457>>>>>>>        String sDateResult
74457>>>>>>>        DateTime dtIn
74457>>>>>>>
74457>>>>>>>        Move dIn to dtIn
74458>>>>>>>        Move (DateGetYear (dtIn)) to sDateResult
74459>>>>>>>        Move (sDateResult - '-' - (Right ('0' + String (DateGetMonth (dtIn)), 2))) to sDateResult
74460>>>>>>>        Move (sDateResult - '-' - (Right ('0' + String (DateGetDay (dtIn)), 2))) to sDateResult
74461>>>>>>>
74461>>>>>>>        Function_Return sDateResult
74462>>>>>>>    End_Function
74463>>>>>>>
74463>>>>>>>    // Use this function to convert a time variable to string. Should be used for psParameterValue.
74463>>>>>>>    Function TimeToString Time tmIn Returns String
74465>>>>>>>        String sTimeResult
74465>>>>>>>        DateTime dtIn
74465>>>>>>>
74465>>>>>>>        Move tmIn to dtIn
74466>>>>>>>        Move (Right ('0' + String (DateGetHour (dtIN)), 2)) to sTimeResult
74467>>>>>>>        Move (sTimeResult + ':' + Right ('0' + String (DateGetMinute (dtIn)), 2)) to sTimeResult
74468>>>>>>>        Move (sTimeResult + ':' + Right ('0' + String (DateGetSecond (dtIn)), 2)) to sTimeResult
74469>>>>>>>
74469>>>>>>>        Function_Return sTimeResult
74470>>>>>>>    End_Function
74471>>>>>>>End_Class
74472>>>>>Use cJsonObject.pkg
Including file: cJsonObject.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cJsonObject.pkg)
74472>>>>>>>// cJSONObject is defined directly in fmac
74472>>>>>>>// We just define the constants here. They have intentionally not been moved to fmac
74472>>>>>>>
74472>>>>>>>
74472>>>>>>>Enum_List
74472>>>>>>>    Define jpWhitespace_Plain for 0
74472>>>>>>>    Define jpWhitespace_Spaced for 1
74472>>>>>>>    Define jpWhitespace_Pretty for 2
74472>>>>>>>End_Enum_List
74472>>>>>>>
74472>>>>>>>Enum_List
74472>>>>>>>    Define jsonTypeNull
74472>>>>>>>    Define jsonTypeBoolean
74472>>>>>>>    Define jsonTypeDouble
74472>>>>>>>    Define jsonTypeInteger
74472>>>>>>>    Define jsonTypeObject
74472>>>>>>>    Define jsonTypeArray
74472>>>>>>>    Define jsonTypeString
74472>>>>>>>End_Enum_List
74472>>>>>>>
74472>>>>>
74472>>>>>Define C_$DR_INTEGRATION_VERSION for "6.2.0.3"
74472>>>>>
74472>>>>>Enum_List
74472>>>>>    Define C_DRPREVIEW_MODAL
74472>>>>>    Define C_DRPREVIEW_VIEW
74472>>>>>    Define C_DRPREVIEW_EMBEDDED
74472>>>>>    Define C_DRPREVIEW_TOOLPANEL
74472>>>>>    Define C_DRPREVIEW_DESKTOPVIEW
74472>>>>>End_Enum_List
74472>>>>>
74472>>>>>Class cDRReport is a cDataFlexReportsAPI
74473>>>>>    Procedure Construct_Object
74475>>>>>        Forward Send Construct_Object
74477>>>>>
74477>>>>>        Set pbBindValue to False
74478>>>>>
74478>>>>>        Property Handle private.phoPreviewContainer
74479>>>>>        Property Integer private.pePreviewStyle C_DRPREVIEW_VIEW
74480>>>>>        Property String psPreviewCaptionLabel
74481>>>>>        Property Handle phcPreviewer 0
74482>>>>>        Property String psReportName
74483>>>>>        Property Integer peOutputDestination PRINT_TO_WINDOW
74484>>>>>        Property Boolean pbShowInformationMessages False
74485>>>>>        Property Boolean pbDisplayError True
74486>>>>>        Property Handle phoStatusPanel 0
74487>>>>>        Property Boolean pbShowStatusPanel False
74488>>>>>        Property Boolean pbCancelIfError True
74489>>>>>        Property Boolean pbCanceled
74490>>>>>        Property Boolean pbAutoLocateDFFiles True
74491>>>>>        Property Boolean pbHasErrors
74492>>>>>        Property String psExportFileName
74493>>>>>        Property Integer peExportType C_DRPDF
74494>>>>>        Property Handle phoExportOptionsDialog (oDRExportOptionsDialog)
74495>>>>>        Property Handle phPrintDlg 0
74496>>>>>        Property Handle phoPrintDialog 0
74497>>>>>        Property String psPrinterName
74498>>>>>        Property String psReportPath
74499>>>>>        Property Boolean pbAllowMaximizeView False
74500>>>>>
74500>>>>>
74500>>>>>        // Private
74500>>>>>        Property String psReportLocation
74501>>>>>        Property Handle phOldErrorObject Error_Object_Id
74502>>>>>        Property Integer piLocalErrorRedirectCount 0
74503>>>>>        Property Boolean pbInError
74504>>>>>        Property String psReportId
74505>>>>>        Property tDRFunctionErrorInfo pFunctionErrorInfo
74506>>>>>
74506>>>>>        Object oPrintDialog is a cPrintDialog
74508>>>>>            Set phoPrintDialog to Self
74509>>>>>        End_Object
74510>>>>>
74510>>>>>        Object oDRReportHelper is a cDRReportHelper
74512>>>>>        End_Object
74513>>>>>
74513>>>>>        On_Key Key_PgDn Send PreviewNextPage
74514>>>>>        On_Key Key_PgUp Send PreviewPreviousPage
74515>>>>>        On_Key Key_Ctrl+Key_Home Send PreviewFirstPage
74516>>>>>        On_Key Key_Ctrl+Key_End Send PreviewLastPage
74517>>>>>    End_Procedure
74518>>>>>
74518>>>>>    Procedure End_Construct_Object
74520>>>>>        Forward Send End_Construct_Object
74522>>>>>
74522>>>>>        Send SetDefaultPreviewerClass
74523>>>>>    End_Procedure
74524>>>>>
74524>>>>>    // ********* PRIVATE INTERFACE ***********
74524>>>>>
74524>>>>>    Function Error_Processing_State Returns Integer
74526>>>>>        Boolean bInError
74526>>>>>
74526>>>>>        Get pbInError to bInError
74527>>>>>
74527>>>>>        Function_Return bInError
74528>>>>>    End_Function
74529>>>>>
74529>>>>>    Procedure AutoLocateDFFiles String sReportId
74531>>>>>        Integer eDatabaseType iTables iTable iSubReports iSubReport
74531>>>>>        String sOpenPath sDatabaseName sTableSchema sReportName sSubReportId
74531>>>>>        Boolean bIsFileList
74531>>>>>
74531>>>>>        Get DatabaseType sReportId to eDatabaseType
74532>>>>>        If (eDatabaseType = C_DRDF) Begin
74534>>>>>            Get_Attribute DF_OPEN_PATH to sOpenPath
74537>>>>>            Set psDatabaseConnection sReportId to sOpenPath
74538>>>>>
74538>>>>>            // This might the filelist or the first table name. If filelist we replace with the
74538>>>>>            // current filelist name. We find out if it is the filelist by calling a method
74538>>>>>            // IsFileList which Returns True when the file extension is .cfg.
74538>>>>>            Get psDatabaseName sReportId to sDatabaseName
74539>>>>>            Get IsFileList sDatabaseName to bIsFileList
74540>>>>>            If (bIsFileList) Begin
74542>>>>>                Get_Attribute DF_FILELIST_NAME to sDatabaseName
74545>>>>>                If (sDatabaseName <> "") Begin
74547>>>>>                    Set psDatabaseName sReportId to sDatabaseName
74548>>>>>                End
74548>>>>>>
74548>>>>>                Else Begin
74549>>>>>                    Error DFERR_CANT_OPEN_FILE_LIST
74550>>>>>>
74550>>>>>                End
74550>>>>>>
74550>>>>>            End
74550>>>>>>
74550>>>>>            Else Begin
74551>>>>>                If (not (DoesFileExist (sDatabaseName))) Begin
74553>>>>>                    Move (ExtractFileName (sDatabaseName)) to sDatabaseName
74554>>>>>                    Get FindTablePath sDatabaseName to sDatabaseName
74555>>>>>                    If (sDatabaseName <> "") Begin
74557>>>>>                        Set psDatabaseName sReportId to sDatabaseName
74558>>>>>                    End
74558>>>>>>
74558>>>>>                End
74558>>>>>>
74558>>>>>            End
74558>>>>>>
74558>>>>>            Get TableCount sReportId to iTables
74559>>>>>            If (iTables >= 1) Begin
74561>>>>>                // Enumerate the tables and change the table schema
74561>>>>>                Decrement iTables
74562>>>>>                For iTable from 0 to iTables
74568>>>>>>
74568>>>>>                    Get psTableSchema sReportId iTable to sTableSchema
74569>>>>>                    // sTableSchema is blank when the table was opened via the filelist
74569>>>>>                    If (sTableSchema <> "") Begin
74571>>>>>                        If (not (DoesFileExist (sTableSchema))) Begin
74573>>>>>                            Move (ExtractFileName (sTableSchema)) to sTableSchema
74574>>>>>                            Get FindTablePath sTableSchema to sTableSchema
74575>>>>>                            If (sTableSchema <> "") Begin
74577>>>>>                                Set psTableSchema sReportId iTable to sTableSchema
74578>>>>>                            End
74578>>>>>>
74578>>>>>                            Else Begin
74579>>>>>                                Get psReportName to sReportName
74580>>>>>                                Get psTableSchema sReportId iTable to sTableSchema
74581>>>>>                                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRCannotLocateTable, sTableSchema, sReportName, iTable))
74582>>>>>>
74582>>>>>                            End
74582>>>>>>
74582>>>>>                        End
74582>>>>>>
74582>>>>>                    End
74582>>>>>>
74582>>>>>                Loop
74583>>>>>>
74583>>>>>            End
74583>>>>>>
74583>>>>>        End
74583>>>>>>
74583>>>>>
74583>>>>>        Get SubReportCount sReportId to iSubReports
74584>>>>>        Decrement iSubReports
74585>>>>>        For iSubReport from 0 to iSubReports
74591>>>>>>
74591>>>>>            Get SubReportId sReportId iSubReport to sSubReportId
74592>>>>>            Send AutoLocateDFFiles sSubReportId
74593>>>>>        Loop
74594>>>>>>
74594>>>>>    End_Procedure
74595>>>>>
74595>>>>>    Procedure ClosePreviewer
74597>>>>>        Integer ePreviewStyle
74597>>>>>        Handle hoPreviewContainer
74597>>>>>
74597>>>>>        Get pePreviewStyle to ePreviewStyle
74598>>>>>        If (ePreviewStyle = C_DRPREVIEW_VIEW or ePreviewStyle = C_DRPREVIEW_TOOLPANEL or ePreviewStyle = C_DRPREVIEW_DESKTOPVIEW) Begin
74600>>>>>            Get phoPreviewContainer to hoPreviewContainer
74601>>>>>            Get Object_Id of hoPreviewContainer to hoPreviewContainer // Test if the handle is valid
74602>>>>>            If (hoPreviewContainer <> 0) Begin
74604>>>>>                Send Close_Panel of hoPreviewContainer
74605>>>>>            End
74605>>>>>>
74605>>>>>        End
74605>>>>>>
74605>>>>>    End_Procedure
74606>>>>>
74606>>>>>    // When deactivating the object and the report id is still set, close the report
74606>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
74608>>>>>        Integer iResult
74608>>>>>        String sReportId
74608>>>>>
74608>>>>>        Get psReportId to sReportId
74609>>>>>        If (sReportId <> "") Begin
74611>>>>>            Send CloseReport sReportId
74612>>>>>        End
74612>>>>>>
74612>>>>>
74612>>>>>        Forward Get msg_Deactivate eDeactivateScope to iResult
74614>>>>>
74614>>>>>        If (sReportId <> "") Begin
74616>>>>>            Send ClosePreviewer
74617>>>>>        End
74617>>>>>>
74617>>>>>
74617>>>>>        Procedure_Return iResult
74618>>>>>    End_Procedure
74619>>>>>
74619>>>>>    // When activate is sent to the object and the preview mode is not embedded the
74619>>>>>    // focus should move to the next object.
74619>>>>>    Procedure Activate Returns Integer
74621>>>>>        Integer iRetval ePreviewStyle
74621>>>>>
74621>>>>>        Forward Get Msg_Activate to iRetval
74623>>>>>
74623>>>>>        Get pePreviewStyle to ePreviewStyle
74624>>>>>        If (ePreviewStyle <> C_DRPREVIEW_EMBEDDED) Begin
74626>>>>>            Send Next
74627>>>>>        End
74627>>>>>>
74627>>>>>
74627>>>>>        Set Skip_State to (ePreviewStyle <> C_DRPREVIEW_EMBEDDED)
74628>>>>>
74628>>>>>        Procedure_Return iRetval
74629>>>>>    End_Procedure
74630>>>>>
74630>>>>>    // All errors are directed to this method.
74630>>>>>    Procedure Error_Report Integer iErrNum Integer iErrLine String sErrMsg
74632>>>>>        Handle hoError
74632>>>>>        Boolean bInError bDisplayError bCancelIfError
74632>>>>>
74632>>>>>        Get pbInError to bInError
74633>>>>>        If (not (bInError)) Begin
74635>>>>>            Set pbInError to True // prevents recursion
74636>>>>>            Set pbHasErrors to True  // an error has occurred in the report
74637>>>>>            Send OnError iErrNum iErrLine sErrMsg
74638>>>>>            Get pbDisplayError to bDisplayError
74639>>>>>            If (bDisplayError) Begin // if we display, direct to old error object
74641>>>>>                Get phOldErrorObject to hoError
74642>>>>>                If (hoError <> 0) Begin
74644>>>>>                    Send Error_Report of hoError iErrNum iErrLine sErrMsg
74645>>>>>                End
74645>>>>>>
74645>>>>>                Else Begin
74646>>>>>                    Send Error_Report of Desktop iErrNum iErrLine sErrMsg
74647>>>>>                End
74647>>>>>>
74647>>>>>            End
74647>>>>>>
74647>>>>>            Get pbCancelIfError to bCancelIfError
74648>>>>>            If (bCancelIfError) Begin
74650>>>>>                Send CancelReport // Sets pbCanceled to true
74651>>>>>            End
74651>>>>>>
74651>>>>>            Set pbInError to False
74652>>>>>        End
74652>>>>>>
74652>>>>>    End_Procedure
74653>>>>>
74653>>>>>
74653>>>>>    // Enumerates the psDataPath to find the table and returns the path if present.
74653>>>>>    Function FindTablePath String sTableName Returns String
74655>>>>>        Handle hoWorkspace
74655>>>>>        Integer iDataPaths iDataPath
74655>>>>>        String sDataPaths sDataPath sTestTableName
74655>>>>>
74655>>>>>        If (ghoApplication > 0) Begin
74657>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
74658>>>>>            If (hoWorkspace > 0) Begin
74660>>>>>                Get psDataPath of hoWorkspace to sDataPaths
74661>>>>>                Get CountOfPaths of hoWorkspace sDataPaths to iDataPaths
74662>>>>>                For iDataPath from 1 to iDataPaths
74668>>>>>>
74668>>>>>                    Get PathAtIndex of hoWorkspace sDataPaths iDataPath to sDataPath
74669>>>>>                    Move (Trim (sDataPath)) to sDataPath
74670>>>>>                    If (Right (sDataPath, 1) <> SysConf (SYSCONF_DIR_SEPARATOR)) Begin
74672>>>>>                        Move (sDataPath - SysConf (SYSCONF_DIR_SEPARATOR)) to sDataPath
74673>>>>>                    End
74673>>>>>>
74673>>>>>                    Move (sDataPath - sTableName) to sTestTableName
74674>>>>>                    If (DoesFileExist (sTestTableName)) Begin
74676>>>>>                        Function_Return sTestTableName
74677>>>>>                    End
74677>>>>>>
74677>>>>>                Loop
74678>>>>>>
74678>>>>>            End
74678>>>>>>
74678>>>>>        End
74678>>>>>>
74678>>>>>
74678>>>>>        Function_Return ""
74679>>>>>    End_Function
74680>>>>>
74680>>>>>    // Uses optional error information and return it as error message text, then reset the function error information
74680>>>>>    // to avoid its information is used again
74680>>>>>    Function FormatFunctionErrorMessage Returns String
74682>>>>>        String sReportName sFunctionName sErrMsg
74682>>>>>        tDRFunctionErrorInfo FunctionErrorInfo FunctionErrorReset
74682>>>>>        tDRFunctionErrorInfo FunctionErrorInfo FunctionErrorReset
74682>>>>>
74682>>>>>        Get pFunctionErrorInfo to FunctionErrorInfo
74683>>>>>        If (FunctionErrorInfo.sReportId <> "") Begin
74685>>>>>            Get ComReportName FunctionErrorInfo.sReportId to sReportName
74686>>>>>            Get psFunctionName FunctionErrorInfo.sReportId FunctionErrorInfo.iFunctionId to sFunctionName
74687>>>>>            If (sFunctionName = "") Begin
74689>>>>>                Move C_$DRBuiltInFunction to sFunctionName
74690>>>>>            End
74690>>>>>>
74690>>>>>            Move (SFormat (C_$DRFunctionError, sFunctionName, sReportName, FunctionErrorInfo.sError)) to sErrMsg
74691>>>>>        End
74691>>>>>>
74691>>>>>
74691>>>>>        Function_Return sErrMsg
74692>>>>>    End_Function
74693>>>>>
74693>>>>>    Procedure Page_Object Boolean bPage
74695>>>>>        Handle hWnd
74695>>>>>        Boolean bDisplayError bComObjectCreated
74695>>>>>
74695>>>>>        If (bPage) Begin
74697>>>>>            Send RedirectErrorsToLocalHandler True
74698>>>>>            Get pbDisplayError to bDisplayError
74699>>>>>            Set pbDisplayError to False
74700>>>>>        End
74700>>>>>>
74700>>>>>
74700>>>>>        Forward Send Page_Object bPage
74702>>>>>
74702>>>>>        If (bPage) Begin
74704>>>>>            Set pbDisplayError to bDisplayError
74705>>>>>            Get IsComObjectCreated to bComObjectCreated
74706>>>>>            If (bComObjectCreated) Begin
74708>>>>>                If (ghoSkinFramework <> 0) Begin
74710>>>>>                    Get Window_Handle to hWnd
74711>>>>>                    If (hWnd <> 0) Begin
74713>>>>>                        Send ComRemoveWindow of ghoSkinFramework hWnd
74714>>>>>                    End
74714>>>>>>
74714>>>>>                End
74714>>>>>>
74714>>>>>            End
74714>>>>>>
74714>>>>>            Else Begin
74715>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXCannotLoad, C_DR_OCX_NAME, C_DR_OCX_VERSION))
74716>>>>>>
74716>>>>>            End
74716>>>>>>
74716>>>>>            Send RedirectErrorsToLocalHandler False
74717>>>>>        End
74717>>>>>>
74717>>>>>    End_Procedure
74718>>>>>
74718>>>>>    Function IsDirectory String sPath Returns Boolean
74720>>>>>        Integer iRetVal
74720>>>>>
74720>>>>>        Move (sPath - Character (0)) to sPath
74721>>>>>        Move (DR_WinAPI_PathIsDirectory (AddressOf (sPath))) to iRetVal
74722>>>>>
74722>>>>>        Function_Return (iRetVal = FILE_ATTRIBUTE_DIRECTORY)
74723>>>>>    End_Function
74724>>>>>
74724>>>>>    Function ProcessModules Returns String[]
74726>>>>>        DWord dwProcessId
74726>>>>>        Handle hProcess
74726>>>>>        Handle[] hModules
74727>>>>>        Integer iSize iVoid iModules iModule iLength
74727>>>>>        Boolean bOk
74727>>>>>        String[] sModuleNames
74728>>>>>
74728>>>>>        Move (DR_WinAPI_GetCurrentProcessId ()) to dwProcessId
74729>>>>>        If (dwProcessId <> 0) Begin
74731>>>>>            Move (DR_WinAPI_OpenProcess (PROCESS_VM_READ + PROCESS_QUERY_INFORMATION, False, dwProcessId)) to hProcess
74732>>>>>            If (hProcess <> 0) Begin
74734>>>>>                Move 0 to iSize
74735>>>>>                Move (DR_WinAPI_EnumProcessModules (hProcess, AddressOf (hModules), 0, AddressOf (iSize))) to bOk
74736>>>>>                If (not (bOk)) Begin
74738>>>>>                    Get ShowLastError to iVoid
74739>>>>>                End
74739>>>>>>
74739>>>>>                Else Begin
74740>>>>>                    Move (iSize / SizeOfType (Handle)) to iModules
74741>>>>>                    Move (ResizeArray (hModules, iModules)) to hModules
74742>>>>>                    Move (DR_WinAPI_EnumProcessModules (hProcess, AddressOf (hModules), iSize, AddressOf (iSize))) to bOk
74743>>>>>                    If (not (bOk)) Begin
74745>>>>>                        Get ShowLastError to iVoid
74746>>>>>                    End
74746>>>>>>
74746>>>>>                    Else Begin
74747>>>>>                        Move (ResizeArray (sModuleNames, iModules, Repeat (Character (0), MAX_PATH))) to sModuleNames
74748>>>>>                        Decrement iModules
74749>>>>>                        For iModule from 0 to iModules
74755>>>>>>
74755>>>>>                            Move (GetModuleFileName (hModules[iModule], AddressOf (sModuleNames[iModule]), MAX_PATH)) to iLength
74756>>>>>                        Loop
74757>>>>>>
74757>>>>>                    End
74757>>>>>>
74757>>>>>                End
74757>>>>>>
74757>>>>>                Move (DR_WinAPI_CloseHandle (hProcess)) to bOk
74758>>>>>            End
74758>>>>>>
74758>>>>>        End
74758>>>>>>
74758>>>>>
74758>>>>>        Function_Return sModuleNames
74759>>>>>    End_Function
74760>>>>>
74760>>>>>    // Redirect to local error handler or Restore the global error handler
74760>>>>>    Procedure RedirectErrorsToLocalHandler Boolean bRedirect
74762>>>>>        Integer iLocalErrorRedirectCount
74762>>>>>        String sStackDump
74762>>>>>
74762>>>>>        Get piLocalErrorRedirectCount to iLocalErrorRedirectCount
74763>>>>>        If (bRedirect) Begin
74765>>>>>            If (iLocalErrorRedirectCount = 0) Begin
74767>>>>>                Set phOldErrorObject to Error_Object_Id
74768>>>>>                Move Self to Error_Object_Id
74769>>>>>            End
74769>>>>>>
74769>>>>>            Increment iLocalErrorRedirectCount
74770>>>>>            Set piLocalErrorRedirectCount to iLocalErrorRedirectCount
74771>>>>>        End
74771>>>>>>
74771>>>>>        Else Begin
74772>>>>>            If (iLocalErrorRedirectCount = 1) Begin
74774>>>>>                Get phOldErrorObject to Error_Object_Id
74775>>>>>                Set phOldErrorObject to 0
74776>>>>>            End
74776>>>>>>
74776>>>>>            Decrement iLocalErrorRedirectCount
74777>>>>>            If (iLocalErrorRedirectCount < 0) Begin
74779>>>>>                CallStackDump sStackDump
74780>>>>>                Send Stop_Box ("RedirectErrorsToLocalHandler\nThis should not happen!\n\nPlease report to Data Access Europe\n\n" + sStackDump) C_$DRDataFlexReports
74781>>>>>            End
74781>>>>>>
74781>>>>>            Set piLocalErrorRedirectCount to iLocalErrorRedirectCount
74782>>>>>        End
74782>>>>>>
74782>>>>>    End_Procedure
74783>>>>>
74783>>>>>    // ********* PRIVATE EVENTS ***********
74783>>>>>
74783>>>>>    Procedure OnComFunctionError String sReportId Integer iFunctionId String sFunction String sError Integer iLine Integer iCol String sToken
74785>>>>>        tDRFunctionErrorInfo FunctionErrorInfo
74785>>>>>        tDRFunctionErrorInfo FunctionErrorInfo
74785>>>>>
74785>>>>>        Move sReportId to FunctionErrorInfo.sReportId
74786>>>>>        Move iFunctionId to FunctionErrorInfo.iFunctionId
74787>>>>>        Move sError to FunctionErrorInfo.sError
74788>>>>>        Set pFunctionErrorInfo to FunctionErrorInfo
74789>>>>>    End_Procedure
74790>>>>>
74790>>>>>    Procedure OnComPreviewClick C_DRHitTests iPos Integer iSectionId String sObject String sValue
74792>>>>>        Send OnReportPreviewClick iPos iSectionId sObject sValue
74793>>>>>    End_Procedure
74794>>>>>
74794>>>>>    Procedure OnComPreviewShowPage Integer iPage
74796>>>>>        Send OnPageChanged iPage
74797>>>>>    End_Procedure
74798>>>>>
74798>>>>>    // When the previewer got an instruction to change the zoom factor notify this class
74798>>>>>    Procedure OnComPreviewZoomChanged Integer iFactor
74800>>>>>        Send OnZoomChanged iFactor
74801>>>>>    End_Procedure
74802>>>>>
74802>>>>>    Procedure OnComProgressRecordsRead Integer iRecords
74804>>>>>        Send OnProgressRecordsRead iRecords
74805>>>>>    End_Procedure
74806>>>>>
74806>>>>>    Procedure OnComProgressFormatPage Integer iPage Integer iTotalPages
74808>>>>>        Send OnProgressFormatPage iPage iTotalPages
74809>>>>>    End_Procedure
74810>>>>>
74810>>>>>    Procedure OnComReportError Integer iError String sError
74812>>>>>        Error DFERR_DATAFLEX_REPORTS (SFormat ("%1 (%2)",sError, iError))
74813>>>>>>
74813>>>>>    End_Procedure
74814>>>>>
74814>>>>>    Procedure OnComReportInfo Integer iInfo String sInfo
74816>>>>>        Send OnReportInfo iInfo sInfo
74817>>>>>    End_Procedure
74818>>>>>
74818>>>>>    Procedure OnComReportStatistics C_DRStatistics iType Integer iValue
74820>>>>>        Send OnReportStatistics iType iValue
74821>>>>>    End_Procedure
74822>>>>>
74822>>>>>    // ********* PUBLIC EVENTS ***********
74822>>>>>
74822>>>>>    // Executed when the previewer object closes
74822>>>>>    Procedure OnClosePreviewer
74824>>>>>    End_Procedure
74825>>>>>
74825>>>>>    // Can be used by developer to set filters
74825>>>>>    Procedure OnDefineFilters
74827>>>>>    End_Procedure
74828>>>>>
74828>>>>>    // Intended to be used by developer
74828>>>>>    Procedure OnDisplayReport
74830>>>>>    End_Procedure
74831>>>>>
74831>>>>>    // Event called by Error_Report. For augmentation.
74831>>>>>    Procedure OnError Integer iErrNum Integer iErrLine String sErrMsg
74833>>>>>    End_Procedure
74834>>>>>
74834>>>>>    // Intended to be used by developer
74834>>>>>    Procedure OnExportReport C_DRExportFormats iExportType String sFileName
74836>>>>>    End_Procedure
74837>>>>>
74837>>>>>    // The developer can use this event to initialize the report object after
74837>>>>>    // the report was succesfully opened.
74837>>>>>    Procedure OnInitializeReport
74839>>>>>    End_Procedure
74840>>>>>
74840>>>>>    // Will be called if a different page is viewed and automatically send to
74840>>>>>    // the preview window.
74840>>>>>    Procedure OnPageChanged Integer iPage
74842>>>>>        Integer ePreviewStyle
74842>>>>>        Handle hoPreviewContainer
74842>>>>>
74842>>>>>        Get pePreviewStyle to ePreviewStyle
74843>>>>>        If (ePreviewStyle <> C_DRPREVIEW_EMBEDDED) Begin
74845>>>>>            Get phoPreviewContainer to hoPreviewContainer
74846>>>>>            If (hoPreviewContainer <> 0) Begin
74848>>>>>                Send OnPageChanged of hoPreviewContainer iPage
74849>>>>>            End
74849>>>>>>
74849>>>>>        End
74849>>>>>>
74849>>>>>    End_Procedure
74850>>>>>
74850>>>>>    // Will be called at the end of a DisplayReport
74850>>>>>    Procedure OnPostDisplayReport
74852>>>>>    End_Procedure
74853>>>>>
74853>>>>>    // Will be called at the end of a ExportReport
74853>>>>>    Procedure OnPostExportReport Integer iExportType String sFileName
74855>>>>>    End_Procedure
74856>>>>>
74856>>>>>    // Will be called at the end of a PrintReport
74856>>>>>    Procedure OnPostPrintReport
74858>>>>>    End_Procedure
74859>>>>>
74859>>>>>    // The developer can use this event to change settings on the report object before
74859>>>>>    // the report was opened.
74859>>>>>    Procedure OnPreOpenReport
74861>>>>>    End_Procedure
74862>>>>>
74862>>>>>    // Will be called at the begin of a PrintReport method, developer can change
74862>>>>>    // the value of the hPrintDlg parameter which contains the address of a PRINTDLGEX structure
74862>>>>>    Procedure OnPrintReport Handle ByRef hPrintDlg
74864>>>>>    End_Procedure
74865>>>>>
74865>>>>>    // Will be fired when the print engine read another 100 records or the time passed a quarter of a second
74865>>>>>    Procedure OnProgressRecordsRead Integer iRecords
74867>>>>>        Handle hoStatusPanel
74867>>>>>        Boolean bShowStatusPanel
74867>>>>>
74867>>>>>        Get pbShowStatusPanel to bShowStatusPanel
74868>>>>>        Get phoStatusPanel to hoStatusPanel
74869>>>>>        If (bShowStatusPanel and hoStatusPanel <> 0) Begin
74871>>>>>            Send SetStatusText of hoStatusPanel (SFormat (C_$DRReportRecordsRead, iRecords))
74872>>>>>        End
74872>>>>>>
74872>>>>>    End_Procedure
74873>>>>>
74873>>>>>    // Will be called when the report engine formats a page
74873>>>>>    Procedure OnProgressFormatPage Integer iPage Integer iTotalPages
74875>>>>>        Handle hoStatusPanel
74875>>>>>        Boolean bShowStatusPanel
74875>>>>>
74875>>>>>        Get pbShowStatusPanel to bShowStatusPanel
74876>>>>>        Get phoStatusPanel to hoStatusPanel
74877>>>>>        If (bShowStatusPanel and hoStatusPanel <> 0) Begin
74879>>>>>            If (iTotalPages <> -1) Begin
74881>>>>>                Send SetStatusText of hoStatusPanel (SFormat (C_$DRReportFormattingPageNofM, iPage, iTotalPages))
74882>>>>>            End
74882>>>>>>
74882>>>>>            Else Begin
74883>>>>>                Send SetStatusText of hoStatusPanel (SFormat (C_$DRReportFormattingPage, iPage))
74884>>>>>            End
74884>>>>>>
74884>>>>>        End
74884>>>>>>
74884>>>>>    End_Procedure
74885>>>>>
74885>>>>>    // Can be used to send message from the report engine
74885>>>>>    Procedure OnReportInfo Integer iError String sInfo
74887>>>>>        Boolean bShowInformationMessages
74887>>>>>
74887>>>>>        Get pbShowInformationMessages to bShowInformationMessages
74888>>>>>        If (bShowInformationMessages) Begin
74890>>>>>            Send Info_Box sInfo C_$DRDataFlexReports
74891>>>>>        End
74891>>>>>>
74891>>>>>    End_Procedure
74892>>>>>
74892>>>>>    // Can be used to make an interactive report
74892>>>>>    Procedure OnReportPreviewClick C_DRHitTests iPos Integer iSectionId String sObject String sValue
74894>>>>>    End_Procedure
74895>>>>>
74895>>>>>    // Can be used to collect report statistic information
74895>>>>>    Procedure OnReportStatistics C_DRStatistics iType Integer iValue
74897>>>>>    End_Procedure
74898>>>>>
74898>>>>>    Function OnSetPDFExportOptions drPDFExportOptions PDFExportOptions Returns drPDFExportOptions
74900>>>>>        Function_Return PDFExportOptions
74901>>>>>    End_Function
74902>>>>>
74902>>>>>    // Fires when the preview window is 'paged'
74902>>>>>    Procedure OnShowPreviewer
74904>>>>>    End_Procedure
74905>>>>>
74905>>>>>    // Intended to be used by developer
74905>>>>>    Procedure OnZoomChanged Integer iFactor
74907>>>>>        Integer ePreviewStyle
74907>>>>>        Handle hoPreviewContainer
74907>>>>>
74907>>>>>        Get pePreviewStyle to ePreviewStyle
74908>>>>>        If (ePreviewStyle <> C_DRPREVIEW_EMBEDDED) Begin
74910>>>>>            Get phoPreviewContainer to hoPreviewContainer
74911>>>>>            If (hoPreviewContainer <> 0) Begin
74913>>>>>                Send OnZoomChanged of hoPreviewContainer iFactor
74914>>>>>            End
74914>>>>>>
74914>>>>>        End
74914>>>>>>
74914>>>>>    End_Procedure
74915>>>>>
74915>>>>>    // ********* PUBLIC METHODS ***********
74915>>>>>
74915>>>>>    // Adds a filter to the report
74915>>>>>    Procedure AddFilter String sReportId String sFilterField C_DROperators eFilterOperator String sFilterValue
74917>>>>>        Boolean bComObjectCreated
74917>>>>>
74917>>>>>        Send RedirectErrorsToLocalHandler True
74918>>>>>
74918>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
74920>>>>>            Get psReportId to sReportId
74921>>>>>        End
74921>>>>>>
74921>>>>>
74921>>>>>        If (sReportId <> "") Begin
74923>>>>>            Get IsComObjectCreated to bComObjectCreated
74924>>>>>            If (bComObjectCreated) Begin
74926>>>>>                If (eFilterOperator >= C_DRNone and eFilterOperator <= C_DRLessThanOrEqual) Begin
74928>>>>>                    Send ComRecordFilterAdd sReportId sFilterField eFilterOperator sFilterValue
74929>>>>>                End
74929>>>>>>
74929>>>>>            End
74929>>>>>>
74929>>>>>            Else Begin
74930>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
74931>>>>>>
74931>>>>>            End
74931>>>>>>
74931>>>>>        End
74931>>>>>>
74931>>>>>        Else Begin
74932>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
74933>>>>>>
74933>>>>>        End
74933>>>>>>
74933>>>>>
74933>>>>>        Send RedirectErrorsToLocalHandler False
74934>>>>>    End_Procedure
74935>>>>>
74935>>>>>    // Adds a record sort field to the report
74935>>>>>    Procedure AddRecordSortField String sReportId String sSortField C_DRSortOrders eSortOrder
74937>>>>>        Boolean bComObjectCreated
74937>>>>>
74937>>>>>        Send RedirectErrorsToLocalHandler True
74938>>>>>
74938>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
74940>>>>>            Get psReportId to sReportId
74941>>>>>        End
74941>>>>>>
74941>>>>>
74941>>>>>        If (sReportId <> "") Begin
74943>>>>>            Get IsComObjectCreated to bComObjectCreated
74944>>>>>            If (bComObjectCreated) Begin
74946>>>>>                If (eSortOrder = C_DRAscending or eSortOrder = C_DRDescending) Begin
74948>>>>>                    Send ComRecordSortAdd sReportId sSortField eSortOrder
74949>>>>>                End
74949>>>>>>
74949>>>>>            End
74949>>>>>>
74949>>>>>            Else Begin
74950>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
74951>>>>>>
74951>>>>>            End
74951>>>>>>
74951>>>>>        End
74951>>>>>>
74951>>>>>        Else Begin
74952>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
74953>>>>>>
74953>>>>>        End
74953>>>>>>
74953>>>>>
74953>>>>>        Send RedirectErrorsToLocalHandler False
74954>>>>>    End_Procedure
74955>>>>>
74955>>>>>    // Cancels the further loading, running
74955>>>>>    Procedure CancelReport
74957>>>>>        String sReportId
74957>>>>>        Boolean bComObjectCreated
74957>>>>>
74957>>>>>        Send RedirectErrorsToLocalHandler True
74958>>>>>
74958>>>>>        Get psReportId to sReportId
74959>>>>>        If (sReportId <> "") Begin
74961>>>>>            Get IsComObjectCreated to bComObjectCreated
74962>>>>>            If (bComObjectCreated) Begin
74964>>>>>                Send ComReportCancel sReportId
74965>>>>>                Set pbCanceled to True
74966>>>>>            End
74966>>>>>>
74966>>>>>            Else Begin
74967>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
74968>>>>>>
74968>>>>>            End
74968>>>>>>
74968>>>>>        End
74968>>>>>>
74968>>>>>
74968>>>>>        Send RedirectErrorsToLocalHandler False
74969>>>>>    End_Procedure
74970>>>>>
74970>>>>>    Procedure CheckFunctionErrorInfo
74972>>>>>        Send CheckFunctionErrorAndDisplayInfo of oFunctionErrorDialog Self
74973>>>>>        Send ResetFunctionErrorInfo
74974>>>>>    End_Procedure
74975>>>>>
74975>>>>>    Procedure CloseReport String sReportId
74977>>>>>        Boolean bComObjectCreated
74977>>>>>
74977>>>>>        Send RedirectErrorsToLocalHandler True
74978>>>>>
74978>>>>>        If (sReportId <> "") Begin
74980>>>>>            Get IsComObjectCreated to bComObjectCreated
74981>>>>>            If (bComObjectCreated) Begin
74983>>>>>                Set PreviewWindowHandle to 0
74984>>>>>                Send ComReportClose sReportId
74985>>>>>            End
74985>>>>>>
74985>>>>>            Else Begin
74986>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
74987>>>>>>
74987>>>>>            End
74987>>>>>>
74987>>>>>        End
74987>>>>>>
74987>>>>>        Set psReportId to ""
74988>>>>>
74988>>>>>        Send RedirectErrorsToLocalHandler False
74989>>>>>    End_Procedure
74990>>>>>
74990>>>>>    // Method to enumerate all reports that contain the passed function name. Internal because of the byref usage. It
74990>>>>>    // is called from the ReportIdsForFunction function.
74990>>>>>    Procedure CollectReportIdsForFunction String sReportId String sFunctionName tReportFunctionId[] ByRef ReportFunctionIds
74992>>>>>        Integer iElement iFunction iSubReports iSubReport
74992>>>>>        String sSubReportId
74992>>>>>
74992>>>>>        Get FunctionIdByName sReportId sFunctionName to iFunction
74993>>>>>        If (iFunction >= 0) Begin
74995>>>>>            Move (SizeOfArray (ReportFunctionIds)) to iElement
74996>>>>>            Move iFunction to ReportFunctionIds[iElement].iFunction
74997>>>>>            Move sReportId to ReportFunctionIds[iElement].sReportId
74998>>>>>        End
74998>>>>>>
74998>>>>>
74998>>>>>        Get SubReportCount sReportId to iSubReports
74999>>>>>        If (iSubReports > 0) Begin
75001>>>>>            Decrement iSubReports
75002>>>>>            For iSubReport from 0 to iSubReports
75008>>>>>>
75008>>>>>                Get SubReportId sReportId iSubReport to sSubReportId
75009>>>>>                Send CollectReportIdsForFunction sSubReportId sFunctionName (&ReportFunctionIds)
75010>>>>>            Loop
75011>>>>>>
75011>>>>>        End
75011>>>>>>
75011>>>>>    End_Procedure
75012>>>>>
75012>>>>>    // Method to enumerate all reports that contain the passed function name. Internal because of the byref usage. It
75012>>>>>    // is called from the ReportIdsForParameter function.
75012>>>>>    Procedure CollectReportIdsForParameter String sReportId String sParameterName tReportParameterId[] ByRef ReportParameterIds
75014>>>>>        Integer iElement iParameter iSubReports iSubReport
75014>>>>>        String sSubReportId
75014>>>>>
75014>>>>>        Get ParameterIdByName sReportId sParameterName to iParameter
75015>>>>>        If (iParameter >= 0) Begin
75017>>>>>            Move (SizeOfArray (ReportParameterIds)) to iElement
75018>>>>>            Move iParameter to ReportParameterIds[iElement].iParameter
75019>>>>>            Move sReportId to ReportParameterIds[iElement].sReportId
75020>>>>>        End
75020>>>>>>
75020>>>>>
75020>>>>>        Get SubReportCount sReportId to iSubReports
75021>>>>>        If (iSubReports > 0) Begin
75023>>>>>            Decrement iSubReports
75024>>>>>            For iSubReport from 0 to iSubReports
75030>>>>>>
75030>>>>>                Get SubReportId sReportId iSubReport to sSubReportId
75031>>>>>                Send CollectReportIdsForParameter sSubReportId sParameterName (&ReportParameterIds)
75032>>>>>            Loop
75033>>>>>>
75033>>>>>        End
75033>>>>>>
75033>>>>>    End_Procedure
75034>>>>>    
75034>>>>>    Function ConvertTableDataToJsonSampleData Variant[][] vData Returns UChar[]
75036>>>>>        Integer iRows iRow iElements iElement
75036>>>>>        tDRDataSourceRow[] TestData
75036>>>>>        tDRDataSourceRow[] TestData
75037>>>>>        Handle hoJsonRoot
75037>>>>>        UChar[] ucTableData
75038>>>>>        
75038>>>>>        Move (SizeOfArray (vData)) to iRows
75039>>>>>        If (iRows > 0) Begin
75041>>>>>            Move (ResizeArray (TestData, iRows)) to TestData
75042>>>>>            Decrement iRows
75043>>>>>            For iRow from 0 to iRows
75049>>>>>>
75049>>>>>                Move (SizeOfArray (vData[iRow])) to iElements
75050>>>>>                If (iElements > 0) Begin
75052>>>>>                    Move (ResizeArray (TestData[iRow].sValue, iElements)) to TestData[iRow].sValue
75053>>>>>                    Decrement iElements
75054>>>>>                    For iElement from 0 to iElements
75060>>>>>>
75060>>>>>                        Move vData[iRow][iElement] to TestData[iRow].sValue[iElement+1]
75061>>>>>                    Loop
75062>>>>>>
75062>>>>>                End
75062>>>>>>
75062>>>>>            Loop
75063>>>>>>
75063>>>>>        
75063>>>>>            Get Create (RefClass (cJsonObject)) to hoJsonRoot
75064>>>>>            Send InitializeJsonType of hoJsonRoot jsonTypeObject
75065>>>>>            Send DataTypeToJson of hoJsonRoot TestData
75066>>>>>            Set peWhiteSpace Of hoJsonRoot to jpWhitespace_Pretty
75067>>>>>            Get StringifyUtf8 of hoJsonRoot to ucTableData
75068>>>>>            Send Destroy of hoJsonRoot
75069>>>>>        End
75069>>>>>>
75069>>>>>        
75069>>>>>        Function_Return ucTableData
75070>>>>>    End_Function
75071>>>>>
75071>>>>>    // The return value is C_DRDF, C_DRODBC, C_DRSQLite or C_DRRDS. The function returns zero
75071>>>>>    // when no report id has been set, so none has been opened.
75071>>>>>    Function DatabaseType String sReportId Returns C_DRDatabaseTypes
75073>>>>>        Integer eDatabaseType
75073>>>>>        Boolean bComObjectCreated
75073>>>>>
75073>>>>>        Send RedirectErrorsToLocalHandler True
75074>>>>>
75074>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
75076>>>>>            Get psReportId to sReportId
75077>>>>>        End
75077>>>>>>
75077>>>>>
75077>>>>>        If (sReportId <> "") Begin
75079>>>>>            Get IsComObjectCreated to bComObjectCreated
75080>>>>>            If (bComObjectCreated) Begin
75082>>>>>                Get ComDatabaseType sReportId to eDatabaseType
75083>>>>>            End
75083>>>>>>
75083>>>>>            Else Begin
75084>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
75085>>>>>>
75085>>>>>            End
75085>>>>>>
75085>>>>>        End
75085>>>>>>
75085>>>>>        Else Begin
75086>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
75087>>>>>>
75087>>>>>        End
75087>>>>>>
75087>>>>>
75087>>>>>        Send RedirectErrorsToLocalHandler False
75088>>>>>
75088>>>>>        Function_Return eDatabaseType
75089>>>>>    End_Function
75090>>>>>
75090>>>>>    // The AddFilter function expects a string. If you move a DateTime to a string the format
75090>>>>>    // is incorrect for SQL. With this function we can convert the DateTime to string in the appropriate
75090>>>>>    // format (this is yyyy-mm-dd hh:mm:ss)). The prefix zeroes are important.
75090>>>>>    Function DateTimeToString DateTime dtIn Returns String
75092>>>>>        String sDateTimeResult
75092>>>>>
75092>>>>>        Get DateTimeToString of oDRReportHelper dtIn to sDateTimeResult
75093>>>>>
75093>>>>>        Function_Return sDateTimeResult
75094>>>>>    End_Function
75095>>>>>
75095>>>>>    // The AddFilter function expects a string. If you move a Date to a string the format
75095>>>>>    // is incorrect for SQL. With this function we can convert the Date to string first in the appropriate
75095>>>>>    // format (this is yyyy-mm-dd). The prefix zeroes are important.
75095>>>>>    Function DateToString Date dIn Returns String
75097>>>>>        String sDateResult
75097>>>>>
75097>>>>>        Get DateToString of oDRReportHelper dIn to sDateResult
75098>>>>>
75098>>>>>        Function_Return sDateResult
75099>>>>>    End_Function
75100>>>>>
75100>>>>>    // Returns defaults for exporting to CSV
75100>>>>>    Function DefaultCSVExportOptions Returns DRCSVExportOptions
75102>>>>>        DRCSVExportOptions CSVExportOptions
75102>>>>>        DRCSVExportOptions CSVExportOptions
75102>>>>>
75102>>>>>        Move '"' to CSVExportOptions.cFieldSeparator
75103>>>>>        Move ',' to CSVExportOptions.cFieldDelimiter
75104>>>>>        Move False to CSVExportOptions.bExportGroupSections
75105>>>>>        Move False to CSVExportOptions.bExportPageSections
75106>>>>>        Move False to CSVExportOptions.bExportReportSections
75107>>>>>        Move True to CSVExportOptions.bAllPages
75108>>>>>        Move 1 to CSVExportOptions.iPage
75109>>>>>
75109>>>>>        Function_Return CSVExportOptions
75110>>>>>    End_Function
75111>>>>>
75111>>>>>    // Returns defaults for exporting to image
75111>>>>>    Function DefaultImageExportOptions Returns DRImageExportOptions
75113>>>>>        DRImageExportOptions ImageExportOptions
75113>>>>>        DRImageExportOptions ImageExportOptions
75113>>>>>
75113>>>>>        Move C_DRTIFF to ImageExportOptions.iImageType
75114>>>>>        Move True to ImageExportOptions.bMultiPage
75115>>>>>        Move 1 to ImageExportOptions.iPage
75116>>>>>
75116>>>>>        Function_Return ImageExportOptions
75117>>>>>    End_Function
75118>>>>>
75118>>>>>    // Returns defaults for exporting to HTML
75118>>>>>    Function DefaultHTMLExportOptions Returns DRHTMLExportOptions
75120>>>>>        DRHTMLExportOptions HTMLExportOptions
75120>>>>>        DRHTMLExportOptions HTMLExportOptions
75120>>>>>
75120>>>>>        Move True to HTMLExportOptions.bMultiPage
75121>>>>>        Move 0 to HTMLExportOptions.iPage
75122>>>>>
75122>>>>>        Function_Return HTMLExportOptions
75123>>>>>    End_Function
75124>>>>>
75124>>>>>    // Returns defaults for exporting to PDF
75124>>>>>    Function DefaultPDFExportOptions Returns DRPDFExportOptions
75126>>>>>        DRPDFExportOptions PDFExportOptions
75126>>>>>        DRPDFExportOptions PDFExportOptions
75126>>>>>
75126>>>>>        Move C_DRNormal to PDFExportOptions.iPageMode
75127>>>>>        Move C_drPDFNormal to PDFExportOptions.iPDFType
75128>>>>>        Move '' to PDFExportOptions.sOwnerPassword
75129>>>>>        Move '' to PDFExportOptions.sUserPassword
75130>>>>>        Move C_DRLow to PDFExportOptions.iImageQuality
75131>>>>>        Move True to PDFExportOptions.bAllPages
75132>>>>>        Move 1 to PDFExportOptions.iPage
75133>>>>>
75133>>>>>        Function_Return PDFExportOptions
75134>>>>>    End_Function
75135>>>>>
75135>>>>>    // Returns defaults for exporting to RTF
75135>>>>>    Function DefaultRTFExportOptions Returns DRRTFExportOptions
75137>>>>>        DRRTFExportOptions RTFExportOptions
75137>>>>>        DRRTFExportOptions RTFExportOptions
75137>>>>>
75137>>>>>        Move True to RTFExportOptions.bAllPages
75138>>>>>        Move 1 to RTFExportOptions.iPage
75139>>>>>
75139>>>>>        Function_Return RTFExportOptions
75140>>>>>    End_Function
75141>>>>>
75141>>>>>    // Returns defaults for exporting to XLS
75141>>>>>    Function DefaultXLSExportOptions Returns DRXLSExportOptions
75143>>>>>        DRXLSExportOptions XLSExportOptions
75143>>>>>        DRXLSExportOptions XLSExportOptions
75143>>>>>
75143>>>>>        Move C_DRXLS2007 to XLSExportOptions.iXLSVersion
75144>>>>>        Move C_DRNoSheets to XLSExportOptions.iNewSheet
75145>>>>>        Move 30 to XLSExportOptions.iColumnWidth
75146>>>>>        Move False to XLSExportOptions.bExportDataOnly
75147>>>>>        Move True to XLSExportOptions.bExportPageSections
75148>>>>>        Move True to XLSExportOptions.bExportReportSections
75149>>>>>        Move True to XLSExportOptions.bExportGroupSections
75150>>>>>        Move True to XLSExportOptions.bAllPages
75151>>>>>        Move False to XLSExportOptions.bExportWithFormatting
75152>>>>>        Move 1 to XLSExportOptions.iPage
75153>>>>>
75153>>>>>        Function_Return XLSExportOptions
75154>>>>>    End_Function
75155>>>>>
75155>>>>>    // Displays the report
75155>>>>>    // Can be sent by developer (and possible augmented) in more advanced situations
75155>>>>>    Procedure DisplayReport
75157>>>>>        Boolean bCancel bComObjectCreated bPreviewContainerIsActive
75157>>>>>        Handle hoPreviewContainer hoClientArea hcPreviewer
75157>>>>>        Integer ePreviewStyle
75157>>>>>        String sReportId sPreviewCaptionLabel
75157>>>>>
75157>>>>>        Send RedirectErrorsToLocalHandler True
75158>>>>>        Send CheckFunctionErrorInfo
75159>>>>>
75159>>>>>        Set pbCanceled to False
75160>>>>>
75160>>>>>        Send OnDisplayReport
75161>>>>>        Get pbCanceled to bCancel // Developer might have canceled the report
75162>>>>>        If (not (bCancel)) Begin
75164>>>>>            Get psReportId to sReportId
75165>>>>>            If (sReportId = "") Begin
75167>>>>>                Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
75168>>>>>>
75168>>>>>                Send RedirectErrorsToLocalHandler False
75169>>>>>                Procedure_Return
75170>>>>>            End
75170>>>>>>
75170>>>>>
75170>>>>>            Get IsComObjectCreated to bComObjectCreated
75171>>>>>            If (bComObjectCreated) Begin
75173>>>>>                Get pePreviewStyle to ePreviewStyle
75174>>>>>                Case Begin
75174>>>>>                    Case (ePreviewStyle = C_DRPREVIEW_MODAL)
75176>>>>>                        Get phoPreviewContainer to hoPreviewContainer
75177>>>>>                        If (hoPreviewContainer <> 0) Begin
75179>>>>>                            Set phoReport of hoPreviewContainer to Self
75180>>>>>                            Get psPreviewCaptionLabel to sPreviewCaptionLabel
75181>>>>>                            If (sPreviewCaptionLabel = "") Begin
75183>>>>>                                Get psReportName to sPreviewCaptionLabel
75184>>>>>                            End
75184>>>>>>
75184>>>>>                            Set Label of hoPreviewContainer to sPreviewCaptionLabel
75185>>>>>                            Send Popup_Modal of hoPreviewContainer
75186>>>>>                        End
75186>>>>>>
75186>>>>>                        Case Break
75187>>>>>                    Case (ePreviewStyle = C_DRPREVIEW_VIEW)
75190>>>>>                    Case (ePreviewStyle = C_DRPREVIEW_TOOLPANEL)
75193>>>>>                    Case (ePreviewStyle = C_DRPREVIEW_DESKTOPVIEW)
75196>>>>>                        Get phoPreviewContainer to hoPreviewContainer
75197>>>>>                        If (hoPreviewContainer = 0) Begin
75199>>>>>                            Get Client_Id to hoClientArea
75200>>>>>                            If (hoClientArea <> 0) Begin
75202>>>>>                                Get phcPreviewer to hcPreviewer
75203>>>>>                                If (hcPreviewer <> 0) Begin
75205>>>>>                                    Get Create of hoClientArea hcPreviewer to hoPreviewContainer
75206>>>>>                                    Set phoReport of hoPreviewContainer to Self
75207>>>>>                                    Get psPreviewCaptionLabel to sPreviewCaptionLabel
75208>>>>>                                    If (sPreviewCaptionLabel = "") Begin
75210>>>>>                                        Get psReportName to sPreviewCaptionLabel
75211>>>>>                                    End
75211>>>>>>
75211>>>>>                                    Set Label of hoPreviewContainer to sPreviewCaptionLabel
75212>>>>>                                    Set phoPreviewContainer to hoPreviewContainer
75213>>>>>                                End
75213>>>>>>
75213>>>>>                            End
75213>>>>>>
75213>>>>>                        End
75213>>>>>>
75213>>>>>                        If (hoPreviewContainer <> 0) Begin
75215>>>>>                            Send DisplayStatusPanel True
75216>>>>>                            Get Active_State of hoPreviewContainer to bPreviewContainerIsActive
75217>>>>>                            If (not (bPreviewContainerIsActive)) Begin
75219>>>>>                                Send Activate_View of hoPreviewContainer
75220>>>>>                            End
75220>>>>>>
75220>>>>>                            Else Begin
75221>>>>>                                Send UpdateViewer of hoPreviewContainer
75222>>>>>                                Send Activate of hoPreviewContainer
75223>>>>>                            End
75223>>>>>>
75223>>>>>                            Send ComReportPreview sReportId
75224>>>>>                            Send DisplayStatusPanel False
75225>>>>>                        End
75225>>>>>>
75225>>>>>                        Case Break
75226>>>>>                    Case (ePreviewStyle = C_DRPREVIEW_EMBEDDED)
75229>>>>>                        Set phoPreviewContainer to 0
75230>>>>>                        Send DisplayStatusPanel True
75231>>>>>                        Send ComReportPreview sReportId
75232>>>>>                        Send DisplayStatusPanel False
75233>>>>>                        Case Break
75234>>>>>                Case End
75234>>>>>            End
75234>>>>>>
75234>>>>>            Else Begin
75235>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
75236>>>>>>
75236>>>>>            End
75236>>>>>>
75236>>>>>        End
75236>>>>>>
75236>>>>>        Send OnPostDisplayReport
75237>>>>>        Send CheckFunctionErrorInfo
75238>>>>>
75238>>>>>        Send RedirectErrorsToLocalHandler False
75239>>>>>    End_Procedure
75240>>>>>
75240>>>>>    // Is called from OnDisplayReport and Add_Focus in DRModalPreview
75240>>>>>    Procedure DisplayStatusPanel Boolean bShow
75242>>>>>        Boolean bShowStatusPanel bIsActive
75242>>>>>        Handle hoStatusPanel
75242>>>>>
75242>>>>>        Get pbShowStatusPanel to bShowStatusPanel
75243>>>>>        If (bShowStatusPanel) Begin
75245>>>>>            Get phoStatusPanel to hoStatusPanel
75246>>>>>            If (hoStatusPanel <> 0) Begin
75248>>>>>                If (bShow) Begin
75250>>>>>                    Get Active_State of hoStatusPanel to bIsActive
75251>>>>>                    If (not (bIsActive)) Begin
75253>>>>>                        Send Popup to hoStatusPanel
75254>>>>>                    End
75254>>>>>>
75254>>>>>                End
75254>>>>>>
75254>>>>>                Else Begin
75255>>>>>                    Send Deactivate of hoStatusPanel Popup_Type
75256>>>>>                End
75256>>>>>>
75256>>>>>            End
75256>>>>>>
75256>>>>>        End
75256>>>>>>
75256>>>>>    End_Procedure
75257>>>>>
75257>>>>>    Function ExportFileNamesSet String sExtension Integer iPageNumber Returns String[]
75259>>>>>        Integer iPages iPage iElement
75259>>>>>        String sCacheFolder sHEXUUID sBaseName
75259>>>>>        String[] sFileNames
75260>>>>>
75260>>>>>        Get ReportsCacheFolder to sCacheFolder
75261>>>>>        Get RandomHexUUID to sHEXUUID
75262>>>>>        Move (sCacheFolder + sHEXUUID) to sBaseName
75263>>>>>
75263>>>>>        Get ReportPageCount to iPages
75264>>>>>        If (iPageNumber > 0 and iPageNumber < iPages) Begin
75266>>>>>            Move (Sformat ("%1-Page%2.%3", sBaseName, iPageNumber, sExtension)) to sFileNames[iElement]
75267>>>>>        End
75267>>>>>>
75267>>>>>        Else Begin
75268>>>>>            For iPage from 1 to iPages
75274>>>>>>
75274>>>>>                Move (Sformat ("%1-Page%2.%3", sBaseName, iPage, sExtension)) to sFileNames[iElement]
75275>>>>>                Increment iElement
75276>>>>>            Loop
75277>>>>>>
75277>>>>>        End
75277>>>>>>
75277>>>>>
75277>>>>>        Function_Return sFileNames
75278>>>>>    End_Function
75279>>>>>
75279>>>>>    // Export the report
75279>>>>>    // Can be sent by developer (and possible augmented) in more advanced situations
75279>>>>>    Procedure ExportReport C_DRExportFormats iExportType String sFileName
75281>>>>>        Boolean bCancel bComObjectCreated
75281>>>>>        String sReportId
75281>>>>>
75281>>>>>        Send RedirectErrorsToLocalHandler True
75282>>>>>        Send CheckFunctionErrorInfo
75283>>>>>
75283>>>>>        Set pbCanceled to False
75284>>>>>
75284>>>>>        Send OnExportReport iExportType sFileName
75285>>>>>        Get pbCanceled to bCancel // Developer might have canceled the report
75286>>>>>        If (not (bCancel)) Begin
75288>>>>>            Get psReportId to sReportId
75289>>>>>            If (sReportId = "") Begin
75291>>>>>                Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
75292>>>>>>
75292>>>>>                Send RedirectErrorsToLocalHandler False
75293>>>>>                Procedure_Return
75294>>>>>            End
75294>>>>>>
75294>>>>>
75294>>>>>            If (sFileName = "") Begin
75296>>>>>                Error DFERR_DATAFLEX_REPORTS C_$DRNoExportFileNameSpecified
75297>>>>>>
75297>>>>>                Send RedirectErrorsToLocalHandler False
75298>>>>>                Procedure_Return
75299>>>>>            End
75299>>>>>>
75299>>>>>
75299>>>>>            If (iExportType <> C_DRImage and iExportType <> C_DRPDF and iExportType <> C_DRCSV and iExportType <> C_DRHTML and iExportType <> C_DRXLS and iExportType <> C_DRRTF) Begin
75301>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRNoValidExportTypeSpecified, iExportType))
75302>>>>>>
75302>>>>>                Send RedirectErrorsToLocalHandler False
75303>>>>>                Procedure_Return
75304>>>>>            End
75304>>>>>>
75304>>>>>
75304>>>>>            Get IsComObjectCreated to bComObjectCreated
75305>>>>>            If (bComObjectCreated) Begin
75307>>>>>                Send DisplayStatusPanel True
75308>>>>>                Send ComReportExport sReportId iExportType sFileName
75309>>>>>                Send DisplayStatusPanel False
75310>>>>>            End
75310>>>>>>
75310>>>>>            Else Begin
75311>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
75312>>>>>>
75312>>>>>            End
75312>>>>>>
75312>>>>>        End
75312>>>>>>
75312>>>>>        Send OnPostExportReport iExportType sFileName
75313>>>>>        Send CheckFunctionErrorInfo
75314>>>>>
75314>>>>>        Send RedirectErrorsToLocalHandler False
75315>>>>>    End_Procedure
75316>>>>>
75316>>>>>
75316>>>>>    // Returns the number of filters defined in the report
75316>>>>>    Function FilterCount String sReportId Returns Integer
75318>>>>>        Integer iFilters
75318>>>>>        Boolean bComObjectCreated
75318>>>>>
75318>>>>>        Send RedirectErrorsToLocalHandler True
75319>>>>>
75319>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
75321>>>>>            Get psReportId to sReportId
75322>>>>>        End
75322>>>>>>
75322>>>>>
75322>>>>>        If (sReportId <> "") Begin
75324>>>>>            Get IsComObjectCreated to bComObjectCreated
75325>>>>>            If (bComObjectCreated) Begin
75327>>>>>                Get ComRecordFilterCount sReportId to iFilters
75328>>>>>            End
75328>>>>>>
75328>>>>>            Else Begin
75329>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
75330>>>>>>
75330>>>>>            End
75330>>>>>>
75330>>>>>        End
75330>>>>>>
75330>>>>>        Else Begin
75331>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
75332>>>>>>
75332>>>>>        End
75332>>>>>>
75332>>>>>
75332>>>>>        Send RedirectErrorsToLocalHandler False
75333>>>>>
75333>>>>>        Function_Return iFilters
75334>>>>>    End_Function
75335>>>>>
75335>>>>>    // Functionality is the same as in FilterCount when the report does not contain sub-reports
75335>>>>>    // If the report contains sub-reports these are consulted to find out if there are filters
75335>>>>>    // defined there.
75335>>>>>    Function FiltersDefined String sReportId Returns Boolean
75337>>>>>        Integer iFilters iSubReports iSubReport
75337>>>>>        String sSubReportId
75337>>>>>        Boolean bFiltersDefined
75337>>>>>
75337>>>>>        Get FilterCount sReportId to iFilters
75338>>>>>        If (iFilters > 0) Begin
75340>>>>>            Move True to bFiltersDefined
75341>>>>>        End
75341>>>>>>
75341>>>>>        Else Begin
75342>>>>>            Get SubReportCount sReportId to iSubReports
75343>>>>>            Decrement iSubReports
75344>>>>>            For iSubReport from 0 to iSubReports
75350>>>>>>
75350>>>>>                Get SubReportId sReportId iSubReport to sSubReportId
75351>>>>>                Get FiltersDefined sSubReportId to bFiltersDefined
75352>>>>>                If (bFiltersDefined) ;                    Break
75355>>>>>            Loop
75356>>>>>>
75356>>>>>        End
75356>>>>>>
75356>>>>>
75356>>>>>        Function_Return bFiltersDefined
75357>>>>>    End_Function
75358>>>>>
75358>>>>>    // Returns a text string which contains information about the filters defined in the report
75358>>>>>    Function FilterInformation String sReportId Returns String
75360>>>>>        Integer iFilters iFilter eFilterOperator
75360>>>>>        String sFilterField sFilterValue sInfo
75360>>>>>        
75360>>>>>        Get FilterCount sReportId to iFilters
75361>>>>>        If (iFilters > 0) Begin
75363>>>>>            Decrement iFilters
75364>>>>>            For iFilter from 0 to iFilters
75370>>>>>>
75370>>>>>                Get psFilterField sReportId iFilter to sFilterField
75371>>>>>                Move (Mid (sFilterField, Length(sFilterField) - 2, 2)) to sFilterField
75372>>>>>                If (sInfo <> '') Begin
75374>>>>>                    Move (sInfo + "+Chr(10)+") to sInfo
75375>>>>>                End
75375>>>>>>
75375>>>>>                Get peFilterOperator sReportId iFilter to eFilterOperator
75376>>>>>                Get psFilterValue sReportId iFilter to sFilterValue
75377>>>>>                Move (sInfo + Sformat ("'%1 %2 %3'", sFilterField, Mid ("= <>> >=< <=", 2, eFilterOperator - 1 * 2 + 1), sFilterValue)) to sInfo
75378>>>>>            Loop
75379>>>>>>
75379>>>>>        End
75379>>>>>>
75379>>>>>        
75379>>>>>        Function_Return sInfo
75380>>>>>    End_Function
75381>>>>>
75381>>>>>    // Returns the number of functions defined in the report
75381>>>>>    Function FunctionCount String sReportId Returns Integer
75383>>>>>        Integer iFunctions
75383>>>>>        Boolean bComObjectCreated
75383>>>>>
75383>>>>>        Send RedirectErrorsToLocalHandler True
75384>>>>>
75384>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
75386>>>>>            Get psReportId to sReportId
75387>>>>>        End
75387>>>>>>
75387>>>>>
75387>>>>>        If (sReportId <> "") Begin
75389>>>>>            Get IsComObjectCreated to bComObjectCreated
75390>>>>>            If (bComObjectCreated) Begin
75392>>>>>                Get ComFunctionCount sReportId to iFunctions
75393>>>>>            End
75393>>>>>>
75393>>>>>            Else Begin
75394>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
75395>>>>>>
75395>>>>>            End
75395>>>>>>
75395>>>>>        End
75395>>>>>>
75395>>>>>        Else Begin
75396>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
75397>>>>>>
75397>>>>>        End
75397>>>>>>
75397>>>>>
75397>>>>>        Send RedirectErrorsToLocalHandler False
75398>>>>>
75398>>>>>        Function_Return iFunctions
75399>>>>>    End_Function
75400>>>>>
75400>>>>>    // Returns the function ID based on the passed functionname. The test is case insensitive.
75400>>>>>    // Returns less than 0 when no function with the passed name can be found
75400>>>>>    Function FunctionIdByName String sReportId String sFunctionName Returns Integer
75402>>>>>        Integer iFunctionId
75402>>>>>        Boolean bComObjectCreated
75402>>>>>
75402>>>>>        Send RedirectErrorsToLocalHandler True
75403>>>>>
75403>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
75405>>>>>            Get psReportId to sReportId
75406>>>>>        End
75406>>>>>>
75406>>>>>
75406>>>>>        If (sReportId <> "") Begin
75408>>>>>            Get IsComObjectCreated to bComObjectCreated
75409>>>>>            If (bComObjectCreated) Begin
75411>>>>>                Get ComFunctionByName sReportId sFunctionName to iFunctionId
75412>>>>>            End
75412>>>>>>
75412>>>>>            Else Begin
75413>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
75414>>>>>>
75414>>>>>            End
75414>>>>>>
75414>>>>>        End
75414>>>>>>
75414>>>>>
75414>>>>>        Send RedirectErrorsToLocalHandler False
75415>>>>>
75415>>>>>        Function_Return iFunctionId
75416>>>>>    End_Function
75417>>>>>
75417>>>>>    // Returns the length of the contents of a function in the report
75417>>>>>    Function FunctionLength String sFunction Integer iFunction Returns Integer
75419>>>>>        Integer iFunctionLength
75419>>>>>        String sReportId
75419>>>>>        Boolean bComObjectCreated
75419>>>>>
75419>>>>>        Send RedirectErrorsToLocalHandler True
75420>>>>>
75420>>>>>        Get psReportId to sReportId
75421>>>>>        If (sReportId <> "") Begin
75423>>>>>            Get IsComObjectCreated to bComObjectCreated
75424>>>>>            If (bComObjectCreated) Begin
75426>>>>>                Get ComFunctionLength sReportId sFunction iFunction to iFunctionLength
75427>>>>>            End
75427>>>>>>
75427>>>>>            Else Begin
75428>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
75429>>>>>>
75429>>>>>            End
75429>>>>>>
75429>>>>>        End
75429>>>>>>
75429>>>>>        Else Begin
75430>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
75431>>>>>>
75431>>>>>        End
75431>>>>>>
75431>>>>>
75431>>>>>        Send RedirectErrorsToLocalHandler False
75432>>>>>
75432>>>>>        Function_Return iFunctionLength
75433>>>>>    End_Function
75434>>>>>
75434>>>>>    // Returns the data type of the contents of a function in the report
75434>>>>>    Function FunctionType String sFunction Integer iIndex Returns Integer
75436>>>>>        Integer iFunctionType
75436>>>>>        String sReportId
75436>>>>>        Boolean bComObjectCreated
75436>>>>>
75436>>>>>        Send RedirectErrorsToLocalHandler True
75437>>>>>
75437>>>>>        Get psReportId to sReportId
75438>>>>>        If (sReportId <> "") Begin
75440>>>>>            Get IsComObjectCreated to bComObjectCreated
75441>>>>>            If (bComObjectCreated) Begin
75443>>>>>                Get ComFunctionType sReportId sFunction iIndex to iFunctionType
75444>>>>>            End
75444>>>>>>
75444>>>>>            Else Begin
75445>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
75446>>>>>>
75446>>>>>            End
75446>>>>>>
75446>>>>>        End
75446>>>>>>
75446>>>>>        Else Begin
75447>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
75448>>>>>>
75448>>>>>        End
75448>>>>>>
75448>>>>>
75448>>>>>        Send RedirectErrorsToLocalHandler False
75449>>>>>
75449>>>>>        Function_Return iFunctionType
75450>>>>>    End_Function
75451>>>>>
75451>>>>>
75451>>>>>    // this function exports the report to PDF with default options and returns the generated filename for
75451>>>>>    // further processing
75451>>>>>    Function GenerateReport Returns String
75453>>>>>        String sReportId sFile
75453>>>>>        DRPDFExportOptions PDFExportOptions
75453>>>>>        DRPDFExportOptions PDFExportOptions
75453>>>>>        Boolean bCanceled
75453>>>>>
75453>>>>>        Get OpenReport to sReportId
75454>>>>>        If (sReportId <> "") Begin
75456>>>>>            Get DefaultPDFExportOptions to PDFExportOptions
75457>>>>>            Get OnSetPDFExportOptions PDFExportOptions to PDFExportOptions
75458>>>>>            Set pPDFExportOptions to PDFExportOptions
75459>>>>>            Get ReportCacheFileName ".pdf" to sFile
75460>>>>>            If (sFile <> "") Begin
75462>>>>>                Send ExportReport C_DRPDF sFile
75463>>>>>            End
75463>>>>>>
75463>>>>>
75463>>>>>            // see if report ran ok, if not return empty path
75463>>>>>            Get pbCanceled to bCanceled
75464>>>>>            If bCanceled Begin
75466>>>>>                Move "" to sFile
75467>>>>>            End
75467>>>>>>
75467>>>>>
75467>>>>>            Send CloseReport sReportId
75468>>>>>        End
75468>>>>>>
75468>>>>>
75468>>>>>        Function_Return sFile
75469>>>>>    End_Function
75470>>>>>
75470>>>>>
75470>>>>>    Function HTMLExportOptionsCorrect DRHTMLExportOptions HTMLExportOptionsData Returns Boolean
75472>>>>>        Integer iPageCount
75472>>>>>
75472>>>>>        If (not (HTMLExportOptionsData.bMultiPage)) Begin
75474>>>>>            Get ReportPageCount to iPageCount
75475>>>>>            If (HTMLExportOptionsData.iPage < 1 or HTMLExportOptionsData.iPage > iPageCount) Begin
75477>>>>>                Error DFERR_DATAFLEX_REPORTS C_$DRHTMLExportInvalidPageNumber
75478>>>>>>
75478>>>>>                Function_Return False
75479>>>>>            End
75479>>>>>>
75479>>>>>        End
75479>>>>>>
75479>>>>>
75479>>>>>        Function_Return True
75480>>>>>    End_Function
75481>>>>>
75481>>>>>
75481>>>>>    // This routine initialises the export options and passes them as blank to the report engine
75481>>>>>    // in case developers forget to set the value
75481>>>>>    Procedure InitExportStructures
75483>>>>>        DRPDFExportOptions PDFExportOptions
75483>>>>>        DRPDFExportOptions PDFExportOptions
75483>>>>>        DRCSVExportOptions CSVExportOptions
75483>>>>>        DRCSVExportOptions CSVExportOptions
75483>>>>>        DRImageExportOptions ImageExportOptions
75483>>>>>        DRImageExportOptions ImageExportOptions
75483>>>>>        DRXLSExportOptions XLSExportOptions
75483>>>>>        DRXLSExportOptions XLSExportOptions
75483>>>>>        DRHTMLExportOptions HTMLExportOptions
75483>>>>>        DRHTMLExportOptions HTMLExportOptions
75483>>>>>        DRRTFExportOptions RTFExportOptions
75483>>>>>        DRRTFExportOptions RTFExportOptions
75483>>>>>
75483>>>>>        Get DefaultPDFExportOptions to PDFExportOptions
75484>>>>>        Get DefaultCSVExportOptions to CSVExportOptions
75485>>>>>        Get DefaultImageExportOptions to ImageExportOptions
75486>>>>>        Get DefaultXLSExportOptions to XLSExportOptions
75487>>>>>        Get DefaultHTMLExportOptions to HTMLExportOptions
75488>>>>>        Get DefaultRTFExportOptions to RTFExportOptions
75489>>>>>
75489>>>>>        Set pPDFExportOptions to PDFExportOptions
75490>>>>>        Set pCSVExportOptions to CSVExportOptions
75491>>>>>        Set pImageExportOptions to ImageExportOptions
75492>>>>>        Set pXLSExportOptions to XLSExportOptions
75493>>>>>        Set pHTMLExportOptions to HTMLExportOptions
75494>>>>>        Set pRTFExportOptions to RTFExportOptions
75495>>>>>    End_Procedure
75496>>>>>
75496>>>>>    // This method will be called during the auto relocation of tables in the report
75496>>>>>    // The default behaviour of this function is to return true when the extension
75496>>>>>    // of the filename is equal to .cfg.
75496>>>>>    // When you used a filelist that does not end on .cfg you need to override
75496>>>>>    // this method and return true.
75496>>>>>    Function IsFileList String sFileName Returns Boolean
75498>>>>>        If (Lowercase (Right (sFileName, 4)) = ".cfg") Begin
75500>>>>>            Function_Return True
75501>>>>>        End
75501>>>>>>
75501>>>>>
75501>>>>>        Function_Return False
75502>>>>>    End_Function
75503>>>>>
75503>>>>>    Function LanguageName Integer iLanguage Returns String
75505>>>>>        String sLanguage
75505>>>>>
75505>>>>>        Case Begin
75505>>>>>            Case (iLanguage = LANG_NEUTRAL)
75507>>>>>                Move "Default" to sLanguage
75508>>>>>                Case Break
75509>>>>>            Case (iLanguage = LANG_AFRIKAANS)
75512>>>>>                Move "Afrikaans" to sLanguage
75513>>>>>                Case Break
75514>>>>>            Case (iLanguage = LANG_ALBANIAN)
75517>>>>>                Move "Albanian" to sLanguage
75518>>>>>                Case Break
75519>>>>>            Case (iLanguage = LANG_ARABIC)
75522>>>>>                Move "Arabic" to sLanguage
75523>>>>>                Case Break
75524>>>>>            Case (iLanguage = LANG_ARMENIAN)
75527>>>>>                Move "Armenian" to sLanguage
75528>>>>>                Case Break
75529>>>>>            Case (iLanguage = LANG_ASSAMESE)
75532>>>>>                Move "Assamese" to sLanguage
75533>>>>>                Case Break
75534>>>>>            Case (iLanguage = LANG_AZERI)
75537>>>>>                Move "Azeri" to sLanguage
75538>>>>>                Case Break
75539>>>>>            Case (iLanguage = LANG_BASQUE)
75542>>>>>                Move "Basque" to sLanguage
75543>>>>>                Case Break
75544>>>>>            Case (iLanguage = LANG_BELARUSIAN)
75547>>>>>                Move "Belarusian" to sLanguage
75548>>>>>                Case Break
75549>>>>>            Case (iLanguage = LANG_BENGALI)
75552>>>>>                Move "Bengali" to sLanguage
75553>>>>>                Case Break
75554>>>>>            Case (iLanguage = LANG_BULGARIAN)
75557>>>>>                Move "Bulgarian" to sLanguage
75558>>>>>                Case Break
75559>>>>>            Case (iLanguage = LANG_CATALAN)
75562>>>>>                Move "Catalan" to sLanguage
75563>>>>>                Case Break
75564>>>>>            Case (iLanguage = LANG_CHINESE)
75567>>>>>                Move "Chinese" to sLanguage
75568>>>>>                Case Break
75569>>>>>            Case (iLanguage = LANG_CROATIAN)
75572>>>>>                Move "Croatian" to sLanguage
75573>>>>>                Case Break
75574>>>>>            Case (iLanguage = LANG_CZECH)
75577>>>>>                Move "Czech" to sLanguage
75578>>>>>                Case Break
75579>>>>>            Case (iLanguage = LANG_DANISH)
75582>>>>>                Move "Danish" to sLanguage
75583>>>>>                Case Break
75584>>>>>            Case (iLanguage = LANG_DIVEHI)
75587>>>>>                Move "Divehi" to sLanguage
75588>>>>>                Case Break
75589>>>>>            Case (iLanguage = LANG_DUTCH)
75592>>>>>                Move "Dutch" to sLanguage
75593>>>>>                Case Break
75594>>>>>            Case (iLanguage = LANG_ENGLISH)
75597>>>>>                Move "English" to sLanguage
75598>>>>>                Case Break
75599>>>>>            Case (iLanguage = LANG_ESTONIAN)
75602>>>>>                Move "Estonian" to sLanguage
75603>>>>>                Case Break
75604>>>>>            Case (iLanguage = LANG_FAEROESE)
75607>>>>>                Move "Faeroese" to sLanguage
75608>>>>>                Case Break
75609>>>>>            Case (iLanguage = LANG_FARSI)
75612>>>>>                Move "Farsi" to sLanguage
75613>>>>>                Case Break
75614>>>>>            Case (iLanguage = LANG_FINNISH)
75617>>>>>                Move "Finnish" to sLanguage
75618>>>>>                Case Break
75619>>>>>            Case (iLanguage = LANG_FRENCH)
75622>>>>>                Move "French" to sLanguage
75623>>>>>                Case Break
75624>>>>>            Case (iLanguage = LANG_GALICIAN)
75627>>>>>                Move "Galician" to sLanguage
75628>>>>>                Case Break
75629>>>>>            Case (iLanguage = LANG_GEORGIAN)
75632>>>>>                Move "Georgian" to sLanguage
75633>>>>>                Case Break
75634>>>>>            Case (iLanguage = LANG_GERMAN)
75637>>>>>                Move "German" to sLanguage
75638>>>>>                Case Break
75639>>>>>            Case (iLanguage = LANG_GREEK)
75642>>>>>                Move "Greek" to sLanguage
75643>>>>>                Case Break
75644>>>>>            Case (iLanguage = LANG_GUJARATI)
75647>>>>>                Move "Gujarati" to sLanguage
75648>>>>>                Case Break
75649>>>>>            Case (iLanguage = LANG_HEBREW)
75652>>>>>                Move "Hebrew" to sLanguage
75653>>>>>                Case Break
75654>>>>>            Case (iLanguage = LANG_HINDI)
75657>>>>>                Move "Hindi" to sLanguage
75658>>>>>                Case Break
75659>>>>>            Case (iLanguage = LANG_HUNGARIAN)
75662>>>>>                Move "Hungarian" to sLanguage
75663>>>>>                Case Break
75664>>>>>            Case (iLanguage = LANG_ICELANDIC)
75667>>>>>                Move "Icelandic" to sLanguage
75668>>>>>                Case Break
75669>>>>>            Case (iLanguage = LANG_INDONESIAN)
75672>>>>>                Move "Indonesian" to sLanguage
75673>>>>>                Case Break
75674>>>>>            Case (iLanguage = LANG_ITALIAN)
75677>>>>>                Move "Italian" to sLanguage
75678>>>>>                Case Break
75679>>>>>            Case (iLanguage = LANG_JAPANESE)
75682>>>>>                Move "Japanese" to sLanguage
75683>>>>>                Case Break
75684>>>>>            Case (iLanguage = LANG_KANNADA)
75687>>>>>                Move "Kannada" to sLanguage
75688>>>>>                Case Break
75689>>>>>            Case (iLanguage = LANG_KASHMIRI)
75692>>>>>                Move "Kashmiri" to sLanguage
75693>>>>>                Case Break
75694>>>>>            Case (iLanguage = LANG_KAZAK)
75697>>>>>                Move "Kazak" to sLanguage
75698>>>>>                Case Break
75699>>>>>            Case (iLanguage = LANG_KONKANI)
75702>>>>>                Move "Konkani" to sLanguage
75703>>>>>                Case Break
75704>>>>>            Case (iLanguage = LANG_KOREAN)
75707>>>>>                Move "Korean" to sLanguage
75708>>>>>                Case Break
75709>>>>>            Case (iLanguage = LANG_KYRGYZ)
75712>>>>>                Move "Kyrgyz" to sLanguage
75713>>>>>                Case Break
75714>>>>>            Case (iLanguage = LANG_LATVIAN)
75717>>>>>                Move "Latvian" to sLanguage
75718>>>>>                Case Break
75719>>>>>            Case (iLanguage = LANG_LITHUANIAN)
75722>>>>>                Move "Lithuanian" to sLanguage
75723>>>>>                Case Break
75724>>>>>            Case (iLanguage = LANG_MACEDONIAN)
75727>>>>>                Move "Macedonian" to sLanguage
75728>>>>>                Case Break
75729>>>>>            Case (iLanguage = LANG_MALAY)
75732>>>>>                Move "Malay" to sLanguage
75733>>>>>                Case Break
75734>>>>>            Case (iLanguage = LANG_MALAYALAM)
75737>>>>>                Move "Malayalam" to sLanguage
75738>>>>>                Case Break
75739>>>>>            Case (iLanguage = LANG_MANIPURI)
75742>>>>>                Move "Manipuri" to sLanguage
75743>>>>>                Case Break
75744>>>>>            Case (iLanguage = LANG_MARATHI)
75747>>>>>                Move "Marathi" to sLanguage
75748>>>>>                Case Break
75749>>>>>            Case (iLanguage = LANG_MONGOLIAN)
75752>>>>>                Move "Mongolian" to sLanguage
75753>>>>>                Case Break
75754>>>>>            Case (iLanguage = LANG_NEPALI)
75757>>>>>                Move "Nepali" to sLanguage
75758>>>>>                Case Break
75759>>>>>            Case (iLanguage = LANG_NORWEGIAN)
75762>>>>>                Move "Norwegian" to sLanguage
75763>>>>>                Case Break
75764>>>>>            Case (iLanguage = LANG_ORIYA)
75767>>>>>                Move "Oriya" to sLanguage
75768>>>>>                Case Break
75769>>>>>            Case (iLanguage = LANG_POLISH)
75772>>>>>                Move "Polish" to sLanguage
75773>>>>>                Case Break
75774>>>>>            Case (iLanguage = LANG_PORTUGUESE)
75777>>>>>                Move "Portuguese" to sLanguage
75778>>>>>                Case Break
75779>>>>>            Case (iLanguage = LANG_PUNJABI)
75782>>>>>                Move "Punjabi" to sLanguage
75783>>>>>                Case Break
75784>>>>>            Case (iLanguage = LANG_ROMANIAN)
75787>>>>>                Move "Romanian" to sLanguage
75788>>>>>                Case Break
75789>>>>>            Case (iLanguage = LANG_RUSSIAN)
75792>>>>>                Move "Russian" to sLanguage
75793>>>>>                Case Break
75794>>>>>            Case (iLanguage = LANG_SANSKRIT)
75797>>>>>                Move "Sanskrit" to sLanguage
75798>>>>>                Case Break
75799>>>>>            Case (iLanguage = LANG_SERBIAN)
75802>>>>>                Move "Serbian" to sLanguage
75803>>>>>                Case Break
75804>>>>>            Case (iLanguage = LANG_SINDHI)
75807>>>>>                Move "Sindhi" to sLanguage
75808>>>>>                Case Break
75809>>>>>            Case (iLanguage = LANG_SLOVAK)
75812>>>>>                Move "Slovak" to sLanguage
75813>>>>>                Case Break
75814>>>>>            Case (iLanguage = LANG_SLOVENIAN)
75817>>>>>                Move "Slovenian" to sLanguage
75818>>>>>                Case Break
75819>>>>>            Case (iLanguage = LANG_SPANISH)
75822>>>>>                Move "Spanish" to sLanguage
75823>>>>>                Case Break
75824>>>>>            Case (iLanguage = LANG_SWAHILI)
75827>>>>>                Move "Swahili" to sLanguage
75828>>>>>                Case Break
75829>>>>>            Case (iLanguage = LANG_SWEDISH)
75832>>>>>                Move "Swedish" to sLanguage
75833>>>>>                Case Break
75834>>>>>            Case (iLanguage = LANG_SYRIAC)
75837>>>>>                Move "Syriac" to sLanguage
75838>>>>>                Case Break
75839>>>>>            Case (iLanguage = LANG_TAMIL)
75842>>>>>                Move "Tamil" to sLanguage
75843>>>>>                Case Break
75844>>>>>            Case (iLanguage = LANG_TATAR)
75847>>>>>                Move "Tatar" to sLanguage
75848>>>>>                Case Break
75849>>>>>            Case (iLanguage = LANG_TELUGU)
75852>>>>>                Move "Telugu" to sLanguage
75853>>>>>                Case Break
75854>>>>>            Case (iLanguage = LANG_THAI)
75857>>>>>                Move "Thai" to sLanguage
75858>>>>>                Case Break
75859>>>>>            Case (iLanguage = LANG_TURKISH)
75862>>>>>                Move "Turkish" to sLanguage
75863>>>>>                Case Break
75864>>>>>            Case (iLanguage = LANG_UKRAINIAN)
75867>>>>>                Move "Ukrainian" to sLanguage
75868>>>>>                Case Break
75869>>>>>            Case (iLanguage = LANG_URDU)
75872>>>>>                Move "Urdu" to sLanguage
75873>>>>>                Case Break
75874>>>>>            Case (iLanguage = LANG_UZBEK)
75877>>>>>                Move "Uzbek" to sLanguage
75878>>>>>                Case Break
75879>>>>>            Case (iLanguage = LANG_VIETNAMESE)
75882>>>>>                Move "Vietnamese" to sLanguage
75883>>>>>                Case Break
75884>>>>>            Case Else
75884>>>>>                Move "Unknown" to sLanguage
75885>>>>>                Case Break
75886>>>>>        Case End
75886>>>>>
75886>>>>>        Function_Return sLanguage
75887>>>>>    End_Function
75888>>>>>
75888>>>>>    Function LanguageNumber String sLanguage Returns Integer
75890>>>>>        Integer iLanguage
75890>>>>>
75890>>>>>        Case Begin
75890>>>>>            Case (sLanguage = "Default")
75892>>>>>                Move LANG_NEUTRAL to iLanguage
75893>>>>>                Case Break
75894>>>>>            Case (sLanguage = "Afrikaans")
75897>>>>>                Move LANG_AFRIKAANS to iLanguage
75898>>>>>                Case Break
75899>>>>>            Case (sLanguage = "Albanian")
75902>>>>>                Move LANG_ALBANIAN to iLanguage
75903>>>>>                Case Break
75904>>>>>            Case (sLanguage = "Arabic")
75907>>>>>                Move LANG_ARABIC to iLanguage
75908>>>>>                Case Break
75909>>>>>            Case (sLanguage = "Armenian")
75912>>>>>                Move LANG_ARMENIAN to iLanguage
75913>>>>>                Case Break
75914>>>>>            Case (sLanguage = "Assamese")
75917>>>>>                Move LANG_ASSAMESE to iLanguage
75918>>>>>                Case Break
75919>>>>>            Case (sLanguage = "Azeri")
75922>>>>>                Move LANG_AZERI to iLanguage
75923>>>>>                Case Break
75924>>>>>            Case (sLanguage = "Basque")
75927>>>>>                Move LANG_BASQUE to iLanguage
75928>>>>>                Case Break
75929>>>>>            Case (sLanguage = "Belarusian")
75932>>>>>                Move LANG_BELARUSIAN to iLanguage
75933>>>>>                Case Break
75934>>>>>            Case (sLanguage = "Bengali")
75937>>>>>                Move LANG_BENGALI to iLanguage
75938>>>>>                Case Break
75939>>>>>            Case (sLanguage = "Bulgarian")
75942>>>>>                Move LANG_BULGARIAN to iLanguage
75943>>>>>                Case Break
75944>>>>>            Case (sLanguage = "Catalan")
75947>>>>>                Move LANG_CATALAN to iLanguage
75948>>>>>                Case Break
75949>>>>>            Case (sLanguage = "Chinese")
75952>>>>>                Move LANG_CHINESE to iLanguage
75953>>>>>                Case Break
75954>>>>>            Case (sLanguage = "Croatian")
75957>>>>>                Move LANG_CROATIAN to iLanguage
75958>>>>>                Case Break
75959>>>>>            Case (sLanguage = "Czech")
75962>>>>>                Move LANG_CZECH to iLanguage
75963>>>>>                Case Break
75964>>>>>            Case (sLanguage = "Danish")
75967>>>>>                Move LANG_DANISH to iLanguage
75968>>>>>                Case Break
75969>>>>>            Case (sLanguage = "Divehi")
75972>>>>>                Move LANG_DIVEHI to iLanguage
75973>>>>>                Case Break
75974>>>>>            Case (sLanguage = "Dutch")
75977>>>>>                Move LANG_DUTCH to iLanguage
75978>>>>>                Case Break
75979>>>>>            Case (sLanguage = "English")
75982>>>>>                Move LANG_ENGLISH to iLanguage
75983>>>>>                Case Break
75984>>>>>            Case (sLanguage = "Estonian")
75987>>>>>                Move LANG_ESTONIAN to iLanguage
75988>>>>>                Case Break
75989>>>>>            Case (sLanguage = "Faeroese")
75992>>>>>                Move LANG_FAEROESE to iLanguage
75993>>>>>                Case Break
75994>>>>>            Case (sLanguage = "Farsi")
75997>>>>>                Move LANG_FARSI to iLanguage
75998>>>>>                Case Break
75999>>>>>            Case (sLanguage = "Finnish")
76002>>>>>                Move LANG_FINNISH to iLanguage
76003>>>>>                Case Break
76004>>>>>            Case (sLanguage = "French")
76007>>>>>                Move LANG_FRENCH to iLanguage
76008>>>>>                Case Break
76009>>>>>            Case (sLanguage = "Galician")
76012>>>>>                Move LANG_GALICIAN to iLanguage
76013>>>>>                Case Break
76014>>>>>            Case (sLanguage = "Georgian")
76017>>>>>                Move LANG_GEORGIAN to iLanguage
76018>>>>>                Case Break
76019>>>>>            Case (sLanguage = "German")
76022>>>>>                Move LANG_GERMAN to iLanguage
76023>>>>>                Case Break
76024>>>>>            Case (sLanguage = "Greek")
76027>>>>>                Move LANG_GREEK to iLanguage
76028>>>>>                Case Break
76029>>>>>            Case (sLanguage = "Gujarati")
76032>>>>>                Move LANG_GUJARATI to iLanguage
76033>>>>>                Case Break
76034>>>>>            Case (sLanguage = "Hebrew")
76037>>>>>                Move LANG_HEBREW to iLanguage
76038>>>>>                Case Break
76039>>>>>            Case (sLanguage = "Hindi")
76042>>>>>                Move LANG_HINDI to iLanguage
76043>>>>>                Case Break
76044>>>>>            Case (sLanguage = "Hungarian")
76047>>>>>                Move LANG_HUNGARIAN to iLanguage
76048>>>>>                Case Break
76049>>>>>            Case (sLanguage = "Icelandic")
76052>>>>>                Move LANG_ICELANDIC to iLanguage
76053>>>>>                Case Break
76054>>>>>            Case (sLanguage = "Indonesian")
76057>>>>>                Move LANG_INDONESIAN to iLanguage
76058>>>>>                Case Break
76059>>>>>            Case (sLanguage = "Italian")
76062>>>>>                Move LANG_ITALIAN to iLanguage
76063>>>>>                Case Break
76064>>>>>            Case (sLanguage = "Japanese")
76067>>>>>                Move LANG_JAPANESE to iLanguage
76068>>>>>                Case Break
76069>>>>>            Case (sLanguage = "Kannada")
76072>>>>>                Move LANG_KANNADA to iLanguage
76073>>>>>                Case Break
76074>>>>>            Case (sLanguage = "Kashmiri")
76077>>>>>                Move LANG_KASHMIRI to iLanguage
76078>>>>>                Case Break
76079>>>>>            Case (sLanguage = "Kazak")
76082>>>>>                Move LANG_KAZAK to iLanguage
76083>>>>>                Case Break
76084>>>>>            Case (sLanguage = "Konkani")
76087>>>>>                Move LANG_KONKANI to iLanguage
76088>>>>>                Case Break
76089>>>>>            Case (sLanguage = "Korean")
76092>>>>>                Move LANG_KOREAN to iLanguage
76093>>>>>                Case Break
76094>>>>>            Case (sLanguage = "Kyrgyz")
76097>>>>>                Move LANG_KYRGYZ to iLanguage
76098>>>>>                Case Break
76099>>>>>            Case (sLanguage = "Latvian")
76102>>>>>                Move LANG_LATVIAN to iLanguage
76103>>>>>                Case Break
76104>>>>>            Case (sLanguage = "Lithuanian")
76107>>>>>                Move LANG_LITHUANIAN to iLanguage
76108>>>>>                Case Break
76109>>>>>            Case (sLanguage = "Macedonian")
76112>>>>>                Move LANG_MACEDONIAN to iLanguage
76113>>>>>                Case Break
76114>>>>>            Case (sLanguage = "Malay")
76117>>>>>                Move LANG_MALAY to iLanguage
76118>>>>>                Case Break
76119>>>>>            Case (sLanguage = "Malayalam")
76122>>>>>                Move LANG_MALAYALAM to iLanguage
76123>>>>>                Case Break
76124>>>>>            Case (sLanguage = "Manipuri")
76127>>>>>                Move LANG_MANIPURI to iLanguage
76128>>>>>                Case Break
76129>>>>>            Case (sLanguage = "Marathi")
76132>>>>>                Move LANG_MARATHI to iLanguage
76133>>>>>                Case Break
76134>>>>>            Case (sLanguage = "Mongolian")
76137>>>>>                Move LANG_MONGOLIAN to iLanguage
76138>>>>>                Case Break
76139>>>>>            Case (sLanguage = "Nepali")
76142>>>>>                Move LANG_NEPALI to iLanguage
76143>>>>>                Case Break
76144>>>>>            Case (sLanguage = "Norwegian")
76147>>>>>                Move LANG_NORWEGIAN to iLanguage
76148>>>>>                Case Break
76149>>>>>            Case (sLanguage = "Oriya")
76152>>>>>                Move LANG_ORIYA to iLanguage
76153>>>>>                Case Break
76154>>>>>            Case (sLanguage = "Polish")
76157>>>>>                Move LANG_POLISH to iLanguage
76158>>>>>                Case Break
76159>>>>>            Case (sLanguage = "Portuguese")
76162>>>>>                Move LANG_PORTUGUESE to iLanguage
76163>>>>>                Case Break
76164>>>>>            Case (sLanguage = "Punjabi")
76167>>>>>                Move LANG_PUNJABI to iLanguage
76168>>>>>                Case Break
76169>>>>>            Case (sLanguage = "Romanian")
76172>>>>>                Move LANG_ROMANIAN to iLanguage
76173>>>>>                Case Break
76174>>>>>            Case (sLanguage = "Russian")
76177>>>>>                Move LANG_RUSSIAN to iLanguage
76178>>>>>                Case Break
76179>>>>>            Case (sLanguage = "Sanskrit")
76182>>>>>                Move LANG_SANSKRIT to iLanguage
76183>>>>>                Case Break
76184>>>>>            Case (sLanguage = "Serbian")
76187>>>>>                Move LANG_SERBIAN to iLanguage
76188>>>>>                Case Break
76189>>>>>            Case (sLanguage = "Sindhi")
76192>>>>>                Move LANG_SINDHI to iLanguage
76193>>>>>                Case Break
76194>>>>>            Case (sLanguage = "Slovak")
76197>>>>>                Move LANG_SLOVAK to iLanguage
76198>>>>>                Case Break
76199>>>>>            Case (sLanguage = "Slovenian")
76202>>>>>                Move LANG_SLOVENIAN to iLanguage
76203>>>>>                Case Break
76204>>>>>            Case (sLanguage = "Spanish")
76207>>>>>                Move LANG_SPANISH to iLanguage
76208>>>>>                Case Break
76209>>>>>            Case (sLanguage = "Swahili")
76212>>>>>                Move LANG_SWAHILI to iLanguage
76213>>>>>                Case Break
76214>>>>>            Case (sLanguage = "Swedish")
76217>>>>>                Move LANG_SWEDISH to iLanguage
76218>>>>>                Case Break
76219>>>>>            Case (sLanguage = "Syriac")
76222>>>>>                Move LANG_SYRIAC to iLanguage
76223>>>>>                Case Break
76224>>>>>            Case (sLanguage = "Tamil")
76227>>>>>                Move LANG_TAMIL to iLanguage
76228>>>>>                Case Break
76229>>>>>            Case (sLanguage = "Tatar")
76232>>>>>                Move LANG_TATAR to iLanguage
76233>>>>>                Case Break
76234>>>>>            Case (sLanguage = "Telugu")
76237>>>>>                Move LANG_TELUGU to iLanguage
76238>>>>>                Case Break
76239>>>>>            Case (sLanguage = "Thai")
76242>>>>>                Move LANG_THAI to iLanguage
76243>>>>>                Case Break
76244>>>>>            Case (sLanguage = "Turkish")
76247>>>>>                Move LANG_TURKISH to iLanguage
76248>>>>>                Case Break
76249>>>>>            Case (sLanguage = "Ukrainian")
76252>>>>>                Move LANG_UKRAINIAN to iLanguage
76253>>>>>                Case Break
76254>>>>>            Case (sLanguage = "Urdu")
76257>>>>>                Move LANG_URDU to iLanguage
76258>>>>>                Case Break
76259>>>>>            Case (sLanguage = "Uzbek")
76262>>>>>                Move LANG_UZBEK to iLanguage
76263>>>>>                Case Break
76264>>>>>            Case (sLanguage = "Vietnamese")
76267>>>>>                Move LANG_VIETNAMESE to iLanguage
76268>>>>>                Case Break
76269>>>>>            Case Else
76269>>>>>                Move -1 to iLanguage
76270>>>>>                Case Break
76271>>>>>        Case End
76271>>>>>
76271>>>>>        Function_Return iLanguage
76272>>>>>    End_Function
76273>>>>>
76273>>>>>    Function OCXVersion Returns String
76275>>>>>        Handle hoVersionInfo
76275>>>>>        String sModuleName sVersionInfo
76275>>>>>        String[] sModuleNames
76276>>>>>        Integer iVoid iModule iModules iLength
76276>>>>>        Integer iVersionMajor iVersionMinor iVersionRelease iVersionBuild
76276>>>>>        Boolean bOk
76276>>>>>
76276>>>>>        Get ProcessModules to sModuleNames
76277>>>>>        Move (SizeOfArray (sModuleNames)) to iModules
76278>>>>>        Decrement iModules
76279>>>>>        For iModule from 0 to iModules
76285>>>>>>
76285>>>>>            Move (Repeat (Character (0), MAX_PATH)) to sModuleName
76286>>>>>            Move (DR_WinAPI_GetLongPathName (AddressOf (sModuleNames[iModule]), AddressOf (sModuleName), MAX_PATH)) to iLength
76287>>>>>            If (sModuleName contains C_DR_OCX_NAME) Begin
76289>>>>>                Get Create (RefClass (cVersionInfo)) to hoVersionInfo
76290>>>>>                Send DoCreate of hoVersionInfo sModuleName
76291>>>>>                Get pbIncluded of hoVersionInfo to bOk
76292>>>>>                If (bOk) Begin
76294>>>>>                    Get piVersionMajor of hoVersionInfo to iVersionMajor
76295>>>>>                    Get piVersionMinor of hoVersionInfo to iVersionMinor
76296>>>>>                    Get piVersionRelease of hoVersionInfo to iVersionRelease
76297>>>>>                    Get piVersionBuild of hoVersionInfo to iVersionBuild
76298>>>>>                    Move (SFormat ("%1.%2.%3.%4", iVersionMajor, iVersionMinor, iVersionRelease, iVersionBuild)) to sVersionInfo
76299>>>>>                End
76299>>>>>>
76299>>>>>                Send Destroy of hoVersionInfo
76300>>>>>                Function_Return sVersionInfo
76301>>>>>            End
76301>>>>>>
76301>>>>>        Loop
76302>>>>>>
76302>>>>>
76302>>>>>        Function_Return ""
76303>>>>>    End_Function
76304>>>>>
76304>>>>>    // Opens a report
76304>>>>>    Function OpenReport Returns String
76306>>>>>        Boolean bOk bCreated bExists bCanceled bAutoLocateDFFiles
76306>>>>>        String sReportId sReport sReportPath sDataPath sSep
76306>>>>>        Handle hoWorkspace
76306>>>>>        Handle hoFocus
76306>>>>>        Integer iPaths iPath
76306>>>>>
76306>>>>>        Send RedirectErrorsToLocalHandler True
76307>>>>>
76307>>>>>        Set pbCanceled to False // default
76308>>>>>
76308>>>>>        // Create com object if not done yet
76308>>>>>        Get IsComObjectCreated to bCreated
76309>>>>>        If (not (bCreated)) Begin
76311>>>>>            Send CreateComObject
76312>>>>>        End
76312>>>>>>
76312>>>>>
76312>>>>>        Move True to bOk
76313>>>>>
76313>>>>>        Get psReportId to sReportId
76314>>>>>        If (sReportId <> "") Begin
76316>>>>>            Send CloseReport sReportId
76317>>>>>            Move '' to sReportId
76318>>>>>        End
76318>>>>>>
76318>>>>>
76318>>>>>        Send OnPreOpenReport
76319>>>>>
76319>>>>>        // Open report
76319>>>>>        Get psReportName to sReport
76320>>>>>
76320>>>>>        Move (SysConf (SYSCONF_DIR_SEPARATOR)) to sSep
76321>>>>>        If (Pos (sSep, sReport) > 0) Begin
76323>>>>>            Move (DoesFileExist (sReport)) to bExists
76324>>>>>        End
76324>>>>>>
76324>>>>>        Else Begin
76325>>>>>            Move False to bExists
76326>>>>>        End
76326>>>>>>
76326>>>>>
76326>>>>>        If (bExists) Begin
76328>>>>>            Move sReport to sReportPath
76329>>>>>        End
76329>>>>>>
76329>>>>>        Else Begin
76330>>>>>            Get psReportPath to sReportPath
76331>>>>>            If (sReportPath <> "") Begin
76333>>>>>                // Make sure path ends with a DirSep before the report name will be added.
76333>>>>>                If (Right (sReportPath, 1) <> sSep) Begin
76335>>>>>                    Move (sReportPath - sSep) to sReportPath
76336>>>>>                End
76336>>>>>>
76336>>>>>                Move (sReportPath - sReport) to sReportPath
76337>>>>>                Move (DoesFileExist (sReportPath)) to bExists
76338>>>>>            End
76338>>>>>>
76338>>>>>
76338>>>>>            If (not (bExists)) Begin
76340>>>>>                If (ghoApplication) Begin
76342>>>>>                    // If no path was given, see if the report sits in a folder named Reports sub-folder of the workspace root
76342>>>>>                    Get ReportsFolder to sReportPath
76343>>>>>                    If (sReportPath <> '') Begin
76345>>>>>                        Move (sReportPath - sReport) to sReportPath
76346>>>>>                        Move (DoesFileExist (sReportPath)) to bExists
76347>>>>>                    End
76347>>>>>>
76347>>>>>
76347>>>>>                    If (not (bExists)) Begin
76349>>>>>                        // If the report is still not found, see if it resides in one of the datapaths of the workspace
76349>>>>>                        Get phoWorkspace of ghoApplication to hoWorkspace
76350>>>>>                        Get psDataPath of hoWorkspace to sDataPath
76351>>>>>                        Get CountOfPaths of hoWorkspace sDataPath to iPaths
76352>>>>>                        // Iterate through each datapath until report is located
76352>>>>>                        For iPath from 1 to iPaths
76358>>>>>>
76358>>>>>                            Get PathAtIndex of hoWorkspace sDataPath iPath to sReportPath
76359>>>>>                            // Make sure path ends with a DirSep before the report name will be added.
76359>>>>>                            If (Right (sReportPath, 1) <> sSep) Begin
76361>>>>>                                Move (sReportPath - sSep) to sReportPath
76362>>>>>                            End
76362>>>>>>
76362>>>>>                            Move (sReportPath - sReport) to sReportPath
76363>>>>>                            Move (DoesFileExist (sReportPath)) to bExists
76364>>>>>                        Until ((bExists) or (iPath = iPaths))
76366>>>>>                    End
76366>>>>>>
76366>>>>>                End
76366>>>>>>
76366>>>>>            End
76366>>>>>>
76366>>>>>        End
76366>>>>>>
76366>>>>>
76366>>>>>        If (not (bExists)) Begin
76368>>>>>            Move False to bOk
76369>>>>>            Error DFERR_DATAFLEX_REPORTS (SFormat (C_$UnabletoLocateReport, sReport))
76370>>>>>>
76370>>>>>        End
76370>>>>>>
76370>>>>>
76370>>>>>        // If Report was found, open it.
76370>>>>>        If (bOk) Begin
76372>>>>>            Send DisplayStatusPanel True
76373>>>>>            Send ShowReportLoadingStatusText
76374>>>>>            // open report
76374>>>>>            Get ComReportOpen sReportPath to sReportId
76375>>>>>            Move (sReportId <> "") to bOk
76376>>>>>            If (bOk) Begin
76378>>>>>                Set psReportId to sReportId
76379>>>>>                Send InitExportStructures
76380>>>>>                Get pbAutoLocateDFFiles to bAutoLocateDFFiles
76381>>>>>                If (bAutoLocateDFFiles) Begin
76383>>>>>                    Send AutoLocateDFFiles sReportId
76384>>>>>                End
76384>>>>>>
76384>>>>>            End
76384>>>>>>
76384>>>>>            If (not (bOk)) Begin
76386>>>>>                Get pbHasErrors to bOk
76387>>>>>                If (not (bOk)) Begin
76389>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$ErrorOpeningReport, sReportPath))
76390>>>>>>
76390>>>>>                End
76390>>>>>>
76390>>>>>            End
76390>>>>>>
76390>>>>>        End
76390>>>>>>
76390>>>>>
76390>>>>>        If (bOk) Begin
76392>>>>>            // Set report location
76392>>>>>            Move (ExtractFilePath (sReportPath)) to sReportPath
76393>>>>>            Set psReportLocation to sReportPath
76394>>>>>        End
76394>>>>>>
76394>>>>>
76394>>>>>        If (bOk) Begin
76396>>>>>            Send OnInitializeReport
76397>>>>>            Get pbCanceled to bCanceled
76398>>>>>            If (bCanceled) Begin
76400>>>>>                Move False to bOk
76401>>>>>            End
76401>>>>>>
76401>>>>>        End
76401>>>>>>
76401>>>>>
76401>>>>>        // we check pbCanceled once more at the at end of the process. It is possible that OnError is setting this
76401>>>>>        // to True and that could happen any time. So we check at the very last moment here.
76401>>>>>        If (bOk) Begin
76403>>>>>            Get pbCanceled to bCanceled
76404>>>>>            If (bCanceled) Begin
76406>>>>>                Move False to bOk
76407>>>>>            End
76407>>>>>>
76407>>>>>        End
76407>>>>>>
76407>>>>>
76407>>>>>        If (not (bOk)) Begin
76409>>>>>            If (sReportId <> "") Begin
76411>>>>>                Send CloseReport sReportId
76412>>>>>                Move "" to sReportId
76413>>>>>            End
76413>>>>>>
76413>>>>>        End
76413>>>>>>
76413>>>>>
76413>>>>>        Send RedirectErrorsToLocalHandler False
76414>>>>>
76414>>>>>        Send DisplayStatusPanel False
76415>>>>>
76415>>>>>        Function_Return sReportId
76416>>>>>    End_Function
76417>>>>>
76417>>>>>    // Outputs the report
76417>>>>>    Procedure OutputReport
76419>>>>>        Integer eDestination eExportType
76419>>>>>        String sFileName
76419>>>>>        Handle hPrintDlg hoExportOptionsDialog
76419>>>>>
76419>>>>>        Send RedirectErrorsToLocalHandler True
76420>>>>>
76420>>>>>        Send RefreshReport
76421>>>>>
76421>>>>>        Get peOutputDestination to eDestination
76422>>>>>        Case Begin
76422>>>>>            Case (eDestination = PRINT_TO_WINDOW)
76424>>>>>                Send DisplayReport
76425>>>>>                Case Break
76426>>>>>            Case (eDestination = PRINT_TO_PRINTER)
76429>>>>>                Get phPrintDlg to hPrintDlg
76430>>>>>                Send PrintReport hPrintDlg
76431>>>>>                Case Break
76432>>>>>            Case (eDestination = PRINT_TO_PRINTER_NO_DIALOG)
76435>>>>>                Send PrintToDefaultPrinter
76436>>>>>                Case Break
76437>>>>>            Case (eDestination = PRINT_TO_FILE)
76440>>>>>                Get peExportType to eExportType
76441>>>>>                If (eExportType >= C_DRPDF and eExportType <= C_DRRTF) Begin
76443>>>>>                    Get psExportFileName to sFileName
76444>>>>>                    If (sFileName <> "") Begin
76446>>>>>                        Send ExportReport eExportType sFileName
76447>>>>>                    End
76447>>>>>>
76447>>>>>                    Else Begin
76448>>>>>                        Get phoExportOptionsDialog to hoExportOptionsDialog
76449>>>>>                        If (hoExportOptionsDialog <> 0) Begin
76451>>>>>                            Send ExportReport of hoExportOptionsDialog Self
76452>>>>>                        End
76452>>>>>>
76452>>>>>                        Else Begin
76453>>>>>                            Error DFERR_DATAFLEX_REPORTS C_$DRNoExportOptionsDialog
76454>>>>>>
76454>>>>>                        End
76454>>>>>>
76454>>>>>                    End
76454>>>>>>
76454>>>>>                End
76454>>>>>>
76454>>>>>                Else Begin
76455>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRNoValidExportTypeSpecified, eExportType))
76456>>>>>>
76456>>>>>                End
76456>>>>>>
76456>>>>>                Case Break
76457>>>>>            Case Else
76457>>>>>                Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRNoValidPrintDestinationDefined, eDestination))
76458>>>>>>
76458>>>>>                Case Break
76459>>>>>        Case End
76459>>>>>
76459>>>>>        Send RedirectErrorsToLocalHandler False
76460>>>>>    End_Procedure
76461>>>>>
76461>>>>>    // Function to retrieve the paper orientation, returns a DMORIENT_ value
76461>>>>>    Function PaperOrientation String sReportId Returns Integer
76463>>>>>        Integer iPaperOrientation
76463>>>>>        Boolean bComObjectCreated
76463>>>>>
76463>>>>>        Send RedirectErrorsToLocalHandler True
76464>>>>>
76464>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76466>>>>>            Get psReportId to sReportId
76467>>>>>        End
76467>>>>>>
76467>>>>>
76467>>>>>        If (sReportId <> "") Begin
76469>>>>>            Get IsComObjectCreated to bComObjectCreated
76470>>>>>            If (bComObjectCreated) Begin
76472>>>>>                Get ComPaperOrientation sReportId to iPaperOrientation
76473>>>>>            End
76473>>>>>>
76473>>>>>            Else Begin
76474>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76475>>>>>>
76475>>>>>            End
76475>>>>>>
76475>>>>>        End
76475>>>>>>
76475>>>>>        Else Begin
76476>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76477>>>>>>
76477>>>>>        End
76477>>>>>>
76477>>>>>
76477>>>>>        Send RedirectErrorsToLocalHandler False
76478>>>>>
76478>>>>>        Function_Return iPaperOrientation
76479>>>>>    End_Function
76480>>>>>
76480>>>>>    // Function to retrieve the size of the paper, returns a DMPAPER_ constant
76480>>>>>    Function PaperSize String sReportId Returns Integer
76482>>>>>        Integer iPaperSize
76482>>>>>        Boolean bComObjectCreated
76482>>>>>
76482>>>>>        Send RedirectErrorsToLocalHandler True
76483>>>>>
76483>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76485>>>>>            Get psReportId to sReportId
76486>>>>>        End
76486>>>>>>
76486>>>>>
76486>>>>>        If (sReportId <> "") Begin
76488>>>>>            Get IsComObjectCreated to bComObjectCreated
76489>>>>>            If (bComObjectCreated) Begin
76491>>>>>                Get ComPaperSize sReportId to iPaperSize
76492>>>>>            End
76492>>>>>>
76492>>>>>            Else Begin
76493>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76494>>>>>>
76494>>>>>            End
76494>>>>>>
76494>>>>>        End
76494>>>>>>
76494>>>>>        Else Begin
76495>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76496>>>>>>
76496>>>>>        End
76496>>>>>>
76496>>>>>
76496>>>>>        Send RedirectErrorsToLocalHandler False
76497>>>>>
76497>>>>>        Function_Return iPaperSize
76498>>>>>    End_Function
76499>>>>>
76499>>>>>    // Returns the number of parameters defined with the report
76499>>>>>    Function ParameterCount String sReportId Returns Integer
76501>>>>>        Integer iParameters
76501>>>>>        Boolean bComObjectCreated
76501>>>>>
76501>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76503>>>>>            Get psReportId to sReportId
76504>>>>>        End
76504>>>>>>
76504>>>>>
76504>>>>>        If (sReportId <> "") Begin
76506>>>>>            Get IsComObjectCreated to bComObjectCreated
76507>>>>>            If (bComObjectCreated) Begin
76509>>>>>                Get ComParameterCount sReportId to iParameters
76510>>>>>            End
76510>>>>>>
76510>>>>>            Else Begin
76511>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76512>>>>>>
76512>>>>>            End
76512>>>>>>
76512>>>>>        End
76512>>>>>>
76512>>>>>        Else Begin
76513>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76514>>>>>>
76514>>>>>        End
76514>>>>>>
76514>>>>>
76514>>>>>        Function_Return iParameters
76515>>>>>    End_Function
76516>>>>>
76516>>>>>    // Returns the ID of the parameter whose name is passed to the function
76516>>>>>    Function ParameterIdByName String sReportId String sParameterName Returns Integer
76518>>>>>        Integer iParameterId
76518>>>>>        Boolean bComObjectCreated
76518>>>>>
76518>>>>>        Send RedirectErrorsToLocalHandler True
76519>>>>>
76519>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76521>>>>>            Get psReportId to sReportId
76522>>>>>        End
76522>>>>>>
76522>>>>>
76522>>>>>        If (sReportId <> "") Begin
76524>>>>>            Get IsComObjectCreated to bComObjectCreated
76525>>>>>            If (bComObjectCreated) Begin
76527>>>>>                Get ComParameterByName sReportId sParameterName to iParameterId
76528>>>>>            End
76528>>>>>>
76528>>>>>            Else Begin
76529>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76530>>>>>>
76530>>>>>            End
76530>>>>>>
76530>>>>>        End
76530>>>>>>
76530>>>>>
76530>>>>>        Send RedirectErrorsToLocalHandler False
76531>>>>>
76531>>>>>        Function_Return iParameterId
76532>>>>>    End_Function
76533>>>>>
76533>>>>>    // Returns information about a given parameter in a given report. The returned information contains
76533>>>>>    // length, type, name, precision (if numeric)
76533>>>>>    Function ParameterInfo String sReportId Integer iParameter Returns tDRParameter
76535>>>>>        tDRParameter ParameterInfo
76535>>>>>        tDRParameter ParameterInfo
76535>>>>>        Boolean bComObjectCreated
76535>>>>>
76535>>>>>        Send RedirectErrorsToLocalHandler True
76536>>>>>
76536>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76538>>>>>            Get psReportId to sReportId
76539>>>>>        End
76539>>>>>>
76539>>>>>
76539>>>>>        If (sReportId <> "") Begin
76541>>>>>            Get IsComObjectCreated to bComObjectCreated
76542>>>>>            If (bComObjectCreated) Begin
76544>>>>>                Get ComParameterName sReportId iParameter to ParameterInfo.sName
76545>>>>>                Get ComParameterType sReportId iParameter to ParameterInfo.iType
76546>>>>>                Case Begin
76546>>>>>                    Case (ParameterInfo.iType = SQL_INTEGER)
76548>>>>>                        Move 10 to ParameterInfo.iLength
76549>>>>>                        Case Break
76550>>>>>                    Case (ParameterInfo.iType = SQL_DATETIME)
76553>>>>>                        Move 23 to ParameterInfo.iLength
76554>>>>>                        Case Break
76555>>>>>                    Case (ParameterInfo.iType = SQL_TIME)
76558>>>>>                    Case (ParameterInfo.iType = SQL_TYPE_TIME)
76561>>>>>                    Case (ParameterInfo.iType = SQL_TYPE_TIMESTAMP)
76564>>>>>                        Move 8 to ParameterInfo.iLength
76565>>>>>                        Case Break
76566>>>>>                    Case (ParameterInfo.iType = SQL_TYPE_DATE)
76569>>>>>                        Move 10 to ParameterInfo.iLength
76570>>>>>                        Case Break
76571>>>>>                    Case (ParameterInfo.iType = SQL_NUMERIC)
76574>>>>>                    Case (ParameterInfo.iType = SQL_DECIMAL)
76577>>>>>                    Case (ParameterInfo.iType = SQL_DOUBLE)
76580>>>>>                        Get ComParameterLength sReportId iParameter to ParameterInfo.iLength
76581>>>>>                        Get ComParameterPrecision sReportId iParameter to ParameterInfo.iPrecision
76582>>>>>                        Case Break
76583>>>>>                    Case Else
76583>>>>>                        Get ComParameterLength sReportId iParameter to ParameterInfo.iLength
76584>>>>>                        Case Break
76585>>>>>                Case End
76585>>>>>            End
76585>>>>>>
76585>>>>>        End
76585>>>>>>
76585>>>>>
76585>>>>>        Send RedirectErrorsToLocalHandler False
76586>>>>>
76586>>>>>        Function_Return ParameterInfo
76587>>>>>    End_Function
76588>>>>>
76588>>>>>    // Returns the N-th Parameter name defined in the report
76588>>>>>    Function ParameterName String sReportId Integer iParameter Returns String
76590>>>>>        String sParameterName
76590>>>>>        Boolean bComObjectCreated
76590>>>>>        Integer iParameters
76590>>>>>
76590>>>>>        If (iParameter < 0) Begin
76592>>>>>            Function_Return ''
76593>>>>>        End
76593>>>>>>
76593>>>>>
76593>>>>>        Send RedirectErrorsToLocalHandler True
76594>>>>>
76594>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76596>>>>>            Get psReportId to sReportId
76597>>>>>        End
76597>>>>>>
76597>>>>>
76597>>>>>        If (sReportId <> "") Begin
76599>>>>>            Get IsComObjectCreated to bComObjectCreated
76600>>>>>            If (bComObjectCreated) Begin
76602>>>>>                Get ComParameterCount sReportId to iParameters
76603>>>>>                If (iParameter < iParameters) Begin
76605>>>>>                    Get ComParameterName sReportId iParameter to sParameterName
76606>>>>>                End
76606>>>>>>
76606>>>>>            End
76606>>>>>>
76606>>>>>            Else Begin
76607>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76608>>>>>>
76608>>>>>            End
76608>>>>>>
76608>>>>>        End
76608>>>>>>
76608>>>>>        Else Begin
76609>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76610>>>>>>
76610>>>>>        End
76610>>>>>>
76610>>>>>
76610>>>>>        Send RedirectErrorsToLocalHandler False
76611>>>>>
76611>>>>>        Function_Return sParameterName
76612>>>>>    End_Function
76613>>>>>
76613>>>>>    // Returns all the information (name, length, type, precision) of the parameters defined in the report
76613>>>>>    Function Parameters String sReportId Returns tDRParameter[]
76615>>>>>        tDRParameter[] ParametersInfo
76615>>>>>        tDRParameter[] ParametersInfo
76616>>>>>        Boolean bComObjectCreated
76616>>>>>        Integer iParameters iParameter
76616>>>>>
76616>>>>>        Send RedirectErrorsToLocalHandler True
76617>>>>>
76617>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76619>>>>>            Get psReportId to sReportId
76620>>>>>        End
76620>>>>>>
76620>>>>>
76620>>>>>        If (sReportId <> "") Begin
76622>>>>>            Get IsComObjectCreated to bComObjectCreated
76623>>>>>            If (bComObjectCreated) Begin
76625>>>>>                Get ComParameterCount sReportId to iParameters
76626>>>>>                Decrement iParameters
76627>>>>>                For iParameter from 0 to iParameters
76633>>>>>>
76633>>>>>                    Get ParameterInfo sReportId iParameter to ParametersInfo[iParameter]
76634>>>>>                End
76635>>>>>>
76635>>>>>            End
76635>>>>>>
76635>>>>>            Else Begin
76636>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76637>>>>>>
76637>>>>>            End
76637>>>>>>
76637>>>>>        End
76637>>>>>>
76637>>>>>        Else Begin
76638>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76639>>>>>>
76639>>>>>        End
76639>>>>>>
76639>>>>>
76639>>>>>        Send RedirectErrorsToLocalHandler False
76640>>>>>
76640>>>>>        Function_Return ParametersInfo
76641>>>>>    End_Function
76642>>>>>
76642>>>>>    // Returns the type of the N-th Parameter defined in the report
76642>>>>>    Function ParameterType String sReportId Integer iParameter Returns Integer
76644>>>>>        Integer iParameterType
76644>>>>>        Boolean bComObjectCreated
76644>>>>>        Integer iParameters
76644>>>>>
76644>>>>>        If (iParameter < 0) Begin
76646>>>>>            Function_Return ''
76647>>>>>        End
76647>>>>>>
76647>>>>>
76647>>>>>        Send RedirectErrorsToLocalHandler True
76648>>>>>
76648>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76650>>>>>            Get psReportId to sReportId
76651>>>>>        End
76651>>>>>>
76651>>>>>
76651>>>>>        If (sReportId <> "") Begin
76653>>>>>            Get IsComObjectCreated to bComObjectCreated
76654>>>>>            If (bComObjectCreated) Begin
76656>>>>>                Get ComParameterCount sReportId to iParameters
76657>>>>>                If (iParameter < iParameters) Begin
76659>>>>>                    Get ComParameterType sReportId iParameter to iParameterType
76660>>>>>                End
76660>>>>>>
76660>>>>>            End
76660>>>>>>
76660>>>>>            Else Begin
76661>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76662>>>>>>
76662>>>>>            End
76662>>>>>>
76662>>>>>        End
76662>>>>>>
76662>>>>>        Else Begin
76663>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76664>>>>>>
76664>>>>>        End
76664>>>>>>
76664>>>>>
76664>>>>>        Send RedirectErrorsToLocalHandler False
76665>>>>>
76665>>>>>        Function_Return iParameterType
76666>>>>>    End_Function
76667>>>>>
76667>>>>>    Function PDFExportOptionsCorrect DRPDFExportOptions PDFExportOptionsData Returns Boolean
76669>>>>>        If (PDFExportOptionsData.iImageQuality < C_DRLow or PDFExportOptionsData.iImageQuality > C_DRHigh) Begin
76671>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRPDFExportInvalidImageQuality
76672>>>>>>
76672>>>>>            Function_Return False
76673>>>>>        End
76673>>>>>>
76673>>>>>
76673>>>>>        Function_Return True
76674>>>>>    End_Function
76675>>>>>
76675>>>>>    // Handles the preview click
76675>>>>>    Procedure PreviewClick Integer wParam Integer lParam
76677>>>>>        Boolean bComObjectCreated
76677>>>>>        Handle hWnd
76677>>>>>        Integer iResult
76677>>>>>
76677>>>>>        Send RedirectErrorsToLocalHandler True
76678>>>>>
76678>>>>>        Get IsComObjectCreated to bComObjectCreated
76679>>>>>        If (bComObjectCreated) Begin
76681>>>>>            Get Window_Handle to hWnd
76682>>>>>            If (hWnd <> 0) Begin
76684>>>>>                Move (SendMessage (hWnd, WM_LBUTTONDOWN, wParam, lParam)) to iResult
76685>>>>>            End
76685>>>>>>
76685>>>>>            Else Begin
76686>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportDoesNotHaveAWindowHandle, Name (Self)))
76687>>>>>>
76687>>>>>            End
76687>>>>>>
76687>>>>>        End
76687>>>>>>
76687>>>>>        Else Begin
76688>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76689>>>>>>
76689>>>>>        End
76689>>>>>>
76689>>>>>
76689>>>>>        Send RedirectErrorsToLocalHandler False
76690>>>>>    End_Procedure
76691>>>>>
76691>>>>>    // Finds a word in the preview
76691>>>>>    Function PreviewFind String sText Boolean bDown Boolean bWholeWord Boolean bMatchCase Returns Boolean
76693>>>>>        Boolean bComObjectCreated bFound
76693>>>>>
76693>>>>>        Send RedirectErrorsToLocalHandler True
76694>>>>>
76694>>>>>        Get IsComObjectCreated to bComObjectCreated
76695>>>>>        If (bComObjectCreated) Begin
76697>>>>>            Get ComPreviewFind sText bDown bWholeWord bMatchCase to bFound
76698>>>>>        End
76698>>>>>>
76698>>>>>        Else Begin
76699>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76700>>>>>>
76700>>>>>        End
76700>>>>>>
76700>>>>>
76700>>>>>        Send RedirectErrorsToLocalHandler False
76701>>>>>
76701>>>>>        Function_Return bFound
76702>>>>>    End_Function
76703>>>>>
76703>>>>>    // Resets the preview find operation
76703>>>>>    Procedure PreviewFindReset
76705>>>>>        Boolean bComObjectCreated
76705>>>>>
76705>>>>>        Send RedirectErrorsToLocalHandler True
76706>>>>>
76706>>>>>        Get IsComObjectCreated to bComObjectCreated
76707>>>>>        If (bComObjectCreated) Begin
76709>>>>>            Send ComPreviewFindReset
76710>>>>>        End
76710>>>>>>
76710>>>>>        Else Begin
76711>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76712>>>>>>
76712>>>>>        End
76712>>>>>>
76712>>>>>
76712>>>>>        Send RedirectErrorsToLocalHandler False
76713>>>>>    End_Procedure
76714>>>>>
76714>>>>>    // Previews the first page
76714>>>>>    Procedure PreviewFirstPage
76716>>>>>        Boolean bComObjectCreated bHasErrors bCancelIfError
76716>>>>>
76716>>>>>        Send RedirectErrorsToLocalHandler True
76717>>>>>
76717>>>>>        Get IsComObjectCreated to bComObjectCreated
76718>>>>>        If (bComObjectCreated) Begin
76720>>>>>            Get pbHasErrors to bHasErrors
76721>>>>>            Get pbCancelIfError to bCancelIfError
76722>>>>>            If (not (bHasErrors) and bCancelIfError) Begin
76724>>>>>                Send ComPreviewFirstPage
76725>>>>>            End
76725>>>>>>
76725>>>>>        End
76725>>>>>>
76725>>>>>        Else Begin
76726>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76727>>>>>>
76727>>>>>        End
76727>>>>>>
76727>>>>>
76727>>>>>        Send RedirectErrorsToLocalHandler False
76728>>>>>    End_Procedure
76729>>>>>
76729>>>>>    Procedure PreviewHScroll Integer iType Integer iPos
76731>>>>>        Boolean bComObjectCreated bHasErrors bCancelIfError
76731>>>>>
76731>>>>>        Send RedirectErrorsToLocalHandler True
76732>>>>>
76732>>>>>        Get IsComObjectCreated to bComObjectCreated
76733>>>>>        If (bComObjectCreated) Begin
76735>>>>>            Get pbHasErrors to bHasErrors
76736>>>>>            Get pbCancelIfError to bCancelIfError
76737>>>>>            If (not (bHasErrors) and bCancelIfError) Begin
76739>>>>>                Send ComPreviewHScroll iType iPos
76740>>>>>            End
76740>>>>>>
76740>>>>>        End
76740>>>>>>
76740>>>>>        Else Begin
76741>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76742>>>>>>
76742>>>>>        End
76742>>>>>>
76742>>>>>
76742>>>>>        Send RedirectErrorsToLocalHandler False
76743>>>>>    End_Procedure
76744>>>>>
76744>>>>>    // Previews the last page
76744>>>>>    Procedure PreviewLastPage
76746>>>>>        Boolean bComObjectCreated bHasErrors bCancelIfError
76746>>>>>
76746>>>>>        Send RedirectErrorsToLocalHandler True
76747>>>>>
76747>>>>>        Get IsComObjectCreated to bComObjectCreated
76748>>>>>        If (bComObjectCreated) Begin
76750>>>>>            Get pbHasErrors to bHasErrors
76751>>>>>            Get pbCancelIfError to bCancelIfError
76752>>>>>            If (not (bHasErrors) and bCancelIfError) Begin
76754>>>>>                Send ComPreviewLastPage
76755>>>>>            End
76755>>>>>>
76755>>>>>        End
76755>>>>>>
76755>>>>>        Else Begin
76756>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76757>>>>>>
76757>>>>>        End
76757>>>>>>
76757>>>>>
76757>>>>>        Send RedirectErrorsToLocalHandler False
76758>>>>>    End_Procedure
76759>>>>>
76759>>>>>    // Previews the next page
76759>>>>>    Procedure PreviewNextPage
76761>>>>>        Boolean bComObjectCreated bHasErrors bCancelIfError
76761>>>>>
76761>>>>>        Send RedirectErrorsToLocalHandler True
76762>>>>>
76762>>>>>        Get IsComObjectCreated to bComObjectCreated
76763>>>>>        If (bComObjectCreated) Begin
76765>>>>>            Get pbHasErrors to bHasErrors
76766>>>>>            Get pbCancelIfError to bCancelIfError
76767>>>>>            If (not (bHasErrors) and bCancelIfError) Begin
76769>>>>>                Send ComPreviewNextPage
76770>>>>>            End
76770>>>>>>
76770>>>>>        End
76770>>>>>>
76770>>>>>        Else Begin
76771>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76772>>>>>>
76772>>>>>        End
76772>>>>>>
76772>>>>>
76772>>>>>        Send RedirectErrorsToLocalHandler False
76773>>>>>    End_Procedure
76774>>>>>
76774>>>>>    // Previews the previous page
76774>>>>>    Procedure PreviewPreviousPage
76776>>>>>        Boolean bComObjectCreated bHasErrors bCancelIfError
76776>>>>>
76776>>>>>        Send RedirectErrorsToLocalHandler True
76777>>>>>
76777>>>>>        Get IsComObjectCreated to bComObjectCreated
76778>>>>>        If (bComObjectCreated) Begin
76780>>>>>            Get pbHasErrors to bHasErrors
76781>>>>>            Get pbCancelIfError to bCancelIfError
76782>>>>>            If (not (bHasErrors) and bCancelIfError) Begin
76784>>>>>                Send ComPreviewPreviousPage
76785>>>>>            End
76785>>>>>>
76785>>>>>        End
76785>>>>>>
76785>>>>>        Else Begin
76786>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76787>>>>>>
76787>>>>>        End
76787>>>>>>
76787>>>>>
76787>>>>>        Send RedirectErrorsToLocalHandler False
76788>>>>>    End_Procedure
76789>>>>>
76789>>>>>    Procedure PreviewPaint
76791>>>>>        Boolean bComObjectCreated bHasErrors bCancelIfError
76791>>>>>
76791>>>>>        Send RedirectErrorsToLocalHandler True
76792>>>>>
76792>>>>>        Get IsComObjectCreated to bComObjectCreated
76793>>>>>        If (bComObjectCreated) Begin
76795>>>>>            Get pbHasErrors to bHasErrors
76796>>>>>            Get pbCancelIfError to bCancelIfError
76797>>>>>            If (not (bHasErrors) and bCancelIfError) Begin
76799>>>>>                Send ComPreviewPaint True
76800>>>>>            End
76800>>>>>>
76800>>>>>        End
76800>>>>>>
76800>>>>>        Else Begin
76801>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76802>>>>>>
76802>>>>>        End
76802>>>>>>
76802>>>>>
76802>>>>>        Send RedirectErrorsToLocalHandler False
76803>>>>>    End_Procedure
76804>>>>>
76804>>>>>    Procedure PreviewVScroll Integer iType Integer iPos
76806>>>>>        Boolean bComObjectCreated bHasErrors bCancelIfError
76806>>>>>
76806>>>>>        Send RedirectErrorsToLocalHandler True
76807>>>>>
76807>>>>>        Get IsComObjectCreated to bComObjectCreated
76808>>>>>        If (bComObjectCreated) Begin
76810>>>>>            Get pbHasErrors to bHasErrors
76811>>>>>            Get pbCancelIfError to bCancelIfError
76812>>>>>            If (not (bHasErrors) and bCancelIfError) Begin
76814>>>>>                Send ComPreviewVScroll iType iPos
76815>>>>>            End
76815>>>>>>
76815>>>>>        End
76815>>>>>>
76815>>>>>        Else Begin
76816>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76817>>>>>>
76817>>>>>        End
76817>>>>>>
76817>>>>>
76817>>>>>        Send RedirectErrorsToLocalHandler False
76818>>>>>    End_Procedure
76819>>>>>
76819>>>>>    Procedure Set PreviewWindowHandle Handle hWnd
76821>>>>>        Boolean bComObjectCreated
76821>>>>>
76821>>>>>        Send RedirectErrorsToLocalHandler True
76822>>>>>
76822>>>>>        Get IsComObjectCreated to bComObjectCreated
76823>>>>>        If (bComObjectCreated) Begin
76825>>>>>            Set ComPreviewHWND to hWnd
76826>>>>>        End
76826>>>>>>
76826>>>>>
76826>>>>>        Send RedirectErrorsToLocalHandler False
76827>>>>>    End_Procedure
76828>>>>>
76828>>>>>    // Prints the report
76828>>>>>    // If the hPrinterDlg parameter is passed as zero DataFlex Reports will
76828>>>>>    // popup a print dialog to choose a printer from. When you do not want a printer dialog
76828>>>>>    // (for example because the information is stored in a record or file) you need to pass
76828>>>>>    // the handle to the PRINTDLGEX structure.
76828>>>>>    Procedure PrintReport Handle hPrinterDlg
76830>>>>>        Boolean bCancel bComObjectCreated
76830>>>>>        String sReportId sPrinterName
76830>>>>>        Handle hoPrintDialog
76830>>>>>        Integer iResult iPaperSize ePaperOrientation iCurrentPage iPages
76830>>>>>
76830>>>>>        Send RedirectErrorsToLocalHandler True
76831>>>>>        Send CheckFunctionErrorInfo
76832>>>>>
76832>>>>>        Set pbCanceled to False
76833>>>>>
76833>>>>>        Send OnPrintReport (&hPrinterDlg)
76834>>>>>        Get pbCanceled to bCancel // Developer might have canceled the report
76835>>>>>        If (not (bCancel)) Begin
76837>>>>>            Get psReportId to sReportId
76838>>>>>            If (sReportId = "") Begin
76840>>>>>                Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76841>>>>>>
76841>>>>>                Send RedirectErrorsToLocalHandler False
76842>>>>>                Procedure_Return
76843>>>>>            End
76843>>>>>>
76843>>>>>
76843>>>>>            Get IsComObjectCreated to bComObjectCreated
76844>>>>>            If (bComObjectCreated) Begin
76846>>>>>                Get piPreviewCurrentPage to iCurrentPage
76847>>>>>                If (hPrinterDlg <> 0) Begin
76849>>>>>                    Send DisplayStatusPanel True
76850>>>>>                    Send ComReportPrint sReportId hPrinterDlg
76851>>>>>                    Send DisplayStatusPanel False
76852>>>>>                End
76852>>>>>>
76852>>>>>                Else Begin
76853>>>>>                    Get phoPrintDialog to hoPrintDialog
76854>>>>>                    Get ReportPageCount to iPages
76855>>>>>                    Set piMaxPage of hoPrintDialog to iPages
76856>>>>>                    Send InitPageRanges Of hoPrintDialog iPages
76857>>>>>                    Get PaperOrientation sReportID to ePaperOrientation
76858>>>>>                    Get PaperSize sReportID to iPaperSize
76859>>>>>                    Set pePaperSize of hoPrintDialog to iPaperSize
76860>>>>>                    Set peOrientation of hoPrintDialog to ePaperOrientation
76861>>>>>                    Get psPrinterName to sPrinterName
76862>>>>>                    If (sPrinterName <> "") Begin
76864>>>>>                        Get ReadPrinterDevMode of hoPrintDialog sPrinterName to iResult
76865>>>>>                        If (iResult = PD_RESULT_CANCEL) Begin
76867>>>>>                            Get PrintDialog of hoPrintDialog to iResult
76868>>>>>                        End
76868>>>>>>
76868>>>>>                    End
76868>>>>>>
76868>>>>>                    Else Begin
76869>>>>>                        Get PrintDialog of hoPrintDialog to iResult
76870>>>>>                    End
76870>>>>>>
76870>>>>>                    If (iResult = PD_RESULT_PRINT) Begin
76872>>>>>                        Get phPrintDlg of hoPrintDialog to hPrinterDlg
76873>>>>>                        If (hPrinterDlg <> 0) Begin
76875>>>>>                            Send DisplayStatusPanel True
76876>>>>>                            Send ComReportPrint sReportId hPrinterDlg
76877>>>>>                            Send DisplayStatusPanel False
76878>>>>>                        End
76878>>>>>>
76878>>>>>                    End
76878>>>>>>
76878>>>>>                    Else Begin
76879>>>>>                        Set pbCanceled to True
76880>>>>>                    End
76880>>>>>>
76880>>>>>                End
76880>>>>>>
76880>>>>>                Set piPreviewCurrentPage to iCurrentPage
76881>>>>>            End
76881>>>>>>
76881>>>>>            Else Begin
76882>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76883>>>>>>
76883>>>>>            End
76883>>>>>>
76883>>>>>        End
76883>>>>>>
76883>>>>>        Send OnPostPrintReport
76884>>>>>        Send CheckFunctionErrorInfo
76885>>>>>
76885>>>>>        Send RedirectErrorsToLocalHandler False
76886>>>>>    End_Procedure
76887>>>>>
76887>>>>>    // Helper method to print to the default printer
76887>>>>>    Procedure PrintToDefaultPrinter
76889>>>>>        Handle hoPrintDialog hPrintDlg
76889>>>>>        Integer iResult iFlags
76889>>>>>
76889>>>>>        Get phoPrintDialog to hoPrintDialog
76890>>>>>        If (hoPrintDialog <> 0) Begin
76892>>>>>            Get piFlags of hoPrintDialog to iFlags
76893>>>>>            Set piFlags of hoPrintDialog to (PD_RETURNDEFAULT ior PD_NOPAGENUMS)
76894>>>>>            Get PrintDialog of hoPrintDialog to iResult
76895>>>>>            If (iResult = PD_RESULT_PRINT) Begin
76897>>>>>                Get phPrintDlg of hoPrintDialog to hPrintDlg
76898>>>>>                Send PrintReport hPrintDlg
76899>>>>>            End
76899>>>>>>
76899>>>>>            Set piFlags of hoPrintDialog to iFlags
76900>>>>>        End
76900>>>>>>
76900>>>>>    End_Procedure
76901>>>>>
76901>>>>>    // Produces a list of tablenames inside main report and sub-reports
76901>>>>>    Function RDSTableNames String sReportId Returns tDRTableName[]
76903>>>>>        Integer eDatabaseType iTables iTable iElement
76903>>>>>        tDRTableName[] ReportTableNames
76903>>>>>        tDRTableName[] ReportTableNames
76904>>>>>
76904>>>>>        Get DatabaseType sReportId to eDatabaseType
76905>>>>>        If (eDatabaseType = C_DRRDS) Begin
76907>>>>>            Get TableCount sReportId to iTables
76908>>>>>            Decrement iTables
76909>>>>>            For iTable from 0 to iTables
76915>>>>>>
76915>>>>>                Move iTable to ReportTableNames[iElement].iTable
76916>>>>>                Move sReportId to ReportTableNames[iElement].sReportId
76917>>>>>                Get psTableName sReportId iTable to ReportTableNames[iElement].sTableName
76918>>>>>                Increment iElement
76919>>>>>            Loop
76920>>>>>>
76920>>>>>        End
76920>>>>>>
76920>>>>>
76920>>>>>        Function_Return ReportTableNames
76921>>>>>    End_Function
76922>>>>>
76922>>>>>    // Returns the number of sort fields defined in the report
76922>>>>>    Function RecordSortCount String sReportId Returns Integer
76924>>>>>        Integer iSortCount
76924>>>>>        Boolean bComObjectCreated
76924>>>>>
76924>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76926>>>>>            Get psReportId to sReportId
76927>>>>>        End
76927>>>>>>
76927>>>>>
76927>>>>>        If (sReportId <> "") Begin
76929>>>>>            Get IsComObjectCreated to bComObjectCreated
76930>>>>>            If (bComObjectCreated) Begin
76932>>>>>                Get ComRecordSortCount sReportId to iSortCount
76933>>>>>            End
76933>>>>>>
76933>>>>>            Else Begin
76934>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76935>>>>>>
76935>>>>>            End
76935>>>>>>
76935>>>>>        End
76935>>>>>>
76935>>>>>        Else Begin
76936>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76937>>>>>>
76937>>>>>        End
76937>>>>>>
76937>>>>>
76937>>>>>        Function_Return iSortCount
76938>>>>>    End_Function
76939>>>>>
76939>>>>>    // Refreshes the report; all data will be read again, pages are reformatted
76939>>>>>    Procedure RefreshReport
76941>>>>>        String sReportId
76941>>>>>        Boolean bComObjectCreated
76941>>>>>
76941>>>>>        Send RedirectErrorsToLocalHandler True
76942>>>>>        Send CheckFunctionErrorInfo
76943>>>>>
76943>>>>>        Get psReportId to sReportId
76944>>>>>        If (sReportId <> "") Begin
76946>>>>>            Get IsComObjectCreated to bComObjectCreated
76947>>>>>            If (bComObjectCreated) Begin
76949>>>>>                Send DisplayStatusPanel True
76950>>>>>                Send OnDefineFilters
76951>>>>>                Send ComReportRefresh sReportId
76952>>>>>                Send DisplayStatusPanel False
76953>>>>>            End
76953>>>>>>
76953>>>>>            Else Begin
76954>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76955>>>>>>
76955>>>>>            End
76955>>>>>>
76955>>>>>        End
76955>>>>>>
76955>>>>>        Else Begin
76956>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76957>>>>>>
76957>>>>>        End
76957>>>>>>
76957>>>>>
76957>>>>>        Send CheckFunctionErrorInfo
76958>>>>>        Send RedirectErrorsToLocalHandler False
76959>>>>>    End_Procedure
76960>>>>>
76960>>>>>    // Removes all predefined record sort fields from the report
76960>>>>>    Procedure RemoveAllFilters String sReportId
76962>>>>>        Integer iFilters
76962>>>>>        Boolean bComObjectCreated
76962>>>>>
76962>>>>>        Send RedirectErrorsToLocalHandler True
76963>>>>>
76963>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76965>>>>>            Get psReportId to sReportId
76966>>>>>        End
76966>>>>>>
76966>>>>>
76966>>>>>        If (sReportId <> "") Begin
76968>>>>>            Get IsComObjectCreated to bComObjectCreated
76969>>>>>            If (bComObjectCreated) Begin
76971>>>>>                Get ComRecordFilterCount sReportId to iFilters
76972>>>>>                Decrement iFilters
76973>>>>>                While (iFilters >= 0)
76977>>>>>                    Send ComRecordFilterDelete sReportId iFilters
76978>>>>>                    Decrement iFilters
76979>>>>>                Loop
76980>>>>>>
76980>>>>>            End
76980>>>>>>
76980>>>>>            Else Begin
76981>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
76982>>>>>>
76982>>>>>            End
76982>>>>>>
76982>>>>>        End
76982>>>>>>
76982>>>>>        Else Begin
76983>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
76984>>>>>>
76984>>>>>        End
76984>>>>>>
76984>>>>>
76984>>>>>        Send RedirectErrorsToLocalHandler False
76985>>>>>    End_Procedure
76986>>>>>
76986>>>>>    // Removes all predefined record sort fields from the report
76986>>>>>    Procedure RemoveAllRecordSortFields String sReportId
76988>>>>>        Integer iRecordSortFields
76988>>>>>        Boolean bComObjectCreated
76988>>>>>
76988>>>>>        Send RedirectErrorsToLocalHandler True
76989>>>>>
76989>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
76991>>>>>            Get psReportId to sReportId
76992>>>>>        End
76992>>>>>>
76992>>>>>
76992>>>>>        If (sReportId <> "") Begin
76994>>>>>            Get IsComObjectCreated to bComObjectCreated
76995>>>>>            If (bComObjectCreated) Begin
76997>>>>>                Get ComRecordSortCount sReportId to iRecordSortFields
76998>>>>>                Decrement iRecordSortFields
76999>>>>>                While (iRecordSortFields >= 0)
77003>>>>>                    Send ComRecordSortDelete sReportId iRecordSortFields
77004>>>>>                    Decrement iRecordSortFields
77005>>>>>                Loop
77006>>>>>>
77006>>>>>            End
77006>>>>>>
77006>>>>>            Else Begin
77007>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77008>>>>>>
77008>>>>>            End
77008>>>>>>
77008>>>>>        End
77008>>>>>>
77008>>>>>        Else Begin
77009>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77010>>>>>>
77010>>>>>        End
77010>>>>>>
77010>>>>>
77010>>>>>        Send RedirectErrorsToLocalHandler False
77011>>>>>    End_Procedure
77012>>>>>
77012>>>>>    // Removes the N-th defined filter in the report. Tests if the passed filter number is defined
77012>>>>>    // in the report.
77012>>>>>    Function RemoveFilter String sReportId Integer iFilter Returns Boolean
77014>>>>>        Integer iFiltersBefore iFiltersAfter
77014>>>>>        Boolean bComObjectCreated bSuccess
77014>>>>>
77014>>>>>        If (iFilter < 0) Begin
77016>>>>>            Function_Return False
77017>>>>>        End
77017>>>>>>
77017>>>>>
77017>>>>>        Send RedirectErrorsToLocalHandler True
77018>>>>>
77018>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77020>>>>>            Get psReportId to sReportId
77021>>>>>        End
77021>>>>>>
77021>>>>>
77021>>>>>        If (sReportId <> "") Begin
77023>>>>>            Get IsComObjectCreated to bComObjectCreated
77024>>>>>            If (bComObjectCreated) Begin
77026>>>>>                Get ComRecordFilterCount sReportId to iFiltersBefore
77027>>>>>                If (iFilter < iFiltersBefore) Begin
77029>>>>>                    Send ComRecordFilterDelete sReportId iFilter
77030>>>>>                    Get ComRecordFilterCount sReportId to iFiltersAfter
77031>>>>>                    Move (iFiltersAfter <> iFiltersBefore) to bSuccess
77032>>>>>                End
77032>>>>>>
77032>>>>>            End
77032>>>>>>
77032>>>>>            Else Begin
77033>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77034>>>>>>
77034>>>>>            End
77034>>>>>>
77034>>>>>        End
77034>>>>>>
77034>>>>>        Else Begin
77035>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77036>>>>>>
77036>>>>>        End
77036>>>>>>
77036>>>>>
77036>>>>>        Send RedirectErrorsToLocalHandler False
77037>>>>>
77037>>>>>        Function_Return bSuccess
77038>>>>>    End_Function
77039>>>>>
77039>>>>>    // Removes the N-th defined record sort order in the report. Tests if the passed
77039>>>>>    // Sort Field Number is defined in the report.
77039>>>>>    Function RemoveRecordSortField String sReportId Integer iSortFieldIndex Returns Boolean
77041>>>>>        Integer iRecordSortCountBefore iRecordSortCountAfter
77041>>>>>        Boolean bComObjectCreated bSuccess
77041>>>>>
77041>>>>>        If (iSortFieldIndex < 0) Begin
77043>>>>>            Function_Return False
77044>>>>>        End
77044>>>>>>
77044>>>>>
77044>>>>>        Send RedirectErrorsToLocalHandler True
77045>>>>>
77045>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77047>>>>>            Get psReportId to sReportId
77048>>>>>        End
77048>>>>>>
77048>>>>>
77048>>>>>        If (sReportId <> "") Begin
77050>>>>>            Get IsComObjectCreated to bComObjectCreated
77051>>>>>            If (bComObjectCreated) Begin
77053>>>>>                Get ComRecordSortCount sReportId to iRecordSortCountBefore
77054>>>>>                If (iSortFieldIndex < iRecordSortCountBefore) Begin
77056>>>>>                    Send ComRecordSortDelete sReportId iSortFieldIndex
77057>>>>>                    Get ComRecordSortCount sReportId to iRecordSortCountAfter
77058>>>>>                    Move (iRecordSortCountAfter <> iRecordSortCountBefore) to bSuccess
77059>>>>>                End
77059>>>>>>
77059>>>>>            End
77059>>>>>>
77059>>>>>            Else Begin
77060>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77061>>>>>>
77061>>>>>            End
77061>>>>>>
77061>>>>>        End
77061>>>>>>
77061>>>>>        Else Begin
77062>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77063>>>>>>
77063>>>>>        End
77063>>>>>>
77063>>>>>
77063>>>>>        Send RedirectErrorsToLocalHandler False
77064>>>>>
77064>>>>>        Function_Return bSuccess
77065>>>>>    End_Function
77066>>>>>
77066>>>>>    Function ReportCacheFileName String sExtension Returns String
77068>>>>>        String sCacheFolder sHEXUUID sCacheFileName
77068>>>>>
77068>>>>>        Get ReportsCacheFolder to sCacheFolder
77069>>>>>        If (sCacheFolder <> '') Begin
77071>>>>>            Get RandomHexUUID to sHEXUUID
77072>>>>>            Move (sCacheFolder + sHEXUUID + sExtension) to sCacheFileName
77073>>>>>        End
77073>>>>>>
77073>>>>>
77073>>>>>        If (sCacheFileName = '') Begin
77075>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRUnableToProvideCacheFileName
77076>>>>>>
77076>>>>>        End
77076>>>>>>
77076>>>>>
77076>>>>>        Function_Return sCacheFileName
77077>>>>>    End_Function
77078>>>>>
77078>>>>>    // This function enumerates the passed report and it's sub-reports for a function by name and returns
77078>>>>>    // a structure in which the report id of the (sub) report is stored and the function number. By this
77078>>>>>    // it is more powerfull than FunctionIdByName that only looks in one report at the time.
77078>>>>>    Function ReportIdForFunction String sReportId String sFunctionName Returns tReportFunctionId
77080>>>>>        Integer iSubReports iSubReport
77080>>>>>        String sSubReportId
77080>>>>>        tReportFunctionId ReportFunctionId
77080>>>>>        tReportFunctionId ReportFunctionId
77080>>>>>
77080>>>>>        Get FunctionIdByName sReportId sFunctionName to ReportFunctionId.iFunction
77081>>>>>        If (ReportFunctionId.iFunction <= -1) Begin
77083>>>>>            Get SubReportCount sReportId to iSubReports
77084>>>>>            If (iSubReports > 0) Begin
77086>>>>>                Decrement iSubReports
77087>>>>>                For iSubReport from 0 to iSubReports
77093>>>>>>
77093>>>>>                    Get SubReportId sReportId iSubReport to sSubReportId
77094>>>>>                    Get ReportIdForFunction sSubReportId sFunctionName to ReportFunctionId
77095>>>>>                    If (ReportFunctionId.iFunction >= 0) Begin
77097>>>>>                        Function_Return ReportFunctionId
77098>>>>>                    End
77098>>>>>>
77098>>>>>                Loop
77099>>>>>>
77099>>>>>            End
77099>>>>>>
77099>>>>>        End
77099>>>>>>
77099>>>>>        Else Begin
77100>>>>>            Move sReportId to ReportFunctionId.sReportId
77101>>>>>        End
77101>>>>>>
77101>>>>>
77101>>>>>        Function_Return ReportFunctionId
77102>>>>>    End_Function
77103>>>>>
77103>>>>>    Function ReportIdsForFunction String sReportId String sFunctionName Returns tReportFunctionId[]
77105>>>>>        tReportFunctionId[] ReportFunctionIds
77105>>>>>        tReportFunctionId[] ReportFunctionIds
77106>>>>>
77106>>>>>        Send CollectReportIdsForFunction sReportId sFunctionName (&ReportFunctionIds)
77107>>>>>
77107>>>>>        Function_Return ReportFunctionIds
77108>>>>>    End_Function
77109>>>>>
77109>>>>>    Function ReportIdsForParameter String sReportId String sParameterName Returns tReportParameterId[]
77111>>>>>        tReportParameterId[] ReportParameterIds
77111>>>>>        tReportParameterId[] ReportParameterIds
77112>>>>>
77112>>>>>        Send CollectReportIdsForParameter sReportId sParameterName (&ReportParameterIds)
77113>>>>>
77113>>>>>        Function_Return ReportParameterIds
77114>>>>>    End_Function
77115>>>>>
77115>>>>>    // Returns an array of language IDs loaded from an optional available language.db file
77115>>>>>    Function ReportLanguageList String sReportId Returns Integer[]
77117>>>>>        Integer[] iLanguages
77118>>>>>        Boolean bComObjectCreated
77118>>>>>
77118>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77120>>>>>            Get psReportId to sReportId
77121>>>>>        End
77121>>>>>>
77121>>>>>
77121>>>>>        Get IsComObjectCreated to bComObjectCreated
77122>>>>>        If (bComObjectCreated) Begin
77124>>>>>            Get ComReportLanguageList sReportId to iLanguages
77125>>>>>        End
77125>>>>>>
77125>>>>>        Else Begin
77126>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77127>>>>>>
77127>>>>>        End
77127>>>>>>
77127>>>>>
77127>>>>>        Function_Return iLanguages
77128>>>>>    End_Function
77129>>>>>
77129>>>>>    // Returns the number of pages for the current report
77129>>>>>    // Warning: The count can take some time to complete and return
77129>>>>>    Function ReportPageCount Returns Integer
77131>>>>>        Integer iPages
77131>>>>>        String sReportId
77131>>>>>        Boolean bComObjectCreated
77131>>>>>
77131>>>>>        Send RedirectErrorsToLocalHandler True
77132>>>>>
77132>>>>>        Get psReportId to sReportId
77133>>>>>        If (sReportId <> "") Begin
77135>>>>>            Get IsComObjectCreated to bComObjectCreated
77136>>>>>            If (bComObjectCreated) Begin
77138>>>>>                Get ComReportPageCount sReportId to iPages
77139>>>>>            End
77139>>>>>>
77139>>>>>            Else Begin
77140>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77141>>>>>>
77141>>>>>            End
77141>>>>>>
77141>>>>>        End
77141>>>>>>
77141>>>>>        Else Begin
77142>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77143>>>>>>
77143>>>>>        End
77143>>>>>>
77143>>>>>
77143>>>>>        Send RedirectErrorsToLocalHandler False
77144>>>>>
77144>>>>>        Function_Return iPages
77145>>>>>    End_Function
77146>>>>>
77146>>>>>    // Returns the SQL Query instruction for ODBC / SQLite based reports after one time executed
77146>>>>>    Function ReportQuery String sReportId Returns String
77148>>>>>        String sQuery sReportName
77148>>>>>        Boolean bComObjectCreated
77148>>>>>        Integer eDatabaseType
77148>>>>>
77148>>>>>        Send RedirectErrorsToLocalHandler True
77149>>>>>
77149>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77151>>>>>            Get psReportId to sReportId
77152>>>>>        End
77152>>>>>>
77152>>>>>
77152>>>>>        If (sReportId <> "") Begin
77154>>>>>            Get IsComObjectCreated to bComObjectCreated
77155>>>>>            If (bComObjectCreated) Begin
77157>>>>>                Get DatabaseType sReportId to eDatabaseType
77158>>>>>                If ((Hi (eDatabaseType) = C_DRODBC) or (Hi (eDatabaseType) = C_DRSQLite)) Begin
77160>>>>>                    Get ComReportQuery sReportId to sQuery
77161>>>>>                End
77161>>>>>>
77161>>>>>                Else Begin
77162>>>>>                    Get psReportName to sReportName
77163>>>>>                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRNoODBCDatabaseType, sReportName))
77164>>>>>>
77164>>>>>                End
77164>>>>>>
77164>>>>>            End
77164>>>>>>
77164>>>>>            Else Begin
77165>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77166>>>>>>
77166>>>>>            End
77166>>>>>>
77166>>>>>        End
77166>>>>>>
77166>>>>>
77166>>>>>        Send RedirectErrorsToLocalHandler False
77167>>>>>
77167>>>>>        Function_Return sQuery
77168>>>>>    End_Function
77169>>>>>
77169>>>>>    // This function retrieves the reports folder and if this exists it checks if there is
77169>>>>>    // a sub-folder with the name Cache and if that folder exists. If so the full pathname is returned.
77169>>>>>    Function ReportsCacheFolder Returns String
77171>>>>>        String sReportsFolder sCacheFolder
77171>>>>>        Boolean bIsDirectory
77171>>>>>
77171>>>>>        Get ReportsFolder to sReportsFolder
77172>>>>>        If (sReportsFolder <> '') Begin
77174>>>>>            If (Right (sReportsFolder, 1) <> SysConf (SYSCONF_DIR_SEPARATOR)) Begin
77176>>>>>                Move (sReportsFolder - SysConf (SYSCONF_DIR_SEPARATOR)) to sReportsFolder
77177>>>>>            End
77177>>>>>>
77177>>>>>
77177>>>>>            Move (sReportsFolder - "Cache\") to sCacheFolder
77178>>>>>            Get IsDirectory sCacheFolder to bIsDirectory
77179>>>>>            If (bIsDirectory) Begin
77181>>>>>                Function_Return sCacheFolder
77182>>>>>            End
77182>>>>>>
77182>>>>>        End
77182>>>>>>
77182>>>>>
77182>>>>>        Function_Return ''
77183>>>>>    End_Function
77184>>>>>
77184>>>>>    // Attempts to map a DataFlex application table.column reference to a report table.column
77184>>>>>    // reference.
77184>>>>>    // Expected usage:
77184>>>>>    //    Get ReportTableColumnName sReportId File_Field Customer.Name to sTableColumnName
77184>>>>>    //    Above returns either a blank string when not found or a {Customer.Name}
77184>>>>>    Function ReportTableColumnName String sReportId Handle hTable Handle hColumn Returns String
77186>>>>>        Boolean bOpened
77186>>>>>        String sTableName sColumnName sTableColumnName
77186>>>>>        String sReportTableName sReportTableColumnName
77186>>>>>        Integer iTables iTable iColumns iColumn
77186>>>>>
77186>>>>>        Send RedirectErrorsToLocalHandler True
77187>>>>>
77187>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77189>>>>>            Get psReportId to sReportId
77190>>>>>        End
77190>>>>>>
77190>>>>>
77190>>>>>        If (sReportId <> "") Begin
77192>>>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
77195>>>>>            If (bOpened) Begin
77197>>>>>                Get DataFlexTableName hTable to sTableName
77198>>>>>                Get_Attribute DF_FIELD_NAME of hTable hColumn to sColumnName
77201>>>>>
77201>>>>>                Get TableCount sReportId to iTables
77202>>>>>                Move 0 to iTable
77203>>>>>                While (iTable < iTables and sTableColumnName = "")
77207>>>>>                    Get psTableName sReportId iTable to sReportTableName
77208>>>>>                    If (Uppercase (sReportTableName) = Uppercase (sTableName)) Begin
77210>>>>>                        Get TableColumnCount sReportId iTable to iColumns
77211>>>>>                        Move 0 to iColumn
77212>>>>>                        While (iColumn < iColumns and sTableColumnName = "")
77216>>>>>                            Get TableColumnName sReportId iTable iColumn to sReportTableColumnName
77217>>>>>                            If (Uppercase (sReportTableColumnName) = Uppercase (sColumnName)) Begin
77219>>>>>                                Get TableAliasName sReportId iTable to sTableName
77220>>>>>                                Move ("{" - sReportTableName - "." - sReportTableColumnName - "}") to sTableColumnName
77221>>>>>                            End
77221>>>>>>
77221>>>>>                            Increment iColumn
77222>>>>>                        Loop
77223>>>>>>
77223>>>>>                    End
77223>>>>>>
77223>>>>>                    Increment iTable
77224>>>>>                Loop
77225>>>>>>
77225>>>>>            End
77225>>>>>>
77225>>>>>        End
77225>>>>>>
77225>>>>>
77225>>>>>        Send RedirectErrorsToLocalHandler False
77226>>>>>
77226>>>>>        Function_Return sTableColumnName
77227>>>>>    End_Function
77228>>>>>
77228>>>>>    // This function retrieves the home folder of the workspace. Then it checks if there
77228>>>>>    // is a folder named 'Reports' inside this folder. If so the full path to that folder
77228>>>>>    // will be returned
77228>>>>>    Function ReportsFolder Returns String
77230>>>>>        Handle hoWorkspace
77230>>>>>        String sHomeFolder sReportsFolder
77230>>>>>        Boolean bIsDirectory
77230>>>>>
77230>>>>>        If (ghoApplication <> 0) Begin
77232>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
77233>>>>>            Get psHome of hoWorkspace to sHomeFolder
77234>>>>>            If (Right (sHomeFolder, 1) <> SysConf (SYSCONF_DIR_SEPARATOR)) Begin
77236>>>>>                Move (sHomeFolder - SysConf (SYSCONF_DIR_SEPARATOR)) to sHomeFolder
77237>>>>>            End
77237>>>>>>
77237>>>>>
77237>>>>>            Move (sHomeFolder - "Reports\") to sReportsFolder
77238>>>>>            Get IsDirectory sReportsFolder to bIsDirectory
77239>>>>>            If (bIsDirectory) Begin
77241>>>>>                Function_Return sReportsFolder
77242>>>>>            End
77242>>>>>>
77242>>>>>        End
77242>>>>>>
77242>>>>>
77242>>>>>        Function_Return ''
77243>>>>>    End_Function
77244>>>>>
77244>>>>>    // Quick function to test if the main report or any of the sub-reports uses ODBC as database type
77244>>>>>    Function ReportUsesODBC String sReportId Returns Boolean
77246>>>>>        Integer eDatabaseType iSubReports iSubReport
77246>>>>>        String sSubReportId
77246>>>>>        Boolean bODBCBasedReport
77246>>>>>
77246>>>>>        Get DatabaseType sReportId to eDatabaseType
77247>>>>>        If (Hi (eDatabaseType) = C_DRODBC) Begin
77249>>>>>            Move True to bODBCBasedReport
77250>>>>>        End
77250>>>>>>
77250>>>>>        Else Begin
77251>>>>>            Get SubReportCount sReportId to iSubReports
77252>>>>>            Decrement iSubReports
77253>>>>>            For iSubReport from 0 to iSubReports
77259>>>>>>
77259>>>>>                Get SubReportId sReportId iSubReport to sSubReportId
77260>>>>>                Get ReportUsesODBC sSubReportId to bODBCBasedReport
77261>>>>>                If (bODBCBasedReport) ;                    Break
77264>>>>>            Loop
77265>>>>>>
77265>>>>>        End
77265>>>>>>
77265>>>>>
77265>>>>>        Function_Return bODBCBasedReport
77266>>>>>    End_Function
77267>>>>>
77267>>>>>    // Quick function to test if the main report or any of the sub-reports uses RDS as database type
77267>>>>>    Function ReportUsesRDS String sReportId Returns Boolean
77269>>>>>        Integer eDatabaseType iSubReports iSubReport
77269>>>>>        String sSubReportId
77269>>>>>        Boolean bRDSBasedReport
77269>>>>>
77269>>>>>        Get DatabaseType sReportId to eDatabaseType
77270>>>>>        If (eDatabaseType = C_DRRDS) Begin
77272>>>>>            Move True to bRDSBasedReport
77273>>>>>        End
77273>>>>>>
77273>>>>>        Else Begin
77274>>>>>            Get SubReportCount sReportId to iSubReports
77275>>>>>            Decrement iSubReports
77276>>>>>            For iSubReport from 0 to iSubReports
77282>>>>>>
77282>>>>>                Get SubReportId sReportId iSubReport to sSubReportId
77283>>>>>                Get ReportUsesRDS sSubReportId to bRDSBasedReport
77284>>>>>                If (bRDSBasedReport) ;                    Break
77287>>>>>            Loop
77288>>>>>>
77288>>>>>        End
77288>>>>>>
77288>>>>>
77288>>>>>        Function_Return bRDSBasedReport
77289>>>>>    End_Function
77290>>>>>
77290>>>>>    // Quick function to test if the main report or any of the sub-reports uses Stored Procedures as database type
77290>>>>>    Function ReportUsesStoredProcedures String sReportId Returns Boolean
77292>>>>>        Integer eDatabaseType iSubReports iSubReport
77292>>>>>        String sSubReportId
77292>>>>>        Boolean bSPBasedReport
77292>>>>>
77292>>>>>        Get DatabaseType sReportId to eDatabaseType
77293>>>>>        If ((Hi (eDatabaseType) = C_DRODBC) and (Low (eDatabaseType) = C_DRSP)) Begin
77295>>>>>            Move True to bSPBasedReport
77296>>>>>        End
77296>>>>>>
77296>>>>>        Else Begin
77297>>>>>            Get SubReportCount sReportId to iSubReports
77298>>>>>            Decrement iSubReports
77299>>>>>            For iSubReport from 0 to iSubReports
77305>>>>>>
77305>>>>>                Get SubReportId sReportId iSubReport to sSubReportId
77306>>>>>                Get ReportUsesStoredProcedures sSubReportId to bSPBasedReport
77307>>>>>                If (bSPBasedReport) ;                    Break
77310>>>>>            Loop
77311>>>>>>
77311>>>>>        End
77311>>>>>>
77311>>>>>
77311>>>>>        Function_Return bSPBasedReport
77312>>>>>    End_Function
77313>>>>>
77313>>>>>    Procedure ResetFunctionErrorInfo
77315>>>>>        tDRFunctionErrorInfo FunctionErrorInfo
77315>>>>>        tDRFunctionErrorInfo FunctionErrorInfo
77315>>>>>
77315>>>>>        Set pFunctionErrorInfo to FunctionErrorInfo
77316>>>>>    End_Procedure
77317>>>>>
77317>>>>>    Function RTFExportOptionsCorrect DRRTFExportOptions RTFExportOptionsData Returns Boolean
77319>>>>>        Integer iPageCount
77319>>>>>
77319>>>>>        If (not (RTFExportOptionsData.bAllPages)) Begin
77321>>>>>            Get ReportPageCount to iPageCount
77322>>>>>            If (RTFExportOptionsData.iPage < 1 or RTFExportOptionsData.iPage > iPageCount) Begin
77324>>>>>                Error DFERR_DATAFLEX_REPORTS C_$DRHTMLExportInvalidPageNumber
77325>>>>>>
77325>>>>>                Function_Return False
77326>>>>>            End
77326>>>>>>
77326>>>>>        End
77326>>>>>>
77326>>>>>
77326>>>>>        Function_Return True
77327>>>>>    End_Function
77328>>>>>
77328>>>>>    // Runs the report. Uses OutputReport to determine the result location
77328>>>>>    Procedure RunReport
77330>>>>>        String sReportId
77330>>>>>
77330>>>>>        Set pbHasErrors to False
77331>>>>>
77331>>>>>        Get OpenReport to sReportId
77332>>>>>        If (sReportId <> "") Begin
77334>>>>>            Send OutputReport
77335>>>>>        End
77335>>>>>>
77335>>>>>    End_Procedure
77336>>>>>
77336>>>>>    // Assigns a default class identifier to the phcPreviewer property if not set by the developer
77336>>>>>    Procedure SetDefaultPreviewerClass
77338>>>>>        Integer ePreviewStyle
77338>>>>>        Handle hcPreviewer
77338>>>>>
77338>>>>>        Get phcPreviewer to hcPreviewer
77339>>>>>        If (hcPreviewer = 0) Begin
77341>>>>>            Get pePreviewStyle to ePreviewStyle
77342>>>>>            Case Begin
77342>>>>>                Case (ePreviewStyle = C_DRPREVIEW_VIEW)
77344>>>>>                    Set phcPreviewer to (RefClass (cDRPreview))
77345>>>>>                    Case Break
77346>>>>>                Case (ePreviewStyle = C_DRPREVIEW_TOOLPANEL)
77349>>>>>                    Set phcPreviewer to (RefClass (cDRToolPanelPreview))
77350>>>>>                    Case Break
77351>>>>>                Case (ePreviewStyle = C_DRPREVIEW_DESKTOPVIEW)
77354>>>>>                    Set phcPreviewer to (RefClass (cDRDesktopPreview))
77355>>>>>                    Case Break
77356>>>>>            Case End
77356>>>>>        End
77356>>>>>>
77356>>>>>    End_Procedure
77357>>>>>
77357>>>>>    // If the statuspanel is defined show the loading text.
77357>>>>>    Procedure ShowReportLoadingStatusText
77359>>>>>        Boolean bShowStatusPanel bIsActive
77359>>>>>        Handle hoStatusPanel
77359>>>>>        Integer eDelegationMode
77359>>>>>
77359>>>>>        Get pbShowStatusPanel to bShowStatusPanel
77360>>>>>        If (bShowStatusPanel) Begin
77362>>>>>            Get phoStatusPanel to hoStatusPanel
77363>>>>>            If (hoStatusPanel <> 0) Begin
77365>>>>>                Get Active_State of hoStatusPanel to bIsActive
77366>>>>>                If (bIsActive) Begin
77368>>>>>                    Register_Procedure SetStatusText
77368>>>>>                    Get Delegation_Mode of hoStatusPanel to eDelegationMode
77369>>>>>                    Set Delegation_Mode of hoStatusPanel to No_Delegate_Or_Error
77370>>>>>                    Send SetStatusText of hoStatusPanel C_$DRLoadingReportPleaseWait
77371>>>>>                    Set Delegation_Mode of hoStatusPanel to eDelegationMode
77372>>>>>                End
77372>>>>>>
77372>>>>>            End
77372>>>>>>
77372>>>>>        End
77372>>>>>>
77372>>>>>    End_Procedure
77373>>>>>
77373>>>>>    // Returns the number of sub-reports in the report
77373>>>>>    // When the first parameter is blank we take the main report id which means
77373>>>>>    // that when you want to get the number of sub-reports of a subreport you have to
77373>>>>>    // pass the reportid of the subreport
77373>>>>>    Function SubReportCount String sReportId Returns Integer
77375>>>>>        Integer iSubReports
77375>>>>>        Boolean bComObjectCreated
77375>>>>>
77375>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77377>>>>>            Get psReportId to sReportId
77378>>>>>        End
77378>>>>>>
77378>>>>>
77378>>>>>        If (sReportId <> "") Begin
77380>>>>>            Get IsComObjectCreated to bComObjectCreated
77381>>>>>            If (bComObjectCreated) Begin
77383>>>>>                Get ComSubreportCount sReportId to iSubReports
77384>>>>>            End
77384>>>>>>
77384>>>>>            Else Begin
77385>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77386>>>>>>
77386>>>>>            End
77386>>>>>>
77386>>>>>        End
77386>>>>>>
77386>>>>>        Else Begin
77387>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77388>>>>>>
77388>>>>>        End
77388>>>>>>
77388>>>>>
77388>>>>>        Function_Return iSubReports
77389>>>>>    End_Function
77390>>>>>
77390>>>>>    // Returns the ID of the subreport indicated by subreport number (0..N)
77390>>>>>    // When the first parameter is blank we take the main report id which means
77390>>>>>    // that when you want to get the Nth subreport ID of a subreport you have to
77390>>>>>    // pass the reportid of the subreport
77390>>>>>    Function SubReportId String sReportId Integer iSubReport Returns String
77392>>>>>        String sSubReportId
77392>>>>>        Integer iSubReportCount
77392>>>>>        Boolean bComObjectCreated
77392>>>>>
77392>>>>>        Send RedirectErrorsToLocalHandler True
77393>>>>>
77393>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77395>>>>>            Get psReportId to sReportId
77396>>>>>        End
77396>>>>>>
77396>>>>>
77396>>>>>        If (sReportId <> "") Begin
77398>>>>>            Get SubReportCount sReportId to iSubReportCount
77399>>>>>            If (iSubReport < 0 or iSubReport > iSubReportCount) Begin
77401>>>>>                Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSubReportNumberPassed, iSubReport))
77402>>>>>>
77402>>>>>            End
77402>>>>>>
77402>>>>>            Else Begin
77403>>>>>                Get IsComObjectCreated to bComObjectCreated
77404>>>>>                If (bComObjectCreated) Begin
77406>>>>>                    Get ComSubreportId sReportId iSubReport to sSubReportId
77407>>>>>                End
77407>>>>>>
77407>>>>>                Else Begin
77408>>>>>                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77409>>>>>>
77409>>>>>                End
77409>>>>>>
77409>>>>>            End
77409>>>>>>
77409>>>>>        End
77409>>>>>>
77409>>>>>        Else Begin
77410>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77411>>>>>>
77411>>>>>        End
77411>>>>>>
77411>>>>>
77411>>>>>        Send RedirectErrorsToLocalHandler False
77412>>>>>
77412>>>>>        Function_Return sSubReportId
77413>>>>>    End_Function
77414>>>>>
77414>>>>>    // Returns the ID of the sub-report whose name is identical to the passed name
77414>>>>>    // If multiple sub-reports have the same name the first sub-report with this name
77414>>>>>    // will be returned
77414>>>>>    Function SubReportIDByName String sReportId String sSubReportName Returns String
77416>>>>>        Integer iSubReports iSubReport
77416>>>>>        String sSubReportId sReportName sReturnedReportId
77416>>>>>
77416>>>>>        If (sReportId = '') Begin
77418>>>>>            Get psReportId to sReportId
77419>>>>>        End
77419>>>>>>
77419>>>>>
77419>>>>>        Get SubReportCount sReportId to iSubReports
77420>>>>>        Decrement iSubReports
77421>>>>>        For iSubReport from 0 to iSubReports
77427>>>>>>
77427>>>>>            Get SubReportId sReportId iSubReport to sSubReportId
77428>>>>>            Get ComReportName sSubReportId to sReportName
77429>>>>>            If (Lowercase (sReportName) = Lowercase (sSubReportName)) Begin
77431>>>>>                Function_Return sSubReportId
77432>>>>>            End
77432>>>>>>
77432>>>>>            Get SubReportIDByName sSubReportId sSubReportName to sReturnedReportId
77433>>>>>            If (sReturnedReportId <> "") Begin
77435>>>>>                Function_Return sReturnedReportId
77436>>>>>            End
77436>>>>>>
77436>>>>>        Loop
77437>>>>>>
77437>>>>>
77437>>>>>        // This will only happen if no sub-report can be found with the passed name
77437>>>>>        Function_Return ''
77438>>>>>    End_Function
77439>>>>>
77439>>>>>    // Returns the alias name for a table. When two tables are included with same base tablename
77439>>>>>    // an alias name was entered in the report designer
77439>>>>>    Function TableAliasName String sReportId Integer iTable Returns String
77441>>>>>        Integer iTables
77441>>>>>        String sTableAliasName
77441>>>>>        Boolean bComObjectCreated
77441>>>>>
77441>>>>>        Send RedirectErrorsToLocalHandler True
77442>>>>>
77442>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77444>>>>>            Get psReportId to sReportId
77445>>>>>        End
77445>>>>>>
77445>>>>>
77445>>>>>        If (sReportId <> "") Begin
77447>>>>>            Get IsComObjectCreated to bComObjectCreated
77448>>>>>            If (bComObjectCreated) Begin
77450>>>>>                Get ComTableCount sReportId to iTables
77451>>>>>                If (iTable < iTables and iTable >= 0) Begin
77453>>>>>                    Get ComTableNameAlias sReportId iTable to sTableAliasName
77454>>>>>                End
77454>>>>>>
77454>>>>>                Else Begin
77455>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
77456>>>>>>
77456>>>>>                End
77456>>>>>>
77456>>>>>            End
77456>>>>>>
77456>>>>>            Else Begin
77457>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77458>>>>>>
77458>>>>>            End
77458>>>>>>
77458>>>>>        End
77458>>>>>>
77458>>>>>        Else Begin
77459>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77460>>>>>>
77460>>>>>        End
77460>>>>>>
77460>>>>>
77460>>>>>        Send RedirectErrorsToLocalHandler False
77461>>>>>
77461>>>>>        Function_Return sTableAliasName
77462>>>>>    End_Function
77463>>>>>
77463>>>>>    // Returns the number of columns of a specific table in the report definition
77463>>>>>    Function TableColumnCount String sReportId Integer iTable Returns Integer
77465>>>>>        Integer iTables iColumns
77465>>>>>        Boolean bComObjectCreated
77465>>>>>
77465>>>>>        Send RedirectErrorsToLocalHandler True
77466>>>>>
77466>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77468>>>>>            Get psReportId to sReportId
77469>>>>>        End
77469>>>>>>
77469>>>>>
77469>>>>>        If (sReportId <> "") Begin
77471>>>>>            Get IsComObjectCreated to bComObjectCreated
77472>>>>>            If (bComObjectCreated) Begin
77474>>>>>                Get ComTableCount sReportId to iTables
77475>>>>>                If (iTable < iTables and iTable >= 0) Begin
77477>>>>>                    Get ComColumnCount sReportId iTable to iColumns
77478>>>>>                End
77478>>>>>>
77478>>>>>                Else Begin
77479>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
77480>>>>>>
77480>>>>>                End
77480>>>>>>
77480>>>>>            End
77480>>>>>>
77480>>>>>            Else Begin
77481>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77482>>>>>>
77482>>>>>            End
77482>>>>>>
77482>>>>>        End
77482>>>>>>
77482>>>>>        Else Begin
77483>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77484>>>>>>
77484>>>>>        End
77484>>>>>>
77484>>>>>
77484>>>>>        Send RedirectErrorsToLocalHandler False
77485>>>>>
77485>>>>>        Function_Return iColumns
77486>>>>>    End_Function
77487>>>>>
77487>>>>>    // Returns the index number (if any) assigned to a column in one of the report's table definitions
77487>>>>>    Function TableColumnIndex String sReportId Integer iTable Integer iColumn Returns Integer
77489>>>>>        Integer iTables iColumns iIndex
77489>>>>>        Boolean bComObjectCreated
77489>>>>>
77489>>>>>        Send RedirectErrorsToLocalHandler True
77490>>>>>
77490>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77492>>>>>            Get psReportId to sReportId
77493>>>>>        End
77493>>>>>>
77493>>>>>
77493>>>>>        If (sReportId <> "") Begin
77495>>>>>            Get IsComObjectCreated to bComObjectCreated
77496>>>>>            If (bComObjectCreated) Begin
77498>>>>>                Get ComTableCount sReportId to iTables
77499>>>>>                If (iTable < iTables and iTable >= 0) Begin
77501>>>>>                    Get ComColumnCount sReportId iTable to iColumns
77502>>>>>                    If (iColumn < iColumns and iColumn >= 0) Begin
77504>>>>>                        Get ComColumnIndex sReportId iTable iColumn to iIndex
77505>>>>>                    End
77505>>>>>>
77505>>>>>                    Else Begin
77506>>>>>                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
77507>>>>>>
77507>>>>>                    End
77507>>>>>>
77507>>>>>                End
77507>>>>>>
77507>>>>>                Else Begin
77508>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
77509>>>>>>
77509>>>>>                End
77509>>>>>>
77509>>>>>            End
77509>>>>>>
77509>>>>>            Else Begin
77510>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77511>>>>>>
77511>>>>>            End
77511>>>>>>
77511>>>>>        End
77511>>>>>>
77511>>>>>        Else Begin
77512>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77513>>>>>>
77513>>>>>        End
77513>>>>>>
77513>>>>>
77513>>>>>        Send RedirectErrorsToLocalHandler False
77514>>>>>
77514>>>>>        Function_Return iIndex
77515>>>>>    End_Function
77516>>>>>
77516>>>>>    // Returns the length defined for a particular column in one of the tables defined in the report
77516>>>>>    Function TableColumnLength String sReportId Integer iTable Integer iColumn Returns Integer
77518>>>>>        Integer iTables iColumns iLength
77518>>>>>        Boolean bComObjectCreated
77518>>>>>
77518>>>>>        Send RedirectErrorsToLocalHandler True
77519>>>>>
77519>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77521>>>>>            Get psReportId to sReportId
77522>>>>>        End
77522>>>>>>
77522>>>>>
77522>>>>>        If (sReportId <> "") Begin
77524>>>>>            Get IsComObjectCreated to bComObjectCreated
77525>>>>>            If (bComObjectCreated) Begin
77527>>>>>                Get ComTableCount sReportId to iTables
77528>>>>>                If (iTable < iTables and iTable >= 0) Begin
77530>>>>>                    Get ComColumnCount sReportId iTable to iColumns
77531>>>>>                    If (iColumn < iColumns and iColumn >= 0) Begin
77533>>>>>                        Get ComColumnLength sReportId iTable iColumn to iLength
77534>>>>>                    End
77534>>>>>>
77534>>>>>                    Else Begin
77535>>>>>                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
77536>>>>>>
77536>>>>>                    End
77536>>>>>>
77536>>>>>                End
77536>>>>>>
77536>>>>>                Else Begin
77537>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
77538>>>>>>
77538>>>>>                End
77538>>>>>>
77538>>>>>            End
77538>>>>>>
77538>>>>>            Else Begin
77539>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77540>>>>>>
77540>>>>>            End
77540>>>>>>
77540>>>>>        End
77540>>>>>>
77540>>>>>        Else Begin
77541>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77542>>>>>>
77542>>>>>        End
77542>>>>>>
77542>>>>>
77542>>>>>        Send RedirectErrorsToLocalHandler False
77543>>>>>
77543>>>>>        Function_Return iLength
77544>>>>>    End_Function
77545>>>>>
77545>>>>>    // Returns the name of the column for one of the tables in the report definition
77545>>>>>    Function TableColumnName String sReportId Integer iTable Integer iColumn Returns String
77547>>>>>        Integer iTables iColumns
77547>>>>>        String sColumnName
77547>>>>>        Boolean bComObjectCreated
77547>>>>>
77547>>>>>        Send RedirectErrorsToLocalHandler True
77548>>>>>
77548>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77550>>>>>            Get psReportId to sReportId
77551>>>>>        End
77551>>>>>>
77551>>>>>
77551>>>>>        If (sReportId <> "") Begin
77553>>>>>            Get IsComObjectCreated to bComObjectCreated
77554>>>>>            If (bComObjectCreated) Begin
77556>>>>>                Get ComTableCount sReportId to iTables
77557>>>>>                If (iTable < iTables and iTable >= 0) Begin
77559>>>>>                    Get ComColumnCount sReportId iTable to iColumns
77560>>>>>                    If (iColumn < iColumns and iColumn >= 0) Begin
77562>>>>>                        Get ComColumnName sReportId iTable iColumn to sColumnName
77563>>>>>                    End
77563>>>>>>
77563>>>>>                    Else Begin
77564>>>>>                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
77565>>>>>>
77565>>>>>                    End
77565>>>>>>
77565>>>>>                End
77565>>>>>>
77565>>>>>                Else Begin
77566>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
77567>>>>>>
77567>>>>>                End
77567>>>>>>
77567>>>>>            End
77567>>>>>>
77567>>>>>            Else Begin
77568>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77569>>>>>>
77569>>>>>            End
77569>>>>>>
77569>>>>>        End
77569>>>>>>
77569>>>>>        Else Begin
77570>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77571>>>>>>
77571>>>>>        End
77571>>>>>>
77571>>>>>
77571>>>>>        Send RedirectErrorsToLocalHandler False
77572>>>>>
77572>>>>>        Function_Return sColumnName
77573>>>>>    End_Function
77574>>>>>
77574>>>>>    // Returns the number of decimals after the decimal separator for a column in one the report's table definitions
77574>>>>>    Function TableColumnPrecision String sReportId Integer iTable Integer iColumn Returns Integer
77576>>>>>        Integer iTables iColumns iPrecision
77576>>>>>        Boolean bComObjectCreated
77576>>>>>
77576>>>>>        Send RedirectErrorsToLocalHandler True
77577>>>>>
77577>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77579>>>>>            Get psReportId to sReportId
77580>>>>>        End
77580>>>>>>
77580>>>>>
77580>>>>>        If (sReportId <> "") Begin
77582>>>>>            Get IsComObjectCreated to bComObjectCreated
77583>>>>>            If (bComObjectCreated) Begin
77585>>>>>                Get ComTableCount sReportId to iTables
77586>>>>>                If (iTable < iTables and iTable >= 0) Begin
77588>>>>>                    Get ComColumnCount sReportId iTable to iColumns
77589>>>>>                    If (iColumn < iColumns and iColumn >= 0) Begin
77591>>>>>                        Get ComColumnPrecision sReportId iTable iColumn to iPrecision
77592>>>>>                    End
77592>>>>>>
77592>>>>>                    Else Begin
77593>>>>>                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
77594>>>>>>
77594>>>>>                    End
77594>>>>>>
77594>>>>>                End
77594>>>>>>
77594>>>>>                Else Begin
77595>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
77596>>>>>>
77596>>>>>                End
77596>>>>>>
77596>>>>>            End
77596>>>>>>
77596>>>>>            Else Begin
77597>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77598>>>>>>
77598>>>>>            End
77598>>>>>>
77598>>>>>        End
77598>>>>>>
77598>>>>>        Else Begin
77599>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77600>>>>>>
77600>>>>>        End
77600>>>>>>
77600>>>>>
77600>>>>>        Send RedirectErrorsToLocalHandler False
77601>>>>>
77601>>>>>        Function_Return iPrecision
77602>>>>>    End_Function
77603>>>>>
77603>>>>>    // Returns the type of a column for one of the tables in the report. The value is one of the SQL
77603>>>>>    // datatypes defined in SQLDatatypes.h.pkg
77603>>>>>    Function TableColumnType String sReportId Integer iTable Integer iColumn Returns C_drColumnType
77605>>>>>        Integer iTables iColumns eType
77605>>>>>        Boolean bComObjectCreated
77605>>>>>
77605>>>>>        Send RedirectErrorsToLocalHandler True
77606>>>>>
77606>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77608>>>>>            Get psReportId to sReportId
77609>>>>>        End
77609>>>>>>
77609>>>>>
77609>>>>>        If (sReportId <> "") Begin
77611>>>>>            Get IsComObjectCreated to bComObjectCreated
77612>>>>>            If (bComObjectCreated) Begin
77614>>>>>                Get ComTableCount sReportId to iTables
77615>>>>>                If (iTable < iTables and iTable >= 0) Begin
77617>>>>>                    Get ComColumnCount sReportId iTable to iColumns
77618>>>>>                    If (iColumn < iColumns and iColumn >= 0) Begin
77620>>>>>                        Get ComColumnType sReportId iTable iColumn to eType
77621>>>>>                    End
77621>>>>>>
77621>>>>>                    Else Begin
77622>>>>>                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
77623>>>>>>
77623>>>>>                    End
77623>>>>>>
77623>>>>>                End
77623>>>>>>
77623>>>>>                Else Begin
77624>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
77625>>>>>>
77625>>>>>                End
77625>>>>>>
77625>>>>>            End
77625>>>>>>
77625>>>>>            Else Begin
77626>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77627>>>>>>
77627>>>>>            End
77627>>>>>>
77627>>>>>        End
77627>>>>>>
77627>>>>>        Else Begin
77628>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77629>>>>>>
77629>>>>>        End
77629>>>>>>
77629>>>>>
77629>>>>>        Send RedirectErrorsToLocalHandler False
77630>>>>>
77630>>>>>        Function_Return eType
77631>>>>>    End_Function
77632>>>>>
77632>>>>>    // Returns the number of tables in the report
77632>>>>>    Function TableCount String sReportId Returns Integer
77634>>>>>        Integer iTables
77634>>>>>        Boolean bComObjectCreated
77634>>>>>
77634>>>>>        Send RedirectErrorsToLocalHandler True
77635>>>>>
77635>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77637>>>>>            Get psReportId to sReportId
77638>>>>>        End
77638>>>>>>
77638>>>>>
77638>>>>>        If (sReportId <> "") Begin
77640>>>>>            Get IsComObjectCreated to bComObjectCreated
77641>>>>>            If (bComObjectCreated) Begin
77643>>>>>                Get ComTableCount sReportId to iTables
77644>>>>>            End
77644>>>>>>
77644>>>>>            Else Begin
77645>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77646>>>>>>
77646>>>>>            End
77646>>>>>>
77646>>>>>        End
77646>>>>>>
77646>>>>>        Else Begin
77647>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77648>>>>>>
77648>>>>>        End
77648>>>>>>
77648>>>>>
77648>>>>>        Send RedirectErrorsToLocalHandler False
77649>>>>>
77649>>>>>        Function_Return iTables
77650>>>>>    End_Function
77651>>>>>
77651>>>>>    // Use this method to pass the data of the variant array to the RDS handler in the print engine
77651>>>>>    Procedure TableData String sReportId Integer iTable Variant[][] vTableData
77653>>>>>        Boolean bComObjectCreated
77653>>>>>        Integer iTables eDatabaseType
77653>>>>>
77653>>>>>        Send RedirectErrorsToLocalHandler True
77654>>>>>
77654>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77656>>>>>            Get psReportId to sReportId
77657>>>>>        End
77657>>>>>>
77657>>>>>
77657>>>>>        If (sReportId <> "") Begin
77659>>>>>            Get IsComObjectCreated to bComObjectCreated
77660>>>>>            If (bComObjectCreated) Begin
77662>>>>>                Get ComDatabaseType sReportId to eDatabaseType
77663>>>>>                If (eDatabaseType = C_DRRDS) Begin
77665>>>>>                    Get ComTableCount sReportId to iTables
77666>>>>>                    If (iTable < iTables and iTable >= 0) Begin
77668>>>>>                        Send ComTableData sReportId iTable vTableData
77669>>>>>                    End
77669>>>>>>
77669>>>>>                End
77669>>>>>>
77669>>>>>                Else Begin
77670>>>>>                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRNotTheCorrectDatabaseType, Name (Self)))
77671>>>>>>
77671>>>>>                End
77671>>>>>>
77671>>>>>            End
77671>>>>>>
77671>>>>>            Else Begin
77672>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77673>>>>>>
77673>>>>>            End
77673>>>>>>
77673>>>>>        End
77673>>>>>>
77673>>>>>        Else Begin
77674>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77675>>>>>>
77675>>>>>        End
77675>>>>>>
77675>>>>>
77675>>>>>        Send RedirectErrorsToLocalHandler False
77676>>>>>    End_Procedure
77677>>>>>
77677>>>>>    // Loops through all tables of a report and if any of its table names matches
77677>>>>>    // with the passed table name (case insensitive) it will return its offset/number
77677>>>>>    Function TableNumber String sReportId String sTableName Returns Integer
77679>>>>>        Integer iTables iTable
77679>>>>>        String  sReportTableName
77679>>>>>        Boolean bComObjectCreated
77679>>>>>
77679>>>>>        Send RedirectErrorsToLocalHandler True
77680>>>>>
77680>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77682>>>>>            Get psReportId to sReportId
77683>>>>>        End
77683>>>>>>
77683>>>>>
77683>>>>>        If (sReportId <> "") Begin
77685>>>>>            Get IsComObjectCreated to bComObjectCreated
77686>>>>>            If (bComObjectCreated) Begin
77688>>>>>                Get ComTableCount sReportId to iTables
77689>>>>>                If (iTables > 0) Begin
77691>>>>>                    Decrement iTables
77692>>>>>                    Move (Uppercase (sTableName)) to sTableName
77693>>>>>                    For iTable from 0 to iTables
77699>>>>>>
77699>>>>>                        Get ComTableNameAlias sReportId iTable to sReportTableName
77700>>>>>                        If (Uppercase (sReportTableName) = sTableName) Begin
77702>>>>>                            Send RedirectErrorsToLocalHandler False
77703>>>>>                            Function_Return iTable
77704>>>>>                        End
77704>>>>>>
77704>>>>>                    Loop
77705>>>>>>
77705>>>>>                End
77705>>>>>>
77705>>>>>            End
77705>>>>>>
77705>>>>>            Else Begin
77706>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77707>>>>>>
77707>>>>>            End
77707>>>>>>
77707>>>>>        End
77707>>>>>>
77707>>>>>        Else Begin
77708>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77709>>>>>>
77709>>>>>        End
77709>>>>>>
77709>>>>>
77709>>>>>        Send RedirectErrorsToLocalHandler False
77710>>>>>
77710>>>>>        Function_Return -1
77711>>>>>    End_Function
77712>>>>>
77712>>>>>    // Developers can override this function to return a different name, especially
77712>>>>>    // in case of P.SQL this make sense
77712>>>>>    Function DataFlexTableName Handle hTable Returns String
77714>>>>>        String sDriver sTableName
77714>>>>>
77714>>>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriver
77717>>>>>        Case Begin
77717>>>>>            Case (sDriver = "DATAFLEX")
77719>>>>>                // DataFlex Reports works with the tablename on disk
77719>>>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
77722>>>>>                Case Break
77723>>>>>            Case (sDriver = "MSSQLDRV")
77726>>>>>            Case (sDriver = "DB2_DRV")
77729>>>>>            Case (sDriver = "ODBC_DRV")
77732>>>>>                // Returns the name of the table specified in the INT file
77732>>>>>                Get_Attribute DF_FILE_TABLE_NAME of hTable to sTableName
77735>>>>>                Case Break
77736>>>>>            Case (sDriver = "DFBTRDRV")
77739>>>>>                // rootname most likely contains DFBTRDRV or .INT
77739>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
77742>>>>>                Case Break
77743>>>>>        Case End
77743>>>>>
77743>>>>>        Function_Return sTableName
77744>>>>>    End_Function
77745>>>>>
77745>>>>>    // This method can be used to find out if the syntax of a certain filterfunction is correct
77745>>>>>    Function TestFilterFunction String sReportId String sFilterFunction Returns Boolean
77747>>>>>        Integer iError
77747>>>>>        Boolean bComObjectCreated
77747>>>>>
77747>>>>>        Send RedirectErrorsToLocalHandler True
77748>>>>>
77748>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77750>>>>>            Get psReportId to sReportId
77751>>>>>        End
77751>>>>>>
77751>>>>>
77751>>>>>        If (sReportId <> "") Begin
77753>>>>>            Get IsComObjectCreated to bComObjectCreated
77754>>>>>            If (bComObjectCreated) Begin
77756>>>>>                Get ComFunctionCheck sReportId sFilterFunction -1 to iError
77757>>>>>            End
77757>>>>>>
77757>>>>>            Else Begin
77758>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77759>>>>>>
77759>>>>>            End
77759>>>>>>
77759>>>>>        End
77759>>>>>>
77759>>>>>        Else Begin
77760>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77761>>>>>>
77761>>>>>        End
77761>>>>>>
77761>>>>>
77761>>>>>        Send RedirectErrorsToLocalHandler False
77762>>>>>
77762>>>>>        Function_Return (iError = 0)
77763>>>>>    End_Function
77764>>>>>
77764>>>>>    // Use this function to convert a time variable to string. Should be used for psParameterValue.
77764>>>>>    Function TimeToString Time tmValue Returns String
77766>>>>>        String sTimeResult
77766>>>>>
77766>>>>>        Get TimeToString of oDRReportHelper tmValue to sTimeResult
77767>>>>>
77767>>>>>        Function_Return sTimeResult
77768>>>>>    End_Function
77769>>>>>
77769>>>>>    // Use this method to count the number of parameters in a report and its sub-reports.
77769>>>>>    // Use the ParameterCount function to count the parameters of a specific report only
77769>>>>>    Function TotalParameterCount String sReportId Returns Integer
77771>>>>>        Boolean bComObjectCreated
77771>>>>>        Integer iParameterCount iSubReportParameterCount iSubReports iSubReport
77771>>>>>        String sSubReportId
77771>>>>>
77771>>>>>        Send RedirectErrorsToLocalHandler True
77772>>>>>
77772>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77774>>>>>            Get psReportId to sReportId
77775>>>>>        End
77775>>>>>>
77775>>>>>
77775>>>>>        If (sReportId <> "") Begin
77777>>>>>            Get IsComObjectCreated to bComObjectCreated
77778>>>>>            If (bComObjectCreated) Begin
77780>>>>>                Get ParameterCount sReportId to iParameterCount
77781>>>>>                Get SubReportCount sReportId to iSubReports
77782>>>>>                If (iSubReports > 0) Begin
77784>>>>>                    Decrement iSubReports
77785>>>>>                    For iSubReport from 0 to iSubReports
77791>>>>>>
77791>>>>>                        Get SubReportId sReportId iSubReport to sSubReportId
77792>>>>>                        Get TotalParameterCount sSubReportId to iSubReportParameterCount
77793>>>>>                        Move (iSubReportParameterCount + iParameterCount) to iParameterCount
77794>>>>>                    Loop
77795>>>>>>
77795>>>>>                End
77795>>>>>>
77795>>>>>            End
77795>>>>>>
77795>>>>>        End
77795>>>>>>
77795>>>>>
77795>>>>>        Send RedirectErrorsToLocalHandler False
77796>>>>>
77796>>>>>        Function_Return iParameterCount
77797>>>>>    End_Function
77798>>>>>
77798>>>>>    Function DRDate DateTime dtValue Returns String
77800>>>>>        String sResult
77800>>>>>
77800>>>>>        Move ("DateSerial (" + String (DateGetYear (dtValue)) + "," + String (DateGetMonth (dtValue)) + ","  + String (DateGetDay (dtValue)) + ")") to sResult
77801>>>>>
77801>>>>>        Function_Return sResult
77802>>>>>    End_Function
77803>>>>>
77803>>>>>    Function DRInteger Integer iValue Returns String
77805>>>>>        String sResult
77805>>>>>
77805>>>>>        Move ('CInt ("' + String (iValue) + '")') to sResult
77806>>>>>
77806>>>>>        Function_Return sResult
77807>>>>>    End_Function
77808>>>>>
77808>>>>>    Function DRNumber Number nValue Returns String
77810>>>>>        String sResult
77810>>>>>
77810>>>>>        Move ('CDbl ("' + String (nValue) + '")') to sResult
77811>>>>>
77811>>>>>        Function_Return sResult
77812>>>>>    End_Function
77813>>>>>
77813>>>>>    Function DRString String sValue Returns String
77815>>>>>        String sResult
77815>>>>>
77815>>>>>        Move ('CStr ("' + sValue + '")') to sResult
77816>>>>>
77816>>>>>        Function_Return sResult
77817>>>>>    End_Function
77818>>>>>
77818>>>>>    Function XLSExportOptionsCorrect DRXLSExportOptions XLSExportOptionsData Returns Boolean
77820>>>>>        If (XLSExportOptionsData.iXLSVersion < C_DRXLS2003 or XLSExportOptionsData.iXLSVersion > C_DRXLS2007) Begin
77822>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRXLSVersionNumberIncorrect
77823>>>>>>
77823>>>>>            Function_Return False
77824>>>>>        End
77824>>>>>>
77824>>>>>
77824>>>>>        If (XLSExportOptionsData.iNewSheet < C_DRNoSheets or XLSExportOptionsData.iNewSheet > C_DRSheetsPage) Begin
77826>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRXLSNewSheetOptionIncorrect
77827>>>>>>
77827>>>>>            Function_Return False
77828>>>>>        End
77828>>>>>>
77828>>>>>
77828>>>>>        If (XLSExportOptionsData.iColumnWidth < 5 or XLSExportOptionsData.iColumnWidth > 999) Begin
77830>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRXLSIncorrectColumnWidth
77831>>>>>>
77831>>>>>            Function_Return False
77832>>>>>        End
77832>>>>>>
77832>>>>>
77832>>>>>        Function_Return True
77833>>>>>    End_Function
77834>>>>>
77834>>>>>    // ********** PUBLIC PROPERTIES *************
77834>>>>>
77834>>>>>    // Passes the struct with export options to the COM integration
77834>>>>>    Procedure Set pCSVExportOptions DRCSVExportOptions CSVExportOptionsData
77836>>>>>        String sReportId
77836>>>>>        Boolean bComObjectCreated
77836>>>>>
77836>>>>>        Send RedirectErrorsToLocalHandler True
77837>>>>>
77837>>>>>        Get psReportId to sReportId
77838>>>>>        If (sReportId <> "") Begin
77840>>>>>            Get IsComObjectCreated to bComObjectCreated
77841>>>>>            If (bComObjectCreated) Begin
77843>>>>>                Send ComCSVExportOptions sReportId (AddressOf (CSVExportOptionsData))
77844>>>>>            End
77844>>>>>>
77844>>>>>            Else Begin
77845>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77846>>>>>>
77846>>>>>            End
77846>>>>>>
77846>>>>>        End
77846>>>>>>
77846>>>>>        Else Begin
77847>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77848>>>>>>
77848>>>>>        End
77848>>>>>>
77848>>>>>
77848>>>>>        Send RedirectErrorsToLocalHandler False
77849>>>>>    End_Procedure
77850>>>>>
77850>>>>>    // Should be:
77850>>>>>    // for C_DRDF: The DF_OPEN_PATH
77850>>>>>    // for C_DRODBC or C_DRSQLite: The ODBC connectionstring,
77850>>>>>    //   eg: DSN=Dynamic AI Library Demo;DBQ=C:\Program Files\Dynamic AI\Dat\Dynamic AI Library Demo.mdb;DriverId=25;FIL=MS Access;MaxBufferSize=2048;PageTimeout=5;
77850>>>>>    Procedure Set psDatabaseConnection String sReportId String sConnectionString
77852>>>>>        Boolean bComObjectCreated
77852>>>>>
77852>>>>>        Send RedirectErrorsToLocalHandler True
77853>>>>>
77853>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77855>>>>>            Get psReportId to sReportId
77856>>>>>        End
77856>>>>>>
77856>>>>>
77856>>>>>        If (sReportId <> "") Begin
77858>>>>>            Get IsComObjectCreated to bComObjectCreated
77859>>>>>            If (bComObjectCreated) Begin
77861>>>>>                Set ComDatabaseConnection sReportId to sConnectionString
77862>>>>>            End
77862>>>>>>
77862>>>>>            Else Begin
77863>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77864>>>>>>
77864>>>>>            End
77864>>>>>>
77864>>>>>        End
77864>>>>>>
77864>>>>>        Else Begin
77865>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77866>>>>>>
77866>>>>>        End
77866>>>>>>
77866>>>>>
77866>>>>>        Send RedirectErrorsToLocalHandler False
77867>>>>>    End_Procedure
77868>>>>>
77868>>>>>    // Should be:
77868>>>>>    // for C_DRDF: The DF_OPEN_PATH
77868>>>>>    // for C_DRODBC or C_DRSP: The ODBC connectionstring,
77868>>>>>    //   eg: DSN=Dynamic AI Library Demo;DBQ=C:\Program Files\Dynamic AI\Dat\Dynamic AI Library Demo.mdb;DriverId=25;FIL=MS Access;MaxBufferSize=2048;PageTimeout=5;
77868>>>>>    Function psDatabaseConnection String sReportId Returns String
77870>>>>>        String sConnectionString
77870>>>>>        Boolean bComObjectCreated
77870>>>>>
77870>>>>>        Send RedirectErrorsToLocalHandler True
77871>>>>>
77871>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77873>>>>>            Get psReportId to sReportId
77874>>>>>        End
77874>>>>>>
77874>>>>>
77874>>>>>        If (sReportId <> "") Begin
77876>>>>>            Get IsComObjectCreated to bComObjectCreated
77877>>>>>            If (bComObjectCreated) Begin
77879>>>>>                Get ComDatabaseConnection sReportId to sConnectionString
77880>>>>>            End
77880>>>>>>
77880>>>>>            Else Begin
77881>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77882>>>>>>
77882>>>>>            End
77882>>>>>>
77882>>>>>        End
77882>>>>>>
77882>>>>>        Else Begin
77883>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77884>>>>>>
77884>>>>>        End
77884>>>>>>
77884>>>>>
77884>>>>>        Send RedirectErrorsToLocalHandler False
77885>>>>>
77885>>>>>        Function_Return sConnectionString
77886>>>>>    End_Function
77887>>>>>
77887>>>>>    // Should be:
77887>>>>>    // for C_DRDF: The path to the filelist in case that the filelist is used or
77887>>>>>    //              the first table in case individual tables are selected
77887>>>>>    // for C_DRODBC or C_DRSQLite: The name of the DSN
77887>>>>>    Procedure Set psDatabaseName String sReportId String sDatabaseName
77889>>>>>        Boolean bComObjectCreated
77889>>>>>
77889>>>>>        Send RedirectErrorsToLocalHandler True
77890>>>>>
77890>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77892>>>>>            Get psReportId to sReportId
77893>>>>>        End
77893>>>>>>
77893>>>>>
77893>>>>>        If (sReportId <> "") Begin
77895>>>>>            Get IsComObjectCreated to bComObjectCreated
77896>>>>>            If (bComObjectCreated) Begin
77898>>>>>                Set ComDatabaseName sReportId to sDatabaseName
77899>>>>>            End
77899>>>>>>
77899>>>>>            Else Begin
77900>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77901>>>>>>
77901>>>>>            End
77901>>>>>>
77901>>>>>        End
77901>>>>>>
77901>>>>>        Else Begin
77902>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77903>>>>>>
77903>>>>>        End
77903>>>>>>
77903>>>>>
77903>>>>>        Send RedirectErrorsToLocalHandler False
77904>>>>>    End_Procedure
77905>>>>>
77905>>>>>    // Returns:
77905>>>>>    // for C_DRDF: The path to the filelist in case that the filelist is used or
77905>>>>>    //               the first table in case individual tables are selected
77905>>>>>    // for C_DRODBC or C_DRSQLite: The name of the DSN
77905>>>>>    Function psDatabaseName String sReportId Returns String
77907>>>>>        String sDatabaseName
77907>>>>>        Boolean bComObjectCreated
77907>>>>>
77907>>>>>        Send RedirectErrorsToLocalHandler True
77908>>>>>
77908>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77910>>>>>            Get psReportId to sReportId
77911>>>>>        End
77911>>>>>>
77911>>>>>
77911>>>>>        If (sReportId <> "") Begin
77913>>>>>            Get IsComObjectCreated to bComObjectCreated
77914>>>>>            If (bComObjectCreated) Begin
77916>>>>>                Get ComDatabaseName sReportId to sDatabaseName
77917>>>>>            End
77917>>>>>>
77917>>>>>            Else Begin
77918>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77919>>>>>>
77919>>>>>            End
77919>>>>>>
77919>>>>>        End
77919>>>>>>
77919>>>>>        Else Begin
77920>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77921>>>>>>
77921>>>>>        End
77921>>>>>>
77921>>>>>
77921>>>>>        Send RedirectErrorsToLocalHandler False
77922>>>>>
77922>>>>>        Function_Return sDatabaseName
77923>>>>>    End_Function
77924>>>>>
77924>>>>>    // Sets the filter value of the N-th filter in the report
77924>>>>>    // This relates to the filter expert in DR itself
77924>>>>>    Procedure Set psFilterField String sReportId Integer iFilter String sFilterField
77926>>>>>        Boolean bComObjectCreated
77926>>>>>        Integer iFilters
77926>>>>>
77926>>>>>        If (iFilter < 0) Begin
77928>>>>>            Procedure_Return
77929>>>>>        End
77929>>>>>>
77929>>>>>
77929>>>>>        Send RedirectErrorsToLocalHandler True
77930>>>>>
77930>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77932>>>>>            Get psReportId to sReportId
77933>>>>>        End
77933>>>>>>
77933>>>>>
77933>>>>>        If (sReportId <> "") Begin
77935>>>>>            Get IsComObjectCreated to bComObjectCreated
77936>>>>>            If (bComObjectCreated) Begin
77938>>>>>                Get ComRecordFilterCount sReportId sReportId to iFilters
77939>>>>>                If (iFilter < iFilters) Begin
77941>>>>>                    Set ComRecordFilterField sReportId iFilter to sFilterField
77942>>>>>                End
77942>>>>>>
77942>>>>>            End
77942>>>>>>
77942>>>>>            Else Begin
77943>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77944>>>>>>
77944>>>>>            End
77944>>>>>>
77944>>>>>        End
77944>>>>>>
77944>>>>>        Else Begin
77945>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77946>>>>>>
77946>>>>>        End
77946>>>>>>
77946>>>>>
77946>>>>>        Send RedirectErrorsToLocalHandler False
77947>>>>>    End_Procedure
77948>>>>>
77948>>>>>    // Returns the filter value of the N-th filter in the report
77948>>>>>    // This relates to the filter expert in DR itself
77948>>>>>    Function psFilterField String sReportId Integer iFilter Returns String
77950>>>>>        String sFilterField
77950>>>>>        Boolean bComObjectCreated
77950>>>>>        Integer iFilters
77950>>>>>
77950>>>>>        If (iFilter < 0) Begin
77952>>>>>            Function_Return ''
77953>>>>>        End
77953>>>>>>
77953>>>>>
77953>>>>>        Send RedirectErrorsToLocalHandler True
77954>>>>>
77954>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77956>>>>>            Get psReportId to sReportId
77957>>>>>        End
77957>>>>>>
77957>>>>>
77957>>>>>        If (sReportId <> "") Begin
77959>>>>>            Get IsComObjectCreated to bComObjectCreated
77960>>>>>            If (bComObjectCreated) Begin
77962>>>>>                Get ComRecordFilterCount sReportId sReportId to iFilters
77963>>>>>                If (iFilter < iFilters) Begin
77965>>>>>                    Get ComRecordFilterField sReportId iFilter to sFilterField
77966>>>>>                End
77966>>>>>>
77966>>>>>            End
77966>>>>>>
77966>>>>>            Else Begin
77967>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77968>>>>>>
77968>>>>>            End
77968>>>>>>
77968>>>>>        End
77968>>>>>>
77968>>>>>        Else Begin
77969>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77970>>>>>>
77970>>>>>        End
77970>>>>>>
77970>>>>>
77970>>>>>        Send RedirectErrorsToLocalHandler False
77971>>>>>
77971>>>>>        Function_Return sFilterField
77972>>>>>    End_Procedure
77973>>>>>
77973>>>>>    // Sets the filter function of the loaded report. Use it for AND/OR
77973>>>>>    // constructions and for functions that need to Use expressions
77973>>>>>    // This relates to the filter function functionality in DR
77973>>>>>    Procedure Set psFilterFunction String sReportId String sFilterFunction
77975>>>>>        Boolean bComObjectCreated
77975>>>>>
77975>>>>>        Send RedirectErrorsToLocalHandler True
77976>>>>>
77976>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77978>>>>>            Get psReportId to sReportId
77979>>>>>        End
77979>>>>>>
77979>>>>>
77979>>>>>        If (sReportId <> "") Begin
77981>>>>>            Get IsComObjectCreated to bComObjectCreated
77982>>>>>            If (bComObjectCreated) Begin
77984>>>>>                Set ComFilterFunction sReportId to sFilterFunction
77985>>>>>            End
77985>>>>>>
77985>>>>>            Else Begin
77986>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
77987>>>>>>
77987>>>>>            End
77987>>>>>>
77987>>>>>        End
77987>>>>>>
77987>>>>>        Else Begin
77988>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
77989>>>>>>
77989>>>>>        End
77989>>>>>>
77989>>>>>
77989>>>>>        Send RedirectErrorsToLocalHandler False
77990>>>>>    End_Procedure
77991>>>>>
77991>>>>>    // Returns the filter function string active in the loaded report
77991>>>>>    // The equivalent of this function in DataFlex Reports is the Filter Function dialog
77991>>>>>    Function psFilterFunction String sReportId Returns String
77993>>>>>        String sFilterFunction
77993>>>>>        Boolean bComObjectCreated
77993>>>>>
77993>>>>>        Send RedirectErrorsToLocalHandler True
77994>>>>>
77994>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
77996>>>>>            Get psReportId to sReportId
77997>>>>>        End
77997>>>>>>
77997>>>>>
77997>>>>>        If (sReportId <> "") Begin
77999>>>>>            Get IsComObjectCreated to bComObjectCreated
78000>>>>>            If (bComObjectCreated) Begin
78002>>>>>                Get ComFilterFunction sReportId to sFilterFunction
78003>>>>>            End
78003>>>>>>
78003>>>>>            Else Begin
78004>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78005>>>>>>
78005>>>>>            End
78005>>>>>>
78005>>>>>        End
78005>>>>>>
78005>>>>>        Else Begin
78006>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78007>>>>>>
78007>>>>>        End
78007>>>>>>
78007>>>>>
78007>>>>>        Send RedirectErrorsToLocalHandler False
78008>>>>>
78008>>>>>        Function_Return sFilterFunction
78009>>>>>    End_Function
78010>>>>>
78010>>>>>    // Returns the filter operator (EQ, NE etc) for the N-th filter in defined in the
78010>>>>>    // report at the filter expert dialog
78010>>>>>    Function peFilterOperator String sReportId Integer iFilter Returns Integer
78012>>>>>        Integer eFilterOperator
78012>>>>>        Boolean bComObjectCreated
78012>>>>>        Integer iFilters
78012>>>>>
78012>>>>>        If (iFilter < 0) Begin
78014>>>>>            Function_Return -1
78015>>>>>        End
78015>>>>>>
78015>>>>>
78015>>>>>        Send RedirectErrorsToLocalHandler True
78016>>>>>
78016>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78018>>>>>            Get psReportId to sReportId
78019>>>>>        End
78019>>>>>>
78019>>>>>
78019>>>>>        If (sReportId <> "") Begin
78021>>>>>            Get IsComObjectCreated to bComObjectCreated
78022>>>>>            If (bComObjectCreated) Begin
78024>>>>>                Get ComRecordFilterCount sReportId sReportId to iFilters
78025>>>>>                If (iFilter < iFilters) Begin
78027>>>>>                    Get ComRecordFilterOperator sReportId iFilter to eFilterOperator
78028>>>>>                End
78028>>>>>>
78028>>>>>            End
78028>>>>>>
78028>>>>>            Else Begin
78029>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78030>>>>>>
78030>>>>>            End
78030>>>>>>
78030>>>>>        End
78030>>>>>>
78030>>>>>        Else Begin
78031>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78032>>>>>>
78032>>>>>        End
78032>>>>>>
78032>>>>>
78032>>>>>        Send RedirectErrorsToLocalHandler False
78033>>>>>
78033>>>>>        Function_Return eFilterOperator
78034>>>>>    End_Function
78035>>>>>
78035>>>>>    // Returns the filter operator (EQ, NE etc) for the N-th filter in defined in the
78035>>>>>    // report at the filter expert dialog
78035>>>>>    Procedure Set peFilterOperator String sReportId Integer iFilter C_DROperators eFilterOperator
78037>>>>>        Boolean bComObjectCreated
78037>>>>>        Integer iFilters
78037>>>>>
78037>>>>>        If (iFilter < 0) Begin
78039>>>>>            Procedure_Return
78040>>>>>        End
78040>>>>>>
78040>>>>>
78040>>>>>        Send RedirectErrorsToLocalHandler True
78041>>>>>
78041>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78043>>>>>            Get psReportId to sReportId
78044>>>>>        End
78044>>>>>>
78044>>>>>
78044>>>>>        If (sReportId <> "") Begin
78046>>>>>            Get IsComObjectCreated to bComObjectCreated
78047>>>>>            If (bComObjectCreated) Begin
78049>>>>>                Get ComRecordFilterCount sReportId sReportId to iFilters
78050>>>>>                If (iFilter < iFilters) Begin
78052>>>>>                    Set ComRecordFilterOperator sReportId iFilter to eFilterOperator
78053>>>>>                End
78053>>>>>>
78053>>>>>            End
78053>>>>>>
78053>>>>>            Else Begin
78054>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78055>>>>>>
78055>>>>>            End
78055>>>>>>
78055>>>>>        End
78055>>>>>>
78055>>>>>        Else Begin
78056>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78057>>>>>>
78057>>>>>        End
78057>>>>>>
78057>>>>>
78057>>>>>        Send RedirectErrorsToLocalHandler False
78058>>>>>    End_Procedure
78059>>>>>
78059>>>>>    // Sets the filter value of the N-th filter in the report
78059>>>>>    // This relates to the filter expert in DR itself
78059>>>>>    Procedure Set psFilterValue String sReportId Integer iFilter String sFilterValue
78061>>>>>        Boolean bComObjectCreated
78061>>>>>        Integer iFilters
78061>>>>>
78061>>>>>        If (iFilter < 0) Begin
78063>>>>>            Procedure_Return
78064>>>>>        End
78064>>>>>>
78064>>>>>
78064>>>>>        Send RedirectErrorsToLocalHandler True
78065>>>>>
78065>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78067>>>>>            Get psReportId to sReportId
78068>>>>>        End
78068>>>>>>
78068>>>>>
78068>>>>>        If (sReportId <> "") Begin
78070>>>>>            Get IsComObjectCreated to bComObjectCreated
78071>>>>>            If (bComObjectCreated) Begin
78073>>>>>                Get ComRecordFilterCount sReportId sReportId to iFilters
78074>>>>>                If (iFilter < iFilters) Begin
78076>>>>>                    Set ComRecordFilterValue sReportId iFilter to sFilterValue
78077>>>>>                End
78077>>>>>>
78077>>>>>            End
78077>>>>>>
78077>>>>>            Else Begin
78078>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78079>>>>>>
78079>>>>>            End
78079>>>>>>
78079>>>>>        End
78079>>>>>>
78079>>>>>        Else Begin
78080>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78081>>>>>>
78081>>>>>        End
78081>>>>>>
78081>>>>>
78081>>>>>        Send RedirectErrorsToLocalHandler False
78082>>>>>    End_Procedure
78083>>>>>
78083>>>>>    // Returns the filter value of the N-th filter in the report
78083>>>>>    // This relates to the filter expert in DR itself
78083>>>>>    Function psFilterValue String sReportId Integer iFilter Returns String
78085>>>>>        String sFilterValue
78085>>>>>        Boolean bComObjectCreated
78085>>>>>        Integer iFilters
78085>>>>>
78085>>>>>        If (iFilter < 0) Begin
78087>>>>>            Function_Return ''
78088>>>>>        End
78088>>>>>>
78088>>>>>
78088>>>>>        Send RedirectErrorsToLocalHandler True
78089>>>>>
78089>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78091>>>>>            Get psReportId to sReportId
78092>>>>>        End
78092>>>>>>
78092>>>>>
78092>>>>>        If (sReportId <> "") Begin
78094>>>>>            Get IsComObjectCreated to bComObjectCreated
78095>>>>>            If (bComObjectCreated) Begin
78097>>>>>                Get ComRecordFilterCount sReportId sReportId to iFilters
78098>>>>>                If (iFilter < iFilters) Begin
78100>>>>>                    Get ComRecordFilterValue sReportId iFilter to sFilterValue
78101>>>>>                End
78101>>>>>>
78101>>>>>            End
78101>>>>>>
78101>>>>>            Else Begin
78102>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78103>>>>>>
78103>>>>>            End
78103>>>>>>
78103>>>>>        End
78103>>>>>>
78103>>>>>        Else Begin
78104>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78105>>>>>>
78105>>>>>        End
78105>>>>>>
78105>>>>>
78105>>>>>        Send RedirectErrorsToLocalHandler False
78106>>>>>
78106>>>>>        Function_Return sFilterValue
78107>>>>>    End_Procedure
78108>>>>>
78108>>>>>    // Returns the contents of a function in the report
78108>>>>>    Function psFunction String sReportId String sFunctionName Returns String
78110>>>>>        Integer iFunctionId
78110>>>>>        String sFunction
78110>>>>>
78110>>>>>        Send RedirectErrorsToLocalHandler True
78111>>>>>
78111>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78113>>>>>            Get psReportId to sReportId
78114>>>>>        End
78114>>>>>>
78114>>>>>
78114>>>>>        If (sReportId <> "") Begin
78116>>>>>            Get FunctionIdByName sReportId sFunctionName to iFunctionId
78117>>>>>            If (iFunctionId >= 0) Begin
78119>>>>>                Get ComFunction sReportId iFunctionId to sFunction
78120>>>>>            End
78120>>>>>>
78120>>>>>            Else Begin
78121>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRFunctionNotFound, sFunctionName))
78122>>>>>>
78122>>>>>            End
78122>>>>>>
78122>>>>>        End
78122>>>>>>
78122>>>>>        Else Begin
78123>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78124>>>>>>
78124>>>>>        End
78124>>>>>>
78124>>>>>
78124>>>>>        Send RedirectErrorsToLocalHandler False
78125>>>>>
78125>>>>>        Function_Return sFunction
78126>>>>>    End_Function
78127>>>>>
78127>>>>>    // Changes the contents of the N-th function in the report
78127>>>>>    Procedure Set psFunction String sReportId String sFunctionName String sFunction
78129>>>>>        Integer iFunctionId
78129>>>>>        Boolean bComObjectCreated
78129>>>>>
78129>>>>>        Send RedirectErrorsToLocalHandler True
78130>>>>>
78130>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78132>>>>>            Get psReportId to sReportId
78133>>>>>        End
78133>>>>>>
78133>>>>>
78133>>>>>        If (sReportId <> "") Begin
78135>>>>>            Get FunctionIdByName sReportId sFunctionName to iFunctionId
78136>>>>>            If (iFunctionId >= 0) Begin
78138>>>>>                Get IsComObjectCreated to bComObjectCreated
78139>>>>>                If (bComObjectCreated) Begin
78141>>>>>                    Set ComFunction sReportId iFunctionId to sFunction
78142>>>>>                End
78142>>>>>>
78142>>>>>                Else Begin
78143>>>>>                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78144>>>>>>
78144>>>>>                End
78144>>>>>>
78144>>>>>            End
78144>>>>>>
78144>>>>>            Else Begin
78145>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRFunctionNotFound, sFunctionName))
78146>>>>>>
78146>>>>>            End
78146>>>>>>
78146>>>>>        End
78146>>>>>>
78146>>>>>        Else Begin
78147>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78148>>>>>>
78148>>>>>        End
78148>>>>>>
78148>>>>>
78148>>>>>        Send RedirectErrorsToLocalHandler False
78149>>>>>    End_Procedure
78150>>>>>
78150>>>>>    // Returns the name of the N-th function in the report
78150>>>>>    Function psFunctionName String sReportId Integer iIndex Returns String
78152>>>>>        String sFunctionName
78152>>>>>        Boolean bComObjectCreated
78152>>>>>
78152>>>>>        Send RedirectErrorsToLocalHandler True
78153>>>>>
78153>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78155>>>>>            Get psReportId to sReportId
78156>>>>>        End
78156>>>>>>
78156>>>>>
78156>>>>>        If (sReportId <> "") Begin
78158>>>>>            Get IsComObjectCreated to bComObjectCreated
78159>>>>>            If (bComObjectCreated) Begin
78161>>>>>                Get ComFunctionName sReportId iIndex to sFunctionName
78162>>>>>            End
78162>>>>>>
78162>>>>>            Else Begin
78163>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78164>>>>>>
78164>>>>>            End
78164>>>>>>
78164>>>>>        End
78164>>>>>>
78164>>>>>        Else Begin
78165>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78166>>>>>>
78166>>>>>        End
78166>>>>>>
78166>>>>>
78166>>>>>        Send RedirectErrorsToLocalHandler False
78167>>>>>
78167>>>>>        Function_Return sFunctionName
78168>>>>>    End_Function
78169>>>>>
78169>>>>>    // Changes the name of the N-th function in the report
78169>>>>>    Procedure Set psFunctionName String sReportId Integer iIndex String sFunctionName
78171>>>>>        Boolean bComObjectCreated
78171>>>>>
78171>>>>>        Send RedirectErrorsToLocalHandler True
78172>>>>>
78172>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78174>>>>>            Get psReportId to sReportId
78175>>>>>        End
78175>>>>>>
78175>>>>>
78175>>>>>        If (sReportId <> "") Begin
78177>>>>>            Get IsComObjectCreated to bComObjectCreated
78178>>>>>            If (bComObjectCreated) Begin
78180>>>>>                Set ComFunctionName sReportId iIndex to sFunctionName
78181>>>>>            End
78181>>>>>>
78181>>>>>            Else Begin
78182>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78183>>>>>>
78183>>>>>            End
78183>>>>>>
78183>>>>>        End
78183>>>>>>
78183>>>>>        Else Begin
78184>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78185>>>>>>
78185>>>>>        End
78185>>>>>>
78185>>>>>
78185>>>>>        Send RedirectErrorsToLocalHandler False
78186>>>>>    End_Procedure
78187>>>>>
78187>>>>>    // Passes the struct with export options to the COM integration
78187>>>>>    Procedure Set pHTMLExportOptions DRHTMLExportOptions HTMLExportOptionsData
78189>>>>>        String sReportId
78189>>>>>        Boolean bComObjectCreated bOptionsOk
78189>>>>>
78189>>>>>        Send RedirectErrorsToLocalHandler True
78190>>>>>
78190>>>>>        Get psReportId to sReportId
78191>>>>>        If (sReportId <> "") Begin
78193>>>>>            Get IsComObjectCreated to bComObjectCreated
78194>>>>>            If (bComObjectCreated) Begin
78196>>>>>                Get HTMLExportOptionsCorrect HTMLExportOptionsData to bOptionsOk
78197>>>>>                If (not (bOptionsOk)) Begin
78199>>>>>                    Get DefaultHTMLExportOptions to HTMLExportOptionsData
78200>>>>>                End
78200>>>>>>
78200>>>>>                Send ComHTMLExportOptions sReportId (AddressOf (HTMLExportOptionsData))
78201>>>>>            End
78201>>>>>>
78201>>>>>            Else Begin
78202>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78203>>>>>>
78203>>>>>            End
78203>>>>>>
78203>>>>>        End
78203>>>>>>
78203>>>>>        Else Begin
78204>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78205>>>>>>
78205>>>>>        End
78205>>>>>>
78205>>>>>
78205>>>>>        Send RedirectErrorsToLocalHandler False
78206>>>>>    End_Procedure
78207>>>>>
78207>>>>>    // Passes the struct with export options to the COM integration
78207>>>>>    Procedure Set pImageExportOptions DRImageExportOptions ImageExportOptionsData
78209>>>>>        String sReportId
78209>>>>>        Boolean bComObjectCreated
78209>>>>>
78209>>>>>        Send RedirectErrorsToLocalHandler True
78210>>>>>
78210>>>>>        Get psReportId to sReportId
78211>>>>>        If (sReportId <> "") Begin
78213>>>>>            Get IsComObjectCreated to bComObjectCreated
78214>>>>>            If (bComObjectCreated) Begin
78216>>>>>                Send ComImageExportOptions sReportId (AddressOf (ImageExportOptionsData))
78217>>>>>            End
78217>>>>>>
78217>>>>>            Else Begin
78218>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78219>>>>>>
78219>>>>>            End
78219>>>>>>
78219>>>>>        End
78219>>>>>>
78219>>>>>        Else Begin
78220>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78221>>>>>>
78221>>>>>        End
78221>>>>>>
78221>>>>>
78221>>>>>        Send RedirectErrorsToLocalHandler False
78222>>>>>    End_Procedure
78223>>>>>
78223>>>>>    // Returns the value of the N-th parameter in the report
78223>>>>>    Function piPaperMarginBottom String sReportId Returns Integer
78225>>>>>        Integer iBottomMargin
78225>>>>>        Boolean bComObjectCreated
78225>>>>>
78225>>>>>        Send RedirectErrorsToLocalHandler True
78226>>>>>
78226>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78228>>>>>            Get psReportId to sReportId
78229>>>>>        End
78229>>>>>>
78229>>>>>
78229>>>>>        If (sReportId <> "") Begin
78231>>>>>            Get IsComObjectCreated to bComObjectCreated
78232>>>>>            If (bComObjectCreated) Begin
78234>>>>>                Get ComPaperMarginBottom sReportId to iBottomMargin
78235>>>>>            End
78235>>>>>>
78235>>>>>            Else Begin
78236>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78237>>>>>>
78237>>>>>            End
78237>>>>>>
78237>>>>>        End
78237>>>>>>
78237>>>>>        Else Begin
78238>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78239>>>>>>
78239>>>>>        End
78239>>>>>>
78239>>>>>
78239>>>>>        Send RedirectErrorsToLocalHandler False
78240>>>>>
78240>>>>>        Function_Return iBottomMargin
78241>>>>>    End_Function
78242>>>>>
78242>>>>>    // Returns the value of the N-th parameter in the report
78242>>>>>    Procedure Set piPaperMarginBottom String sReportId Integer iBottomMargin
78244>>>>>        Boolean bComObjectCreated
78244>>>>>
78244>>>>>        Send RedirectErrorsToLocalHandler True
78245>>>>>
78245>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78247>>>>>            Get psReportId to sReportId
78248>>>>>        End
78248>>>>>>
78248>>>>>
78248>>>>>        If (sReportId <> "") Begin
78250>>>>>            Get IsComObjectCreated to bComObjectCreated
78251>>>>>            If (bComObjectCreated) Begin
78253>>>>>                Set ComPaperMarginBottom sReportId to iBottomMargin
78254>>>>>            End
78254>>>>>>
78254>>>>>            Else Begin
78255>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78256>>>>>>
78256>>>>>            End
78256>>>>>>
78256>>>>>        End
78256>>>>>>
78256>>>>>        Else Begin
78257>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78258>>>>>>
78258>>>>>        End
78258>>>>>>
78258>>>>>
78258>>>>>        Send RedirectErrorsToLocalHandler False
78259>>>>>    End_Procedure
78260>>>>>
78260>>>>>    // Returns the value of the N-th parameter in the report
78260>>>>>    Function piPaperMarginLeft String sReportId Returns Integer
78262>>>>>        Integer iLeftMargin
78262>>>>>        Boolean bComObjectCreated
78262>>>>>
78262>>>>>        Send RedirectErrorsToLocalHandler True
78263>>>>>
78263>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78265>>>>>            Get psReportId to sReportId
78266>>>>>        End
78266>>>>>>
78266>>>>>
78266>>>>>        If (sReportId <> "") Begin
78268>>>>>            Get IsComObjectCreated to bComObjectCreated
78269>>>>>            If (bComObjectCreated) Begin
78271>>>>>                Get ComPaperMarginLeft sReportId to iLeftMargin
78272>>>>>            End
78272>>>>>>
78272>>>>>            Else Begin
78273>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78274>>>>>>
78274>>>>>            End
78274>>>>>>
78274>>>>>        End
78274>>>>>>
78274>>>>>        Else Begin
78275>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78276>>>>>>
78276>>>>>        End
78276>>>>>>
78276>>>>>
78276>>>>>        Send RedirectErrorsToLocalHandler False
78277>>>>>
78277>>>>>        Function_Return iLeftMargin
78278>>>>>    End_Function
78279>>>>>
78279>>>>>    // Returns the value of the N-th parameter in the report
78279>>>>>    Procedure Set piPaperMarginLeft String sReportId Integer iLeftMargin
78281>>>>>        Boolean bComObjectCreated
78281>>>>>
78281>>>>>        Send RedirectErrorsToLocalHandler True
78282>>>>>
78282>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78284>>>>>            Get psReportId to sReportId
78285>>>>>        End
78285>>>>>>
78285>>>>>
78285>>>>>        If (sReportId <> "") Begin
78287>>>>>            Get IsComObjectCreated to bComObjectCreated
78288>>>>>            If (bComObjectCreated) Begin
78290>>>>>                Set ComPaperMarginLeft sReportId to iLeftMargin
78291>>>>>            End
78291>>>>>>
78291>>>>>            Else Begin
78292>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78293>>>>>>
78293>>>>>            End
78293>>>>>>
78293>>>>>        End
78293>>>>>>
78293>>>>>        Else Begin
78294>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78295>>>>>>
78295>>>>>        End
78295>>>>>>
78295>>>>>
78295>>>>>        Send RedirectErrorsToLocalHandler False
78296>>>>>    End_Procedure
78297>>>>>
78297>>>>>    // Returns the value of the N-th parameter in the report
78297>>>>>    Function piPaperMarginRight String sReportId Returns Integer
78299>>>>>        Integer iRightMargin
78299>>>>>        Boolean bComObjectCreated
78299>>>>>
78299>>>>>        Send RedirectErrorsToLocalHandler True
78300>>>>>
78300>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78302>>>>>            Get psReportId to sReportId
78303>>>>>        End
78303>>>>>>
78303>>>>>
78303>>>>>        If (sReportId <> "") Begin
78305>>>>>            Get IsComObjectCreated to bComObjectCreated
78306>>>>>            If (bComObjectCreated) Begin
78308>>>>>                Get ComPaperMarginRight sReportId to iRightMargin
78309>>>>>            End
78309>>>>>>
78309>>>>>            Else Begin
78310>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78311>>>>>>
78311>>>>>            End
78311>>>>>>
78311>>>>>        End
78311>>>>>>
78311>>>>>        Else Begin
78312>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78313>>>>>>
78313>>>>>        End
78313>>>>>>
78313>>>>>
78313>>>>>        Send RedirectErrorsToLocalHandler False
78314>>>>>
78314>>>>>        Function_Return iRightMargin
78315>>>>>    End_Function
78316>>>>>
78316>>>>>    // Returns the value of the N-th parameter in the report
78316>>>>>    Procedure Set piPaperMarginRight String sReportId Integer iRightMargin
78318>>>>>        Boolean bComObjectCreated
78318>>>>>
78318>>>>>        Send RedirectErrorsToLocalHandler True
78319>>>>>
78319>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78321>>>>>            Get psReportId to sReportId
78322>>>>>        End
78322>>>>>>
78322>>>>>
78322>>>>>        If (sReportId <> "") Begin
78324>>>>>            Get IsComObjectCreated to bComObjectCreated
78325>>>>>            If (bComObjectCreated) Begin
78327>>>>>                Set ComPaperMarginRight sReportId to iRightMargin
78328>>>>>            End
78328>>>>>>
78328>>>>>            Else Begin
78329>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78330>>>>>>
78330>>>>>            End
78330>>>>>>
78330>>>>>        End
78330>>>>>>
78330>>>>>        Else Begin
78331>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78332>>>>>>
78332>>>>>        End
78332>>>>>>
78332>>>>>
78332>>>>>        Send RedirectErrorsToLocalHandler False
78333>>>>>    End_Procedure
78334>>>>>
78334>>>>>    // Returns the value of the N-th parameter in the report
78334>>>>>    Function piPaperMarginTop String sReportId Returns Integer
78336>>>>>        Integer iTopMargin
78336>>>>>        Boolean bComObjectCreated
78336>>>>>
78336>>>>>        Send RedirectErrorsToLocalHandler True
78337>>>>>
78337>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78339>>>>>            Get psReportId to sReportId
78340>>>>>        End
78340>>>>>>
78340>>>>>
78340>>>>>        If (sReportId <> "") Begin
78342>>>>>            Get IsComObjectCreated to bComObjectCreated
78343>>>>>            If (bComObjectCreated) Begin
78345>>>>>                Get ComPaperMarginTop sReportId to iTopMargin
78346>>>>>            End
78346>>>>>>
78346>>>>>            Else Begin
78347>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78348>>>>>>
78348>>>>>            End
78348>>>>>>
78348>>>>>        End
78348>>>>>>
78348>>>>>        Else Begin
78349>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78350>>>>>>
78350>>>>>        End
78350>>>>>>
78350>>>>>
78350>>>>>        Send RedirectErrorsToLocalHandler False
78351>>>>>
78351>>>>>        Function_Return iTopMargin
78352>>>>>    End_Function
78353>>>>>
78353>>>>>    // Returns the value of the N-th parameter in the report
78353>>>>>    Procedure Set piPaperMarginTop String sReportId Integer iTopMargin
78355>>>>>        Boolean bComObjectCreated
78355>>>>>
78355>>>>>        Send RedirectErrorsToLocalHandler True
78356>>>>>
78356>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78358>>>>>            Get psReportId to sReportId
78359>>>>>        End
78359>>>>>>
78359>>>>>
78359>>>>>        If (sReportId <> "") Begin
78361>>>>>            Get IsComObjectCreated to bComObjectCreated
78362>>>>>            If (bComObjectCreated) Begin
78364>>>>>                Set ComPaperMarginTop sReportId to iTopMargin
78365>>>>>            End
78365>>>>>>
78365>>>>>            Else Begin
78366>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78367>>>>>>
78367>>>>>            End
78367>>>>>>
78367>>>>>        End
78367>>>>>>
78367>>>>>        Else Begin
78368>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78369>>>>>>
78369>>>>>        End
78369>>>>>>
78369>>>>>
78369>>>>>        Send RedirectErrorsToLocalHandler False
78370>>>>>    End_Procedure
78371>>>>>
78371>>>>>    // Returns the value of the N-th parameter in the report
78371>>>>>    Function psParameterValue String sReportId Integer iParameter Returns String
78373>>>>>        String sParameterValue
78373>>>>>        Integer iParameters
78373>>>>>        Boolean bComObjectCreated
78373>>>>>
78373>>>>>        Send RedirectErrorsToLocalHandler True
78374>>>>>
78374>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78376>>>>>            Get psReportId to sReportId
78377>>>>>        End
78377>>>>>>
78377>>>>>
78377>>>>>        If (sReportId <> "") Begin
78379>>>>>            Get IsComObjectCreated to bComObjectCreated
78380>>>>>            If (bComObjectCreated) Begin
78382>>>>>                Get ComParameterCount sReportId to iParameters
78383>>>>>                If (iParameter < iParameters and iParameter >= 0) Begin
78385>>>>>                    Get ComParameterValue sReportId iParameter to sParameterValue
78386>>>>>                End
78386>>>>>>
78386>>>>>                Else Begin
78387>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidParameternumberPassed, iParameter))
78388>>>>>>
78388>>>>>                End
78388>>>>>>
78388>>>>>            End
78388>>>>>>
78388>>>>>            Else Begin
78389>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78390>>>>>>
78390>>>>>            End
78390>>>>>>
78390>>>>>        End
78390>>>>>>
78390>>>>>        Else Begin
78391>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78392>>>>>>
78392>>>>>        End
78392>>>>>>
78392>>>>>
78392>>>>>        Send RedirectErrorsToLocalHandler False
78393>>>>>
78393>>>>>        Function_Return sParameterValue
78394>>>>>    End_Function
78395>>>>>
78395>>>>>    // Changes the value of the N-th parameter in the report
78395>>>>>    Procedure Set psParameterValue String sReportId Integer iParameter String sParameterValue
78397>>>>>        Boolean bComObjectCreated
78397>>>>>        Integer iParameters
78397>>>>>
78397>>>>>        Send RedirectErrorsToLocalHandler True
78398>>>>>
78398>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78400>>>>>            Get psReportId to sReportId
78401>>>>>        End
78401>>>>>>
78401>>>>>
78401>>>>>        If (sReportId <> "") Begin
78403>>>>>            Get IsComObjectCreated to bComObjectCreated
78404>>>>>            If (bComObjectCreated) Begin
78406>>>>>                Get ComParameterCount sReportId to iParameters
78407>>>>>                If (iParameter < iParameters and iParameter >= 0) Begin
78409>>>>>                    Set ComParameterValue sReportId iParameter to sParameterValue
78410>>>>>                End
78410>>>>>>
78410>>>>>                Else Begin
78411>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidParameternumberPassed, iParameter))
78412>>>>>>
78412>>>>>                End
78412>>>>>>
78412>>>>>            End
78412>>>>>>
78412>>>>>            Else Begin
78413>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78414>>>>>>
78414>>>>>            End
78414>>>>>>
78414>>>>>        End
78414>>>>>>
78414>>>>>        Else Begin
78415>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78416>>>>>>
78416>>>>>        End
78416>>>>>>
78416>>>>>
78416>>>>>        Send RedirectErrorsToLocalHandler False
78417>>>>>    End_Procedure
78418>>>>>
78418>>>>>    // Passes the struct with export options to the COM interface
78418>>>>>    Procedure Set pPDFExportOptions DRPDFExportOptions PDFExportOptionsData
78420>>>>>        String sReportId
78420>>>>>        Boolean bComObjectCreated bOptionsOk
78420>>>>>
78420>>>>>        Send RedirectErrorsToLocalHandler True
78421>>>>>
78421>>>>>        Get psReportId to sReportId
78422>>>>>        If (sReportId <> "") Begin
78424>>>>>            Get IsComObjectCreated to bComObjectCreated
78425>>>>>            If (bComObjectCreated) Begin
78427>>>>>                Get PDFExportOptionsCorrect PDFExportOptionsData to bOptionsOk
78428>>>>>                If (not (bOptionsOk)) Begin
78430>>>>>                    Get DefaultPDFExportOptions to PDFExportOptionsData
78431>>>>>                End
78431>>>>>>
78431>>>>>                Send ComPDFExportOptions sReportId (AddressOf (PDFExportOptionsData))
78432>>>>>            End
78432>>>>>>
78432>>>>>            Else Begin
78433>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78434>>>>>>
78434>>>>>            End
78434>>>>>>
78434>>>>>        End
78434>>>>>>
78434>>>>>        Else Begin
78435>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78436>>>>>>
78436>>>>>        End
78436>>>>>>
78436>>>>>
78436>>>>>        Send RedirectErrorsToLocalHandler False
78437>>>>>    End_Procedure
78438>>>>>
78438>>>>>    Function piPreviewCanvasColor Returns Integer
78440>>>>>        Boolean bComObjectCreated
78440>>>>>        Integer ePreviewCanvasColor
78440>>>>>
78440>>>>>        Send RedirectErrorsToLocalHandler True
78441>>>>>
78441>>>>>        Get IsComObjectCreated to bComObjectCreated
78442>>>>>        If (bComObjectCreated) Begin
78444>>>>>            Get ComPreviewCanvasColor to ePreviewCanvasColor
78445>>>>>        End
78445>>>>>>
78445>>>>>        Else Begin
78446>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78447>>>>>>
78447>>>>>        End
78447>>>>>>
78447>>>>>
78447>>>>>        Send RedirectErrorsToLocalHandler False
78448>>>>>
78448>>>>>        Function_Return ePreviewCanvasColor
78449>>>>>    End_Function
78450>>>>>
78450>>>>>    Procedure Set piPreviewCanvasColor Integer ePreviewCanvasColor
78452>>>>>        Boolean bComObjectCreated
78452>>>>>
78452>>>>>        Send RedirectErrorsToLocalHandler True
78453>>>>>
78453>>>>>        Get IsComObjectCreated to bComObjectCreated
78454>>>>>        If (bComObjectCreated) Begin
78456>>>>>            Set ComPreviewCanvasColor to ePreviewCanvasColor
78457>>>>>        End
78457>>>>>>
78457>>>>>        Else Begin
78458>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78459>>>>>>
78459>>>>>        End
78459>>>>>>
78459>>>>>
78459>>>>>        Send RedirectErrorsToLocalHandler False
78460>>>>>    End_Procedure
78461>>>>>
78461>>>>>    Function phoPreviewContainer Returns Handle
78463>>>>>        Handle hoPreviewContainer
78463>>>>>
78463>>>>>        Get private.phoPreviewContainer to hoPreviewContainer
78464>>>>>        Get Object_Id of hoPreviewContainer to hoPreviewContainer
78465>>>>>
78465>>>>>        Function_Return hoPreviewContainer
78466>>>>>    End_Function
78467>>>>>
78467>>>>>    Procedure Set phoPreviewContainer Handle hoPreviewContainer
78469>>>>>        Set private.phoPreviewContainer to hoPreviewContainer
78470>>>>>    End_Procedure
78471>>>>>
78471>>>>>    // Set preview page number
78471>>>>>    Procedure Set piPreviewCurrentPage Integer iPage
78473>>>>>        Boolean bComObjectCreated
78473>>>>>
78473>>>>>        Send RedirectErrorsToLocalHandler True
78474>>>>>
78474>>>>>        Get IsComObjectCreated to bComObjectCreated
78475>>>>>        If (bComObjectCreated) Begin
78477>>>>>            Set ComPreviewCurrentPage to iPage
78478>>>>>        End
78478>>>>>>
78478>>>>>        Else Begin
78479>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78480>>>>>>
78480>>>>>        End
78480>>>>>>
78480>>>>>
78480>>>>>        Send RedirectErrorsToLocalHandler False
78481>>>>>    End_Procedure
78482>>>>>
78482>>>>>    // Returns preview page number
78482>>>>>    Function piPreviewCurrentPage Returns Integer
78484>>>>>        Integer iPageNumber
78484>>>>>        Boolean bComObjectCreated
78484>>>>>
78484>>>>>        Send RedirectErrorsToLocalHandler True
78485>>>>>
78485>>>>>        Get IsComObjectCreated to bComObjectCreated
78486>>>>>        If (bComObjectCreated) Begin
78488>>>>>            Get ComPreviewCurrentPage to iPageNumber
78489>>>>>        End
78489>>>>>>
78489>>>>>        Else Begin
78490>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78491>>>>>>
78491>>>>>        End
78491>>>>>>
78491>>>>>
78491>>>>>        Send RedirectErrorsToLocalHandler False
78492>>>>>
78492>>>>>        Function_Return iPageNumber
78493>>>>>    End_Function
78494>>>>>
78494>>>>>    Procedure Set pePreviewStyle Integer ePreviewStyle
78496>>>>>        Handle hoPreviewContainer
78496>>>>>
78496>>>>>        Set Private.pePreviewStyle to ePreviewStyle
78497>>>>>        Get phoPreviewContainer to hoPreviewContainer
78498>>>>>        If (hoPreviewContainer <> 0) Begin
78500>>>>>            Send ClosePreviewer
78501>>>>>            Set phoPreviewContainer to 0
78502>>>>>        End
78502>>>>>>
78502>>>>>        Send SetDefaultPreviewerClass
78503>>>>>    End_Procedure
78504>>>>>
78504>>>>>    Function pePreviewStyle Returns Integer
78506>>>>>        Integer ePreviewStyle
78506>>>>>
78506>>>>>        Get Private.pePreviewStyle to ePreviewStyle
78507>>>>>
78507>>>>>        Function_Return ePreviewStyle
78508>>>>>    End_Function
78509>>>>>
78509>>>>>    // Sets a waiting GIF (animated GIF)
78509>>>>>    Procedure Set psPreviewWaitingGIF String sFileName
78511>>>>>        Boolean bComObjectCreated
78511>>>>>
78511>>>>>        Send RedirectErrorsToLocalHandler True
78512>>>>>
78512>>>>>        Get IsComObjectCreated to bComObjectCreated
78513>>>>>        If (bComObjectCreated) Begin
78515>>>>>            Set ComPreviewWaitingGIF to sFileName
78516>>>>>        End
78516>>>>>>
78516>>>>>        Else Begin
78517>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78518>>>>>>
78518>>>>>        End
78518>>>>>>
78518>>>>>
78518>>>>>        Send RedirectErrorsToLocalHandler False
78519>>>>>    End_Procedure
78520>>>>>
78520>>>>>    // Retrieves the name of the used Waiting GIF
78520>>>>>    Function psPreviewWaitingGIF Returns String
78522>>>>>        String sFileName
78522>>>>>        Boolean bComObjectCreated
78522>>>>>
78522>>>>>        Send RedirectErrorsToLocalHandler True
78523>>>>>
78523>>>>>        Get IsComObjectCreated to bComObjectCreated
78524>>>>>        If (bComObjectCreated) Begin
78526>>>>>            Get ComPreviewWaitingGIF to sFileName
78527>>>>>        End
78527>>>>>>
78527>>>>>        Else Begin
78528>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78529>>>>>>
78529>>>>>        End
78529>>>>>>
78529>>>>>
78529>>>>>        Send RedirectErrorsToLocalHandler False
78530>>>>>
78530>>>>>        Function_Return sFileName
78531>>>>>    End_Function
78532>>>>>
78532>>>>>    // Set preview zoom factor
78532>>>>>    Procedure Set piPreviewZoom Integer iPreviewZoomFactor
78534>>>>>        Boolean bComObjectCreated
78534>>>>>
78534>>>>>        Send RedirectErrorsToLocalHandler True
78535>>>>>
78535>>>>>        Get IsComObjectCreated to bComObjectCreated
78536>>>>>        If (bComObjectCreated) Begin
78538>>>>>            If (iPreviewZoomFactor = -1 or iPreviewZoomFactor = -2 or (iPreviewZoomFactor >= 25 and iPreviewZoomFactor <= 500)) Begin
78540>>>>>                Set ComPreviewZoom to iPreviewZoomFactor
78541>>>>>            End
78541>>>>>>
78541>>>>>            Else Begin
78542>>>>>                Error DFERR_DATAFLEX_REPORTS (sFormat (C_$DRReportZoomFactorRangeExceeded, iPreviewZoomFactor))
78543>>>>>>
78543>>>>>            End
78543>>>>>>
78543>>>>>        End
78543>>>>>>
78543>>>>>        Else Begin
78544>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78545>>>>>>
78545>>>>>        End
78545>>>>>>
78545>>>>>
78545>>>>>        Send RedirectErrorsToLocalHandler False
78546>>>>>    End_Procedure
78547>>>>>
78547>>>>>    // Returns preview zoom factor
78547>>>>>    Function piPreviewZoom Returns Integer
78549>>>>>        Integer iPreviewZoomFactor
78549>>>>>        Boolean bComObjectCreated
78549>>>>>
78549>>>>>        Send RedirectErrorsToLocalHandler True
78550>>>>>
78550>>>>>        Get IsComObjectCreated to bComObjectCreated
78551>>>>>        If (bComObjectCreated) Begin
78553>>>>>            Get ComPreviewZoom to iPreviewZoomFactor
78554>>>>>        End
78554>>>>>>
78554>>>>>        Else Begin
78555>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78556>>>>>>
78556>>>>>        End
78556>>>>>>
78556>>>>>
78556>>>>>        Send RedirectErrorsToLocalHandler False
78557>>>>>
78557>>>>>        Function_Return iPreviewZoomFactor
78558>>>>>    End_Function
78559>>>>>
78559>>>>>    // Returns the sort field name of the N-th sort field in the report
78559>>>>>    Function psRecordSortField String sReportId Integer iSortFieldIndex Returns String
78561>>>>>        Integer iSortCount
78561>>>>>        String sSortField
78561>>>>>        Boolean bComObjectCreated
78561>>>>>
78561>>>>>        Send RedirectErrorsToLocalHandler True
78562>>>>>
78562>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78564>>>>>            Get psReportId to sReportId
78565>>>>>        End
78565>>>>>>
78565>>>>>
78565>>>>>        If (sReportId <> "") Begin
78567>>>>>            Get IsComObjectCreated to bComObjectCreated
78568>>>>>            If (bComObjectCreated) Begin
78570>>>>>                Get ComRecordSortCount sReportId to iSortCount
78571>>>>>                If (iSortFieldIndex < iSortCount and iSortFieldIndex >= 0) Begin
78573>>>>>                    Get ComRecordSortField sReportId iSortFieldIndex to sSortField
78574>>>>>                End
78574>>>>>>
78574>>>>>                Else Begin
78575>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSortFieldIndexPassed, iSortFieldIndex))
78576>>>>>>
78576>>>>>                End
78576>>>>>>
78576>>>>>            End
78576>>>>>>
78576>>>>>            Else Begin
78577>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78578>>>>>>
78578>>>>>            End
78578>>>>>>
78578>>>>>        End
78578>>>>>>
78578>>>>>        Else Begin
78579>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78580>>>>>>
78580>>>>>        End
78580>>>>>>
78580>>>>>
78580>>>>>        Send RedirectErrorsToLocalHandler False
78581>>>>>
78581>>>>>        Function_Return sSortField
78582>>>>>    End_Function
78583>>>>>
78583>>>>>    // Changes the name of the N-th sort field defined in the report
78583>>>>>    Procedure Set psRecordSortField String sReportId Integer iSortFieldIndex String sSortField
78585>>>>>        Boolean bComObjectCreated
78585>>>>>        Integer iSortCount
78585>>>>>
78585>>>>>        Send RedirectErrorsToLocalHandler True
78586>>>>>
78586>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78588>>>>>            Get psReportId to sReportId
78589>>>>>        End
78589>>>>>>
78589>>>>>
78589>>>>>        If (sReportId <> "") Begin
78591>>>>>            Get IsComObjectCreated to bComObjectCreated
78592>>>>>            If (bComObjectCreated) Begin
78594>>>>>                Get ComRecordSortCount sReportId to iSortCount
78595>>>>>                If (iSortFieldIndex < iSortCount and iSortFieldIndex >= 0) Begin
78597>>>>>                    Set ComRecordSortField sReportId iSortFieldIndex to sSortField
78598>>>>>                End
78598>>>>>>
78598>>>>>                Else Begin
78599>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSortFieldIndexPassed, iSortFieldIndex))
78600>>>>>>
78600>>>>>                End
78600>>>>>>
78600>>>>>            End
78600>>>>>>
78600>>>>>            Else Begin
78601>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78602>>>>>>
78602>>>>>            End
78602>>>>>>
78602>>>>>        End
78602>>>>>>
78602>>>>>        Else Begin
78603>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78604>>>>>>
78604>>>>>        End
78604>>>>>>
78604>>>>>
78604>>>>>        Send RedirectErrorsToLocalHandler False
78605>>>>>    End_Procedure
78606>>>>>
78606>>>>>    // Returns the sort field name of the N-th sort field in the report
78606>>>>>    Function peRecordSortOrder String sReportId Integer iSortFieldIndex Returns C_DRSortOrders
78608>>>>>        Integer eSortOrder iSortCount
78608>>>>>        Boolean bComObjectCreated
78608>>>>>
78608>>>>>        Send RedirectErrorsToLocalHandler True
78609>>>>>
78609>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78611>>>>>            Get psReportId to sReportId
78612>>>>>        End
78612>>>>>>
78612>>>>>
78612>>>>>        If (sReportId <> "") Begin
78614>>>>>            Get IsComObjectCreated to bComObjectCreated
78615>>>>>            If (bComObjectCreated) Begin
78617>>>>>                Get ComRecordSortCount sReportId to iSortCount
78618>>>>>                If (iSortFieldIndex < iSortCount and iSortFieldIndex >= 0) Begin
78620>>>>>                    Get ComRecordSortOrder sReportId iSortFieldIndex to eSortOrder
78621>>>>>                End
78621>>>>>>
78621>>>>>                Else Begin
78622>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSortFieldIndexPassed, iSortFieldIndex))
78623>>>>>>
78623>>>>>                End
78623>>>>>>
78623>>>>>            End
78623>>>>>>
78623>>>>>            Else Begin
78624>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78625>>>>>>
78625>>>>>            End
78625>>>>>>
78625>>>>>        End
78625>>>>>>
78625>>>>>        Else Begin
78626>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78627>>>>>>
78627>>>>>        End
78627>>>>>>
78627>>>>>
78627>>>>>        Send RedirectErrorsToLocalHandler False
78628>>>>>
78628>>>>>        Function_Return eSortOrder
78629>>>>>    End_Function
78630>>>>>
78630>>>>>    // Changes the sort operator (ascending / descending) of the N-th sort field defined in the report
78630>>>>>    // The sortorder passed must be ascending or descending
78630>>>>>    Procedure Set peRecordSortOrder String sReportId Integer iSortFieldIndex C_DRSortOrders eSortOrder
78632>>>>>        Boolean bComObjectCreated
78632>>>>>        Integer iSortCount
78632>>>>>
78632>>>>>        Send RedirectErrorsToLocalHandler True
78633>>>>>
78633>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78635>>>>>            Get psReportId to sReportId
78636>>>>>        End
78636>>>>>>
78636>>>>>
78636>>>>>        If (sReportId <> "") Begin
78638>>>>>            Get IsComObjectCreated to bComObjectCreated
78639>>>>>            If (bComObjectCreated) Begin
78641>>>>>                Get ComRecordSortCount sReportId to iSortCount
78642>>>>>                If (iSortFieldIndex < iSortCount and iSortFieldIndex >= 0) Begin
78644>>>>>                    If (eSortOrder = C_DRAscending or eSortOrder = C_DRDescending) Begin
78646>>>>>                        Set ComRecordSortOrder sReportId iSortFieldIndex to eSortOrder
78647>>>>>                    End
78647>>>>>>
78647>>>>>                End
78647>>>>>>
78647>>>>>                Else Begin
78648>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSortFieldIndexPassed, iSortFieldIndex))
78649>>>>>>
78649>>>>>                End
78649>>>>>>
78649>>>>>            End
78649>>>>>>
78649>>>>>            Else Begin
78650>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78651>>>>>>
78651>>>>>            End
78651>>>>>>
78651>>>>>        End
78651>>>>>>
78651>>>>>        Else Begin
78652>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78653>>>>>>
78653>>>>>        End
78653>>>>>>
78653>>>>>
78653>>>>>        Send RedirectErrorsToLocalHandler False
78654>>>>>    End_Procedure
78655>>>>>
78655>>>>>    // Returns the language set for the report
78655>>>>>    Function piReportLanguage String sReportId Returns Integer
78657>>>>>        Integer iReportLanguage
78657>>>>>        Boolean bComObjectCreated
78657>>>>>
78657>>>>>        Send RedirectErrorsToLocalHandler True
78658>>>>>
78658>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78660>>>>>            Get psReportId to sReportId
78661>>>>>        End
78661>>>>>>
78661>>>>>
78661>>>>>        Get IsComObjectCreated to bComObjectCreated
78662>>>>>        If (bComObjectCreated) Begin
78664>>>>>            Get ComReportLanguage sReportId to iReportLanguage
78665>>>>>        End
78665>>>>>>
78665>>>>>        Else Begin
78666>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78667>>>>>>
78667>>>>>        End
78667>>>>>>
78667>>>>>
78667>>>>>        Send RedirectErrorsToLocalHandler False
78668>>>>>
78668>>>>>        Function_Return iReportLanguage
78669>>>>>    End_Function
78670>>>>>
78670>>>>>    // Returns the language set for the report
78670>>>>>    Procedure Set piReportLanguage String sReportId Integer iReportLanguage
78672>>>>>        Boolean bComObjectCreated
78672>>>>>
78672>>>>>        Send RedirectErrorsToLocalHandler True
78673>>>>>
78673>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78675>>>>>            Get psReportId to sReportId
78676>>>>>        End
78676>>>>>>
78676>>>>>
78676>>>>>        Get IsComObjectCreated to bComObjectCreated
78677>>>>>        If (bComObjectCreated) Begin
78679>>>>>            Set ComReportLanguage sReportId to iReportLanguage
78680>>>>>        End
78680>>>>>>
78680>>>>>        Else Begin
78681>>>>>            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78682>>>>>>
78682>>>>>        End
78682>>>>>>
78682>>>>>
78682>>>>>        Send RedirectErrorsToLocalHandler False
78683>>>>>    End_Procedure
78684>>>>>
78684>>>>>    // Returns the Nth table name
78684>>>>>    Function psTableName String sReportId Integer iTable Returns String
78686>>>>>        Integer iTables
78686>>>>>        String sTableName
78686>>>>>        Boolean bComObjectCreated
78686>>>>>
78686>>>>>        Send RedirectErrorsToLocalHandler True
78687>>>>>
78687>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78689>>>>>            Get psReportId to sReportId
78690>>>>>        End
78690>>>>>>
78690>>>>>
78690>>>>>        If (sReportId <> "") Begin
78692>>>>>            Get IsComObjectCreated to bComObjectCreated
78693>>>>>            If (bComObjectCreated) Begin
78695>>>>>                Get ComTableCount sReportId to iTables
78696>>>>>                If (iTable < iTables and iTable >= 0) Begin
78698>>>>>                    Get ComTableName sReportId iTable to sTableName
78699>>>>>                End
78699>>>>>>
78699>>>>>                Else Begin
78700>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
78701>>>>>>
78701>>>>>                End
78701>>>>>>
78701>>>>>            End
78701>>>>>>
78701>>>>>            Else Begin
78702>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78703>>>>>>
78703>>>>>            End
78703>>>>>>
78703>>>>>        End
78703>>>>>>
78703>>>>>        Else Begin
78704>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78705>>>>>>
78705>>>>>        End
78705>>>>>>
78705>>>>>
78705>>>>>        Send RedirectErrorsToLocalHandler False
78706>>>>>
78706>>>>>        Function_Return sTableName
78707>>>>>    End_Function
78708>>>>>
78708>>>>>    // Sets the Nth table name
78708>>>>>    Procedure Set psTableName String sReportId Integer iTable String sTableName
78710>>>>>        Boolean bComObjectCreated
78710>>>>>        Integer iTables
78710>>>>>
78710>>>>>        Send RedirectErrorsToLocalHandler True
78711>>>>>
78711>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78713>>>>>            Get psReportId to sReportId
78714>>>>>        End
78714>>>>>>
78714>>>>>
78714>>>>>        If (sReportId <> "") Begin
78716>>>>>            Get IsComObjectCreated to bComObjectCreated
78717>>>>>            If (bComObjectCreated) Begin
78719>>>>>                Get ComTableCount sReportId to iTables
78720>>>>>                If (iTable < iTables and iTable >= 0) Begin
78722>>>>>                    Set ComTableName sReportId iTable to sTableName
78723>>>>>                End
78723>>>>>>
78723>>>>>                Else Begin
78724>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
78725>>>>>>
78725>>>>>                End
78725>>>>>>
78725>>>>>            End
78725>>>>>>
78725>>>>>            Else Begin
78726>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78727>>>>>>
78727>>>>>            End
78727>>>>>>
78727>>>>>        End
78727>>>>>>
78727>>>>>        Else Begin
78728>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78729>>>>>>
78729>>>>>        End
78729>>>>>>
78729>>>>>
78729>>>>>        Send RedirectErrorsToLocalHandler False
78730>>>>>    End_Procedure
78731>>>>>
78731>>>>>    // Returns the Nth table schema. Declares an error when the table number passed is outside
78731>>>>>    // the actual table range.
78731>>>>>    // The returned value should be:
78731>>>>>    // for C_DRDF: Empty when table opened via filelist, the path to the table when tables are
78731>>>>>    //               opened as individual tables
78731>>>>>    // for C_DRODBC: The table schema if available
78731>>>>>    // for C_DRSQLite: The table schema if available
78731>>>>>    // for C_DRRDS: The table schema name is identical to the table name (psTableName).
78731>>>>>    Function psTableSchema String sReportId Integer iTable Returns String
78733>>>>>        Integer iTables
78733>>>>>        String sSchema
78733>>>>>        Boolean bComObjectCreated
78733>>>>>
78733>>>>>        Send RedirectErrorsToLocalHandler True
78734>>>>>
78734>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78736>>>>>            Get psReportId to sReportId
78737>>>>>        End
78737>>>>>>
78737>>>>>
78737>>>>>        If (sReportId <> "") Begin
78739>>>>>            Get IsComObjectCreated to bComObjectCreated
78740>>>>>            If (bComObjectCreated) Begin
78742>>>>>                Get ComTableCount sReportId to iTables
78743>>>>>                If (iTable < iTables and iTable >= 0) Begin
78745>>>>>                    Get ComTableSchema sReportId iTable to sSchema
78746>>>>>                End
78746>>>>>>
78746>>>>>                Else Begin
78747>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
78748>>>>>>
78748>>>>>                End
78748>>>>>>
78748>>>>>            End
78748>>>>>>
78748>>>>>            Else Begin
78749>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78750>>>>>>
78750>>>>>            End
78750>>>>>>
78750>>>>>        End
78750>>>>>>
78750>>>>>        Else Begin
78751>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78752>>>>>>
78752>>>>>        End
78752>>>>>>
78752>>>>>
78752>>>>>        Send RedirectErrorsToLocalHandler False
78753>>>>>
78753>>>>>        Function_Return sSchema
78754>>>>>    End_Function
78755>>>>>
78755>>>>>    // Sets the Nth table schema. Declares an error when the table number passed is outside
78755>>>>>    // the actual table range.
78755>>>>>    // The value should be:
78755>>>>>    // for C_DRDF: Empty when table opened via filelist, the path to the table when tables are
78755>>>>>    //               opened as individual tables
78755>>>>>    // for C_DRODBC: The table schema if applicable
78755>>>>>    // for C_DRSQLite: The table schema if applicable
78755>>>>>    Procedure Set psTableSchema String sReportId Integer iTable String sSchema
78757>>>>>        Integer iTables
78757>>>>>        Boolean bComObjectCreated
78757>>>>>
78757>>>>>        Send RedirectErrorsToLocalHandler True
78758>>>>>
78758>>>>>        If (sReportId = C_USEMAINDRREPORTID) Begin
78760>>>>>            Get psReportId to sReportId
78761>>>>>        End
78761>>>>>>
78761>>>>>
78761>>>>>        If (sReportId <> "") Begin
78763>>>>>            Get IsComObjectCreated to bComObjectCreated
78764>>>>>            If (bComObjectCreated) Begin
78766>>>>>                Get ComTableCount sReportId to iTables
78767>>>>>                If (iTable < iTables) Begin
78769>>>>>                    Set ComTableSchema sReportId iTable to sSchema
78770>>>>>                End
78770>>>>>>
78770>>>>>                Else Begin
78771>>>>>                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
78772>>>>>>
78772>>>>>                End
78772>>>>>>
78772>>>>>            End
78772>>>>>>
78772>>>>>            Else Begin
78773>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78774>>>>>>
78774>>>>>            End
78774>>>>>>
78774>>>>>        End
78774>>>>>>
78774>>>>>        Else Begin
78775>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78776>>>>>>
78776>>>>>        End
78776>>>>>>
78776>>>>>
78776>>>>>        Send RedirectErrorsToLocalHandler False
78777>>>>>    End_Procedure
78778>>>>>
78778>>>>>    // Passes the struct with export options to the COM integration
78778>>>>>    Procedure Set pRTFExportOptions DRRTFExportOptions RTFExportOptionsData
78780>>>>>        String sReportId
78780>>>>>        Boolean bComObjectCreated bOptionsOk
78780>>>>>
78780>>>>>        Send RedirectErrorsToLocalHandler True
78781>>>>>
78781>>>>>        Get psReportId to sReportId
78782>>>>>        If (sReportId <> "") Begin
78784>>>>>            Get IsComObjectCreated to bComObjectCreated
78785>>>>>            If (bComObjectCreated) Begin
78787>>>>>                Get RTFExportOptionsCorrect RTFExportOptionsData to bOptionsOk
78788>>>>>                If (not (bOptionsOk)) Begin
78790>>>>>                    Get DefaultRTFExportOptions to RTFExportOptionsData
78791>>>>>                End
78791>>>>>>
78791>>>>>                Send ComRTFExportOptions sReportId (AddressOf (RTFExportOptionsData))
78792>>>>>            End
78792>>>>>>
78792>>>>>            Else Begin
78793>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78794>>>>>>
78794>>>>>            End
78794>>>>>>
78794>>>>>        End
78794>>>>>>
78794>>>>>        Else Begin
78795>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78796>>>>>>
78796>>>>>        End
78796>>>>>>
78796>>>>>
78796>>>>>        Send RedirectErrorsToLocalHandler False
78797>>>>>    End_Procedure
78798>>>>>
78798>>>>>    // Passes the struct with export options to the COM integration
78798>>>>>    Procedure Set pXLSExportOptions DRXLSExportOptions XLSExportOptionsData
78800>>>>>        String sReportId
78800>>>>>        Boolean bComObjectCreated bOptionsOk
78800>>>>>
78800>>>>>        Send RedirectErrorsToLocalHandler True
78801>>>>>
78801>>>>>        Get psReportId to sReportId
78802>>>>>        If (sReportId <> "") Begin
78804>>>>>            Get IsComObjectCreated to bComObjectCreated
78805>>>>>            If (bComObjectCreated) Begin
78807>>>>>                Get XLSExportOptionsCorrect XLSExportOptionsData to bOptionsOk
78808>>>>>                If (not (bOptionsOk)) Begin
78810>>>>>                    Get DefaultXLSExportOptions to XLSExportOptionsData
78811>>>>>                End
78811>>>>>>
78811>>>>>                Send ComXLSExportOptions sReportId (AddressOf (XLSExportOptionsData))
78812>>>>>            End
78812>>>>>>
78812>>>>>            Else Begin
78813>>>>>                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
78814>>>>>>
78814>>>>>            End
78814>>>>>>
78814>>>>>        End
78814>>>>>>
78814>>>>>        Else Begin
78815>>>>>            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
78816>>>>>>
78816>>>>>        End
78816>>>>>>
78816>>>>>
78816>>>>>        Send RedirectErrorsToLocalHandler False
78817>>>>>    End_Procedure
78818>>>>>End_Class
78819>>>Use cDRPreview.pkg
78819>>>
78819>>>// This enhanced example add a custom floating menu to the ID entry field. The floating menu adds an option
78819>>>// to run a report that shows which customers are ordering the current product/inventory item. The menu option
78819>>>// will be disabled when the user did not select a product/inventory item.
78819>>>
78819>>>// Clicking anywhere on a line with a customer leads to opening the customer entry view, finding the customer.
78819>>>
78819>>>Deferred_View Activate_oInventoryView for ;;Object oInventoryView is a dbView
78844>>>    Set Border_Style to Border_Thick
78845>>>    Set Label to "Inventory Item View"
78846>>>    Set Location to 5 8
78847>>>    Set Size to 140 305
78848>>>    Set piMaxSize to 140 350
78849>>>    Set piMinSize to 140 270
78850>>>
78850>>>    Object oVendorDataDictionary is a cVendorDataDictionary
78852>>>    End_Object
78853>>>
78853>>>    Object oInventoryDataDictionary is a cInventoryDataDictionary
78855>>>        Set DDO_Server to oVendorDataDictionary
78856>>>    End_Object
78857>>>
78857>>>    Set Main_DD to oInventoryDataDictionary
78858>>>    Set Server to oInventoryDataDictionary
78859>>>
78859>>>    Object oInventory_Item_ID is a dbForm
78861>>>        Entry_Item Inventory.Item_ID
78862>>>        Set Label to "Invt. Item ID:"
78863>>>        Set Size to 12 60
78864>>>        Set Location to 15 70
78865>>>        Set peAnchors to anTopLeft
78866>>>        Set Label_Col_Offset to 2
78867>>>        Set Label_Justification_Mode to jMode_Right
78868>>>
78868>>>        Object oInventoryItemIDContextMenu is a cCJContextMenu
78870>>>            Delegate Set Floating_Menu_Object to Self
78872>>>
78872>>>            Object oUndoMenuItem is a cCJUndoMenuItem
78874>>>            End_Object
78875>>>
78875>>>            Object oCutMenuItem is a cCJCutMenuItem
78877>>>                Set pbControlBeginGroup to True
78878>>>            End_Object
78879>>>
78879>>>            Object oCopyMenuItem is a cCJCopyMenuItem
78881>>>            End_Object
78882>>>
78882>>>            Object oPasteMenuItem is a cCJPasteMenuItem
78884>>>            End_Object
78885>>>
78885>>>            Object oDeleteItem is a cCJDeleteEditMenuItem
78887>>>            End_Object
78888>>>
78888>>>            Object oSelectAllMenuItem is a cCJSelectAllMenuItem
78890>>>                Set pbControlBeginGroup to True
78891>>>            End_Object
78892>>>
78892>>>            Object oPromptMenuItem is a cCJPromptMenuItem
78894>>>                Set pbControlBeginGroup to True
78895>>>            End_Object
78896>>>
78896>>>            Object oFindNextMenu is a cCJFindNextMenuItem
78898>>>                Set pbControlBeginGroup to True
78899>>>            End_Object
78900>>>
78900>>>            Object oFindPreviousMenu is a cCJFindPreviousMenuItem
78902>>>            End_Object
78903>>>
78903>>>            Object oClearMenuItem is a cCJClearMenuItem
78905>>>                Set pbControlBeginGroup to True
78906>>>            End_Object
78907>>>
78907>>>            Object oClearAllMenu is a cCJClearAllMenuItem
78909>>>            End_Object
78910>>>
78910>>>            Object oSaveMenu is a cCJSaveMenuItem
78912>>>            End_Object
78913>>>
78913>>>            Object oDeleteMenu is a cCJDeleteMenuItem
78915>>>            End_Object
78916>>>
78916>>>            Object oRememberitem is a cCJRememberFieldMenuItem
78918>>>                Set pbControlBeginGroup to True
78919>>>            End_Object
78920>>>
78920>>>            Object oRetainItem is a cCJRememberLastFieldMenuItem
78922>>>            End_Object
78923>>>
78923>>>            Object oUnRememberitem is a cCJUnRememberFieldMenuItem
78925>>>            End_Object
78926>>>
78926>>>            Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
78928>>>            End_Object
78929>>>
78929>>>            Object oOrderedbyMenuItem is a cCJMenuItem
78931>>>                Set pbControlBeginGroup to True
78932>>>                Set psCaption to "Ordered by"
78933>>>                Set psDescription to "Show Customers Ordering this product"
78934>>>
78934>>>                Procedure OnExecute Variant vCommandBarControl
78937>>>                    Send RunReport of oCustomersOrderingReport
78938>>>                End_Procedure
78939>>>
78939>>>                Function IsEnabled Returns Boolean
78942>>>                    String sItemId
78942>>>
78942>>>                    Get Field_Current_Value of oInventoryDataDictionary Field Inventory.Item_ID to sItemId
78943>>>
78943>>>                    Function_Return (sItemId <> "")
78944>>>                End_Function
78945>>>            End_Object
78946>>>        End_Object
78947>>>    End_Object
78948>>>
78948>>>    Object oCustomersOrderingReport is a cDRReport
78950>>>        Set psReportName to "Customers Ordering this Inventory Item.dr"
78951>>>        
78951>>>        // In the report the section ID is set to the current customer number value. The parameter
78951>>>        // iSectionID is for documentary reasons renamed to iCustomerNumber
78951>>>        Procedure OnReportPreviewClick C_DRHitTests iPos Integer iCustomerNumber String sObject String sValue
78954>>>            Handle hoServer
78954>>>            
78954>>>            Send Activate_oCustomerView
78955>>>            Get Server of oCustomerView to hoServer
78956>>>            Set Field_Current_Value of hoServer Field Customer.Customer_Number to iCustomerNumber
78957>>>            Send File_Field_AutoFind of hoServer File_Field Customer.Customer_Number Eq
78958>>>        End_Procedure
78959>>>        
78959>>>        Procedure OnInitializeReport
78962>>>            String sReportId sItemId
78962>>>            Integer iParameter
78962>>>
78962>>>            Forward Send OnInitializeReport
78964>>>            
78964>>>            Get psReportId to sReportId
78965>>>
78965>>>            // Alter the predefined filter in the report
78965>>>            Get Field_Current_Value of oInventoryDataDictionary Field Inventory.Item_ID to sItemId
78966>>>            Set psFilterValue sReportId 0 to sItemId
78967>>>            
78967>>>            // Set the value of a parameter. The value is used in the report to tell the user what
78967>>>            // the report shows. The report has no access to the filters defined as text string and
78967>>>            // the filter expert filter cannot use a parameter value. This means the value needs to 
78967>>>            // be set in two different places.
78967>>>            Get ParameterIdByName sReportId "InventoryItemId" to iParameter
78968>>>            Set psParameterValue sReportId iParameter to sItemId
78969>>>        End_Procedure
78970>>>    End_Object
78971>>>
78971>>>    Object oInventory_Description is a dbForm
78973>>>        Entry_Item Inventory.Description
78974>>>        Set Label to "Invt. Description:"
78975>>>        Set Size to 12 210
78976>>>        Set Location to 29 70
78977>>>        Set peAnchors to anTopLeftRight
78978>>>        Set Label_Col_Offset to 2
78979>>>        Set Label_Justification_Mode to jMode_Right
78980>>>    End_Object
78981>>>
78981>>>    Object oVendorGroup is a dbGroup
78983>>>        Set Size to 58 271
78984>>>        Set Location to 46 9
78985>>>        Set peAnchors to anAll
78986>>>        Set Label to "Vendor"
78987>>>
78987>>>        Object oInventory_Vendor_ID is a dbForm
78989>>>            Entry_Item Vendor.ID
78990>>>            Set Label to "Vendor ID:"
78991>>>            Set Size to 12 42
78992>>>            Set Location to 9 61
78993>>>            Set peAnchors to anTopLeft
78994>>>            Set Label_Col_Offset to 2
78995>>>            Set Label_Justification_Mode to jMode_Right
78996>>>        End_Object
78997>>>
78997>>>        Object oVendor_Name is a dbForm
78999>>>            Entry_Item Vendor.Name
79000>>>            Set Label to "Vendor Name:"
79001>>>            Set Size to 12 180
79002>>>            Set Location to 23 61
79003>>>            Set peAnchors to anTopLeftRight
79004>>>            Set Label_Col_Offset to 2
79005>>>            Set Label_Justification_Mode to jMode_Right
79006>>>        End_Object
79007>>>
79007>>>        Object oInventory_Vendor_Part_ID is a dbForm
79009>>>            Entry_Item Inventory.Vendor_Part_ID
79010>>>            Set Label to "Vendor Part ID:"
79011>>>            Set Size to 12 90
79012>>>            Set Location to 37 61
79013>>>            Set peAnchors to anTopLeft
79014>>>            Set Label_Col_Offset to 2
79015>>>            Set Label_Justification_Mode to jMode_Right
79016>>>        End_Object
79017>>>    End_Object
79018>>>
79018>>>    Object oUnitGroup is a dbGroup
79020>>>        Set Size to 28 271
79021>>>        Set Location to 106 9
79022>>>        Set peAnchors to anAll
79023>>>
79023>>>        Object oInventory_Unit_Price is a dbForm
79025>>>            Entry_Item Inventory.Unit_Price
79026>>>            Set Label to "Unit Price:"
79027>>>            Set Size to 12 48
79028>>>            Set Location to 10 61
79029>>>            Set peAnchors to anTopLeft
79030>>>            Set Label_Col_Offset to 2
79031>>>            Set Label_Justification_Mode to jMode_Right
79032>>>        End_Object
79033>>>
79033>>>        Object oInventory_On_Hand is a dbForm
79035>>>            Entry_Item Inventory.On_Hand
79036>>>            Set Label to "On Hand:"
79037>>>            Set Size to 12 36
79038>>>            Set Location to 10 205
79039>>>            Set peAnchors to anTopRight
79040>>>            Set Label_Col_Offset to 2
79041>>>            Set Label_Justification_Mode to jMode_Right
79042>>>        End_Object
79043>>>    End_Object
79044>>>Cd_End_Object
79046>>>>
79046>>>
79046>        Use Order.vw
Including file: Order.vw    (C:\test\BuildTools\Order Entry\AppSrc\Order.vw)
79046>>>Use dfClient.pkg
79046>>>Use DataDict.pkg
79046>>>Use dfEntry.pkg
79046>>>Use dfSpnEnt.pkg
79046>>>Use dfCEntry.pkg
79046>>>Use Windows.pkg
79046>>>
79046>>>Use cVendorDataDictionary.dd
79046>>>Use cInventoryDataDictionary.dd
79046>>>Use cCustomerDataDictionary.dd
79046>>>Use cSalesPersonDataDictionary.dd
Including file: cSalesPersonDataDictionary.dd    (C:\test\BuildTools\Order Entry\DDSrc\cSalesPersonDataDictionary.dd)
79046>>>>>Use DataDict.pkg
79046>>>>>
79046>>>>>Open SalesPerson
Including file: SalesPerson.fd    (C:\test\BuildTools\Order Entry\DDSrc\SalesPerson.fd)
79048>>>>>Open OrderHeader
79050>>>>>
79050>>>>>Register_Object SalesPerson_sl
79050>>>>>Register_Object oSalesPersonWebLookup
79050>>>>>
79050>>>>>Class cSalesPersonDataDictionary is a DataDictionary
79051>>>>>    
79051>>>>>    Procedure Construct_Object
79053>>>>>        Forward Send Construct_Object
79055>>>>>        
79055>>>>>        Set Main_File to SalesPerson.File_Number
79056>>>>>        Set Cascade_Delete_State to False
79057>>>>>        
79057>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
79058>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
79059>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
79060>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
79061>>>>>        
79061>>>>>        Set Add_Client_File to OrderHeader.File_Number
79062>>>>>        
79062>>>>>        Set Field_Label_Long Field SalesPerson.Id to "Sales Person ID"
79063>>>>>        Set Field_Label_Short Field SalesPerson.Id to "ID"
79064>>>>>        Set Field_Option Field SalesPerson.Id DD_AUTOFIND to True
79065>>>>>        Set Field_Option Field SalesPerson.Id DD_REQUIRED to True
79066>>>>>        Set Field_Option Field SalesPerson.Id DD_CAPSLOCK to True
79067>>>>>        Set Field_Prompt_Object Field SalesPerson.Id to SalesPerson_sl
79068>>>>>        Set Field_WebPrompt_Object Field SalesPerson.ID to oSalesPersonWebLookup
79069>>>>>        Set Key_Field_State Field SalesPerson.Id to True
79070>>>>>        Set Status_Help Field SalesPerson.Id to "Sales person ID code - Upper case alpha"
79071>>>>>        Set Field_WebPrompt_Object Field SalesPerson.ID to oSalesPersonWebLookup
79072>>>>>        
79072>>>>>        Set Field_Label_Long Field SalesPerson.Name to "Sales Person Name"
79073>>>>>        Set Field_Label_Short Field SalesPerson.Name to "Sales Person Name"
79074>>>>>        Set Field_Prompt_Object Field SalesPerson.Name to SalesPerson_sl
79075>>>>>        Set Status_Help Field SalesPerson.Name to "Sales person name - first and last"
79076>>>>>        
79076>>>>>        Set piPrimaryIndex to 1
79077>>>>>    End_Procedure
79078>>>>>    
79078>>>>>    Procedure Field_Defaults
79080>>>>>        Forward Send Field_Defaults
79082>>>>>    End_Procedure
79083>>>>>    
79083>>>>>End_Class
79084>>>>>
79084>>>>>
79084>>>>>Use SalesPerson.sl
Including file: SalesPerson.sl    (C:\test\BuildTools\Order Entry\AppSrc\SalesPerson.sl)
79084>>>>>>>Use DFClient.pkg
79084>>>>>>>Use Windows.pkg
79084>>>>>>>Use cDbCJGridPromptList.pkg
79084>>>>>>>
79084>>>>>>>Use cSalesPersonDataDictionary.dd
79084>>>>>>>
79084>>>>>>>Cd_Popup_Object SalesPerson_sl is a dbModalPanel
79102>>>>>>>>
79102>>>>>>>    
79102>>>>>>>    Set Minimize_Icon to False
79103>>>>>>>    Set Label to "Sales Person List"
79104>>>>>>>    Set Size to 99 260
79105>>>>>>>    Set Location to 4 5
79106>>>>>>>    Set piMinSize to 99 180
79107>>>>>>>    
79107>>>>>>>    Object oSalesPersonDataDictionary is a cSalesPersonDataDictionary
79109>>>>>>>    End_Object
79110>>>>>>>    
79110>>>>>>>    Set Main_DD to oSalesPersonDataDictionary
79111>>>>>>>    Set Server to oSalesPersonDataDictionary
79112>>>>>>>    
79112>>>>>>>    Object oSelList is a cDbCJGridPromptList
79114>>>>>>>        Set Size to 70 249
79115>>>>>>>        Set Location to 6 5
79116>>>>>>>        Set pbAllowColumnRemove to False
79117>>>>>>>        Set peAnchors to anAll
79118>>>>>>>        
79118>>>>>>>        Object oSalesPerson_ID is a cDbCJGridColumn
79120>>>>>>>            Entry_Item SalesPerson.ID
79121>>>>>>>            Set piWidth to 60
79122>>>>>>>            Set psCaption to "ID"
79123>>>>>>>        End_Object
79124>>>>>>>        
79124>>>>>>>        Object oSalesPerson_Name is a cDbCJGridColumn
79126>>>>>>>            Entry_Item SalesPerson.Name
79127>>>>>>>            Set piWidth to 313
79128>>>>>>>            Set psCaption to "Sales Person Name"
79129>>>>>>>        End_Object
79130>>>>>>>    End_Object
79131>>>>>>>    
79131>>>>>>>    Object oOK_bn is a Button
79133>>>>>>>        Set Label to "&Ok"
79134>>>>>>>        Set Location to 81 99
79135>>>>>>>        Set peAnchors to anBottomRight
79136>>>>>>>        Set Default_State to True
79137>>>>>>>        
79137>>>>>>>        Procedure OnClick
79140>>>>>>>            Send OK of oSelList
79141>>>>>>>        End_Procedure
79142>>>>>>>        
79142>>>>>>>    End_Object
79143>>>>>>>    
79143>>>>>>>    Object oCancel_bn is a Button
79145>>>>>>>        Set Label to "&Cancel"
79146>>>>>>>        Set Location to 81 152
79147>>>>>>>        Set peAnchors to anBottomRight
79148>>>>>>>        
79148>>>>>>>        Procedure OnClick
79151>>>>>>>            Send Cancel of oSelList
79152>>>>>>>        End_Procedure
79153>>>>>>>        
79153>>>>>>>    End_Object
79154>>>>>>>    
79154>>>>>>>    Object oSearch_bn is a Button
79156>>>>>>>        Set Label to "&Search..."
79157>>>>>>>        Set Location to 81 205
79158>>>>>>>        Set peAnchors to anBottomRight
79159>>>>>>>        
79159>>>>>>>        Procedure OnClick
79162>>>>>>>            Send Search of oSelList
79163>>>>>>>        End_Procedure
79164>>>>>>>        
79164>>>>>>>    End_Object
79165>>>>>>>    
79165>>>>>>>    On_Key Key_Alt+Key_O Send KeyAction of oOk_bn
79166>>>>>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancel_bn
79167>>>>>>>    On_Key Key_Alt+Key_S Send KeyAction of oSearch_bn
79168>>>>>>>    
79168>>>>>>>Cd_End_Object
79170>>>>>>>>
79170>>>>>>>
79170>>>>>
79170>>>Use cOrderHeaderDataDictionary.dd
Including file: cOrderHeaderDataDictionary.dd    (C:\test\BuildTools\Order Entry\DDSrc\cOrderHeaderDataDictionary.dd)
79170>>>>>Use DataDict.pkg
79170>>>>>
79170>>>>>Open OrderHeader
79172>>>>>Open OrderDetail
79174>>>>>Open Customer
79176>>>>>Open SalesPerson
79178>>>>>Open OrderSystem
79180>>>>>
79180>>>>>Register_Object Terms_table
79180>>>>>Register_Object Ship_Table
79180>>>>>
79180>>>>>Object Terms_table  is a DescriptionValidationTable
79182>>>>>    
79182>>>>>    Procedure Fill_List
79185>>>>>        Forward Send Fill_List
79187>>>>>        Send Add_Table_Value  "NONE"  "None established"
79188>>>>>        Send Add_Table_Value  "COD"  "COD"
79189>>>>>        Send Add_Table_Value  "NET30"  "Net 30"
79190>>>>>        Send Add_Table_Value  "NET60"  "Net 60"
79191>>>>>        Send Add_Table_Value  "NET90"  "Net 90"
79192>>>>>        Send Add_Table_Value  "PREPAY"  "Pre-payment required"
79193>>>>>    End_Procedure
79194>>>>>    
79194>>>>>End_Object
79195>>>>>
79195>>>>>Object Ship_Table is a CodeValidationTable
79197>>>>>    Set Type_Value to "SHIPPING"
79198>>>>>    Set Allow_Blank_State to True
79199>>>>>End_Object
79200>>>>>
79200>>>>>Register_Object OrderHeader_sl
79200>>>>>Register_Object oOrderWebLookup
79200>>>>>
79200>>>>>Class cOrderHeaderDataDictionary is a DataDictionary
79201>>>>>    
79201>>>>>    Procedure Construct_Object
79203>>>>>        Forward Send Construct_Object
79205>>>>>        
79205>>>>>        Set Main_File to OrderHeader.File_Number
79206>>>>>        
79206>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
79207>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
79208>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
79209>>>>>        
79209>>>>>        Set Add_Client_File to OrderDetail.File_Number
79210>>>>>        
79210>>>>>        Set Add_Server_File to Customer.File_Number
79211>>>>>        Set Add_Server_File to SalesPerson.File_Number
79212>>>>>        
79212>>>>>        Set ParentNullAllowed SalesPerson.File_Number to True
79213>>>>>        Set ParentNoSwitchIfCommitted Customer.File_Number to True
79214>>>>>        
79214>>>>>        Set Add_System_File to OrderSystem.File_Number DD_LOCK_ON_NEW_SAVE_DELETE
79215>>>>>        
79215>>>>>        Set Field_Auto_Increment Field OrderHeader.Order_Number to File_Field OrderSystem.Order_Number
79216>>>>>        
79216>>>>>        Set Field_Option Field OrderHeader.Order_Number DD_AUTOFIND to True
79217>>>>>        Set Field_Prompt_Object Field OrderHeader.Order_Number to OrderHeader_SL
79218>>>>>        Set Field_WebPrompt_Object Field OrderHeader.Order_Number to oOrderWebLookup
79219>>>>>        
79219>>>>>        Set Key_Field_State Field OrderHeader.Order_Number to True
79220>>>>>        Set Status_Help Field OrderHeader.Order_Number to "Order Number - New orders are assigned numbers automatically"
79221>>>>>        Set Field_Option Field OrderHeader.Order_Number DD_NOPUT to True
79222>>>>>        
79222>>>>>        Set Field_Class_Name Field OrderHeader.Order_Date to "Spin"
79223>>>>>        Set Field_Entry_msg Field OrderHeader.Order_Date to Entry_Order_Date
79224>>>>>        Set Field_Mask_Type Field OrderHeader.Order_Date to MASK_DATE_WINDOW
79225>>>>>        Set Field_Prompt_Object Field OrderHeader.Order_Date to OrderHeader_SL
79226>>>>>        Set Field_WebPrompt_Object Field OrderHeader.Order_Date to oOrderWebLookup
79227>>>>>        
79227>>>>>        Set Status_Help Field OrderHeader.Order_Date to "Date on which the order was placed"
79228>>>>>        Set Field_Option Field OrderHeader.Order_Date DD_COMMIT to True
79229>>>>>        Set Field_Option Field OrderHeader.Order_Date DD_REQUIRED to True
79230>>>>>        
79230>>>>>        Set Field_Class_Name Field OrderHeader.Terms to "Combo"
79231>>>>>        Set Field_Value_Table Field OrderHeader.Terms to Terms_table
79232>>>>>        Set Status_Help Field OrderHeader.Terms to "Payment terms"
79233>>>>>        
79233>>>>>        Set Field_Class_Name Field OrderHeader.Ship_Via to "Combo"
79234>>>>>        Set Field_Value_Table Field OrderHeader.Ship_Via to Ship_Table
79235>>>>>        Set Status_Help Field OrderHeader.Ship_Via to "Shipping method"
79236>>>>>        
79236>>>>>        Set Status_Help Field OrderHeader.Ordered_By to "Order placed by"
79237>>>>>        Set Field_Option Field OrderHeader.Ordered_By DD_COMMIT to True
79238>>>>>        
79238>>>>>        Set Field_Label_Long Field OrderHeader.SalesPerson_ID to "Sales Person ID"
79239>>>>>        Set Field_Label_Short Field OrderHeader.SalesPerson_ID to "Sales ID"
79240>>>>>        Set Status_Help Field OrderHeader.SalesPerson_ID to "Sales Person who initiated the order"
79241>>>>>        
79241>>>>>        Set Field_Mask_Type Field OrderHeader.Order_Total to MASK_CURRENCY_WINDOW
79242>>>>>        Set Field_Option Field OrderHeader.Order_Total DD_DISPLAYONLY to True
79243>>>>>        
79243>>>>>        Set piPrimaryIndex to 1
79244>>>>>    End_Procedure
79245>>>>>    
79245>>>>>    Procedure Field_Defaults
79247>>>>>        Forward Send Field_Defaults
79249>>>>>        Set Field_Changed_Value Field OrderHeader.Order_Date to (CurrentDateTime())
79250>>>>>        Set Field_Changed_Value Field OrderHeader.Terms to "COD"
79251>>>>>        Set Field_Changed_Value Field OrderHeader.Ship_Via to "FEDEX"
79252>>>>>    End_Procedure
79253>>>>>    
79253>>>>>    // Add a default date if the field is blank
79253>>>>>    Procedure Entry_Order_Date Integer iField Date dDate
79255>>>>>        Integer iChanged
79255>>>>>        
79255>>>>>        Get Field_Changed_State iField to iChanged
79256>>>>>        If (iChanged=0 and dDate=0) Begin
79258>>>>>            Sysdate dDate
79259>>>>>            Set Field_Default_Value iField to dDate
79260>>>>>        End
79260>>>>>>
79260>>>>>    End_Procedure
79261>>>>>    
79261>>>>>    Procedure Update
79263>>>>>        Forward Send Update
79265>>>>>        Send Adjust_Balances OrderHeader.Order_Total
79266>>>>>    End_Procedure
79267>>>>>    
79267>>>>>    Procedure Backout
79269>>>>>        Forward Send Backout
79271>>>>>        Send Adjust_Balances (-OrderHeader.Order_Total)
79272>>>>>    End_Procedure
79273>>>>>    
79273>>>>>    Procedure Adjust_Balances Number Amt
79275>>>>>        Add Amt to Customer.Purchases
79276>>>>>        Add Amt to Customer.Balance
79277>>>>>    End_Procedure
79278>>>>>    
79278>>>>>    Procedure Deleting
79280>>>>>        Forward Send Deleting
79282>>>>>        // see if we can decrement the order number in sys table...
79282>>>>>        // can only do this if this is the newest order.
79282>>>>>        If (OrderHeader.Order_Number=OrderSystem.Order_Number) Begin // if this is
79284>>>>>            Decrement OrderSystem.Order_Number          // the last number,
79285>>>>>            SaveRecord OrderSystem                      // decrement and save.
79286>>>>>        End
79286>>>>>>
79286>>>>>    End_Procedure
79287>>>>>    
79287>>>>>End_Class
79288>>>>>
79288>>>>>
79288>>>>>Use OrderHeader.sl
Including file: Orderheader.sl    (C:\test\BuildTools\Order Entry\AppSrc\Orderheader.sl)
79288>>>>>>>Use DFClient.pkg
79288>>>>>>>Use Windows.pkg
79288>>>>>>>Use cDbCJGridPromptList.pkg
79288>>>>>>>
79288>>>>>>>Use cCustomerDataDictionary.dd
79288>>>>>>>Use cOrderHeaderDataDictionary.dd
79288>>>>>>>
79288>>>>>>>
79288>>>>>>>Cd_Popup_Object OrderHeader_sl is a dbModalPanel
79306>>>>>>>>
79306>>>>>>>    
79306>>>>>>>    Set Minimize_Icon to False
79307>>>>>>>    Set Label to "Order List"
79308>>>>>>>    Set Size to 134 392
79309>>>>>>>    Set Location to 4 5
79310>>>>>>>    Set piMinSize to 134 392
79311>>>>>>>    
79311>>>>>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
79313>>>>>>>    End_Object
79314>>>>>>>    
79314>>>>>>>    Object oOrderHeaderDataDictionary is a cOrderHeaderDataDictionary
79316>>>>>>>        Set DDO_Server to oCustomerDataDictionary
79317>>>>>>>    End_Object
79318>>>>>>>    
79318>>>>>>>    Set Main_DD to oOrderHeaderDataDictionary
79319>>>>>>>    Set Server to oOrderHeaderDataDictionary
79320>>>>>>>    
79320>>>>>>>    Object oSelList is a cDbCJGridPromptList
79322>>>>>>>        Set Size to 100 377
79323>>>>>>>        Set Location to 9 7
79324>>>>>>>        Set pbAllowColumnRemove to False
79325>>>>>>>        Set peAnchors to anAll
79326>>>>>>>        
79326>>>>>>>        Object oOrderHea_Order_Number is a cDbCJGridColumn
79328>>>>>>>            Entry_Item OrderHeader.Order_Number
79329>>>>>>>            Set piWidth to 87
79330>>>>>>>            Set psCaption to "Order Number"
79331>>>>>>>        End_Object
79332>>>>>>>        
79332>>>>>>>        Object oCustomer_Customer_Number is a cDbCJGridColumn
79334>>>>>>>            Entry_Item Customer.Customer_Number
79335>>>>>>>            Set piWidth to 84
79336>>>>>>>            Set psCaption to "Cust. Number"
79337>>>>>>>        End_Object
79338>>>>>>>        
79338>>>>>>>        Object oCustomer_Name is a cDbCJGridColumn
79340>>>>>>>            Entry_Item Customer.Name
79341>>>>>>>            Set piWidth to 231
79342>>>>>>>            Set psCaption to "Customer Name"
79343>>>>>>>        End_Object
79344>>>>>>>        
79344>>>>>>>        Object oOrderHeader_Order_Date is a cDbCJGridColumn
79346>>>>>>>            Entry_Item OrderHeader.Order_Date
79347>>>>>>>            Set piWidth to 75
79348>>>>>>>            Set psCaption to "Order Date"
79349>>>>>>>            Set peTextAlignment to xtpAlignmentRight
79350>>>>>>>        End_Object
79351>>>>>>>        
79351>>>>>>>        Object oOrderHeader_Order_Total is a cDbCJGridColumn
79353>>>>>>>            Entry_Item OrderHeader.Order_Total
79354>>>>>>>            Set piWidth to 88
79355>>>>>>>            Set psCaption to "Order Total"
79356>>>>>>>        End_Object
79357>>>>>>>    End_Object
79358>>>>>>>    
79358>>>>>>>    Object oOK_bn is a Button
79360>>>>>>>        Set Label to "&Ok"
79361>>>>>>>        Set Location to 116 231
79362>>>>>>>        Set peAnchors to anBottomRight
79363>>>>>>>        
79363>>>>>>>        Procedure OnClick
79366>>>>>>>            Send OK of oSelList
79367>>>>>>>        End_Procedure
79368>>>>>>>        
79368>>>>>>>    End_Object
79369>>>>>>>    
79369>>>>>>>    Object oCancel_bn is a Button
79371>>>>>>>        Set Label to "&Cancel"
79372>>>>>>>        Set Location to 116 284
79373>>>>>>>        Set peAnchors to anBottomRight
79374>>>>>>>        
79374>>>>>>>        Procedure OnClick
79377>>>>>>>            Send Cancel of oSelList
79378>>>>>>>        End_Procedure
79379>>>>>>>        
79379>>>>>>>    End_Object
79380>>>>>>>    
79380>>>>>>>    Object oSearch_bn is a Button
79382>>>>>>>        Set Label to "&Search..."
79383>>>>>>>        Set Location to 116 337
79384>>>>>>>        Set peAnchors to anBottomRight
79385>>>>>>>        
79385>>>>>>>        Procedure OnClick
79388>>>>>>>            Send Search of oSelList
79389>>>>>>>        End_Procedure
79390>>>>>>>        
79390>>>>>>>    End_Object
79391>>>>>>>    
79391>>>>>>>    On_Key Key_Alt+Key_O Send KeyAction of oOk_bn
79392>>>>>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancel_bn
79393>>>>>>>    On_Key Key_Alt+Key_S Send KeyAction of oSearch_bn
79394>>>>>>>    
79394>>>>>>>Cd_End_Object
79396>>>>>>>>
79396>>>>>>>
79396>>>>>>>
79396>>>>>
79396>>>Use cOrderDetailDataDictionary.dd
Including file: cOrderDetailDataDictionary.dd    (C:\test\BuildTools\Order Entry\DDSrc\cOrderDetailDataDictionary.dd)
79396>>>>>Use DataDict.pkg
79396>>>>>
79396>>>>>Open OrderDetail
79398>>>>>Open OrderHeader
79400>>>>>Open Inventory
79402>>>>>
79402>>>>>Class cOrderDetailDataDictionary is a DataDictionary
79403>>>>>    
79403>>>>>    Procedure Construct_Object
79405>>>>>        Forward Send Construct_Object
79407>>>>>        
79407>>>>>        Set Main_File to OrderDetail.File_Number
79408>>>>>        Set Cascade_Delete_State to False
79409>>>>>        
79409>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
79410>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
79411>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
79412>>>>>        
79412>>>>>        Set Add_Server_File to OrderHeader.File_Number
79413>>>>>        Set Add_Server_File to Inventory.File_Number
79414>>>>>        
79414>>>>>        Set Field_Auto_Increment Field OrderDetail.Detail_Number to File_Field OrderHeader.Last_Detail_Num
79415>>>>>        
79415>>>>>        Set Field_Option Field OrderDetail.Order_Number DD_NOPUT to True
79416>>>>>        
79416>>>>>        Set Field_Option Field OrderDetail.Detail_Number DD_NOPUT to True
79417>>>>>        
79417>>>>>        Set Field_Exit_msg Field OrderDetail.Qty_Ordered to Adjust_Display_Total
79418>>>>>        Set Field_Label_Long Field OrderDetail.Qty_Ordered to "Quantity Ordered"
79419>>>>>        Set Field_Label_Short Field OrderDetail.Qty_Ordered to "Quantity"
79420>>>>>        Set Field_Mask_Type Field OrderDetail.Qty_Ordered to Mask_Numeric_Window
79421>>>>>        Set Status_Help Field OrderDetail.Qty_Ordered to "Number of items ordered"
79422>>>>>        
79422>>>>>        Set Field_Entry_msg Field OrderDetail.Price to Entering_Price
79423>>>>>        Set Field_Exit_msg Field OrderDetail.Price to Adjust_Display_Total
79424>>>>>        Set Field_Label_Long Field OrderDetail.Price to "Price per Unit"
79425>>>>>        Set Field_Label_Short Field OrderDetail.Price to "Price"
79426>>>>>        Set Field_Mask_Type Field OrderDetail.Price to MASK_CURRENCY_WINDOW
79427>>>>>        Set Status_Help Field OrderDetail.Price to "Price per Unit"
79428>>>>>        
79428>>>>>        Set Field_Label_Long Field OrderDetail.Extended_Price to "Extended Price"
79429>>>>>        Set Field_Label_Short Field OrderDetail.Extended_Price to "Total"
79430>>>>>        Set Field_Mask_Type Field OrderDetail.Extended_Price to MASK_CURRENCY_WINDOW
79431>>>>>        Set Field_Option Field OrderDetail.Extended_Price DD_DISPLAYONLY to True
79432>>>>>        Set Status_Help Field OrderDetail.Extended_Price to "Total extended price"
79433>>>>>        
79433>>>>>        Set piPrimaryIndex to 1
79434>>>>>    End_Procedure
79435>>>>>    
79435>>>>>    // Update and Backout need to adjust the Inventory.On_Hand quantity,
79435>>>>>    // the OrderDetail line's extended price and the OrderHeader total.
79435>>>>>    // We will call the same procedure (Adjust_Balances) to insure that
79435>>>>>    // Backout and Update are inverses of each other.
79435>>>>>    // Note that Backout does not need to change the Extended_Price.
79435>>>>>    // This only gets changed as part of Update.
79435>>>>>    Procedure Update
79437>>>>>        Forward Send Update
79439>>>>>        Move (OrderDetail.Price * OrderDetail.Qty_Ordered) to OrderDetail.Extended_Price
79440>>>>>        Send Adjust_Balances OrderDetail.Qty_Ordered OrderDetail.Extended_Price
79441>>>>>    End_Procedure
79442>>>>>    
79442>>>>>    Procedure Backout
79444>>>>>        Forward Send Backout
79446>>>>>        Send Adjust_Balances (-OrderDetail.Qty_Ordered) (-OrderDetail.Extended_Price)
79447>>>>>    End_Procedure
79448>>>>>    
79448>>>>>    // Called by Backout and Update, passing the quantity and the extended price.
79448>>>>>    // Subtract quantity from on-hand Inventory and add extended Amt to order total.
79448>>>>>    Procedure Adjust_Balances Number Qty Number Amt
79450>>>>>        Subtract Qty from Inventory.On_Hand
79451>>>>>        Add      Amt to   OrderHeader.Order_Total
79452>>>>>    End_Procedure
79453>>>>>    
79453>>>>>    // when entering the price field we may wish to update the
79453>>>>>    // current field value with the standard unit price from the Inventory table.
79453>>>>>    // Only do this if the current amount is zero and an item was actually picked.
79453>>>>>    // If non-zero or no item picked, we assume the field is being edited (and we make no assumptions).
79453>>>>>    Procedure Entering_Price Integer Field# Number nAmnt
79455>>>>>        Handle hoInventoryDD
79455>>>>>        Boolean bHasRecord
79455>>>>>        
79455>>>>>        Get Data_Set Inventory.File_Number to hoInventoryDD
79456>>>>>        
79456>>>>>        If (hoInventoryDD) Begin
79458>>>>>            Get HasRecord of hoInventoryDD to bHasRecord
79459>>>>>            
79459>>>>>            If (nAmnt=0 and bHasRecord) Begin
79461>>>>>                Get File_Field_Current_Value File_Field Inventory.Unit_Price to nAmnt
79462>>>>>                Set Field_Changed_Value Field# to nAmnt
79463>>>>>                Send Adjust_Display_Total
79464>>>>>            End
79464>>>>>>
79464>>>>>        End
79464>>>>>>
79464>>>>>        
79464>>>>>    End_Procedure
79465>>>>>    
79465>>>>>    // This updates the extended price field, which will update any display balances.
79465>>>>>    // This is only done for display purposes.
79465>>>>>    // The actual amount is updated to the field during the save.
79465>>>>>    Procedure Adjust_Display_total Integer iField String sValue
79467>>>>>        Integer iQty
79467>>>>>        Number  nAmnt
79467>>>>>        
79467>>>>>        Get Field_Current_Value Field OrderDetail.Qty_Ordered    to iQty
79468>>>>>        Get Field_Current_Value Field OrderDetail.Price          to nAmnt
79469>>>>>        Set Field_Current_Value Field OrderDetail.Extended_Price to (nAmnt * iQty)
79470>>>>>        // note we set value, but not changed_state!
79470>>>>>    End_Procedure
79471>>>>>    
79471>>>>>    Procedure Field_Defaults
79473>>>>>        Forward Send Field_Defaults
79475>>>>>        Set Field_Changed_Value Field OrderDetail.Qty_Ordered to 1
79476>>>>>    End_Procedure
79477>>>>>    
79477>>>>>End_Class
79478>>>
79478>>>Use cDbCJGrid.pkg
79478>>>Use cCJGridColumnRowIndicator.pkg
Including file: cCJGridColumnRowIndicator.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCJGridColumnRowIndicator.pkg)
79478>>>>>Use cCJGridColumn.pkg
79478>>>>>
79478>>>>>Class cCJGridColumnRowIndicator is a cCJGridColumn
79479>>>>>    
79479>>>>>    Procedure Construct_Object
79481>>>>>        Forward Send Construct_Object
79483>>>>>        
79483>>>>>        Property Integer piImage 0
79484>>>>>        
79484>>>>>        Set psCaption to ""
79485>>>>>        Set piWidth to 20
79486>>>>>        Set pbResizable to False
79487>>>>>        Set pbEditable to False
79488>>>>>        Set pbFocusable to False
79489>>>>>        Set pbAllowDrag to False
79490>>>>>        Set psToolTip to "Row Indicator"
79491>>>>>    End_Procedure
79492>>>>>    
79492>>>>>    Procedure OnCreateColumn
79494>>>>>        Integer iImage
79494>>>>>        Delegate Get AddImage "GridColumnRowIndicator.bmp" 0 to iImage
79496>>>>>        Set piImage to iImage
79497>>>>>    End_Procedure
79498>>>>>    
79498>>>>>    Procedure OnSetDisplayMetrics Handle hoGridItemMetrics Integer iRow String ByRef sValue
79500>>>>>        Integer iImage iFocusedRow
79500>>>>>        Handle hoDataSource
79500>>>>>        
79500>>>>>        Get phoDataSource to hoDataSource
79501>>>>>        Get SelectedRow of hoDataSource to iFocusedRow
79502>>>>>        Move -1 to iImage
79503>>>>>        If (iRow = iFocusedRow) Begin
79505>>>>>            Get piImage to iImage
79506>>>>>            Set ComItemIcon of hoGridItemMetrics to iImage
79507>>>>>        End
79507>>>>>>
79507>>>>>    End_Procedure
79508>>>>>    
79508>>>>>End_Class
79509>>>
79509>>>Use MonthCalendarPrompt.dg
Including file: MonthCalendarPrompt.dg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\MonthCalendarPrompt.dg)
79509>>>>>// Month Calendar Prompt dialog
79509>>>>>Use cMonthCalendarPrompt.pkg
Including file: cMonthCalendarPrompt.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cMonthCalendarPrompt.pkg)
79509>>>>>>>Use cMonthCalendar.pkg
Including file: cMonthCalendar.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cMonthCalendar.pkg)
79509>>>>>>>>>Use Windows.pkg
79509>>>>>>>>>Use Commctrl.pkg
79509>>>>>>>>>Use tWinStructs.pkg
79509>>>>>>>>>Use cWinControlEx.pkg
Including file: cWinControlEx.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cWinControlEx.pkg)
79509>>>>>>>>>>>Use cWinControl.pkg
79509>>>>>>>>>>>// This adds proper navigation and default button support for
79509>>>>>>>>>>>// external classes
79509>>>>>>>>>>>
79509>>>>>>>>>>>Class cWinControlEx is a cWinControl
79510>>>>>>>>>>>    Import_Class_Protocol Standard_Form_Mixin
79511>>>>>>>>>>>    Procedure Construct_Object
79513>>>>>>>>>>>        Forward Send Construct_Object
79515>>>>>>>>>>>        Send define_standard_Form_Mixin
79516>>>>>>>>>>>    End_Procedure
79517>>>>>>>>>>>    
79517>>>>>>>>>>>    Function item_count Integer iItem Returns Integer
79519>>>>>>>>>>>        Function_Return 1
79520>>>>>>>>>>>    End_Function
79521>>>>>>>>>>>    
79521>>>>>>>>>>>    Procedure External_SetFocus
79523>>>>>>>>>>>        Send notify_focus_change 1
79524>>>>>>>>>>>    End_Procedure
79525>>>>>>>>>>>    
79525>>>>>>>>>>>    Procedure External_KillFocus
79527>>>>>>>>>>>        Send notify_focus_change 0
79528>>>>>>>>>>>    End_Procedure
79529>>>>>>>>>>>    
79529>>>>>>>>>>>    Procedure End_Construct_Object
79531>>>>>>>>>>>        Forward Send End_Construct_Object
79533>>>>>>>>>>>        Set External_Message WM_SETFOCUS  to External_SetFocus
79534>>>>>>>>>>>        Set External_Message WM_KILLFOCUS to External_KillFocus
79535>>>>>>>>>>>    End_Procedure
79536>>>>>>>>>>>    
79536>>>>>>>>>>>End_Class
79537>>>>>>>>>>>
79537>>>>>>>>>
79537>>>>>>>>>Class cMonthCalendar is a cWinControlEx
79538>>>>>>>>>    Procedure Construct_Object
79540>>>>>>>>>        Integer iResult
79540>>>>>>>>>        tWinInitCommonControlsEX InitCC
79540>>>>>>>>>        tWinInitCommonControlsEX InitCC
79540>>>>>>>>>        
79540>>>>>>>>>        Forward Send Construct_Object
79542>>>>>>>>>        
79542>>>>>>>>>        Move (SizeOfType (tWinInitCommonControlsEX)) to InitCC.dwSize
79543>>>>>>>>>        Move ICC_DATE_CLASSES to InitCC.dwICC
79544>>>>>>>>>        Move (InitCommonControlsEx(AddressOf(InitCC))) to iResult
79545>>>>>>>>>        
79545>>>>>>>>>        Set External_Class_Name 'cMonthCalendar' to 'SysMonthCal32'
79546>>>>>>>>>        Set External_Message WM_LBUTTONDBLCLK to msg_OnLButtonDblClick
79547>>>>>>>>>        
79547>>>>>>>>>        Set Border_Style to Border_Normal
79548>>>>>>>>>        
79548>>>>>>>>>        Property Boolean pbNoToday False
79549>>>>>>>>>        Property Boolean pbNoTodayCircle False
79550>>>>>>>>>        Property Boolean pbMultiSelect False
79551>>>>>>>>>        Property Boolean pbWeekNumbers False
79552>>>>>>>>>        Property Integer piMaxSelectedCount 90
79553>>>>>>>>>        
79553>>>>>>>>>        // this is minimum Dialog units required for a single picker rectangle
79553>>>>>>>>>        Property Integer piMinWidth 0
79554>>>>>>>>>        Property Integer piMinHeight 0
79555>>>>>>>>>        
79555>>>>>>>>>        // stores initial date before control is activated
79555>>>>>>>>>        Property Date pdPrivateDate
79556>>>>>>>>>        // if multi-select, this is the end range
79556>>>>>>>>>        Property Date pdPrivateDate2
79557>>>>>>>>>        
79557>>>>>>>>>    End_Procedure
79558>>>>>>>>>    
79558>>>>>>>>>    // returns control's value when single select
79558>>>>>>>>>    Function SelectedDate Returns Date
79560>>>>>>>>>        tWinSystemTime CurrentSystemTime
79560>>>>>>>>>        tWinSystemTime CurrentSystemTime
79560>>>>>>>>>        Integer iRetval
79560>>>>>>>>>        DateTime dtSel
79560>>>>>>>>>        Handle hWnd
79560>>>>>>>>>        Get Window_Handle to hWnd
79561>>>>>>>>>        If (hWnd) Begin
79563>>>>>>>>>            Move (WindowsMessage (MCM_GETCURSEL, 0, AddressOf (CurrentSystemTime))) to iRetval
79564>>>>>>>>>            Move (DateSetDay(dtSel,CurrentSystemTime.wDay)) to dtSel
79565>>>>>>>>>            Move (DateSetMonth(dtSel,CurrentSystemTime.wMonth)) to dtSel
79566>>>>>>>>>            Move (DateSetYear(dtSel,CurrentSystemTime.wYear)) to dtSel
79567>>>>>>>>>        End
79567>>>>>>>>>>
79567>>>>>>>>>        Else Begin
79568>>>>>>>>>            Get pdPrivateDate to dtSel
79569>>>>>>>>>        End
79569>>>>>>>>>>
79569>>>>>>>>>        Function_Return (Date(dtSel))
79570>>>>>>>>>    End_Function
79571>>>>>>>>>    
79571>>>>>>>>>    // returns control's values when multi select
79571>>>>>>>>>    Function SelectedDateRange Returns Date[]
79573>>>>>>>>>        tWinSystemTime[2] CurrentSystemTime
79573>>>>>>>>>        tWinSystemTime[2] CurrentSystemTime
79574>>>>>>>>>        Integer iRetval
79574>>>>>>>>>        DateTime dtSel1 dtsel2
79574>>>>>>>>>        Date[] dtSel
79575>>>>>>>>>        Handle hWnd
79575>>>>>>>>>        Get Window_Handle to hWnd
79576>>>>>>>>>        If (hWnd) Begin
79578>>>>>>>>>            Move (WindowsMessage (MCM_GETSELRANGE, 0, AddressOf (CurrentSystemTime))) to iRetval
79579>>>>>>>>>            
79579>>>>>>>>>            Move (DateSetDay(dtSel1,CurrentSystemTime[0].wDay)) to dtSel1
79580>>>>>>>>>            Move (DateSetMonth(dtSel1,CurrentSystemTime[0].wMonth)) to dtSel1
79581>>>>>>>>>            Move (DateSetYear(dtSel1,CurrentSystemTime[0].wYear)) to dtSel1
79582>>>>>>>>>            
79582>>>>>>>>>            Move (DateSetDay(dtSel2,CurrentSystemTime[1].wDay)) to dtSel2
79583>>>>>>>>>            Move (DateSetMonth(dtSel2,CurrentSystemTime[1].wMonth)) to dtSel2
79584>>>>>>>>>            Move (DateSetYear(dtSel2,CurrentSystemTime[1].wYear)) to dtSel2
79585>>>>>>>>>            
79585>>>>>>>>>            Move dtSel1 to dtSel[0]
79586>>>>>>>>>            Move dtsel2 to dtSel[1]
79587>>>>>>>>>        End
79587>>>>>>>>>>
79587>>>>>>>>>        Else Begin
79588>>>>>>>>>            Get pdPrivateDate to dtSel[0]
79589>>>>>>>>>            Get pdPrivateDate2 to dtSel[1]
79590>>>>>>>>>        End
79590>>>>>>>>>>
79590>>>>>>>>>        Function_Return dtSel
79591>>>>>>>>>    End_Function
79592>>>>>>>>>    
79592>>>>>>>>>    // Set control's value when single select
79592>>>>>>>>>    Procedure SetSelectedDate Date dDate
79594>>>>>>>>>        tWinSystemTime CurrentSystemTime
79594>>>>>>>>>        tWinSystemTime CurrentSystemTime
79594>>>>>>>>>        Integer iRetval
79594>>>>>>>>>        Handle hWnd
79594>>>>>>>>>        
79594>>>>>>>>>        Get Window_Handle to hWnd
79595>>>>>>>>>        Set pdPrivateDate to dDate
79596>>>>>>>>>        If (hWnd) Begin
79598>>>>>>>>>            Move (DateGetDay(dDate)) to CurrentSystemTime.wDay
79599>>>>>>>>>            Move (DateGetMonth(dDate)) to CurrentSystemTime.wMonth
79600>>>>>>>>>            Move (DateGetYear(dDate)) to CurrentSystemTime.wYear
79601>>>>>>>>>            
79601>>>>>>>>>            Move (WindowsMessage (MCM_SETCURSEL, 0, AddressOf (CurrentSystemTime))) to iRetval
79602>>>>>>>>>        End
79602>>>>>>>>>>
79602>>>>>>>>>    End_Procedure
79603>>>>>>>>>    
79603>>>>>>>>>    // Set control's values when multi select
79603>>>>>>>>>    Procedure SetSelectedDateRange Date dDate Date dDate2
79605>>>>>>>>>        tWinSystemTime[] CurrentSystemTime
79605>>>>>>>>>        tWinSystemTime[] CurrentSystemTime
79606>>>>>>>>>        Integer iRetval
79606>>>>>>>>>        Handle hWnd
79606>>>>>>>>>        
79606>>>>>>>>>        Get Window_Handle to hWnd
79607>>>>>>>>>        Set pdPrivateDate to dDate
79608>>>>>>>>>        Set pdPrivateDate2 to dDate2
79609>>>>>>>>>        If (hWnd) Begin
79611>>>>>>>>>            Move (DateGetDay(dDate)) to CurrentSystemTime[0].wDay
79612>>>>>>>>>            Move (DateGetMonth(dDate)) to CurrentSystemTime[0].wMonth
79613>>>>>>>>>            Move (DateGetYear(dDate)) to CurrentSystemTime[0].wYear
79614>>>>>>>>>            
79614>>>>>>>>>            Move (DateGetDay(dDate2)) to CurrentSystemTime[1].wDay
79615>>>>>>>>>            Move (DateGetMonth(dDate2)) to CurrentSystemTime[1].wMonth
79616>>>>>>>>>            Move (DateGetYear(dDate2)) to CurrentSystemTime[1].wYear
79617>>>>>>>>>            
79617>>>>>>>>>            Move (WindowsMessage (MCM_SETSELRANGE, 0, AddressOf (CurrentSystemTime))) to iRetval
79618>>>>>>>>>        End
79618>>>>>>>>>>
79618>>>>>>>>>    End_Procedure
79619>>>>>>>>>    
79619>>>>>>>>>    // augment to set dates from control, so they can be accessed after the control is closed
79619>>>>>>>>>    Procedure Remove_Object
79621>>>>>>>>>        Date[] SelDate
79622>>>>>>>>>        If (pbMultiSelect(Self)) Begin
79624>>>>>>>>>            Get SelectedDateRange to SelDate
79625>>>>>>>>>            Set pdPrivateDate2 to SelDate[1]
79626>>>>>>>>>        End
79626>>>>>>>>>>
79626>>>>>>>>>        Else Begin
79627>>>>>>>>>            Get SelectedDate to SelDate[0]
79628>>>>>>>>>        End
79628>>>>>>>>>>
79628>>>>>>>>>        Set pdPrivateDate to SelDate[0]
79629>>>>>>>>>        Forward Send Remove_Object
79631>>>>>>>>>    End_Procedure
79632>>>>>>>>>    
79632>>>>>>>>>    Procedure Page Integer iState
79634>>>>>>>>>        Integer iRetval iSize iHeight iWidth
79634>>>>>>>>>        tWinRect WindowRect
79634>>>>>>>>>        tWinRect WindowRect
79634>>>>>>>>>        Date dDate dDate2
79634>>>>>>>>>        Handle hWnd
79634>>>>>>>>>        Integer  iMaxSelectedCount
79634>>>>>>>>>        Boolean bNoToday bWeekNumbers bMultiSelect bNoTodayCircle
79634>>>>>>>>>        
79634>>>>>>>>>        If (iState<>1) Begin
79636>>>>>>>>>            Forward Send Page iState
79638>>>>>>>>>            Procedure_Return
79639>>>>>>>>>        End
79639>>>>>>>>>>
79639>>>>>>>>>        
79639>>>>>>>>>        Set Icon to 'ActionCalendar.ico'
79640>>>>>>>>>        
79640>>>>>>>>>        Get pbNoToday to bNoToday
79641>>>>>>>>>        Get pbNoTodayCircle to bNoTodayCircle
79642>>>>>>>>>        Get pbMultiSelect to bMultiSelect
79643>>>>>>>>>        Get pbWeekNumbers to bWeekNumbers
79644>>>>>>>>>        Get piMaxSelectedCount to iMaxSelectedCount
79645>>>>>>>>>        
79645>>>>>>>>>        Set Window_Style MCS_MULTISELECT to bMultiSelect
79646>>>>>>>>>        Set Window_Style MCS_NOTODAY to bNoToday
79647>>>>>>>>>        Set Window_Style MCS_NOTODAYCIRCLE to bNoTodayCircle
79648>>>>>>>>>        Set Window_Style MCS_WEEKNUMBERS to bWeekNumbers
79649>>>>>>>>>        Forward Send Page iState
79651>>>>>>>>>        
79651>>>>>>>>>        Get Window_Handle to hWnd
79652>>>>>>>>>        // support double click
79652>>>>>>>>>        Move (SetClassLongPtr(hWnd,GCL_STYLE,CS_DBLCLKS ior CS_GLOBALCLASS)) to iRetval
79653>>>>>>>>>        // set range when multi select
79653>>>>>>>>>        Move (WindowsMessage(MCM_SETMAXSELCOUNT,iMaxSelectedCount,0)) to iRetval
79654>>>>>>>>>        
79654>>>>>>>>>        // store minimum size for calendar control and set the size to this by default
79654>>>>>>>>>        Move (WindowsMessage (MCM_GETMINREQRECT, 0, AddressOf(WindowRect))) to iRetval
79655>>>>>>>>>        Get GuiToDialog WindowRect.bottom WindowRect.right to iSize
79656>>>>>>>>>        Move (Hi(iSize)) to iHeight
79657>>>>>>>>>        Move (Low(iSize)) to iWidth
79658>>>>>>>>>        Set piMinWidth to iWidth
79659>>>>>>>>>        Set piMinHeight to iHeight
79660>>>>>>>>>        Set Size to iHeight iWidth
79661>>>>>>>>>        
79661>>>>>>>>>        // now that we are activated set starting date or date range
79661>>>>>>>>>        Get pdPrivateDate to dDate
79662>>>>>>>>>        If (pbMultiSelect(Self)) Begin
79664>>>>>>>>>            Get pdPrivateDate2 to dDate2
79665>>>>>>>>>            Send SetSelectedDateRange dDate dDate2
79666>>>>>>>>>        End
79666>>>>>>>>>>
79666>>>>>>>>>        Else Begin
79667>>>>>>>>>            Send SetSelectedDate dDate
79668>>>>>>>>>        End
79668>>>>>>>>>>
79668>>>>>>>>>    End_Procedure
79669>>>>>>>>>    
79669>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
79671>>>>>>>>>        Integer iRetval
79671>>>>>>>>>        DateTime dtSel dtSel2
79671>>>>>>>>>        tWintagNMSelChange CalenderInfo
79671>>>>>>>>>        tWintagNMSelChange CalenderInfo
79671>>>>>>>>>        Boolean bMulti
79671>>>>>>>>>        
79671>>>>>>>>>        Move (MemCopy (AddressOf (CalenderInfo), lParam, SizeOfType (tWintagNMSelChange))) to iRetval
79672>>>>>>>>>        If (CalenderInfo.nmHdr.code = MCN_SELCHANGE) Begin
79674>>>>>>>>>            Get pbMultiSelect to bMulti
79675>>>>>>>>>            Move (DateSetDay(dtSel,CalenderInfo.stSelStart.wDay)) to dtSel
79676>>>>>>>>>            Move (DateSetMonth(dtSel,CalenderInfo.stSelStart.wMonth)) to dtSel
79677>>>>>>>>>            Move (DateSetYear(dtSel,CalenderInfo.stSelStart.wYear)) to dtSel
79678>>>>>>>>>            If bMulti Begin
79680>>>>>>>>>                Move (DateSetDay(dtSel,CalenderInfo.stSelEnd.wDay)) to dtSel2
79681>>>>>>>>>                Move (DateSetMonth(dtSel,CalenderInfo.stSelEnd.wMonth)) to dtSel2
79682>>>>>>>>>                Move (DateSetYear(dtSel,CalenderInfo.stSelEnd.wYear)) to dtSel2
79683>>>>>>>>>            End
79683>>>>>>>>>>
79683>>>>>>>>>            Send OnChange (Date(dtSel)) (Date(dtSel2))
79684>>>>>>>>>        End
79684>>>>>>>>>>
79684>>>>>>>>>    End_Procedure
79685>>>>>>>>>    
79685>>>>>>>>>    // sent whenever there is a selection change within the calendar
79685>>>>>>>>>    Procedure OnChange Date dDate Date dDate2
79687>>>>>>>>>    End_Procedure
79688>>>>>>>>>    
79688>>>>>>>>>    // sent when a click occurs in the calendar
79688>>>>>>>>>    Procedure OnClick
79690>>>>>>>>>    End_Procedure
79691>>>>>>>>>    
79691>>>>>>>>>    // sent when a double click occurs in the calendar
79691>>>>>>>>>    Procedure OnDoubleClick
79693>>>>>>>>>    End_Procedure
79694>>>>>>>>>    
79694>>>>>>>>>    // sends OnClick if the double click is on a calendar day
79694>>>>>>>>>    Procedure OnLButtonDblClick Integer wParam Integer lParam
79696>>>>>>>>>        Boolean bDayHit
79696>>>>>>>>>        Get MonthDayHit to bDayHit
79697>>>>>>>>>        If bDayHit Begin
79699>>>>>>>>>            Send OnDoubleClick
79700>>>>>>>>>        End
79700>>>>>>>>>>
79700>>>>>>>>>    End_Procedure
79701>>>>>>>>>    
79701>>>>>>>>>    // sends OnClick if the click is on a calendar day
79701>>>>>>>>>    Procedure OnWmLButtonUp Integer wParam Integer lParam
79703>>>>>>>>>        Boolean bDayHit
79703>>>>>>>>>        Get MonthDayHit to bDayHit
79704>>>>>>>>>        If bDayHit Begin
79706>>>>>>>>>            Send OnClick
79707>>>>>>>>>        End
79707>>>>>>>>>>
79707>>>>>>>>>    End_Procedure
79708>>>>>>>>>    
79708>>>>>>>>>    // returns true if the month calander is up and the mouse is over a day
79708>>>>>>>>>    Function MonthDayHit Returns Boolean
79710>>>>>>>>>        UInteger iRet
79710>>>>>>>>>        Move (WindowsMessage( MCM_GETCURRENTVIEW, 0, 0)) to iRet
79711>>>>>>>>>        If (iRet=MCMV_MONTH) Begin
79713>>>>>>>>>            Get HitTest to iRet
79714>>>>>>>>>            Function_Return (iRet=MCHT_CALENDARDATE)
79715>>>>>>>>>        End
79715>>>>>>>>>>
79715>>>>>>>>>        Function_Return False
79716>>>>>>>>>    End_Function
79717>>>>>>>>>    
79717>>>>>>>>>    // return what was hit in the control
79717>>>>>>>>>    Function HitTest Returns UInteger
79719>>>>>>>>>        tWinMCHitTestInfo HitInfo
79719>>>>>>>>>        tWinMCHitTestInfo HitInfo
79719>>>>>>>>>        Handle hWnd iRet
79719>>>>>>>>>        Integer iVoid
79719>>>>>>>>>        Pointer lpPt
79719>>>>>>>>>        tWinPoint Pt
79719>>>>>>>>>        tWinPoint Pt
79719>>>>>>>>>        Get Window_Handle to hWnd
79720>>>>>>>>>        Move (AddressOf(Pt)) to lpPt
79721>>>>>>>>>        Move (GetCursorPos(lpPt)) to iVoid
79722>>>>>>>>>        Move (ScreenToClient(hWnd, lpPt)) to iVoid
79723>>>>>>>>>        Move Pt to HitInfo.Pt
79724>>>>>>>>>        Move (SizeOfType(tWinMCHitTestInfo)) to HitInfo.cbSize
79725>>>>>>>>>        Move (WindowsMessage(MCM_HITTEST, 0, AddressOf(HitInfo))) to iRet
79726>>>>>>>>>        Function_Return HitInfo.uHit
79727>>>>>>>>>    End_Function
79728>>>>>>>>>    
79728>>>>>>>>>End_Class
79729>>>>>>>
79729>>>>>>>// peMouseSelectOk choices
79729>>>>>>>Enum_List
79729>>>>>>>    Define msoClick
79729>>>>>>>    Define msoDblClick
79729>>>>>>>    Define msoNone
79729>>>>>>>End_Enum_List
79729>>>>>>>
79729>>>>>>>// It is expected that this class will only be used inside of ModalPanel and
79729>>>>>>>// will be used as a prompt object component in a framework style application.
79729>>>>>>>// If you wish to Use a month calendar in some other non prompt situation,
79729>>>>>>>// use cMonthCalendar
79729>>>>>>>
79729>>>>>>>Class cMonthCalendarPrompt is a cMonthCalendar
79730>>>>>>>    
79730>>>>>>>    Procedure Construct_Object
79732>>>>>>>        
79732>>>>>>>        Forward Send Construct_Object
79734>>>>>>>        
79734>>>>>>>        Property Integer peUpdateMode umPromptValue
79735>>>>>>>        
79735>>>>>>>        Property Integer peMouseSelectOk msoClick
79736>>>>>>>        
79736>>>>>>>        Property Date pdSeedValue
79737>>>>>>>        
79737>>>>>>>        // if multi-select, this is the end range
79737>>>>>>>        Property Date pdSeedValue2
79738>>>>>>>        
79738>>>>>>>        Property Handle phmPromptUpdateCallback 0
79739>>>>>>>        
79739>>>>>>>        Property Integer phoInvokingObject
79740>>>>>>>        
79740>>>>>>>        Property Integer peStoredUpdateMode
79741>>>>>>>        Property Handle  phmStoredPromptUpdateCallback
79742>>>>>>>        Property Boolean pbStoredWeekNumbers
79743>>>>>>>        Property Boolean pbStoredNoToday
79744>>>>>>>        Property Boolean pbStoredNoTodayCircle
79745>>>>>>>        Property Boolean pbStoredMultiSelect
79746>>>>>>>        Property Integer piStoredMaxSelectedCount
79747>>>>>>>        Property Integer peStoredpeMouseSelectOk
79748>>>>>>>        
79748>>>>>>>        // internally set by list
79748>>>>>>>        // these must be set upon closing the list and can be used for manual list updates
79748>>>>>>>        Property Boolean pbCanceled
79749>>>>>>>        
79749>>>>>>>    End_Procedure
79750>>>>>>>    
79750>>>>>>>    Procedure OnStoreDefaults
79752>>>>>>>        Integer iVal
79752>>>>>>>        Boolean bVal
79752>>>>>>>        
79752>>>>>>>        Get peUpdateMode to iVal
79753>>>>>>>        Set peStoredUpdateMode to iVal
79754>>>>>>>        
79754>>>>>>>        Get phmPromptUpdateCallback to iVal
79755>>>>>>>        Set phmStoredPromptUpdateCallback to iVal
79756>>>>>>>        
79756>>>>>>>        Get pbMultiSelect to bVal
79757>>>>>>>        Set pbStoredMultiSelect to bVal
79758>>>>>>>        
79758>>>>>>>        Get pbNoToday to bVal
79759>>>>>>>        Set pbStoredNoToday to bVal
79760>>>>>>>        
79760>>>>>>>        Get pbNoTodayCircle to bVal
79761>>>>>>>        Set pbStoredNoTodayCircle to bVal
79762>>>>>>>        
79762>>>>>>>        Get pbWeekNumbers to bVal
79763>>>>>>>        Set pbStoredWeekNumbers to bVal
79764>>>>>>>        
79764>>>>>>>        Get piMaxSelectedCount to iVal
79765>>>>>>>        Set piStoredMaxSelectedCount to iVal
79766>>>>>>>        
79766>>>>>>>        Get peMouseSelectOk to iVal
79767>>>>>>>        Set peStoredpeMouseSelectOk to iVal
79768>>>>>>>        
79768>>>>>>>    End_Procedure
79769>>>>>>>    
79769>>>>>>>    Procedure OnRestoreDefaults
79771>>>>>>>        Integer iVal
79771>>>>>>>        Boolean bVal
79771>>>>>>>        
79771>>>>>>>        Get peStoredUpdateMode to iVal
79772>>>>>>>        Set peUpdateMode to iVal
79773>>>>>>>        
79773>>>>>>>        Get phmStoredPromptUpdateCallback to iVal
79774>>>>>>>        Set phmPromptUpdateCallback to iVal
79775>>>>>>>        
79775>>>>>>>        Get pbStoredMultiSelect to bVal
79776>>>>>>>        Set pbMultiSelect to bVal
79777>>>>>>>        
79777>>>>>>>        Get pbStoredNoToday to bVal
79778>>>>>>>        Set pbNoToday to bVal
79779>>>>>>>        
79779>>>>>>>        Get pbStoredNoTodayCircle to bVal
79780>>>>>>>        Set pbNoTodayCircle to bVal
79781>>>>>>>        
79781>>>>>>>        Get pbStoredWeekNumbers to bVal
79782>>>>>>>        Set pbWeekNumbers to bVal
79783>>>>>>>        
79783>>>>>>>        Get piStoredMaxSelectedCount to iVal
79784>>>>>>>        Set piMaxSelectedCount to iVal
79785>>>>>>>        
79785>>>>>>>        Get peStoredpeMouseSelectOk to iVal
79786>>>>>>>        Set peMouseSelectOk to iVal
79787>>>>>>>        
79787>>>>>>>    End_Procedure
79788>>>>>>>    
79788>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
79790>>>>>>>        Integer eMode
79790>>>>>>>        Set pbCanceled to True // assume cancel unless changed
79791>>>>>>>        Get peUpdateMode to eMode
79792>>>>>>>        If (eMode<>umPromptNonInvoking) Begin
79794>>>>>>>            Send OnStoreDefaults
79795>>>>>>>        End
79795>>>>>>>>
79795>>>>>>>        Send InitializePrompt
79796>>>>>>>        Forward Send Add_Focus hoParent
79798>>>>>>>    End_Procedure
79799>>>>>>>    
79799>>>>>>>    // augment to send OnRestoreDefaults.
79799>>>>>>>    Procedure Release_Focus
79801>>>>>>>        Integer eUpdateMode
79801>>>>>>>        Get peUpdateMode to eUpdateMode
79802>>>>>>>        Forward Send Release_Focus
79804>>>>>>>        If (eUpdateMode<>umPromptNonInvoking) Begin
79806>>>>>>>            Send OnRestoreDefaults
79807>>>>>>>        End
79807>>>>>>>>
79807>>>>>>>    End_Procedure
79808>>>>>>>    
79808>>>>>>>    // This is only called in a successful close
79808>>>>>>>    Procedure ClosePrompt
79810>>>>>>>        Handle hoInvokingObject
79810>>>>>>>        Handle hmCallBack
79810>>>>>>>        Integer eUpdateMode
79810>>>>>>>        Date[] dDates
79811>>>>>>>        
79811>>>>>>>        Set pbCanceled to False
79812>>>>>>>        
79812>>>>>>>        Get peUpdateMode to eUpdateMode
79813>>>>>>>        // if non-invoking there is by definition, no move value out
79813>>>>>>>        If (eUpdateMode<>umPromptNonInvoking) Begin
79815>>>>>>>            
79815>>>>>>>            If (eUpdateMode=umPromptValue) Begin
79817>>>>>>>                Send OnMoveValueOutByValue
79818>>>>>>>            End
79818>>>>>>>>
79818>>>>>>>            Else If (eUpdateMode=umPromptCustom) Begin
79821>>>>>>>                Send OnMoveValueOutByCustom
79822>>>>>>>            End
79822>>>>>>>>
79822>>>>>>>            Get phmPromptUpdateCallback to hmCallBack
79823>>>>>>>            If hmCallBack Begin
79825>>>>>>>                Get phoInvokingObject to hoInvokingObject
79826>>>>>>>                If (pbMultiSelect(Self)) Begin
79828>>>>>>>                    Get SelectedDateRange to dDates
79829>>>>>>>                    Send hmCallBack of hoInvokingObject Self dDates[0] dDates[1]
79830>>>>>>>                    
79830>>>>>>>                End
79830>>>>>>>>
79830>>>>>>>                Else Begin
79831>>>>>>>                    Get SelectedDate to dDates[0]
79832>>>>>>>                    Send hmCallBack of hoInvokingObject Self dDates[0]
79833>>>>>>>                End
79833>>>>>>>>
79833>>>>>>>            End
79833>>>>>>>>
79833>>>>>>>        End
79833>>>>>>>>
79833>>>>>>>        
79833>>>>>>>        Send Close_Panel
79834>>>>>>>    End_Procedure
79835>>>>>>>    
79835>>>>>>>    Procedure OnMoveValueOutByValue
79837>>>>>>>        Handle hoInvokingObject
79837>>>>>>>        Date dSelDate
79837>>>>>>>        Boolean bMulti
79837>>>>>>>        // we can only do an automatic move value out with
79837>>>>>>>        // single select. If multi-select you will probably want to
79837>>>>>>>        // use a callback method (hmCallBack) to update the values.
79837>>>>>>>        Get pbMultiSelect to bMulti
79838>>>>>>>        If (not(bMulti)) Begin
79840>>>>>>>            Get SelectedDate to dSelDate
79841>>>>>>>            Get phoInvokingObject to hoInvokingObject
79842>>>>>>>            Set Value of hoInvokingObject to dSelDate
79843>>>>>>>            Set Item_Changed_State of hoInvokingObject to True
79844>>>>>>>        End
79844>>>>>>>>
79844>>>>>>>    End_Procedure
79845>>>>>>>    
79845>>>>>>>    Procedure OnMoveValueOutByCustom
79847>>>>>>>    End_Procedure
79848>>>>>>>    
79848>>>>>>>    // called before the list is activated.
79848>>>>>>>    Procedure InitializePrompt
79850>>>>>>>        Handle hoInvokingObject
79850>>>>>>>        Integer eUpdateMode
79850>>>>>>>        Boolean bMulti
79850>>>>>>>        Date dValue
79850>>>>>>>        
79850>>>>>>>        Get peUpdateMode to eUpdateMode
79851>>>>>>>        If (eUpdateMode<>umPromptNonInvoking) Begin
79853>>>>>>>            
79853>>>>>>>            Get Focus of Desktop to hoInvokingObject
79854>>>>>>>            If (hoInvokingObject<=Desktop) Begin
79856>>>>>>>                Error DFERR_PROGRAM "Calendar Prompt has no invoking object"
79857>>>>>>>>
79857>>>>>>>                Procedure_Return
79858>>>>>>>            End
79858>>>>>>>>
79858>>>>>>>            
79858>>>>>>>            Set phoInvokingObject to hoInvokingObject
79859>>>>>>>            Send Prompt_Callback to hoInvokingObject Self
79860>>>>>>>            Get peUpdateMode to eUpdateMode
79861>>>>>>>        End
79861>>>>>>>>
79861>>>>>>>        
79861>>>>>>>        Get pdSeedValue to dValue
79862>>>>>>>        Get pbMultiSelect to bMulti
79863>>>>>>>        If (not(bMulti) and eUpdateMode=umPromptValue and dValue=0) Begin
79865>>>>>>>            Get Value of hoInvokingObject to dValue
79866>>>>>>>            Set pdSeedValue to dValue
79867>>>>>>>        End
79867>>>>>>>>
79867>>>>>>>        Send OnSeedData
79868>>>>>>>        Set pdSeedValue to 0
79869>>>>>>>        Set pdSeedValue2 to 0
79870>>>>>>>    End_Procedure
79871>>>>>>>    
79871>>>>>>>    Procedure OnSeedData
79873>>>>>>>        Boolean bMulti
79873>>>>>>>        Date dValue dValue2
79873>>>>>>>        Integer iMax iRange
79873>>>>>>>        DateTime dt1 dt2
79873>>>>>>>        Get pbMultiSelect to bMulti
79874>>>>>>>        Get pdSeedValue to dValue
79875>>>>>>>        If (not(bMulti)) Begin
79877>>>>>>>            // if no date, use current date
79877>>>>>>>            If (dValue=0) Begin
79879>>>>>>>                Move (CurrentDateTime()) to dValue
79880>>>>>>>            End
79880>>>>>>>>
79880>>>>>>>            Send SetSelectedDate dValue
79881>>>>>>>        End
79881>>>>>>>>
79881>>>>>>>        Else Begin
79882>>>>>>>            Get pdSeedValue2 to dValue2
79883>>>>>>>            // if no dates, use current date
79883>>>>>>>            If (dValue=0 and dValue2=0) Begin
79885>>>>>>>                Move (CurrentDateTime()) to dValue
79886>>>>>>>            End
79886>>>>>>>>
79886>>>>>>>            // if only one date, make that the range
79886>>>>>>>            If (dValue=0) Begin
79888>>>>>>>                Move dValue2 to dValue
79889>>>>>>>            End
79889>>>>>>>>
79889>>>>>>>            Else If (dValue2=0) Begin
79892>>>>>>>                Move dValue to dValue2
79893>>>>>>>            End
79893>>>>>>>>
79893>>>>>>>            
79893>>>>>>>            // test for valid range
79893>>>>>>>            Get piMaxSelectedCount to iMax
79894>>>>>>>            Move dValue to dt1
79895>>>>>>>            Move dValue2 to dt2
79896>>>>>>>            Move (SpanTotalDays(dt1 - dt2)) to iRange
79897>>>>>>>            If (iRange>iMax) Begin
79899>>>>>>>                Error DFERR_OPERATOR (SFormat(C_$DateRangeExceeded,iMax))
79900>>>>>>>>
79900>>>>>>>                Move dValue to dValue2
79901>>>>>>>            End
79901>>>>>>>>
79901>>>>>>>            
79901>>>>>>>            Send SetSelectedDateRange dValue dValue2
79902>>>>>>>        End
79902>>>>>>>>
79902>>>>>>>    End_Procedure
79903>>>>>>>    
79903>>>>>>>    Procedure OnDoubleClick
79905>>>>>>>        Integer eSelectOn
79905>>>>>>>        Get peMouseSelectOk to eSelectOn
79906>>>>>>>        If (eSelectOn=msoDblClick) Begin
79908>>>>>>>            Send Ok
79909>>>>>>>        End
79909>>>>>>>>
79909>>>>>>>    End_Procedure
79910>>>>>>>    
79910>>>>>>>    Procedure OnClick
79912>>>>>>>        Integer eSelectOn
79912>>>>>>>        Get peMouseSelectOk to eSelectOn
79913>>>>>>>        If (eSelectOn=msoClick) Begin
79915>>>>>>>            Send Ok
79916>>>>>>>        End
79916>>>>>>>>
79916>>>>>>>    End_Procedure
79917>>>>>>>    
79917>>>>>>>    Procedure Ok Returns Integer
79919>>>>>>>        Send ClosePrompt
79920>>>>>>>    End_Procedure
79921>>>>>>>    
79921>>>>>>>    Procedure Cancel Returns Integer
79923>>>>>>>        Send Close_Panel
79924>>>>>>>    End_Procedure
79925>>>>>>>    
79925>>>>>>>End_Class
79926>>>>>Use Dfclient.pkg
79926>>>>>
79926>>>>>Cd_Popup_Object oMonthCalendarPrompt is a ModalPanel
79944>>>>>>
79944>>>>>    Set Location to 10 10
79945>>>>>    Set Size to 145 145
79946>>>>>    // resizable
79946>>>>>    Set Border_Style to Border_Thick
79947>>>>>    
79947>>>>>    Set Label to C_$DateSelector
79948>>>>>    
79948>>>>>    Set piMinSize to 0 0 // set this dynamically // 145 145
79949>>>>>    Set piMaxSize to 310 460
79950>>>>>    
79950>>>>>    // tells us if this been activated and sized yet
79950>>>>>    Property Boolean pbSizeInited False
79952>>>>>    
79952>>>>>    Object oCalendar is a cMonthCalendarPrompt
79954>>>>>        Set Size to 120 135 // not real size, will be assigned
79955>>>>>        Set Location to 5 5
79956>>>>>        Set Border_Style to Border_None
79957>>>>>    End_Object
79958>>>>>    
79958>>>>>    Object oOKButton is a Button
79960>>>>>        Set Label to C_$OK
79961>>>>>        Set Default_State to True
79962>>>>>        Set Location to 129 34
79963>>>>>        Set peAnchors to anBottomRight
79964>>>>>        
79964>>>>>        Procedure OnClick
79967>>>>>            Send Ok of oCalendar
79968>>>>>        End_Procedure
79969>>>>>    End_Object
79970>>>>>    
79970>>>>>    Object oCancelButton is a Button
79972>>>>>        Set Label to C_$Cancel
79973>>>>>        Set Location to 129 89
79974>>>>>        Set peAnchors to anBottomRight
79975>>>>>        
79975>>>>>        Procedure OnClick
79978>>>>>            Send Cancel of oCalendar
79979>>>>>        End_Procedure
79980>>>>>    End_Object
79981>>>>>    
79981>>>>>    Procedure OnResize
79984>>>>>        Integer iSize iHeight iWidth iMinSize
79984>>>>>        Boolean bInited
79984>>>>>        
79984>>>>>        Get piMinHeight of oCalendar to iHeight
79985>>>>>        // when 0, the control has not yet been created. Nothing to do.
79985>>>>>        If (iHeight=0) Begin
79987>>>>>            Procedure_Return
79988>>>>>        End
79988>>>>>>
79988>>>>>        
79988>>>>>        Get pbSizeInited to bInited
79989>>>>>        
79989>>>>>        Get piMinWidth of oCalendar to iWidth
79990>>>>>        Get piMinSize to iMinSize
79991>>>>>        // Minumum size of panel - add 1 to each to each for wiggle room
79991>>>>>        Move (iHeight+25+1) to iHeight
79992>>>>>        Move (iWidth+10+1) to iWidth
79993>>>>>        
79993>>>>>        Set piMinSize to iHeight iWidth
79994>>>>>        
79994>>>>>        If (not(bInited))  Begin
79996>>>>>            Set Size to iHeight iWidth
79997>>>>>            Set pbSizeInited to True
79998>>>>>        End
79998>>>>>>
79998>>>>>        Else Begin
79999>>>>>            Send Adjust_Logicals
80000>>>>>            Get Size to iSize
80001>>>>>            If (Hi(iSize)<iHeight or Low(iSize)<iWidth) Begin
80003>>>>>                Set Size to (iHeight max Hi(iSize)) (iWidth max Low(iSize))
80004>>>>>                Get Size to iSize
80005>>>>>            End
80005>>>>>>
80005>>>>>            Set Size of oCalendar to (Hi(iSize) - 25) (Low(iSize) - 10)
80006>>>>>        End
80006>>>>>>
80006>>>>>        
80006>>>>>    End_Procedure
80007>>>>>    
80007>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
80010>>>>>        Forward Send Add_Focus hoParent
80012>>>>>        Send OnResize
80013>>>>>    End_Procedure
80014>>>>>    
80014>>>>>    On_Key kCancel Send KeyAction to oCancelButton
80015>>>>>    
80015>>>>>Cd_End_Object
80017>>>>>>
80017>>>>>
80017>>>
80017>>>Use cDRReport.pkg
80017>>>Use cDRPreview.pkg
80017>>>Use DRStatuspanel.dg
Including file: DRStatusPanel.dg    (C:\test\BuildTools\DataFlex Reports\AppSrc\DRStatusPanel.dg)
80017>>>>>Use Windows.pkg
80017>>>>>Use Dfbitmap.pkg
80017>>>>>Use DRLanguage.Inc
80017>>>>>
80017>>>>>Object oDRStatusPanel is a ToolPanel
80019>>>>>    Set Sysmenu_Icon to False
80020>>>>>    Set Minimize_Icon to False
80021>>>>>    Set Label to C_$DRDataFlexReports
80022>>>>>    Set Popup_State to True
80023>>>>>    Set Locate_Mode to CENTER_ON_PARENT
80024>>>>>    Set Size to 35 248
80025>>>>>    Set Border_Style to Border_Dialog
80026>>>>>
80026>>>>>    Object oStatusBitmap is a BitmapContainer
80028>>>>>        Set Border_Style to Border_None
80029>>>>>        Set Bitmap to "DR32.bmp"
80030>>>>>        Set Size to 20 20
80031>>>>>        Set Location to 4 7
80032>>>>>    End_Object
80033>>>>>
80033>>>>>    Object oStatusText is a TextBox
80035>>>>>        Set Label to C_$DRLoadingReportPleaseWait
80036>>>>>        Set Size to 10 119
80037>>>>>        Set Location to 4 39
80038>>>>>        Set FontPointHeight to 12
80039>>>>>        Set FontWeight to 800
80040>>>>>    End_Object
80041>>>>>
80041>>>>>    Procedure SetStatusText String sText
80044>>>>>        Integer iVoid iTextSize iImageWidth iImageHeight
80044>>>>>        Handle hWnd
80044>>>>>        String sBitmapName
80044>>>>>
80044>>>>>        Set Label of oStatusText to sText
80045>>>>>        Get Text_Extent of oStatusText sText to iTextSize
80046>>>>>        Get Bitmap_Width of oStatusBitmap to iImageWidth
80047>>>>>        Get Bitmap_Height of oStatusBitmap to iImageHeight
80048>>>>>        If (iImageHeight <= 0 or iImageHeight <= 0) Begin
80050>>>>>            Get Bitmap of oStatusBitmap to sBitmapName
80051>>>>>            Error DFERR_FILE_NOT_FOUND sBitmapName
80052>>>>>>
80052>>>>>        End
80052>>>>>>
80052>>>>>        Set GuiSize to (Hi (iTextSize) + iImageHeight) (Low (iTextSize) + iImageWidth + 60)
80053>>>>>        Get Window_Handle of oStatusText to hWnd
80054>>>>>        If (hWnd <> 0) Begin
80056>>>>>            Move (InvalidateRect (hWnd, 0, False)) to iVoid
80057>>>>>            Move (UpdateWindow (hWnd)) to iVoid
80058>>>>>        End
80058>>>>>>
80058>>>>>    End_Procedure
80059>>>>>End_Object
80060>>>
80060>>>Activate_View Activate_oOrderEntryView for oOrderEntryView
80070>>>>
80070>>>Object oOrderEntryView is a dbView
80072>>>    Set Border_Style to Border_Thick
80073>>>    Set Maximize_Icon to True
80074>>>    Set Label to "Order Entry"
80075>>>    Set Location to 2 3
80076>>>    Set Size to 178 383
80077>>>    Set piMinSize to 178 383
80078>>>    Set pbAutoActivate to True
80079>>>
80079>>>    Object oVendorDataDictionary is a cVendorDataDictionary
80081>>>    End_Object
80082>>>
80082>>>    Object oInventoryDataDictionary is a cInventoryDataDictionary
80084>>>        Set DDO_Server to oVendorDataDictionary
80085>>>    End_Object
80086>>>
80086>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
80088>>>    End_Object
80089>>>
80089>>>    Object oSalesPersonDataDictionary is a cSalesPersonDataDictionary
80091>>>    End_Object
80092>>>
80092>>>    Object oOrderHeaderDataDictionary is a cOrderHeaderDataDictionary
80094>>>        Set DDO_Server to oCustomerDataDictionary
80095>>>        Set DDO_Server to oSalesPersonDataDictionary
80096>>>
80096>>>        // this lets you save a new OrderHeader from within OrderDetail.
80096>>>        Set Allow_Foreign_New_Save_State to True
80097>>>    End_Object
80098>>>
80098>>>    Object oOrderDetailDataDictionary is a cOrderDetailDataDictionary
80100>>>        Set DDO_Server to oOrderHeaderDataDictionary
80101>>>        Set DDO_Server to oInventoryDataDictionary
80102>>>        Set Constrain_File to OrderHeader.File_Number
80103>>>    End_Object
80104>>>
80104>>>    Set Main_DD to oOrderHeaderDataDictionary
80105>>>    Set Server to oOrderHeaderDataDictionary
80106>>>    
80106>>>    Object oDbContainer3d1 is a dbGroup
80108>>>        Set Size to 89 377
80109>>>        Set Location to 2 3
80110>>>        Set peAnchors to anTopLeftRight
80111>>>
80111>>>        Object oOrderHeader_Order_Number is a dbForm
80113>>>            Entry_Item OrderHeader.Order_Number
80114>>>            Set Label to "Order Number:"
80115>>>            Set Size to 12 42
80116>>>            Set Location to 11 63
80117>>>            Set peAnchors to anTopLeft
80118>>>            Set Label_Col_Offset to 2
80119>>>            Set Label_Justification_Mode to jMode_Right
80120>>>        End_Object
80121>>>
80121>>>        Object oOrderHeader_Customer_Number is a dbForm
80123>>>            Entry_Item Customer.Customer_Number
80124>>>            Set Label to "Customer Number:"
80125>>>            Set Size to 12 42
80126>>>            Set Location to 11 201
80127>>>            Set peAnchors to anTopRight
80128>>>            Set Label_Col_Offset to 2
80129>>>            Set Label_Justification_Mode to jMode_Right
80130>>>        End_Object
80131>>>
80131>>>        Object oOrderHeader_Order_Date is a dbForm
80133>>>            Entry_Item OrderHeader.Order_Date
80134>>>            Set Label to "Order Date:"
80135>>>            Set Size to 12 67
80136>>>            Set Location to 11 299
80137>>>            Set peAnchors to anTopRight
80138>>>            Set Label_Col_Offset to 2
80139>>>            Set Label_Justification_Mode to jMode_Right
80140>>>
80140>>>            Set Prompt_Object to oMonthCalendarPrompt
80141>>>            Set Prompt_Button_Mode to PB_PromptOn
80142>>>        End_Object
80143>>>
80143>>>        Object oCustomer_Name is a dbForm
80145>>>            Entry_Item Customer.Name
80146>>>            Set Label to "Customer Name:"
80147>>>            Set Size to 12 180
80148>>>            Set Location to 25 63
80149>>>            Set peAnchors to anTopLeftRight
80150>>>            Set Label_Col_Offset to 2
80151>>>            Set Label_Justification_Mode to jMode_Right
80152>>>        End_Object
80153>>>
80153>>>        Object oCustomer_Address is a dbForm
80155>>>            Entry_Item Customer.Address
80156>>>            Set Label to "Street Address:"
80157>>>            Set Size to 12 180
80158>>>            Set Location to 39 63
80159>>>            Set peAnchors to anTopLeftRight
80160>>>            Set Label_Col_Offset to 2
80161>>>            Set Label_Justification_Mode to jMode_Right
80162>>>        End_Object
80163>>>
80163>>>        Object oCustomer_City is a dbForm
80165>>>            Entry_Item Customer.City
80166>>>            Set Label to "City/State/Zip:"
80167>>>            Set Size to 12 84
80168>>>            Set Location to 53 63
80169>>>            Set peAnchors to anTopLeftRight
80170>>>            Set Label_Col_Offset to 2
80171>>>            Set Label_Justification_Mode to jMode_Right
80172>>>        End_Object
80173>>>
80173>>>        Object oCustomer_State is a dbForm
80175>>>            Entry_Item Customer.State
80176>>>            Set Size to 12 20
80177>>>            Set Location to 53 155
80178>>>            Set peAnchors to anTopRight
80179>>>        End_Object
80180>>>
80180>>>        Object oCustomer_Zip is a dbForm
80182>>>            Entry_Item Customer.Zip
80183>>>            Set Size to 12 60
80184>>>            Set Location to 53 183
80185>>>            Set peAnchors to anTopRight
80186>>>        End_Object
80187>>>
80187>>>        Object oOrderHeader_Ordered_By is a dbForm
80189>>>            Entry_Item OrderHeader.Ordered_By
80190>>>            Set Label to "Ordered By:"
80191>>>            Set Size to 12 67
80192>>>            Set Location to 39 299
80193>>>            Set peAnchors to anTopRight
80194>>>            Set Label_Col_Offset to 2
80195>>>            Set Label_Justification_Mode to jMode_Right
80196>>>        End_Object
80197>>>
80197>>>        Object oOrderHeader_Salesperson_ID is a dbForm
80199>>>            Entry_Item SalesPerson.Id
80200>>>            Set Label to "Salesperson ID:"
80201>>>            Set Size to 12 40
80202>>>            Set Location to 53 299
80203>>>            Set peAnchors to anTopRight
80204>>>            Set Label_Col_Offset to 2
80205>>>            Set Label_Justification_Mode to jMode_Right
80206>>>        End_Object
80207>>>
80207>>>        Object oOrderHeader_Terms is a dbComboForm
80209>>>            Entry_Item OrderHeader.Terms
80210>>>            Set Label to "Terms:"
80211>>>            Set Size to 12 85
80212>>>            Set Location to 67 63
80213>>>            Set peAnchors to anTopLeft
80214>>>            Set Form_Border to 0
80215>>>            Set Label_Col_Offset to 2
80216>>>            Set Label_Justification_Mode to jMode_Right
80217>>>
80217>>>        End_Object
80218>>>
80218>>>        Object oOrderHeader_Ship_Via is a dbComboForm
80220>>>            Entry_Item OrderHeader.Ship_Via
80221>>>            Set Label to "Ship Via:"
80222>>>            Set Size to 12 103
80223>>>            Set Location to 67 183
80224>>>            Set peAnchors to anTopRight
80225>>>            Set Form_Border to 0
80226>>>            Set Label_Col_Offset to 2
80227>>>            Set Label_Justification_Mode to jMode_Right
80228>>>
80228>>>        End_Object
80229>>>    End_Object
80230>>>
80230>>>    Object oOrderDetail_Grid is a cDbCJGrid
80232>>>        Set Server to oOrderDetailDataDictionary
80233>>>        Set Ordering to 1
80234>>>        Set Size to 64 377
80235>>>        Set Location to 94 3
80236>>>        Set peAnchors to anAll
80237>>>        Set pbAllowInsertRow to False
80238>>>        Set pbRestoreLayout to False
80239>>>        Set psLayoutSection to "OrderView_oOrderDetail_Grid2"
80240>>>        Set piLayoutBuild to 6
80241>>>        Set pbHeaderPrompts to True
80242>>>
80242>>>        On_Key Key_F11 Send Request_InsertRow
80243>>>
80243>>>        Object oMark is a cCJGridColumnRowIndicator
80245>>>        End_Object
80246>>>
80246>>>        Object oInventory_Item_ID is a cDbCJGridColumn
80248>>>            Entry_Item Inventory.Item_ID
80249>>>            Set piWidth to 91
80250>>>            Set psCaption to "Item ID"
80251>>>            Set psImage to "ActionPrompt.ico"
80252>>>        End_Object
80253>>>
80253>>>        Object oInventory_Description is a cDbCJGridColumn
80255>>>            Entry_Item Inventory.Description
80256>>>            Set piWidth to 213
80257>>>            Set psCaption to "Description"
80258>>>        End_Object
80259>>>
80259>>>        Object oInventory_Unit_Price is a cDbCJGridColumn
80261>>>            Entry_Item Inventory.Unit_Price
80262>>>            Set piWidth to 53
80263>>>            Set psCaption to "Unit Price"
80264>>>        End_Object
80265>>>
80265>>>        Object oOrderDetail_Qty_Ordered is a cDbCJGridColumn
80267>>>            Entry_Item OrderDetail.Qty_Ordered
80268>>>            Set piWidth to 50
80269>>>            Set psCaption to "Quantity"
80270>>>        End_Object
80271>>>
80271>>>        Object oOrderDetail_Price is a cDbCJGridColumn
80273>>>            Entry_Item OrderDetail.Price
80274>>>            Set piWidth to 62
80275>>>            Set psCaption to "Price"
80276>>>        End_Object
80277>>>
80277>>>        Object oOrderDetail_Extended_Price is a cDbCJGridColumn
80279>>>            Entry_Item OrderDetail.Extended_Price
80280>>>            Set piWidth to 81
80281>>>            Set psCaption to "Total"
80282>>>        End_Object
80283>>>
80283>>>    End_Object
80284>>>
80284>>>    Object oOrderHeader_Order_Total is a dbForm
80286>>>        Entry_Item OrderHeader.Order_Total
80287>>>        Set Label to "Order Total:"
80288>>>        Set Size to 12 60
80289>>>        Set Location to 161 307
80290>>>        Set peAnchors to anBottomRight
80291>>>        Set Label_Col_Offset to 3
80292>>>        Set Label_Justification_Mode to jMode_Right
80293>>>    End_Object
80294>>>
80294>>>    Object oPrintBtn is a Button
80296>>>        Set Label to "Print Order"
80297>>>        Set Location to 161 3
80298>>>        Set peAnchors to anBottomLeft
80299>>>        Set psToolTip to "Print preview of current order"
80300>>>
80300>>>        Procedure OnClick
80303>>>            Delegate Send PrintCurrentOrder // defined in view object
80305>>>        End_Procedure
80306>>>
80306>>>    End_Object
80307>>>
80307>>>
80307>>>    // Change:   Create custom confirmation messages for save and delete
80307>>>    //           We must create the new functions and assign verify messages
80307>>>    //           to them.
80307>>>    Function Confirm_Delete_Order Returns Integer
80310>>>        Integer iRetVal
80310>>>        Get Confirm "Delete Entire Order?" to iRetVal
80311>>>        Function_Return iRetVal
80312>>>    End_Function
80313>>>
80313>>>    // Only confirm on the saving of new records
80313>>>    Function Confirm_Save_Order Returns Integer
80316>>>        Integer iNoSave iSrvr
80316>>>        Boolean bOld
80316>>>        Get Server to iSrvr
80317>>>        Get HasRecord of iSrvr to bOld
80318>>>        If not bOld Begin
80320>>>            Get Confirm "Save this NEW order header?" to iNoSave
80321>>>        End
80321>>>>
80321>>>        Function_Return iNoSave
80322>>>    End_Function
80323>>>
80323>>>    // Define alternate confirmation Messages
80323>>>    Set Verify_Save_MSG       to (RefFunc(Confirm_Save_Order))
80324>>>    Set Verify_Delete_MSG     to (RefFunc(Confirm_Delete_Order))
80325>>>    Set Auto_Clear_DEO_State  to False // don't clear Header on save
80326>>>
80326>>>    Object oOrderReport is a cDRReport
80328>>>        Set pbShowStatusPanel to True
80329>>>        Set phoStatusPanel to oDRStatusPanel
80330>>>        Set psReportName to "Orders with Pagelayers.dr"
80331>>>        Set peOutputDestination to PRINT_TO_WINDOW
80332>>>
80332>>>        Procedure OnCreate
80335>>>            String sReportId
80335>>>
80335>>>            Forward Send OnCreate
80337>>>
80337>>>            Get psReportId to sReportId
80338>>>            Set piReportLanguage sReportId to LANG_DEFAULT
80339>>>        End_Procedure
80340>>>
80340>>>        Procedure OnInitializeReport
80343>>>            Forward Send OnInitializeReport
80345>>>
80345>>>            Send SetFilters
80346>>>            Send SetParameters
80347>>>        End_Procedure
80348>>>
80348>>>        // Determine the path to the codemast.dat table and set the report parameter
80348>>>        Procedure SetParameters
80351>>>            String sReportId sCodeMastPath
80351>>>            Integer iParameter
80351>>>
80351>>>            Get psReportId to sReportId
80352>>>
80352>>>            Get_File_Path "CodeMast.dat" to sCodeMastPath
80353>>>            Move (ExtractFilePath (sCodeMastPath)) to sCodeMastPath
80354>>>            Get ParameterIdByName sReportId "CodeMastPath" to iParameter
80355>>>            Set psParameterValue sReportId iParameter to sCodeMastPath
80356>>>        End_Procedure
80357>>>
80357>>>        // Set the report filter to the current orderheader ordernumber
80357>>>        Procedure SetFilters
80360>>>            String sReportId
80360>>>            String sOrderHeaderOrderNumber
80360>>>
80360>>>            Get psReportId to sReportId
80361>>>
80361>>>            // Remove all the defined filters from the report
80361>>>            Send RemoveAllFilters sReportId
80362>>>
80362>>>            // Get the current order number from the Orderheader DDO
80362>>>            Get Field_Current_Value of oOrderHeaderDataDictionary Field Orderheader.Order_Number to sOrderHeaderOrderNumber
80363>>>            Send AddFilter sReportId "{OrderHeader.Order_Number}" C_drEqual sOrderHeaderOrderNumber
80364>>>        End_Procedure
80365>>>    End_Object
80366>>>
80366>>>    // print the current order. This message will be sent by the print button
80366>>>    Procedure PrintCurrentOrder
80369>>>        Boolean bHasRecord
80369>>>
80369>>>        Get HasRecord of oOrderHeaderDataDictionary to bHasRecord
80370>>>        If (bHasRecord) Begin // only do this if record exists
80372>>>            Send RunReport of oOrderReport
80373>>>        End
80373>>>>
80373>>>    End_Procedure
80374>>>
80374>>>    // refresh is sent to containers. We will use that to control the print button and only
80374>>>    // enable it when an order exists
80374>>>    Procedure Refresh Integer eMode
80377>>>        Boolean bRec
80377>>>        
80377>>>        Forward Send Refresh eMode
80379>>>
80379>>>        Get HasRecord of oOrderHeaderDataDictionary to bRec
80380>>>        Set Enabled_State of oPrintBtn to bRec
80381>>>    End_Procedure
80382>>>End_Object
80383>        Use SalesPerson.vw
Including file: SalesPerson.vw    (C:\test\BuildTools\Order Entry\AppSrc\SalesPerson.vw)
80383>>>Use dfClient.pkg
80383>>>Use DataDict.pkg
80383>>>Use dfEntry.pkg
80383>>>
80383>>>Use cSalesPersonDataDictionary.dd
80383>>>
80383>>>Deferred_View Activate_oSalesPersonView for ;;Object oSalesPersonView is a dbView
80408>>>    Set Border_Style to Border_None
80409>>>    Set Label to "Sales Person Entry View"
80410>>>    Set Location to 6 6
80411>>>    Set Size to 51 245
80412>>>    
80412>>>    Object oSalesPersonDataDictionary is a cSalesPersonDataDictionary
80414>>>    End_Object
80415>>>    
80415>>>    Set Main_DD to oSalesPersonDataDictionary
80416>>>    Set Server to oSalesPersonDataDictionary
80417>>>    
80417>>>    Object oSalesPerson_ID is a dbForm
80419>>>        Entry_Item SalesPerson.ID
80420>>>        Set Label to "Sales Person ID:"
80421>>>        Set Size to 12 46
80422>>>        Set Location to 11 69
80423>>>        Set Label_Col_Offset to 2
80424>>>        Set Label_Justification_Mode to jMode_Right
80425>>>    End_Object
80426>>>    
80426>>>    Object oSalesPerson_Name is a dbForm
80428>>>        Entry_Item SalesPerson.Name
80429>>>        Set Label to "Sales Person Name:"
80430>>>        Set Size to 12 156
80431>>>        Set Location to 25 69
80432>>>        Set Label_Col_Offset to 2
80433>>>        Set Label_Justification_Mode to jMode_Right
80434>>>    End_Object
80435>>>        
80435>>>    
80435>>>Cd_End_Object
80437>>>>
80437>>>
80437>>>
80437>        Use Vendor.vw
Including file: Vendor.vw    (C:\test\BuildTools\Order Entry\AppSrc\Vendor.vw)
80437>>>Use dfClient.pkg
80437>>>Use DataDict.pkg
80437>>>Use dfEntry.pkg
80437>>>Use dfCEntry.pkg
80437>>>
80437>>>Use cVendorDataDictionary.dd
80437>>>
80437>>>Deferred_View Activate_oVendorView for ;;Object oVendorView is a dbView
80462>>>    Set Border_Style to Border_Thick
80463>>>    Set Label to "Vendor Entry View"
80464>>>    Set Location to 6 6
80465>>>    Set Size to 128 281
80466>>>    Set piMaxSize to 137 350
80467>>>    Set piMinSize to 128 215
80468>>>    
80468>>>    Object oVendorDataDictionary is a cVendorDataDictionary
80470>>>    End_Object
80471>>>    
80471>>>    Set Main_DD to oVendorDataDictionary
80472>>>    Set Server to oVendorDataDictionary
80473>>>    
80473>>>    Object oVendor_Id is a dbForm
80475>>>        Entry_Item Vendor.ID
80476>>>        Set Label to "Vendor ID:"
80477>>>        Set Size to 12 42
80478>>>        Set Location to 9 67
80479>>>        Set peAnchors to anTopLeft
80480>>>        Set Label_Col_Offset to 2
80481>>>        Set Label_Justification_Mode to jMode_Right
80482>>>    End_Object
80483>>>    
80483>>>    Object oVendor_Name is a dbForm
80485>>>        Entry_Item Vendor.Name
80486>>>        Set Label to "Vendor Name:"
80487>>>        Set Size to 12 186
80488>>>        Set Location to 23 67
80489>>>        Set peAnchors to anTopLeftRight
80490>>>        Set Label_Col_Offset to 2
80491>>>        Set Label_Justification_Mode to jMode_Right
80492>>>    End_Object
80493>>>    
80493>>>    Object oVendor_Address is a dbForm
80495>>>        Entry_Item Vendor.Address
80496>>>        Set Label to "Street Address:"
80497>>>        Set Size to 12 186
80498>>>        Set Location to 37 67
80499>>>        Set peAnchors to anTopLeftRight
80500>>>        Set Label_Col_Offset to 2
80501>>>        Set Label_Justification_Mode to jMode_Right
80502>>>    End_Object
80503>>>    
80503>>>    Object oVendor_City is a dbForm
80505>>>        Entry_Item Vendor.City
80506>>>        Set Label to "City:"
80507>>>        Set Size to 12 90
80508>>>        Set Location to 51 67
80509>>>        Set peAnchors to anTopLeft
80510>>>        Set Label_Col_Offset to 2
80511>>>        Set Label_Justification_Mode to jMode_Right
80512>>>    End_Object
80513>>>    
80513>>>    Object oVendor_State is a dbComboForm
80515>>>        Entry_Item Vendor.State
80516>>>        Set Label to "State:"
80517>>>        Set Size to 12 32
80518>>>        Set Location to 65 67
80519>>>        Set peAnchors to anTopLeft
80520>>>        Set Form_Border to 0
80521>>>        Set Label_Col_Offset to 2
80522>>>        Set Label_Justification_Mode to jMode_Right
80523>>>        Set Entry_State to False
80524>>>        Set Code_Display_Mode to cb_code_display_code
80525>>>    End_Object
80526>>>    
80526>>>    Object oVendor_Zip is a dbForm
80528>>>        Entry_Item Vendor.Zip
80529>>>        Set Label to "Zip/Postal Code:"
80530>>>        Set Size to 12 66
80531>>>        Set Location to 79 67
80532>>>        Set peAnchors to anTopLeft
80533>>>        Set Label_Col_Offset to 2
80534>>>        Set Label_Justification_Mode to jMode_Right
80535>>>    End_Object
80536>>>    
80536>>>    Object oVendor_Phone_Number is a dbForm
80538>>>        Entry_Item Vendor.Phone_Number
80539>>>        Set Label to "Phone Number:"
80540>>>        Set Size to 12 126
80541>>>        Set Location to 93 67
80542>>>        Set peAnchors to anTopLeftRight
80543>>>        Set Label_Col_Offset to 2
80544>>>        Set Label_Justification_Mode to jMode_Right
80545>>>    End_Object
80546>>>    
80546>>>    Object oVendor_Fax_Number is a dbForm
80548>>>        Entry_Item Vendor.Fax_Number
80549>>>        Set Label to "Fax Number:"
80550>>>        Set Size to 12 126
80551>>>        Set Location to 107 67
80552>>>        Set peAnchors to anTopLeftRight
80553>>>        Set Label_Col_Offset to 2
80554>>>        Set Label_Justification_Mode to jMode_Right
80555>>>    End_Object
80556>>>        
80556>>>Cd_End_Object
80558>>>>
80558>>>
80558>        
80558>        Use Basic\CustomerListBR.rv
Including file: Basic\CustomerListBR.rv    (C:\test\BuildTools\Order Entry\AppSrc\Basic\CustomerListBR.rv)
80558>>>Use DFAllRpt.pkg
80558>>>Use Basic\CustBasicRptImages.inc  // contains the images for the report
Including file: Basic\CustBasicRptImages.inc    (C:\test\BuildTools\Order Entry\AppSrc\Basic\CustBasicRptImages.inc)
80558>>>>>// CustBasicRptImages.pkg - images for CustomerListBR.rv
80558>>>>>// Since report images, such as the one used here, are not fully supported by
80558>>>>>// the Studio, we have placed the images for this report in a separate package.
80558>>>>>
/CUSTHDR
Image 1, CUSTHDR
                             Customer Listing                      Page:___.
Number  Name
----------------------------------------------------------------------------
/CustBody
Image 2, CUSTBODY
_____.  ______________________________
/Footer
Image 3, FOOTER
Date printed:  __/__/____
/*
80558>>>
80558>>>Open Customer
80560>>>Use dfrptvw.pkg
80560>>>Use Windows.pkg
80560>>>
80560>>>Deferred_View Activate_oCustomerListBR for ;;Object oCustomerListBR is a ReportView
80585>>>    
80585>>>    Property Integer piSortIndex 1
80587>>>    
80587>>>    Set Label to "Customer List"
80588>>>    Set Location to 6 6
80589>>>    Set Size to 80 180
80590>>>    
80590>>>    Object oDestination is a RadioGroup
80592>>>        Set Size to 50 80
80593>>>        Set Location to 5 5
80594>>>        Set Label to "Output Device:"
80595>>>        Object oScreen is a Radio
80597>>>            Set Label to "Screen"
80598>>>            Set Size to 10 39
80599>>>            Set Location to 15 10
80600>>>            Set Status_Help to "Preview the report to screen"
80601>>>        End_Object
80602>>>        
80602>>>        Object oPrinter is a Radio
80604>>>            Set Label to "Printer"
80605>>>            Set Size to 10 37
80606>>>            Set Location to 30 10
80607>>>            Set Status_Help to "Send the report to the default printer"
80608>>>        End_Object
80609>>>        
80609>>>        // set the Output_Device_Mode each time the radio button changes
80609>>>        Procedure Notify_Select_State Integer iNewItem Integer iOldItem
80612>>>            Forward Send Notify_Select_State iNewItem iOldItem
80614>>>            
80614>>>            If (iNewItem=0);                Set Output_Device_Mode to PRINT_TO_WINDOW
80617>>>            Else;                Set Output_Device_Mode to PRINT_TO_PRINTER
80619>>>        End_Procedure
80620>>>        
80620>>>    End_Object
80621>>>    
80621>>>    Object oOrderRadio is a RadioGroup
80623>>>        Set Size to 50 80
80624>>>        Set Location to 5 95
80625>>>        Set Label to "Report Order:"
80626>>>        Object oNumber is a Radio
80628>>>            Set Label to "Number"
80629>>>            Set Size to 10 41
80630>>>            Set Location to 15 10
80631>>>            Set Status_Help to "Sort by customer number"
80632>>>        End_Object
80633>>>        
80633>>>        Object oName is a Radio
80635>>>            Set Label to "Name"
80636>>>            Set Size to 10 35
80637>>>            Set Location to 30 10
80638>>>            Set Status_Help to "Sort by customer name"
80639>>>        End_Object
80640>>>        
80640>>>        // set the piSortIndex each time the radio button changes
80640>>>        Procedure Notify_Select_State Integer iNewItem Integer iOldItem
80643>>>            Forward Send Notify_Select_State iNewItem iOldItem
80645>>>            
80645>>>            Set piSortIndex  to (iNewItem + 1)
80646>>>        End_Procedure
80647>>>        
80647>>>    End_Object
80648>>>    
80648>>>    Object oOkButton is a Button
80650>>>        Set Label to "OK"
80651>>>        Set Size to 14 51
80652>>>        Set Location to 62 71
80653>>>        Set Default_State to True
80654>>>        
80654>>>        Procedure OnClick
80657>>>            Send StartReport
80658>>>        End_Procedure
80659>>>        
80659>>>    End_Object
80660>>>    
80660>>>    Object oCancelButton is a Button
80662>>>        Set Label to "Cancel"
80663>>>        Set Location to 62 125
80664>>>        
80664>>>        Procedure OnClick
80667>>>            Send Request_Cancel
80668>>>        End_Procedure
80669>>>        
80669>>>    End_Object
80670>>>    
80670>>>    Procedure StartReport
80673>>>        Integer iOutputDevice
80673>>>        Handle hoThisWorkspace
80673>>>        String sCurDir sDataPath
80673>>>        String sFileName
80673>>>        
80673>>>        Get Output_Device_Mode to iOutputDevice
80674>>>        
80674>>>        If (iOutputDevice=PRINT_TO_WINDOW) Begin
80676>>>            // save current location
80676>>>            Get_Current_Directory to sCurDir
80677>>>            
80677>>>            // get workspace data path (all users must have r/w rights to it) to output the temp file there
80677>>>            Get phoWorkspace of ghoApplication to hoThisWorkspace
80678>>>            Get psDataPath of hoThisWorkspace to sDataPath
80679>>>            Get PathAtIndex of hoThisWorkspace sDataPath 1 to sDataPath
80680>>>            
80680>>>            // set current directory to DataPath
80680>>>            Set_Directory sDataPath
80681>>>            
80681>>>            Make_Temp_File "TXT" sFileName
80682>>>            Move (".\" - sFileName) to sFileName
80683>>>            Set Output_Device_Name to sFileName
80684>>>        End
80684>>>>
80684>>>        Else Begin
80685>>>            Set Output_Device_Name to "WinLST:"
80686>>>        End
80686>>>>
80686>>>        
80686>>>        Send Run_Report
80687>>>        
80687>>>        If (iOutputDevice=PRINT_TO_WINDOW) Begin
80689>>>            Runprogram background "NotePad" sFileName
80690>>>            EraseFile sFileName
80691>>>>
80691>>>        End
80691>>>>
80691>>>        
80691>>>        // restore previous location
80691>>>        Set_Directory sCurDir
80692>>>        
80692>>>    End_Procedure
80693>>>    
80693>>>    Object oCustomer_BasicReport is a BasicReport
80695>>>        
80695>>>        Report_Main_File Customer
80696>>>        
80696>>>        Set Report_Title to "Printing Customer Names"
80697>>>        
80697>>>        Function Starting_Main_Report Returns Integer
80700>>>            Integer iRetVal
80700>>>            Integer iIndex
80700>>>            
80700>>>            Forward Get Starting_Main_Report to iRetVal
80702>>>            
80702>>>            Get piSortIndex to iIndex
80703>>>            Report_Index by iIndex    // set the sort order
80705>>>            Sysdate Footer.1         // set date for report
80706>>>            
80706>>>            Function_Return iRetVal
80707>>>        End_Function
80708>>>        
80708>>>        Procedure_Section Page_Top as CustHdr
80713>>>        Integer iPage
80713>>>        Get Page_Count to iPage
80714>>>        Print iPage
80715>>>        OutPut_PageCheck
80716>>>    End_Procedure
80717>>>    
80717>>>    Procedure_Section Body as CustBody
80722>>>    Send Update_Status (String(Customer.Customer_Number)- ":" * Customer.Name )
80723>>>    Print Customer.Customer_number
80724>>>    Print Customer.Name
80725>>>    OutPut_PageCheck
80726>>>End_Procedure
80727>>>
80727>>>Procedure_Section Page_Bottom as Footer
80737>>>OutPut_PageCheck
80738>>>End_Procedure
80739>>>
80739>>>End_Object
80740>>>
80740>>>Cd_End_Object
80742>>>>
80742>>>
80742>        Use WinPrint\CustomerListWP.rv
Including file: WinPrint\CustomerListWP.rv    (C:\test\BuildTools\Order Entry\AppSrc\WinPrint\CustomerListWP.rv)
80742>>>Use dfrptvw.pkg
80742>>>Use DataDict.pkg
80742>>>Use Windows.pkg
80742>>>Use cWinReport2.pkg
Including file: cWinReport2.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cWinReport2.pkg)
80742>>>>>// defines support for Winprint2 cWinReport2 class
80742>>>>>
80742>>>>>
80742>>>>>Use DFRpt.pkg              // BasicReport RO Class for VDF
80742>>>>>Use WinPrint2.pkg          // WinPrint2 engine
Including file: Winprint2.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\Winprint2.pkg)
80742>>>>>>>Use windows.pkg
80742>>>>>>>Use LanguageText.pkg
80742>>>>>>>Use DLL.pkg
80742>>>>>>>Use WinPrint2_Api.pkg
Including file: WinPrint2_API.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\WinPrint2_API.pkg)
80742>>>>>>>>>Use DLL.pkg
80742>>>>>>>>>
80742>>>>>>>>>External_Function WP_IsPrinterValid "IsPrinterValid" WinPrint.dll ;    Returns Boolean // True if the the current printer is a valid one. False, otherwise.
80743>>>>>>>>>
80743>>>>>>>>>External_Function WP_ArePrintersInstalled "ArePrintersInstalled" WinPrint.dll ; // determines whether at least one printer is installed    Returns Boolean // True, if a printer is installed, False if it is not.
80744>>>>>>>>>
80744>>>>>>>>>External_Function WP_ExecutePrinterSetupDialog "ExecutePrinterSetupDialog" WinPrint.dll ; // displays the "printer setup" dialog    Handle hWndParent; // window handle of the parent window    Returns Boolean // True if the OK button pressed; False, otherwise.
80745>>>>>>>>>
80745>>>>>>>>>External_Function WP_ExecutePrintDialog "ExecutePrintDialog" WinPrint.dll ; // displays the "Print" dialog    Handle hWndParent; // window handle of the parent window    Returns Boolean // True if the OK button pressed; False, otherwise.
80746>>>>>>>>>
80746>>>>>>>>>External_Function WP_GetCurrentDevice "GetCurrentDevice" WinPrint.dll ; // retrieves the name of the current printer device    Address aDevice ; // address of the string (255 chars) that will hold the device name upon return    Returns Boolean // True, if success; False if error occurred
80747>>>>>>>>>
80747>>>>>>>>>External_Function WP_GetPrintDialogFlags "GetPrintDialogFlags" WinPrint.dll ; // retrieves the current print options    Returns UInteger // array of flags representing print-related options that are currently set
80748>>>>>>>>>
80748>>>>>>>>>External_Function WP_GetUserDefinedPapersize "GetUserDefinedPapersize" WinPrint.dll ;  // gets the size of user-defined paper    Returns UInteger // // hi-word=length; lo-word=width
80749>>>>>>>>>
80749>>>>>>>>>External_Function WP_IsPrintDialogFlagSet "IsPrintDialogFlagSet" WinPrint.dll ; // determines whether a specific print-flag is set    UInteger iFlag ; // the printer flag    Returns Boolean // True, if the flag is set; False, if it isn't
80750>>>>>>>>>
80750>>>>>>>>>External_Function WP_SelectPrinter "SelectPrinter" WinPrint.dll ; // selects a printer programatically    String sDevice; // the name of the printer    Returns Boolean // True, if success; False, if error (such as an invalid printer name)
80751>>>>>>>>>
80751>>>>>>>>>External_Function WP_SetFirstPagePaperSource "SetFirstPagePaperSource"  WinPrint.dll ;    Integer iBin ; // the bim constant    Returns Boolean // True if success, false if error
80752>>>>>>>>>
80752>>>>>>>>>External_Function WP_SetNumberOfPrintCopies "SetNumberOfPrintCopies" WinPrint.dll ; // sets the number of copies to print    UInteger iNumCopies; // number of copies to make    Returns Boolean // Always True
80753>>>>>>>>>
80753>>>>>>>>>External_Function WP_SetSpecificPrintDialogFlag "SetSpecificPrintDialogFlag" WinPrint.dll; // Sets/unsets one printer flag    UInteger fFlag; // printer flag    Returns Boolean // True, if success; False if error occurred
80754>>>>>>>>>
80754>>>>>>>>>External_Function WP_SetPrintDialogFlags "SetPrintDialogFlags" WinPrint.dll; // Sets/unsets all printer flags in one call    UInteger fFlags; // printer flags    Returns Boolean // True, if success; False if error occurred
80755>>>>>>>>>
80755>>>>>>>>>External_Function WP_SetUserDefinedPapersize "SetUserDefinedPapersize" WinPrint.dll ;  // sets the size of user-defined paper    UInteger iPaperSize ; // hi-word=length; lo-word=width    Returns Boolean // True, if success; False if error occurred
80756>>>>>>>>>
80756>>>>>>>>>External_Function WP_SetFontStyle "SetFontStyle" WinPrint.dll ; // sets multiple font attributes    Integer iStyles ; // series of flags    Returns Boolean // always True
80757>>>>>>>>>
80757>>>>>>>>>External_Function WP_SetFontBold "SetFontBold" WinPrint.dll ; // toggles the bold attribute of the current font    Boolean bBold ; // True to switch bold attribute on; False to switch it off    Returns Boolean // always True
80758>>>>>>>>>
80758>>>>>>>>>External_Function WP_SetFontItalic "SetFontItalic" WinPrint.dll ; // toggles the italic attribute of the current font    Boolean bItalic ; // True to switch italic attribute on; False to switch it off    Returns Boolean  // always True
80759>>>>>>>>>
80759>>>>>>>>>External_Function WP_SetFontUnderline "SetFontUnderline" WinPrint.dll ; // toggles the underline attribute of the current font    Boolean bUnderline ; // True to switch underline attribute on; False to switch it off    Returns Boolean  // always True
80760>>>>>>>>>
80760>>>>>>>>>External_Function WP_SetFontStrikeout "SetFontStrikeout" WinPrint.dll ; // toggles the strikeout attribute of the current font    Boolean bStrikeout ; // True to switch strikeout attribute on; False to switch it off    Returns Boolean  // always True
80761>>>>>>>>>
80761>>>>>>>>>External_Function WP_SetFontColor "SetFontColor" WinPrint.dll ; // sets the color of the current font    Integer iColor ; // color of the font    Returns Boolean  // always True
80762>>>>>>>>>
80762>>>>>>>>>External_Function WP_SetFontHeight "SetFontHeight" WinPrint.dll ; // sets the height of the font    UInteger iHeight ; // height of the font in points (multiplied by 100. Eg 12.5 point should be sent as 1250)    Returns Boolean  // always True
80763>>>>>>>>>
80763>>>>>>>>>External_Function WP_SetFontName "SetFontName" WinPrint.dll ; // Sets the name of the font to use    String sFontName ; // name of the font to use    Returns Boolean  // always True
80764>>>>>>>>>
80764>>>>>>>>>External_Function WP_DrawBitmap "DrawBitmap" WinPrint.dll ; // Draws a bitmap (BMP, JPG)    String  sBitmap;                 // Name of the bitmap    Integer iLeft;                   // distance from left edge to draw bitmap    Integer iTop;                    // distance from top edge to draw bitmap    Integer iWidth;                  // width of the bitmap    Integer iHeight;                 // height of the bitmap    Boolean bUpdateCurrentPosition;  // after drawing, should the current position be updated?    Returns Boolean // True, if OK; False, if an error occurred.
80765>>>>>>>>>
80765>>>>>>>>>External_Function WP_DrawEllipse "DrawEllipse" WinPrint.dll ; // draws an elipse within a bounding rectangle    Integer iLeft;                   // distance from left edge to draw the ellipse    Integer iTop;                    // distance from top edge to draw the ellipse    Integer iWidth;                  // width of the bounding rectangle    Integer iHeight;                 // height of the bounding rectangle    Integer iBorderColor;            // color of the ellipse's edge    Integer iFillColor;              // internal color of the ellipse    Boolean  bFill;                  // should the ellipse be filled? (False=transparent)    UInteger iThickness;             // thickness of the elipse    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?    Boolean  bWrap;                  // Should the ellipse be drawn on future soft-page breaks?    Returns Boolean // True, if OK; False, if an error occurred.
80766>>>>>>>>>
80766>>>>>>>>>External_Function WP_DrawLine "DrawLine" WinPrint.dll ; // draws a line from the current position    Integer iLeft;                   // distance from left edge to draw the line    Integer iTop;                    // distance from top edge to draw the line    Integer iLength;                 // length of the line    Boolean  bHorizontal;            // draw horizontal? (False=vertical)    Integer iColor;                  // color of the line    UInteger iThickness;             // thickness of the line    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?    Returns Boolean // True, if OK; False, if an error occurred.
80767>>>>>>>>>
80767>>>>>>>>>External_Function WP_DrawRectangle "DrawRectangle" WinPrint.dll ; // draws a rectangle    Integer iLeft;                   // distance from left edge to draw the rectangle    Integer iTop;                    // distance from top edge to draw the rectangle    Integer iWidth;                  // width of the rectangle    Integer iHeight;                 // height of the rectangle    Integer iBorderColor;            // color of the rectangle's border    Integer iFillColor;              // internal color of the rectangle    Boolean  bFill;                  // should the rectangle be filled? (False=transparent)    UInteger iThickness;             // thickness of the rectangle's border    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?    Boolean  bWrap;                  // Should the rectangle be drawn on future soft-page breaks?    Returns Boolean // True, if OK; False, if an error occurred.
80768>>>>>>>>>
80768>>>>>>>>>External_Function WP_DrawXYLine "DrawXYLine" WinPrint.dll ; // draws a line between two points    Integer iLeftStart;              // distance from left edge to draw from    Integer iTopStart;               // distance from top edge to draw from    Integer iLeftEnd;                // distance from left edge to draw to    Integer iTopEnd;                 // distance from top edge to draw to    Integer iColor;                  // color of the line    UInteger iThickness;             // thickness of the line    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?    Boolean  bWrap;                  // Should the line be drawn on future soft-page breaks?    Returns Boolean // True, if OK; False, if an error occurred.
80769>>>>>>>>>
80769>>>>>>>>>External_Function WP_SetAbsoluteMargins "SetAbsoluteMargins" WinPrint.dll ; // modifies the top/bottom non-printable margin    UInteger iTop;      // the top margin offset    UInteger iBottom;   // the bottom margin offset    Boolean  bAllPages; // should all pages be affected? True=AllPages; False=first page only    Returns Boolean // always True
80770>>>>>>>>>
80770>>>>>>>>>External_Function WP_SetMargins "SetMargins" WinPrint.dll ; // Sets the user-margins    UInteger iLeft;   // the left margin    UInteger iTop;    // the top margin    UInteger iRight;  // the right margin    UInteger iBottom; // the bottom margin    Returns Boolean // always True
80771>>>>>>>>>
80771>>>>>>>>>External_Function WP_CreateDiagram "CreateDiagram" WinPrint.dll ; // Creates a new diagram    UInteger eType;       // type of diagram (Bar, Line, Pie)    UInteger eEffect;     // how it is drawn (2d or 3d, etc)    UInteger iWidth;      // width of the diagram    UInteger iHeight;     // height of the diagram    Boolean  bDrawXyAxis; // draw the xy-axis (for bar charts only)?    Returns Handle // unique id for the diagram used in other diagram funtions
80772>>>>>>>>>
80772>>>>>>>>>External_Function WP_AddDiagramEntry "AddDiagramEntry" WinPrint.dll ; // Adds an item into a diagram    Handle   hDiagram;          // diagram handle returned by CreateDiagram()    String   sValueDescription; // description of the item    String   sValue;            // value of the item    Integer iBorderColor;       // color of the item's border    Integer iFillColor;         // color of the item's interior    Boolean  bFilled;           // should the item be drawn filled (with iFillColor), or transparent?    UInteger iNumDecimals;      // Number of decimals in the sValue argument    UInteger eValueOrPercent;   // How the value should be displayed (as value or percentage, etc)    Boolean  bExploded;         // should the value be "pulled out" (pie charts only)    Returns Boolean // True, if success; False, if error
80773>>>>>>>>>
80773>>>>>>>>>External_Function WP_DrawDiagram "DrawDiagram" WinPrint.dll ; // draws a diagram    Handle   hDiagram;               // diagram handle returned by CreateDiagram()    UInteger iLeft;                  // x-coordinate to draw the diagram    UInteger iTop;                   // y-coordinate to draw the diagram    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?    Returns Boolean // True, if success; False, if error
80774>>>>>>>>>
80774>>>>>>>>>External_Function WP_LockDiagram "LockDiagram" WinPrint.dll ; // Locks a diagram so that no more entries can be added    Handle hDiagram; // diagram handle returned by CreateDiagram()    Returns Boolean // True, if success; False, if error
80775>>>>>>>>>
80775>>>>>>>>>External_Function WP_SetDiagramCaption "SetDiagramCaption" WinPrint.dll ; // Sets the caption of a diagram    Handle hDiagram; // diagram handle returned by CreateDiagram()    String sCaption; // the diagram's caption    Returns Boolean // True, if success; False, if error
80776>>>>>>>>>
80776>>>>>>>>>External_Function WP_SetDiagramXText "SetDiagramXText" WinPrint.dll ; // Sets the horizontal label of a diagram    Handle hDiagram; // diagram handle returned by CreateDiagram()    String sText;    // the diagram's horizonal label    Returns Boolean // True, if success; False, if error
80777>>>>>>>>>
80777>>>>>>>>>External_Function WP_SetDiagramYText "SetDiagramYText" WinPrint.dll ; // Sets the vertical label of a diagram    Handle  hDiagram;      // diagram handle returned by CreateDiagram()    String  sText;         // the diagram's vertical label    Boolean bVerticalText; // should the text be drawn vertically (False=horizontally)    Returns Boolean // True, if success; False, if error
80778>>>>>>>>>
80778>>>>>>>>>External_Function WP_BeginHeader "BeginHeader" WinPrint.dll ; // creates a new header    UInteger iHeaderType; // the type of header    UInteger iSubHeaderNum; // for subheaders, then number (1-0)    Returns Boolean // always True
80779>>>>>>>>>
80779>>>>>>>>>External_Function WP_EndHeader "EndHeader" WinPrint.dll ; // declares the end of the current header    Returns Boolean // always True
80780>>>>>>>>>
80780>>>>>>>>>External_Function WP_SetExtraLineCheck "SetExtraLineCheck" WinPrint.dll ; // forces a soft page break if header plus number of lines don't fit on page    UInteger iNumLines; // number of lines in addition to header required before forcing a soft page-break    Returns Boolean; // always True    
80781>>>>>>>>>External_Function WP_SetHeaderFrame "SetHeaderFrame" WinPrint.dll ; // sets the style, color and frame of a header    UInteger eFrame;     // style of frame (margin-to-margin, etc)    Integer iColor;      // color of the frame's edge    UInteger iThickness; // thickness of the frame    Integer iFillCol;    // the internal color of the frame (only used if bBilled=True)    Boolean  bFilled;    // True, if the frame should be filled with the iFillColor (False=Transparent)    Returns Boolean // Always True
80782>>>>>>>>>
80782>>>>>>>>>External_Function WP_SetHeaderMargin "SetHeaderMargin" WinPrint.dll ; // Sets a margin of space on the inside and outside of the current header    UInteger eType;      // Specifies which margin areas is being set.    Integer  iSize;      // Size of the margin setting in the current report metrics    Returns Boolean  // False if document is not started
80783>>>>>>>>>
80783>>>>>>>>>External_Function WP_SetHeaderPlacement "SetHeaderPlacement" WinPrint.dll ; // placement (left, center or right) of the header    UInteger ePlacement; // placed left, center or right    Returns Boolean //always True
80784>>>>>>>>>
80784>>>>>>>>>External_Function WP_SetHeaderWrap "SetHeaderWrap" WinPrint.dll ; // determines whether the current header is drawn on soft page-breaks    Boolean bWrap; // True, to wrap onto following pages; False, for current page only    Returns Boolean // always True
80785>>>>>>>>>
80785>>>>>>>>>External_Function WP_WriteHeader "WriteHeader" WinPrint.dll ; // writes a header to the current page    UInteger eHeaderType;   // type of header    UInteger iSubHeaderNum; // for subheaders, the number (1-9)    Returns Boolean // True, if success; False, if error
80786>>>>>>>>>
80786>>>>>>>>>External_Function WP_RGBToDFPrintColor "RGBToDFPrintColor" WinPrint.dll ; // converts R, G, and B values into a composite color that WinPrint expects    UInteger iRed;   // red component (1-255)    UInteger iGreen; // green component (1-255)    UInteger iBlue;  // blue component (1-255)    Returns Integer // composite color
80787>>>>>>>>>
80787>>>>>>>>>External_Function WP_GetMetrics "GetMetrics" WinPrint.dll ; // gets the current unit of measurement    Returns UInteger // unit of measurement (Inch or CM)
80788>>>>>>>>>
80788>>>>>>>>>External_Function WP_SetMetrics "SetMetrics" WinPrint.dll ; // sets the unit of measurement    UInteger eMetrics; // Inch or CM    Returns Boolean // always True
80789>>>>>>>>>
80789>>>>>>>>>External_Function WP_ClearDocument "ClearDocument" WinPrint.dll ; // clears the resources of the document from memory    Returns Boolean // always True
80790>>>>>>>>>
80790>>>>>>>>>External_Function WP_NewDocument "NewDocument" WinPrint.dll ; // starts a new document, but preserves the printer settings    Boolean bAutoPreview ; // Should the Previewer be displayed immediately    Returns Boolean // True, if success; False, if an error occurred
80791>>>>>>>>>
80791>>>>>>>>>External_Function WP_EndDocument "EndDocument" WinPrint.dll ; // Indicates that the document is finished    Returns Boolean // always True
80792>>>>>>>>>
80792>>>>>>>>>External_Function WP_ClearPrinter "ClearPrinter" WinPrint.dll ; // clears all printer and document resources    Returns Boolean // True, if success; False, if an error occurred
80793>>>>>>>>>
80793>>>>>>>>>External_Function WP_ConfirmLines "ConfirmLines" WinPrint.dll ; // ensures that a specified number of lines will fit on the page; if not, a soft page-break is performed automatically    UInteger iNumLines; // number of lines that must fit on the page    Returns Boolean // True, if success; False, if an error occurred
80794>>>>>>>>>
80794>>>>>>>>>External_Function WP_CreatePage "CreatePage" WinPrint.dll ; // creates a new page of specified columns    UInteger iNumColumns; // number of columns (zero= no columns)    Returns UInteger; // page number that was created    
80795>>>>>>>>>External_Function WP_PreviewDocument "PreviewDocument" WinPrint.dll ; // previews the current document    Boolean bPrintDialog; // Determines whether the Print Dialog (range, etc) is displayed when the "print" button is clicked in the preview window.    Boolean bPrintSetup;  // Determines whether the Print Setup button is enabled (allows to change orientation, etc)    Boolean bPrint;       // Determines whether the Print button is enabled    Returns Handle // non-zero = hViewerProcess; zero= error
80796>>>>>>>>>
80796>>>>>>>>>External_Function WP_ClosePreview "ClosePreview" WinPrint.dll ; // closes the preview window    Returns Boolean // True, if closed; False, if an error occurred (such as it not being already open)
80797>>>>>>>>>
80797>>>>>>>>>External_Function WP_PrintDocument "PrintDocument" WinPrint.dll ; // prints the current document    Handle hWndParent; // window handle of object to use for any modal output    Returns Boolean // True, if success; False, if an error occurred
80798>>>>>>>>>
80798>>>>>>>>>External_Function WP_SetAlign "SetAlign" WinPrint.dll ; // align future text    UInteger eAlign; // left, center or right    Returns Boolean // always True
80799>>>>>>>>>
80799>>>>>>>>>External_Function WP_WriteText "WriteText" WinPrint.dll ; // write text to the current position or column    String sText;               // the text to write    Boolean bNewLineAfterPrint; // should a "CR" be written after the text    UInteger iColumnNum;        // number of the column to write to (zero=no column, use current position)    Integer iNumDecimals;       // number of decimals in the text (-1 means sText is a string)    UInteger iWidth;            // width of text before truncating    Returns Boolean // True, if success; False, if an error occurred
80800>>>>>>>>>
80800>>>>>>>>>External_Function WP_WriteTextAtPosition "WriteTextAtPosition" WinPrint.dll ; // writes text to a specific position    String sText;               // the text to write    Boolean bNewLineAfterPrint; // should a "CR" be written after the text    UInteger iPosition;         // horizontal position to write the text    Integer iNumDecimals;       // number of decimals in the text (-1 means sText is a string)    UInteger iWidth;            // width of text before truncating    Returns Boolean // True, if success; False, if an error occurred
80801>>>>>>>>>
80801>>>>>>>>>External_Function WP_SetProgressCaption "SetProgressCaption" WinPrint.dll ;    String sProgressCaption ;    Returns Boolean
80802>>>>>>>>>
80802>>>>>>>>>External_Function WP_SetReportTitle     "SetReportTitle"     WinPrint.dll ;    String sCaption ;    Returns Boolean
80803>>>>>>>>>
80803>>>>>>>>>External_Function WP_ViewerWantsToClose "ViewerWantsToClose" WinPrint.dll ;    Returns Integer
80804>>>>>>>>>
80804>>>>>>>>>External_Function WP_DisplayMessageBox  "DisplayMessageBox"  WinPrint.dll ;    String sCaption String sText ;    Returns Integer
80805>>>>>>>>>
80805>>>>>>>>>External_Function WP_GetViewerWindow "GetViewerWindow" Winprint.dll ;    Returns Handle
80806>>>>>>>>>
80806>>>>>>>>>External_Function WP_GetDocumentStatus "GetDocumentStatus" Winprint.dll ;    Returns Integer // returns dsNotStarted, dsStarted, or dsFinished
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>Use WinPrint_Constants.pkg
Including file: Winprint_Constants.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\Winprint_Constants.pkg)
80807>>>>>>>>>// Constants used by Winprint1 and Winprint 2
80807>>>>>>>>>
80807>>>>>>>>>// Define Winprint Constants
80807>>>>>>>>>
80807>>>>>>>>>Enum_List // Metrics
80807>>>>>>>>>    Define WPM_CM
80807>>>>>>>>>    Define WPM_INCH
80807>>>>>>>>>End_Enum_List
80807>>>>>>>>>
80807>>>>>>>>>// values returns by GetDocumentStatus
80807>>>>>>>>>Enum_List
80807>>>>>>>>>    Define dsNotStarted for 0 // The document is cleared or has never started
80807>>>>>>>>>    Define dsStarted    for 1 // The document has been created, but is not finished.
80807>>>>>>>>>    Define dsFinished   for 2 // The document is completed, and is currently valid
80807>>>>>>>>>End_Enum_List
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>// Fonts/Align
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>// Header position on page
80807>>>>>>>>>
80807>>>>>>>>>// Header frame types
80807>>>>>>>>>
80807>>>>>>>>>// Header Margin
80807>>>>>>>>>
80807>>>>>>>>>// Header page breake/wrap
80807>>>>>>>>>
80807>>>>>>>>>// Headers
80807>>>>>>>>>
80807>>>>>>>>>// RGB colors for WinPrint
80807>>>>>>>>>// If you want to define more colors, use the function DFGetDFColor.
80807>>>>>>>>>// Default
80807>>>>>>>>>// Dark
80807>>>>>>>>>// Same as magenta, i will leav them becauce they exist in ver 1.0
80807>>>>>>>>>
80807>>>>>>>>>// Graphics
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>// PD flags for print setup/dialog
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>>>
80807>>>>>>>Use Rgb.pkg
80807>>>>>>>Use GlobalFunctionsProcedures.pkg
80807>>>>>>>
80807>>>>>>>Define INFINITE for -1
80807>>>>>>>Define WAIT_TIMEOUT for |CI$00000102
80807>>>>>>>
80807>>>>>>>
80807>>>>>>>Define QS_KEY            for |CI$0001
80807>>>>>>>Define QS_MOUSEMOVE      for |CI$0002
80807>>>>>>>Define QS_MOUSEBUTTON    for |CI$0004
80807>>>>>>>Define QS_POSTMESSAGE    for |CI$0008
80807>>>>>>>Define QS_TIMER          for |CI$0010
80807>>>>>>>Define QS_PAINT          for |CI$0020
80807>>>>>>>Define QS_SENDMESSAGE    for |CI$0040
80807>>>>>>>Define QS_HOTKEY         for |CI$0080
80807>>>>>>>Define QS_ALLPOSTMESSAGE for |CI$0100
80807>>>>>>>Define QS_MOUSE          for (QS_MOUSEMOVE ior QS_MOUSEBUTTON)
80807>>>>>>>Define QS_INPUT          for (QS_MOUSE ior QS_KEY)
80807>>>>>>>Define QS_ALLEVENTS      for (QS_INPUT ior QS_POSTMESSAGE ior QS_TIMER ior QS_PAINT ior QS_HOTKEY)
80807>>>>>>>Define QS_ALLINPUT       for (QS_INPUT ior QS_POSTMESSAGE ior QS_TIMER ior QS_PAINT ior QS_HOTKEY ior QS_SENDMESSAGE)
80807>>>>>>>
80807>>>>>>>External_Function WaitForSingleObject "WaitForSingleObject" Kernel32.dll Handle hHandle DWord dwMilliseconds Returns DWord
80808>>>>>>>External_Function GetCurrentProcessId "GetCurrentProcessId" Kernel32.dll Returns DWord
80809>>>>>>>External_Function GetCurrentProcess "GetCurrentProcess" Kernel32.dll Returns Handle
80810>>>>>>>
80810>>>>>>>External_Function MsgWaitForMultipleObjects "MsgWaitForMultipleObjects" User32.dll ;    DWord nCount;             // number of handles in the object handle array    Address pHandles;     // pointer to the object-handle array    Boolean fWaitAll;     // wait for all or wait for one    DWord dwMilliseconds; // time-out interval in milliseconds    DWord dwWakeMask;     // type of input events to wait for    Returns DWord
80811>>>>>>>
80811>>>>>>>Use GlobalFunctionsProcedures.pkg
80811>>>>>>>
80811>>>>>>>Class cWinPrint2 is a cObject
80812>>>>>>>    Procedure Construct_Object
80814>>>>>>>        Forward Send construct_object
80816>>>>>>>        
80816>>>>>>>        // internal properties
80816>>>>>>>        Property Integer DFCurrent_Color       0
80817>>>>>>>        Property String  DFCurrent_OutPut      "WinPrint"
80818>>>>>>>        Property Integer DFCurrent_Diagram     0
80819>>>>>>>        Property Integer DFCurrent_HeaderType  0
80820>>>>>>>        Property Integer DFCurrent_HeaderNr    0
80821>>>>>>>        Property Number  DFCurrent_FontSize    10
80822>>>>>>>        Property String  DFCurrent_Font        "Arial"
80823>>>>>>>        
80823>>>>>>>        // Default values for margins 2.53 CM = 1 inch
80823>>>>>>>        Property Number  DFLeft_Margin    2.53
80824>>>>>>>        Property Number  DFTop_Margin     2.53
80825>>>>>>>        Property Number  DFright_Margin   2.53
80826>>>>>>>        Property Number  DFBottom_Margin  2.53
80827>>>>>>>        
80827>>>>>>>        // If WP1 this defaults to false. In 2, it is true which means that the print job
80827>>>>>>>        // dialog appears when you hitprint in previewer.
80827>>>>>>>        Property Integer PrintDlgInPreview   1
80828>>>>>>>        // This does nothing in Wp2 (because you can't to this anyway)
80828>>>>>>>        Property Integer EnablePrintSetupFromPreview  True
80829>>>>>>>        Property Integer EnablePrintFromPreview  1
80830>>>>>>>        
80830>>>>>>>        // is the GUI Suspended. This is privately maintained and is used
80830>>>>>>>        // to figure out if a preview panel is up or not
80830>>>>>>>        Property Integer pbIsSuspended False
80831>>>>>>>        
80831>>>>>>>        Object oDFColorArray is an Array
80833>>>>>>>            //Moved into array
80833>>>>>>>            Set Value  0  to RGB_WHITE
80834>>>>>>>            Set Value  1  to RGB_RED
80835>>>>>>>            Set Value  2  to RGB_BLUE
80836>>>>>>>            Set Value  3  to RGB_GREEN
80837>>>>>>>            Set Value  4  to RGB_YELLOW
80838>>>>>>>            Set Value  5  to RGB_GREY
80839>>>>>>>            Set Value  6  to RGB_CYAN
80840>>>>>>>            Set Value  7  to RGB_MAGENTA
80841>>>>>>>            Set Value  8  to RGB_DRED
80842>>>>>>>            Set Value  9  to RGB_DBLUE
80843>>>>>>>            Set Value  10 to RGB_DGREEN
80844>>>>>>>            Set Value  11 to RGB_DYELLOW
80845>>>>>>>            Set Value  12 to RGB_DGREY
80846>>>>>>>            Set Value  13 to RGB_DCYAN
80847>>>>>>>            Set Value  14 to RGB_DMAGENTA
80848>>>>>>>            Set Value  15 to RGB_BLACK
80849>>>>>>>        End_Object
80850>>>>>>>        
80850>>>>>>>        Object oDiagramArray is an Array
80852>>>>>>>        End_Object
80853>>>>>>>        
80853>>>>>>>    End_Procedure
80854>>>>>>>    
80854>>>>>>>    Function ViewerWantsToClose Returns Boolean
80856>>>>>>>        Function_Return (WP_ViewerWantsToClose())
80857>>>>>>>    End_Function
80858>>>>>>>    
80858>>>>>>>    Function IsViewerActive Returns Boolean
80860>>>>>>>        Function_Return (WP_GetViewerWindow()<>0)
80861>>>>>>>    End_Function
80862>>>>>>>    
80862>>>>>>>    Function IsPrinterValid Returns Boolean
80864>>>>>>>        Function_Return (WP_IsPrinterValid()<>0)
80865>>>>>>>    End_Function
80866>>>>>>>    
80866>>>>>>>    Function ArePrintersInstalled Returns Boolean
80868>>>>>>>        Function_Return (WP_ArePrintersInstalled()<>0)
80869>>>>>>>    End_Function
80870>>>>>>>    
80870>>>>>>>    
80870>>>>>>>    // returns docucument state: dsNotStarted, dsStarted, dsFinished
80870>>>>>>>    Function DocumentStatus Returns Integer
80872>>>>>>>        Function_Return (WP_GetDocumentStatus())
80873>>>>>>>    End_Function
80874>>>>>>>    
80874>>>>>>>    // Might still be called from report class. Leave dummy stub
80874>>>>>>>    Procedure DFZeroCounters
80876>>>>>>>    End_Procedure
80877>>>>>>>    
80877>>>>>>>    //
80877>>>>>>>    Function DFNewPage Integer Columns Returns Integer
80879>>>>>>>        Integer iPageNum
80879>>>>>>>        // This returns a page number used in report object....(this may change)
80879>>>>>>>        Move (WP_CreatePage(Columns)) to iPageNum
80880>>>>>>>        If (iPageNum=0) Begin
80882>>>>>>>            Error DFERR_WINPRINT DFPrintError900
80883>>>>>>>>
80883>>>>>>>        End
80883>>>>>>>>
80883>>>>>>>        Function_Return iPageNum
80884>>>>>>>    End_Function
80885>>>>>>>    
80885>>>>>>>    //Return handle to use for winprint dialog. If main_window
80885>>>>>>>    //   exists, use it. Else, get object's handle
80885>>>>>>>    Function Report_Window_Handle Returns Handle
80887>>>>>>>        Handle hWnd
80887>>>>>>>        Handle hoObj
80887>>>>>>>        Get Focus of desktop to hoObj // start with the focus
80888>>>>>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
80889>>>>>>>        Function_Return hWnd
80890>>>>>>>    End_Function
80891>>>>>>>    
80891>>>>>>>    
80891>>>>>>>    //
80891>>>>>>>    Function DFPrintDialog Returns Boolean
80893>>>>>>>        Handle hwnd
80893>>>>>>>        Boolean bOk
80893>>>>>>>        
80893>>>>>>>        Get Report_Window_Handle to hWnd
80894>>>>>>>        Move (WP_ExecutePrintDialog(hwnd)) to bOk
80895>>>>>>>        
80895>>>>>>>        Function_Return bOk
80896>>>>>>>    End_Function
80897>>>>>>>    
80897>>>>>>>    
80897>>>>>>>    // You can only invoke the print setup if the report is cleared. If you try to to do this in
80897>>>>>>>    //    the wrong state you will get an error.
80897>>>>>>>    Function DFPrintSetupDialog Returns Boolean
80899>>>>>>>        Handle hwnd
80899>>>>>>>        Boolean bOk
80899>>>>>>>        Integer iStatus
80899>>>>>>>        Get ArePrintersInstalled to bOk
80900>>>>>>>        If not bOk Begin
80902>>>>>>>            Error DFERR_WINPRINT C_$NoInstalledPrinters
80903>>>>>>>>
80903>>>>>>>        End
80903>>>>>>>>
80903>>>>>>>        Else Begin
80904>>>>>>>            Get DocumentStatus to iStatus
80905>>>>>>>            
80905>>>>>>>            If (iStatus=dsNotStarted) Begin
80907>>>>>>>                Get Report_Window_Handle to hWnd
80908>>>>>>>                Move (WP_ExecutePrinterSetupDialog(hwnd)) to bOk
80909>>>>>>>                
80909>>>>>>>                // test that the selected printer is valid....
80909>>>>>>>                If bOK Begin
80911>>>>>>>                    Get IsPrinterValid to bOk // if printer not valid, it's not ok
80912>>>>>>>                    If not bOk Begin
80914>>>>>>>                        Error DFERR_WINPRINT DFPrintError936  // could not select a valid printer
80915>>>>>>>>
80915>>>>>>>                    End
80915>>>>>>>>
80915>>>>>>>                End
80915>>>>>>>>
80915>>>>>>>            End
80915>>>>>>>>
80915>>>>>>>            Else Begin
80916>>>>>>>                Error DFERR_WINPRINT DFPrintError966      // cannot change printer when report is active
80917>>>>>>>>
80917>>>>>>>            End
80917>>>>>>>>
80917>>>>>>>        End
80917>>>>>>>>
80917>>>>>>>        Function_Return bOk
80918>>>>>>>    End_Function
80919>>>>>>>    
80919>>>>>>>    
80919>>>>>>>    // Provided for backwards compatibility. DFPrintSetupDialog is more flexible because it returns a
80919>>>>>>>    //    false if cancel was selected.
80919>>>>>>>    Procedure DFPrintSetup
80921>>>>>>>        Boolean bOk
80921>>>>>>>        Get DFPrintSetupDialog to bOk
80922>>>>>>>    End_Procedure
80923>>>>>>>    
80923>>>>>>>    // This invokes the print job dialog, prints the report, then clears the report document.
80923>>>>>>>    //    This should be called after the report is complete.
80923>>>>>>>    Procedure DFPrint
80925>>>>>>>        Integer bOk
80925>>>>>>>        Get DFPrintDialog to bOk
80926>>>>>>>        If bOk Begin
80928>>>>>>>            Send DFPrintDoc
80929>>>>>>>            Send DFClearDoc
80930>>>>>>>        End
80930>>>>>>>>
80930>>>>>>>    End_Procedure
80931>>>>>>>    
80931>>>>>>>    Procedure DFSuspendGui Boolean bSuspend
80933>>>>>>>        If (bSuspend<>pbIsSuspended(Self)) Begin
80935>>>>>>>            Send SuspendGui of Desktop bSuspend
80936>>>>>>>            Set pbIsSuspended to bSuspend
80937>>>>>>>        End
80937>>>>>>>>
80937>>>>>>>    End_Procedure
80938>>>>>>>    
80938>>>>>>>    // this is protected so that the queue is only pumped if the
80938>>>>>>>    // gui is suspended.
80938>>>>>>>    Procedure PumpMsgQueue
80940>>>>>>>        If (pbIsSuspended(Self)) Begin
80942>>>>>>>            Send PumpMsgQueue of desktop // permit painting
80943>>>>>>>        End
80943>>>>>>>>
80943>>>>>>>    End_Procedure
80944>>>>>>>    
80944>>>>>>>    
80944>>>>>>>    // This does a modeless preview. This is what you'd want during
80944>>>>>>>    //    report generation and it may be what you want for report viewing.
80944>>>>>>>    Procedure DFPreviewNoWait
80946>>>>>>>        Boolean bOk
80946>>>>>>>        Boolean bPrntDlg bPrintSetup bPrint
80946>>>>>>>        Integer iStatus
80946>>>>>>>        Get PrintDlgInPreview to bPrntDlg
80947>>>>>>>        Get EnablePrintSetupFromPreview to bPrintSetup
80948>>>>>>>        Get EnablePrintFromPreview to bPrint
80949>>>>>>>        Get DocumentStatus to iStatus
80950>>>>>>>        If (iStatus=dsStarted) Begin
80952>>>>>>>            Send DfSuspendGui True
80953>>>>>>>        End
80953>>>>>>>>
80953>>>>>>>        Move (WP_PreviewDocument(bPrntDlg,bPrintSetup,bPrint)) to bOk
80954>>>>>>>        If not bOk Begin
80956>>>>>>>            Error DFERR_WINPRINT DFPrintError901
80957>>>>>>>>
80957>>>>>>>            Send DfSuspendGui False
80958>>>>>>>        End
80958>>>>>>>>
80958>>>>>>>    End_Procedure
80959>>>>>>>    
80959>>>>>>>    
80959>>>>>>>    // This does a modal preview. You might want this for report
80959>>>>>>>    //    viewing as the program knows when the viewer is closed
80959>>>>>>>    // Note that this is a private message and it was never intended that this
80959>>>>>>>    // should be used. We expect winprint reports to use modeless viewers.
80959>>>>>>>    Procedure DFPreviewWait
80961>>>>>>>        Handle hViewerProcess
80961>>>>>>>        Boolean bPrntDlg bPrintSetup bPrint
80961>>>>>>>        Integer iRetVal
80961>>>>>>>        Handle hwMain hMain
80961>>>>>>>        
80961>>>>>>>        Get PrintDlgInPreview to bPrntDlg
80962>>>>>>>        Get EnablePrintSetupFromPreview to bPrintSetup
80963>>>>>>>        Get EnablePrintFromPreview to bPrint
80964>>>>>>>        
80964>>>>>>>        Send DfSuspendGui True
80965>>>>>>>        Move (WP_PreviewDocument(bPrntDlg,bPrintSetup,bPrint)) to hViewerProcess
80966>>>>>>>        
80966>>>>>>>        If (hViewerProcess = 0) Begin
80968>>>>>>>            Error DFERR_WINPRINT DFPrintError901
80969>>>>>>>>
80969>>>>>>>        End
80969>>>>>>>>
80969>>>>>>>        Else Begin
80970>>>>>>>            // We need to wait for either the Viewer to close, or a WM_PAINT message in the thread's queue...
80970>>>>>>>            Repeat
80970>>>>>>>>
80970>>>>>>>                Move (MsgWaitForMultipleObjects(1, AddressOf(hViewerProcess), False, INFINITE, QS_PAINT)) to iRetVal
80971>>>>>>>                Send PumpMsgQueue // permit painting
80972>>>>>>>            Until (iRetVal = 0) // 0 means that the viewer process terminated
80974>>>>>>>        End
80974>>>>>>>>
80974>>>>>>>        Send DfSuspendGui False
80975>>>>>>>        
80975>>>>>>>        // Do what we can to force VDF application to the top.
80975>>>>>>>        // As 12.0 dfSuspendGUI actually properly disables the underlying windows. When the viewer
80975>>>>>>>        // is closed it cannot give the focus back to this so it goes elsewhere. This will force it
80975>>>>>>>        // back.
80975>>>>>>>        
80975>>>>>>>        Get main_window of desktop to hMain
80976>>>>>>>        If hMain Begin
80978>>>>>>>            Get window_handle of hMain to hwMain
80979>>>>>>>            If hwMain Begin
80981>>>>>>>                If (GetForegroundWindow()<>hwMain) Begin
80983>>>>>>>                    Move (SetForegroundWindow(hwMain)) to hwMain
80984>>>>>>>                End
80984>>>>>>>>
80984>>>>>>>            End
80984>>>>>>>>
80984>>>>>>>        End
80984>>>>>>>>
80984>>>>>>>        
80984>>>>>>>    End_Procedure
80985>>>>>>>    
80985>>>>>>>    Procedure DfPreview
80987>>>>>>>        Send DfPreviewNoWait
80988>>>>>>>    End_Procedure
80989>>>>>>>    
80989>>>>>>>    
80989>>>>>>>    //
80989>>>>>>>    Procedure DFPrintDoc
80991>>>>>>>        Handle hwnd
80991>>>>>>>        Boolean bOk
80991>>>>>>>        Get Report_Window_Handle to hWnd
80992>>>>>>>        Move (WP_PrintDocument(hwnd)) to bOk
80993>>>>>>>        
80993>>>>>>>        If not bOk Begin
80995>>>>>>>            Error DFERR_WINPRINT DFPrintError902
80996>>>>>>>>
80996>>>>>>>        End
80996>>>>>>>>
80996>>>>>>>    End_Procedure
80997>>>>>>>    
80997>>>>>>>    
80997>>>>>>>    //
80997>>>>>>>    Procedure DFClearDoc
80999>>>>>>>        Boolean bOk
80999>>>>>>>        Get ArePrintersInstalled to bOk
81000>>>>>>>        If bOk Begin
81002>>>>>>>            Move (WP_ClearDocument()) to bOk
81003>>>>>>>            Send DFSuspendGUI False
81004>>>>>>>            If not bOk Begin
81006>>>>>>>                Error DFERR_WINPRINT DFPrintError903 // error number right?
81007>>>>>>>>
81007>>>>>>>            End
81007>>>>>>>>
81007>>>>>>>        End
81007>>>>>>>>
81007>>>>>>>    End_Procedure
81008>>>>>>>    
81008>>>>>>>    Procedure DFNewDoc Boolean bAutoPreview
81010>>>>>>>        Boolean bOk
81010>>>>>>>        // this is the most likely place we will encounter when we start a report. Check for
81010>>>>>>>        // printers and return an explicit error to make it easy to identify the error
81010>>>>>>>        Get ArePrintersInstalled to bOk
81011>>>>>>>        If not bOk Begin
81013>>>>>>>            Error DFERR_WINPRINT C_$NoInstalledPrinters
81014>>>>>>>>
81014>>>>>>>        End
81014>>>>>>>>
81014>>>>>>>        Else Begin
81015>>>>>>>            Send DfClearDoc // a new doc should always start with a clear
81016>>>>>>>            If bAutoPreview ;                Send DFSuspendGUI True
81019>>>>>>>            Move (WP_NewDocument(bAutoPreview)) to bOk
81020>>>>>>>            
81020>>>>>>>            If not bOk Begin
81022>>>>>>>                Error DFERR_WINPRINT DFPrintError902  // could not print document
81023>>>>>>>>
81023>>>>>>>                Send DFSuspendGUI False
81024>>>>>>>            End
81024>>>>>>>>
81024>>>>>>>        End
81024>>>>>>>>
81024>>>>>>>    End_Procedure
81025>>>>>>>    
81025>>>>>>>    //
81025>>>>>>>    Procedure DFSetFont String sFontName
81027>>>>>>>        Boolean bOk
81027>>>>>>>        Move (WP_SetFontName(sFontName)) to bOk
81028>>>>>>>        
81028>>>>>>>        If not bOK Begin
81030>>>>>>>            Error DFERR_WINPRINT DFPrintError904
81031>>>>>>>>
81031>>>>>>>        End
81031>>>>>>>>
81031>>>>>>>    End_Procedure
81032>>>>>>>    
81032>>>>>>>    
81032>>>>>>>    //
81032>>>>>>>    Procedure DFSetFontSize Integer iHeight Integer iWidth
81034>>>>>>>        Boolean bOk
81034>>>>>>>        // note that width is ignored in new implementation
81034>>>>>>>        Move (WP_SetFontHeight(iHeight)) to bOk
81035>>>>>>>        
81035>>>>>>>        If not bOK Begin
81037>>>>>>>            Error DFERR_WINPRINT  DFPrintError905
81038>>>>>>>>
81038>>>>>>>        End
81038>>>>>>>>
81038>>>>>>>    End_Procedure
81039>>>>>>>    
81039>>>>>>>    
81039>>>>>>>    //
81039>>>>>>>    Procedure DFSetFontStyle DWord dwStyle
81041>>>>>>>        Boolean bOk
81041>>>>>>>        Move (WP_SetFontStyle(dwStyle)) to bOk
81042>>>>>>>        
81042>>>>>>>        If not bOK Begin
81044>>>>>>>            Error DFERR_WINPRINT DFPrintError906
81045>>>>>>>>
81045>>>>>>>        End
81045>>>>>>>>
81045>>>>>>>    End_Procedure
81046>>>>>>>    
81046>>>>>>>    
81046>>>>>>>    //
81046>>>>>>>    Procedure DFSetUnderline Boolean bUnderline
81048>>>>>>>        Boolean bOk
81048>>>>>>>        
81048>>>>>>>        Move (WP_SetFontUnderline(bUnderline)) to bOk
81049>>>>>>>        
81049>>>>>>>        If not bOK Begin
81051>>>>>>>            Error DFERR_WINPRINT DFPrintError907
81052>>>>>>>>
81052>>>>>>>        End
81052>>>>>>>>
81052>>>>>>>    End_Procedure
81053>>>>>>>    
81053>>>>>>>    
81053>>>>>>>    //
81053>>>>>>>    Procedure DFSetBold Boolean bBold
81055>>>>>>>        Boolean bOk
81055>>>>>>>        
81055>>>>>>>        Move (WP_SetFontBold(bBold)) to bOk
81056>>>>>>>        
81056>>>>>>>        If not bOK Begin
81058>>>>>>>            Error DFERR_WINPRINT DFPrintError908
81059>>>>>>>>
81059>>>>>>>        End
81059>>>>>>>>
81059>>>>>>>    End_Procedure
81060>>>>>>>    
81060>>>>>>>    
81060>>>>>>>    //
81060>>>>>>>    Procedure DFSetItalic Boolean bItalic
81062>>>>>>>        Boolean bOk
81062>>>>>>>        
81062>>>>>>>        Move (WP_SetFontItalic(bItalic)) to bOk
81063>>>>>>>        
81063>>>>>>>        If not bOK Begin
81065>>>>>>>            Error DFERR_WINPRINT DFPrintError909
81066>>>>>>>>
81066>>>>>>>        End
81066>>>>>>>>
81066>>>>>>>    End_Procedure
81067>>>>>>>    
81067>>>>>>>    
81067>>>>>>>    //
81067>>>>>>>    Procedure DFSetStrikeout Boolean bStrikeout
81069>>>>>>>        Boolean bOk
81069>>>>>>>        
81069>>>>>>>        Move (WP_SetFontStrikeout(bStrikeout)) to bOk
81070>>>>>>>        
81070>>>>>>>        If not bOK Begin
81072>>>>>>>            Error DFERR_WINPRINT DFPrintError910
81073>>>>>>>>
81073>>>>>>>        End
81073>>>>>>>>
81073>>>>>>>    End_Procedure
81074>>>>>>>    
81074>>>>>>>    
81074>>>>>>>    //
81074>>>>>>>    Procedure DFSetMargins Number nLeft Number nTop Number nRight Number nBottom
81076>>>>>>>        Boolean bOk
81076>>>>>>>        Integer iLeft iRight iTop iBottom
81076>>>>>>>        
81076>>>>>>>        Move (nLeft   * 100) to iLeft
81077>>>>>>>        Move (nRight  * 100) to iRight
81078>>>>>>>        Move (nTop    * 100) to iTop
81079>>>>>>>        Move (nBottom * 100) to iBottom
81080>>>>>>>        
81080>>>>>>>        Move (WP_SetMargins(iLeft,iTop,iRight,iBottom)) to bOk
81081>>>>>>>        
81081>>>>>>>        If bOk Begin
81083>>>>>>>            Set DFLeft_Margin   to nLeft
81084>>>>>>>            Set DFTop_Margin    to nTop
81085>>>>>>>            Set DFRight_Margin  to nRight
81086>>>>>>>            Set DFBottom_Margin to nBottom
81087>>>>>>>        End
81087>>>>>>>>
81087>>>>>>>        Else Begin
81088>>>>>>>            Error DFERR_WINPRINT DFPrintError911
81089>>>>>>>>
81089>>>>>>>        End
81089>>>>>>>>
81089>>>>>>>    End_Procedure
81090>>>>>>>    
81090>>>>>>>    
81090>>>>>>>    //
81090>>>>>>>    Procedure DFSetLeftMargin Number nLeft
81092>>>>>>>        Number  nTop nRight nBottom
81092>>>>>>>        Get DFTop_Margin    to nTop
81093>>>>>>>        Get DFRight_Margin  to nRight
81094>>>>>>>        Get DFBottom_Margin to nBottom
81095>>>>>>>        Send DFSetMargins nLeft nTop nRight nBottom
81096>>>>>>>    End_Procedure
81097>>>>>>>    
81097>>>>>>>    
81097>>>>>>>    //
81097>>>>>>>    Procedure DFSetRightMargin Number nRight
81099>>>>>>>        Number  nLeft nTop nBottom
81099>>>>>>>        Get DFLeft_Margin   to nLeft
81100>>>>>>>        Get DFTop_Margin    to nTop
81101>>>>>>>        Get DFBottom_Margin to nBottom
81102>>>>>>>        Send DFSetMargins nLeft nTop nRight nBottom
81103>>>>>>>    End_Procedure
81104>>>>>>>    
81104>>>>>>>    
81104>>>>>>>    //
81104>>>>>>>    Procedure DFSetTopMargin Number nTop
81106>>>>>>>        Number  nLeft nRight nBottom
81106>>>>>>>        Get DFLeft_Margin   to nLeft
81107>>>>>>>        Get DFRight_Margin  to nRight
81108>>>>>>>        Get DFBottom_Margin to nBottom
81109>>>>>>>        Send DFSetMargins nLeft nTop nRight nBottom
81110>>>>>>>    End_Procedure
81111>>>>>>>    
81111>>>>>>>    
81111>>>>>>>    //
81111>>>>>>>    Procedure DFSetBottomMargin Number nBottom
81113>>>>>>>        Number  nLeft nTop nRight
81113>>>>>>>        Get DFLeft_Margin   to nLeft
81114>>>>>>>        Get DFTop_Margin    to nTop
81115>>>>>>>        Get DFRight_Margin  to nRight
81116>>>>>>>        Send DFSetMargins nLeft nTop nRight nBottom
81117>>>>>>>    End_Procedure
81118>>>>>>>    
81118>>>>>>>    
81118>>>>>>>    //
81118>>>>>>>    Procedure DFWriteText String sText Integer iStyle Integer iColumn Integer iDecimal Boolean bNewLineAfterPrint
81120>>>>>>>        Boolean bOk
81120>>>>>>>        
81120>>>>>>>        Send DFSetFontStyle iStyle
81121>>>>>>>        Move (ToAnsi(sText)) to sText
81122>>>>>>>        Move (WP_WriteText(sText,bNewLineAfterPrint,iColumn,iDecimal,0)) to bOk
81123>>>>>>>        If not bOk Begin
81125>>>>>>>            Error DFERR_WINPRINT DFPrintError918
81126>>>>>>>>
81126>>>>>>>        End
81126>>>>>>>>
81126>>>>>>>        Send PumpMsgQueue // permit painting
81127>>>>>>>    End_Procedure
81128>>>>>>>    
81128>>>>>>>    //
81128>>>>>>>    Procedure DFWrite String sText DWord iStyle Integer iColumn Integer iDecimal Boolean bTrim
81130>>>>>>>        If (Num_Arguments>=5 and bTrim) Begin
81132>>>>>>>            Move (Rtrim(sText)) to sText
81133>>>>>>>        End
81133>>>>>>>>
81133>>>>>>>        Send DFWriteText sText iStyle iColumn iDecimal False
81134>>>>>>>    End_Procedure
81135>>>>>>>    
81135>>>>>>>    //
81135>>>>>>>    Procedure DFWriteLn String sText DWord iStyle Integer iColumn Integer iDecimal Boolean bTrim
81137>>>>>>>        If (Num_Arguments>=5 and bTrim) Begin
81139>>>>>>>            Move (Rtrim(sText)) to sText
81140>>>>>>>        End
81140>>>>>>>>
81140>>>>>>>        Send DFWriteText sText iStyle iColumn iDecimal True
81141>>>>>>>    End_Procedure
81142>>>>>>>    
81142>>>>>>>    
81142>>>>>>>    //
81142>>>>>>>    Procedure DFWriteTextAtPosition String sText Integer iStyle Number nPosition Integer iDecimal ;            Number nMaxLength Boolean bNewLineAfterPrint
81144>>>>>>>        Boolean bOk
81144>>>>>>>        Integer iPosition iMaxLength
81144>>>>>>>        Send DFSetFontStyle iStyle
81145>>>>>>>        Move (ToAnsi(sText)) to sText
81146>>>>>>>        Move (nPosition * 100) to iPosition
81147>>>>>>>        Move (nMaxLength * 100) to iMaxLength
81148>>>>>>>        Move (WP_WriteTextAtPosition(sText,bNewLineAfterPrint,iPosition,iDecimal,iMaxLength)) to bOk
81149>>>>>>>        If not bOk Begin
81151>>>>>>>            Error DFERR_WINPRINT DFPrintError922
81152>>>>>>>>
81152>>>>>>>        End
81152>>>>>>>>
81152>>>>>>>        Send PumpMsgQueue // permit painting
81153>>>>>>>    End_Procedure
81154>>>>>>>    
81154>>>>>>>    //
81154>>>>>>>    Procedure DFWritePos String sText Integer iStyle Number nPosition Integer iDecimal Number nMaxLength Boolean bTrim
81156>>>>>>>        Number nMax
81156>>>>>>>        If (Num_Arguments>=6 and bTrim) Begin
81158>>>>>>>            Move (Rtrim(sText)) to sText
81159>>>>>>>        End
81159>>>>>>>>
81159>>>>>>>        
81159>>>>>>>        If (Num_Arguments<5) ;            Move 0 to nMax
81162>>>>>>>        Else ;            Move nMaxLength to nMax
81164>>>>>>>        Send DFWriteTextAtPosition sText iStyle nPosition iDecimal nMax False
81165>>>>>>>    End_Procedure
81166>>>>>>>    
81166>>>>>>>    //
81166>>>>>>>    Procedure DFWriteLnPos String sText Integer iStyle Number nPosition Integer iDecimal Number nMaxLength Boolean bTrim
81168>>>>>>>        Number nMax
81168>>>>>>>        If (Num_Arguments>=6 and bTrim) Begin
81170>>>>>>>            Move (Rtrim(sText)) to sText
81171>>>>>>>        End
81171>>>>>>>>
81171>>>>>>>        
81171>>>>>>>        If (Num_Arguments<5) ;            Move 0 to nMax
81174>>>>>>>        Else ;            Move nMaxLength to nMax
81176>>>>>>>        Send DFWriteTextAtPosition sText iStyle nPosition iDecimal nMax True
81177>>>>>>>    End_Procedure
81178>>>>>>>    
81178>>>>>>>    Procedure DFSetMetrics String sMetrics
81180>>>>>>>        Integer eMetrics
81180>>>>>>>        // for backwards compatibility support both string names and integer enumerations
81180>>>>>>>        // it is better to use the enumeration value
81180>>>>>>>        If (sMetrics="INCH" or sMetrics="CM") Begin
81182>>>>>>>            Set DFCurrent_Metrics to sMetrics
81183>>>>>>>        End
81183>>>>>>>>
81183>>>>>>>        Else Begin
81184>>>>>>>            Move sMetrics to eMetrics
81185>>>>>>>            Move (WP_SetMetrics(eMetrics)) to eMetrics
81186>>>>>>>        End
81186>>>>>>>>
81186>>>>>>>    End_Procedure
81187>>>>>>>    
81187>>>>>>>    Function DFGetMetrics Returns Integer
81189>>>>>>>        Integer eMetrics
81189>>>>>>>        Move (WP_GetMetrics()) to eMetrics
81190>>>>>>>        Function_Return eMetrics
81191>>>>>>>    End_Function
81192>>>>>>>    
81192>>>>>>>    
81192>>>>>>>    // Properties Maintained for compatibility with old Winprint (obsolete)
81192>>>>>>>    Function DFCurrent_Metrics Returns String
81194>>>>>>>        Integer eMetrics
81194>>>>>>>        Get DFGetMetrics to eMetrics
81195>>>>>>>        Function_Return (If(eMetrics=WPM_INCH,"INCH","CM"))
81196>>>>>>>    End_Function
81197>>>>>>>    
81197>>>>>>>    Procedure Set DFCurrent_Metrics String sCMorINCH
81199>>>>>>>        Send DFSetMetrics (If(sCMorINCH="INCH", WPM_INCH, WPM_CM))
81200>>>>>>>    End_Procedure
81201>>>>>>>    
81201>>>>>>>    
81201>>>>>>>    
81201>>>>>>>    
81201>>>>>>>    
81201>>>>>>>    //
81201>>>>>>>    Procedure DFBeginHeaderType Integer iHeaderNr Integer eHeaderType
81203>>>>>>>        Boolean bOk
81203>>>>>>>        
81203>>>>>>>        If (eHeaderType=DFSubHeader or eHeaderType=DFSubTotal) Begin
81205>>>>>>>            // Do nothing for the moment
81205>>>>>>>        End
81205>>>>>>>>
81205>>>>>>>        Else ;            Move 0 to iHeaderNr // If the user made a mistake
81207>>>>>>>        
81207>>>>>>>        Set DFCurrent_HeaderType to eHeaderType
81208>>>>>>>        Set DFCurrent_HeaderNr   to iHeaderNr
81209>>>>>>>        
81209>>>>>>>        Move (WP_BeginHeader(eHeaderType, iHeaderNr)) to bOk
81210>>>>>>>        
81210>>>>>>>        If not bOk Begin
81212>>>>>>>            Error DFERR_WINPRINT DFPrintError925
81213>>>>>>>>
81213>>>>>>>        End
81213>>>>>>>>
81213>>>>>>>    End_Procedure
81214>>>>>>>    
81214>>>>>>>    
81214>>>>>>>    //
81214>>>>>>>    Procedure DFEndHeaderType
81216>>>>>>>        Boolean bOk
81216>>>>>>>        
81216>>>>>>>        Move (WP_EndHeader()) to bOk
81217>>>>>>>        
81217>>>>>>>        If not bOk Begin
81219>>>>>>>            Error DFERR_WINPRINT DFPrintError926
81220>>>>>>>>
81220>>>>>>>        End
81220>>>>>>>>
81220>>>>>>>    End_Procedure
81221>>>>>>>    
81221>>>>>>>    
81221>>>>>>>    //
81221>>>>>>>    Procedure DFWriteHeaderType Integer iHeaderNr Integer eHeaderType
81223>>>>>>>        Boolean bOk
81223>>>>>>>        Move (WP_WriteHeader(eHeaderType, iHeaderNr)) to bOk
81224>>>>>>>        If not bOk Begin
81226>>>>>>>            Error DFERR_WINPRINT DFPrintError927
81227>>>>>>>>
81227>>>>>>>        End
81227>>>>>>>>
81227>>>>>>>    End_Procedure
81228>>>>>>>    
81228>>>>>>>    
81228>>>>>>>    //
81228>>>>>>>    Procedure DFHeaderPosition Integer ePlace
81230>>>>>>>        Boolean bOk
81230>>>>>>>        
81230>>>>>>>        Move (WP_SetHeaderPlacement(ePlace)) to bOk
81231>>>>>>>        
81231>>>>>>>        If not bOk Begin
81233>>>>>>>            Error DFERR_WINPRINT DFPrintError929
81234>>>>>>>>
81234>>>>>>>        End
81234>>>>>>>>
81234>>>>>>>    End_Procedure
81235>>>>>>>    
81235>>>>>>>    
81235>>>>>>>    //
81235>>>>>>>    Procedure DFHeaderFrameType Integer eFrame Integer iColor Number nWeight;            Integer iFillColor Boolean bFillFrame
81237>>>>>>>        Integer iWeight
81237>>>>>>>        Boolean bOk
81237>>>>>>>        
81237>>>>>>>        Move (nWeight*100) to iWeight
81238>>>>>>>        
81238>>>>>>>        Move (WP_SetHeaderFrame(eFrame,iColor,iWeight,iFillColor,bFillFrame)) to bOk
81239>>>>>>>        
81239>>>>>>>        If not bOk Begin
81241>>>>>>>            Error DFERR_WINPRINT DFPrintError930
81242>>>>>>>>
81242>>>>>>>        End
81242>>>>>>>>
81242>>>>>>>    End_Procedure
81243>>>>>>>    
81243>>>>>>>    Procedure DFHeaderMargin Integer eType Number nSize
81245>>>>>>>        Boolean bOk
81245>>>>>>>        Integer iSize
81245>>>>>>>        
81245>>>>>>>        Move (nSize * 100) to iSize
81246>>>>>>>        
81246>>>>>>>        Move (WP_SetHeaderMargin(eType, iSize)) to bOk
81247>>>>>>>        
81247>>>>>>>        If not bOk Begin
81249>>>>>>>            Error DFERR_WINPRINT DFPrintError930
81250>>>>>>>>
81250>>>>>>>        End
81250>>>>>>>>
81250>>>>>>>    End_Procedure
81251>>>>>>>    
81251>>>>>>>    
81251>>>>>>>    //
81251>>>>>>>    Procedure DFHeaderWrap Integer eOnOff
81253>>>>>>>        Boolean bOk
81253>>>>>>>        
81253>>>>>>>        Move (WP_SetHeaderWrap(eOnOff)) to bOk
81254>>>>>>>        
81254>>>>>>>        If not bOk Begin
81256>>>>>>>            Error DFERR_WINPRINT DFPrintError931
81257>>>>>>>>
81257>>>>>>>        End
81257>>>>>>>>
81257>>>>>>>    End_Procedure
81258>>>>>>>    
81258>>>>>>>    //
81258>>>>>>>    Procedure DFWriteBMP String sFileName Number nStartX Number nStartY Number nHeight Number nWidth Boolean bUCp
81260>>>>>>>        Boolean bOk
81260>>>>>>>        Integer iStartX iStartY iHeight iWidth
81260>>>>>>>        
81260>>>>>>>        If ((nStartX = -998) or (nStartX = -999));            Move nStartX to iStartX
81263>>>>>>>        Else ;            Move (nStartX*100) to iStartX
81265>>>>>>>        
81265>>>>>>>        If ((nStartY = -998) or (nStartY = -999));            Move nStartY to iStartY
81268>>>>>>>        Else ;            Move (nStartY*100) to iStartY
81270>>>>>>>        
81270>>>>>>>        If ((nWidth = -998) or (nWidth = -999));            Move nWidth to iWidth
81273>>>>>>>        Else ;            Move (nWidth*100) to iWidth
81275>>>>>>>        
81275>>>>>>>        If ((nHeight = -998) or (nHeight = -999));            Move nHeight to iHeight
81278>>>>>>>        Else ;            Move (nHeight*100) to iHeight
81280>>>>>>>        
81280>>>>>>>        Get_File_Path sFileName to sFileName
81281>>>>>>>        Move (WP_DrawBitmap(sFileName,iStartX,iStartY,iWidth,iHeight,bUCp)) to bOk
81282>>>>>>>        
81282>>>>>>>        If not bOk Begin
81284>>>>>>>            Error DFERR_WINPRINT DFPrintError932
81285>>>>>>>>
81285>>>>>>>        End
81285>>>>>>>>
81285>>>>>>>    End_Procedure
81286>>>>>>>    
81286>>>>>>>    
81286>>>>>>>    //
81286>>>>>>>    Procedure DFHeaderLineCheck Integer iLines
81288>>>>>>>        Boolean bOk
81288>>>>>>>        
81288>>>>>>>        Move (WP_SetExtraLineCheck(iLines)) to bOk
81289>>>>>>>        
81289>>>>>>>        If not bOk Begin
81291>>>>>>>            Error DFERR_WINPRINT DFPrintError934
81292>>>>>>>>
81292>>>>>>>        End
81292>>>>>>>>
81292>>>>>>>    End_Procedure
81293>>>>>>>    
81293>>>>>>>    
81293>>>>>>>    //
81293>>>>>>>    Procedure DFPrintFlags Integer Flags
81295>>>>>>>        Boolean bOk
81295>>>>>>>        
81295>>>>>>>        Move (WP_SetPrintDialogFlags(Flags)) to bOk
81296>>>>>>>        
81296>>>>>>>        If not bOk Begin
81298>>>>>>>            Error DFERR_WINPRINT DFPrintError935
81299>>>>>>>>
81299>>>>>>>        End
81299>>>>>>>>
81299>>>>>>>    End_Procedure
81300>>>>>>>    
81300>>>>>>>    
81300>>>>>>>    // obsolete and maintained for winprint-I backwards compatibility (maybe should be removed)
81300>>>>>>>    //
81300>>>>>>>    Procedure DFSelectPrinter String sDriver String sDevice String sPort Boolean bUpdate
81302>>>>>>>        Send DFSetDevice sDevice
81303>>>>>>>    End_Procedure
81304>>>>>>>    
81304>>>>>>>    // Preferred usage for WinprintII
81304>>>>>>>    Procedure DFSetDevice String sDevice
81306>>>>>>>        Boolean bOk
81306>>>>>>>        
81306>>>>>>>        Move (WP_SelectPrinter(sDevice)) to bOk
81307>>>>>>>        
81307>>>>>>>        If not bOk Begin
81309>>>>>>>            Error DFERR_WINPRINT DFPrintError936
81310>>>>>>>>
81310>>>>>>>        End
81310>>>>>>>>
81310>>>>>>>    End_Procedure
81311>>>>>>>    
81311>>>>>>>    Procedure DFPrinterBinFirstPage Integer eBin
81313>>>>>>>        Boolean bOk
81313>>>>>>>        
81313>>>>>>>        Move (WP_SetFirstPagePaperSource(eBin)) to bOk
81314>>>>>>>        
81314>>>>>>>        If not bOk Begin
81316>>>>>>>            Error DFERR_WINPRINT DFPrintError937
81317>>>>>>>>
81317>>>>>>>        End
81317>>>>>>>>
81317>>>>>>>    End_Procedure
81318>>>>>>>    
81318>>>>>>>    
81318>>>>>>>    //
81318>>>>>>>    Function DFGetDFColor Integer iRed Integer iGreen Integer iBlue Returns Integer
81320>>>>>>>        Integer iColor
81320>>>>>>>        
81320>>>>>>>        Move (WP_RGBToDFPrintColor(iRed,iGreen,iBlue)) to iColor
81321>>>>>>>        
81321>>>>>>>        If (iColor=0) Begin
81323>>>>>>>            Error DFERR_WINPRINT DFPrintError938
81324>>>>>>>>
81324>>>>>>>        End
81324>>>>>>>>
81324>>>>>>>        Function_Return iColor
81325>>>>>>>    End_Function
81326>>>>>>>    
81326>>>>>>>    
81326>>>>>>>    //
81326>>>>>>>    Procedure DFSetDFColor DWord dwColor
81328>>>>>>>        Integer bOk
81328>>>>>>>        
81328>>>>>>>        Move (WP_SetFontColor(dwColor)) to bOk
81329>>>>>>>        
81329>>>>>>>        If not bOk Begin
81331>>>>>>>            Error DFERR_WINPRINT DFPrintError939
81332>>>>>>>>
81332>>>>>>>        End
81332>>>>>>>>
81332>>>>>>>    End_Procedure
81333>>>>>>>    
81333>>>>>>>    
81333>>>>>>>    //
81333>>>>>>>    Procedure DFSetTopBottom Number nTop Number nBottom Boolean bAllPages
81335>>>>>>>        Boolean bOk
81335>>>>>>>        Integer iTop iBottom
81335>>>>>>>        
81335>>>>>>>        Move (nTop*100)    to iTop
81336>>>>>>>        Move (nBottom*100) to iBottom
81337>>>>>>>        
81337>>>>>>>        Move (WP_SetAbsoluteMargins(iTop,iBottom,bAllPages)) to bOk
81338>>>>>>>        
81338>>>>>>>        If not bOk Begin
81340>>>>>>>            Error DFERR_WINPRINT DFPrintError940
81341>>>>>>>>
81341>>>>>>>        End
81341>>>>>>>>
81341>>>>>>>    End_Procedure
81342>>>>>>>    
81342>>>>>>>    
81342>>>>>>>    //
81342>>>>>>>    Procedure DFSetJMode Integer eAlign
81344>>>>>>>        Boolean bOk
81344>>>>>>>        
81344>>>>>>>        Move (WP_SetAlign(eAlign)) to bOk
81345>>>>>>>        
81345>>>>>>>        If not bOk Begin
81347>>>>>>>            Error DFERR_WINPRINT DFPrintError941
81348>>>>>>>>
81348>>>>>>>        End
81348>>>>>>>>
81348>>>>>>>    End_Procedure
81349>>>>>>>    
81349>>>>>>>    
81349>>>>>>>    //
81349>>>>>>>    Procedure DFWriteEllip Number nStartX Number nStartY Number nHeight Number nWidth ;            DWord dwBColor DWord dwFColor Boolean bFill Number nWeight Boolean bWrap Boolean bUCp
81351>>>>>>>        
81351>>>>>>>        Boolean bOk
81351>>>>>>>        Integer iWeight
81351>>>>>>>        Integer iStartX iStartY iHeight iWidth
81351>>>>>>>        
81351>>>>>>>        If ((nStartX = -998) or (nStartX = -999));            Move nStartX to iStartX
81354>>>>>>>        Else ;            Move (nStartX*100) to iStartX
81356>>>>>>>        
81356>>>>>>>        If ((nStartY = -998) or (nStartY = -999));            Move nStartY to iStartY
81359>>>>>>>        Else ;            Move (nStartY*100) to iStartY
81361>>>>>>>        
81361>>>>>>>        If ((nWidth = -998) or (nWidth = -999));            Move nWidth to iWidth
81364>>>>>>>        Else ;            Move (nWidth*100) to iWidth
81366>>>>>>>        
81366>>>>>>>        If ((nHeight = -998) or (nHeight = -999));            Move nHeight to iHeight
81369>>>>>>>        Else ;            Move (nHeight*100) to iHeight
81371>>>>>>>        
81371>>>>>>>        Move (nWeight*100) to iWeight
81372>>>>>>>        
81372>>>>>>>        
81372>>>>>>>        Move (WP_DrawEllipse(iStartX,iStartY,iWidth,iHeight,;            dwBColor,dwFColor,bFill,iWeight,bUCp,bWrap)) to bOk
81373>>>>>>>        
81373>>>>>>>        If not bOk Begin
81375>>>>>>>            Error DFERR_WINPRINT DFPrintError942
81376>>>>>>>>
81376>>>>>>>        End
81376>>>>>>>>
81376>>>>>>>    End_Procedure
81377>>>>>>>    
81377>>>>>>>    
81377>>>>>>>    
81377>>>>>>>    
81377>>>>>>>    //
81377>>>>>>>    Procedure DFWriteRect Number nStartX Number nStartY Number nHeight Number nWidth;            DWord dwBColor DWord dwFColor Boolean bFill Number nWeight Boolean bWrap Boolean bUCp
81379>>>>>>>        
81379>>>>>>>        Boolean bOk
81379>>>>>>>        Integer iWeight
81379>>>>>>>        Integer iStartX iStartY iHeight iWidth
81379>>>>>>>        
81379>>>>>>>        If ((nStartX = -998) or (nStartX = -999));            Move nStartX to iStartX
81382>>>>>>>        Else ;            Move (nStartX*100) to iStartX
81384>>>>>>>        
81384>>>>>>>        If ((nStartY = -998) or (nStartY = -999));            Move nStartY to iStartY
81387>>>>>>>        Else ;            Move (nStartY*100) to iStartY
81389>>>>>>>        
81389>>>>>>>        If ((nWidth = -998) or (nWidth = -999));            Move nWidth to iWidth
81392>>>>>>>        Else ;            Move (nWidth*100) to iWidth
81394>>>>>>>        
81394>>>>>>>        If ((nHeight = -998) or (nHeight = -999));            Move nHeight to iHeight
81397>>>>>>>        Else ;            Move (nHeight*100) to iHeight
81399>>>>>>>        
81399>>>>>>>        Move (nWeight*100) to iWeight
81400>>>>>>>        
81400>>>>>>>        Move (WP_DrawRectangle(iStartX,iStartY,iWidth,iHeight,;            dwBColor,dwFColor,bFill,iWeight,bUCp,bWrap)) to bOk
81401>>>>>>>        
81401>>>>>>>        If not bOk Begin
81403>>>>>>>            Error DFERR_WINPRINT DFPrintError944
81404>>>>>>>>
81404>>>>>>>        End
81404>>>>>>>>
81404>>>>>>>    End_Procedure
81405>>>>>>>    
81405>>>>>>>    
81405>>>>>>>    
81405>>>>>>>    
81405>>>>>>>    //
81405>>>>>>>    Procedure DFLineCheck Integer iLines
81407>>>>>>>        Boolean bOk
81407>>>>>>>        
81407>>>>>>>        Move (WP_ConfirmLines(iLines)) to bOk
81408>>>>>>>        
81408>>>>>>>        If not bOk Begin
81410>>>>>>>            Error DFERR_WINPRINT DFPrintError946
81411>>>>>>>>
81411>>>>>>>        End
81411>>>>>>>>
81411>>>>>>>    End_Procedure
81412>>>>>>>    
81412>>>>>>>    
81412>>>>>>>    //
81412>>>>>>>    Procedure DFCreateDiagram Integer eType Integer eFx Number nHeight Number nWidth Integer bXyAxis
81414>>>>>>>        Handle hDiagram
81414>>>>>>>        Integer iWidth iHeight
81414>>>>>>>        
81414>>>>>>>        Move (nHeight*100) to iHeight
81415>>>>>>>        Move (nWidth*100)  to iWidth
81416>>>>>>>        
81416>>>>>>>        Set DFCurrent_Color to 0
81417>>>>>>>        
81417>>>>>>>        Move (WP_CreateDiagram(eType,eFx,iWidth,iHeight,bXyAxis)) to hDiagram
81418>>>>>>>        
81418>>>>>>>        If (hDiagram) Begin
81420>>>>>>>            Error DFERR_WINPRINT DFPrintError947
81421>>>>>>>>
81421>>>>>>>        End
81421>>>>>>>>
81421>>>>>>>        Else Begin
81422>>>>>>>            Set DFCurrent_Diagram to hDiagram
81423>>>>>>>        End
81423>>>>>>>>
81423>>>>>>>    End_Procedure
81424>>>>>>>    
81424>>>>>>>    
81424>>>>>>>    //
81424>>>>>>>    Procedure DFDiagram_Item Handle hDiagram String sLabel Number nValue;            DWord dwBColor DWord dwFColor Integer eFill;            Integer iDec Integer eValueOrPercent Integer eExt
81426>>>>>>>        
81426>>>>>>>        Boolean bOk
81426>>>>>>>        Integer iCurrColor iValue
81426>>>>>>>        
81426>>>>>>>        If (dwFColor = -1) Begin
81428>>>>>>>            Get DFCurrent_Color to iCurrColor
81429>>>>>>>            Increment iCurrColor
81430>>>>>>>            If (iCurrColor>15) ;                Move 1 to iCurrColor
81433>>>>>>>            Set DFCurrent_Color to iCurrColor
81434>>>>>>>            Get DFGetColor iCurrColor to dwFColor
81435>>>>>>>        End
81435>>>>>>>>
81435>>>>>>>        
81435>>>>>>>        Move (nValue *100) to iValue
81436>>>>>>>        
81436>>>>>>>        Move (ToAnsi(sLabel)) to sLabel
81437>>>>>>>        
81437>>>>>>>        Move (WP_AddDiagramEntry(hDiagram,sLabel,iValue,dwBColor,dwFColor,eFill,iDec,eValueorPercent,eExt)) to bOk
81438>>>>>>>        
81438>>>>>>>        If not bOk Begin
81440>>>>>>>            Error DFERR_WINPRINT DFPrintError948
81441>>>>>>>>
81441>>>>>>>        End
81441>>>>>>>>
81441>>>>>>>    End_Procedure
81442>>>>>>>    
81442>>>>>>>    
81442>>>>>>>    //
81442>>>>>>>    Procedure DFLockDiagram Handle hDiagram
81444>>>>>>>        Boolean bOk
81444>>>>>>>        
81444>>>>>>>        Move (WP_LockDiagram(hDiagram)) to bOk
81445>>>>>>>        
81445>>>>>>>        If not bOk Begin
81447>>>>>>>            Error DFERR_WINPRINT DFPrintError949
81448>>>>>>>>
81448>>>>>>>        End
81448>>>>>>>>
81448>>>>>>>    End_Procedure
81449>>>>>>>    
81449>>>>>>>    
81449>>>>>>>    
81449>>>>>>>    //
81449>>>>>>>    Procedure DFDrawDiagram Handle hDiagram Number nYPos Number nXPos Boolean bUCp
81451>>>>>>>        Boolean bOk
81451>>>>>>>        Integer iXPos
81451>>>>>>>        Integer iYPos
81451>>>>>>>        
81451>>>>>>>        Move (nXPos*100) to iXPos
81452>>>>>>>        Move (nYPos*100) to iYPos
81453>>>>>>>        
81453>>>>>>>        If (nYPos = -999) ;            Move -999 to iYPos
81456>>>>>>>        
81456>>>>>>>        Move (WP_DrawDiagram(hDiagram,iXPos,iYPos,bUCp)) to bOk
81457>>>>>>>        
81457>>>>>>>        If not bOk Begin
81459>>>>>>>            Error DFERR_WINPRINT DFPrintError950
81460>>>>>>>>
81460>>>>>>>        End
81460>>>>>>>>
81460>>>>>>>    End_Procedure
81461>>>>>>>    
81461>>>>>>>    
81461>>>>>>>    
81461>>>>>>>    //
81461>>>>>>>    Procedure DFDiagramLabel Handle hDiagram String sLabel
81463>>>>>>>        Boolean bOk
81463>>>>>>>        Integer iLabelLen
81463>>>>>>>        
81463>>>>>>>        Move (ToAnsi(sLabel)) to sLabel
81464>>>>>>>        
81464>>>>>>>        Move (WP_SetDiagramCaption(hDiagram,sLabel)) to bOk
81465>>>>>>>        
81465>>>>>>>        If not bOk Begin
81467>>>>>>>            Error DFERR_WINPRINT DFPrintError952
81468>>>>>>>>
81468>>>>>>>        End
81468>>>>>>>>
81468>>>>>>>    End_Procedure
81469>>>>>>>    
81469>>>>>>>    
81469>>>>>>>    //
81469>>>>>>>    Procedure DFDiagramXLabel Handle hDiagram String sLabel
81471>>>>>>>        Boolean bOk
81471>>>>>>>        Move (ToAnsi(sLabel)) to sLabel
81472>>>>>>>        
81472>>>>>>>        Move (WP_SetDiagramXText(hDiagram,sLabel)) to bOk
81473>>>>>>>        
81473>>>>>>>        If not bOk Begin
81475>>>>>>>            Error DFERR_WINPRINT DFPrintError953
81476>>>>>>>>
81476>>>>>>>        End
81476>>>>>>>>
81476>>>>>>>    End_Procedure
81477>>>>>>>    
81477>>>>>>>    
81477>>>>>>>    //
81477>>>>>>>    Procedure DFDiagramYLabel Handle hDiagram String sLabel Boolean bVertical
81479>>>>>>>        Boolean bOk
81479>>>>>>>        Move (ToAnsi(sLabel)) to sLabel
81480>>>>>>>        
81480>>>>>>>        Move (WP_SetDiagramYText(hDiagram,sLabel,bVertical)) to bOk
81481>>>>>>>        
81481>>>>>>>        If not bOk Begin
81483>>>>>>>            Error DFERR_WINPRINT DFPrintError954
81484>>>>>>>>
81484>>>>>>>        End
81484>>>>>>>>
81484>>>>>>>    End_Procedure
81485>>>>>>>    
81485>>>>>>>    
81485>>>>>>>    //
81485>>>>>>>    Procedure DFWriteXYLine Number nStartX Number nStartY Number nStopX Number nStopY;            DWord dwColor Number nWeight Boolean bWrap Boolean bUCp
81487>>>>>>>        
81487>>>>>>>        Boolean bOk
81487>>>>>>>        Integer iStartX iStartY iStopX iStopY
81487>>>>>>>        Integer iWeight
81487>>>>>>>        
81487>>>>>>>        Move (nStartX*100)  to iStartX
81488>>>>>>>        Move (nStartY*100)  to iStartY
81489>>>>>>>        Move (nStopX*100)   to iStopX
81490>>>>>>>        Move (nStopY*100)   to iStopY
81491>>>>>>>        
81491>>>>>>>        Move (nWeight*100) to iWeight
81492>>>>>>>        
81492>>>>>>>        If (nStopY  = -998) ;            Move -998 to iStopY
81495>>>>>>>        If (nStopX  = -998) ;            Move -998 to iStopX
81498>>>>>>>        
81498>>>>>>>        If (nStartY  = -999) ;            Move -999 to iStartY
81501>>>>>>>        If (nStartX  = -999) ;            Move -999 to iStartX
81504>>>>>>>        
81504>>>>>>>        Move (WP_DrawXYLine(iStartX,iStartY,iStopX,iStopY,dwColor,iWeight,bUCp,bWrap)) to bOk
81505>>>>>>>        
81505>>>>>>>        If not bOk Begin
81507>>>>>>>            Error DFERR_WINPRINT DFPrintError955
81508>>>>>>>>
81508>>>>>>>        End
81508>>>>>>>>
81508>>>>>>>    End_Procedure
81509>>>>>>>    
81509>>>>>>>    
81509>>>>>>>    //
81509>>>>>>>    Procedure DFWriteLine Number nStartX Number nStartY Number nLength;            Boolean bHorizontal DWord dwColor Number nWeight Boolean bUCp
81511>>>>>>>        
81511>>>>>>>        Boolean bOk
81511>>>>>>>        Integer iStartX iStartY iLength
81511>>>>>>>        Integer iWeight
81511>>>>>>>        
81511>>>>>>>        Move (nStartX*100)  to iStartX
81512>>>>>>>        Move (nStartY*100)  to iStartY
81513>>>>>>>        Move (nLength*100)  to iLength
81514>>>>>>>        Move (nWeight*100)  to iWeight
81515>>>>>>>        
81515>>>>>>>        If (nStartY = -999) ;            Move -999 to iStartY
81518>>>>>>>        If (nStartX = -999) ;            Move -999 to iStartX
81521>>>>>>>        If (nLength = -998) ;            Move -998 to iLength
81524>>>>>>>        
81524>>>>>>>        Move (WP_DrawLine(iSTartX,iStartY,iLength,bHorizontal,dwColor,iWeight,bUCp)) to bOk
81525>>>>>>>        
81525>>>>>>>        If not bOk Begin
81527>>>>>>>            Error DFERR_WINPRINT DFPrintError956
81528>>>>>>>>
81528>>>>>>>        End
81528>>>>>>>>
81528>>>>>>>    End_Procedure
81529>>>>>>>    
81529>>>>>>>    
81529>>>>>>>    //
81529>>>>>>>    Procedure DFClearPrinter
81531>>>>>>>        Boolean bOk
81531>>>>>>>        
81531>>>>>>>        Move (WP_ClearPrinter()) to bOk
81532>>>>>>>        
81532>>>>>>>        If not bOk Begin
81534>>>>>>>            Error DFERR_WINPRINT DFPrintError957
81535>>>>>>>>
81535>>>>>>>        End
81535>>>>>>>>
81535>>>>>>>    End_Procedure
81536>>>>>>>    
81536>>>>>>>    
81536>>>>>>>    
81536>>>>>>>    //
81536>>>>>>>    Function DFGetCurrentDevice Returns String
81538>>>>>>>        Boolean bOk
81538>>>>>>>        String  sDFStr
81538>>>>>>>        Address pDFStr
81538>>>>>>>        
81538>>>>>>>        Move (Repeat( Character(0), 255 )) to sDFStr
81539>>>>>>>        Move (AddressOf(sDFStr)) to pDFStr
81540>>>>>>>        
81540>>>>>>>        Move (WP_GetCurrentDevice(pDFStr)) to bOk
81541>>>>>>>        
81541>>>>>>>        If not bOk Begin
81543>>>>>>>            Error DFERR_WINPRINT DFPrintError959
81544>>>>>>>>
81544>>>>>>>        End
81544>>>>>>>>
81544>>>>>>>        
81544>>>>>>>        Move (CString(sDFStr)) to sDFStr
81545>>>>>>>        Function_Return sDFStr
81546>>>>>>>    End_Function
81547>>>>>>>    
81547>>>>>>>    
81547>>>>>>>    // Note: DfGetCurrentPort and DFGetCurrentDriver do not exist in winprint2. Trying to
81547>>>>>>>    //       use these will result in a runtime error (which is good - don't use them)
81547>>>>>>>    
81547>>>>>>>    
81547>>>>>>>    //
81547>>>>>>>    Function DFGetPrintDialogFlags Returns DWord
81549>>>>>>>        DWord dwRetVal
81549>>>>>>>        
81549>>>>>>>        Move (WP_GetPrintDialogFlags()) to dwRetVal
81550>>>>>>>        
81550>>>>>>>        Function_Return dwRetVal
81551>>>>>>>    End_Function
81552>>>>>>>    
81552>>>>>>>    
81552>>>>>>>    //
81552>>>>>>>    // Returns PRN_TRUE=  if the flag is set     (1)
81552>>>>>>>    // Returns PRN_FALSE= If the flag not is set (0)
81552>>>>>>>    //
81552>>>>>>>    Function DFCheckPrintDialogFlag DWord dwPDFlag Returns Boolean
81554>>>>>>>        Boolean bIsSet
81554>>>>>>>        
81554>>>>>>>        Move (WP_IsPrintDialogFlagSet(dwPDFlag)) to bIsSet
81555>>>>>>>        
81555>>>>>>>        Function_Return bIsSet
81556>>>>>>>    End_Function
81557>>>>>>>    
81557>>>>>>>    
81557>>>>>>>    //
81557>>>>>>>    Procedure DFSetSpecPrintFlag DWord dwPDFlag
81559>>>>>>>        Boolean bOk
81559>>>>>>>        
81559>>>>>>>        Move (WP_SetSpecificPrintDialogFlag(dwPDFlag)) to bOk
81560>>>>>>>        
81560>>>>>>>        If not bOk Begin
81562>>>>>>>            Error DFERR_WINPRINT DFPrintError961
81563>>>>>>>>
81563>>>>>>>        End
81563>>>>>>>>
81563>>>>>>>    End_Procedure
81564>>>>>>>    
81564>>>>>>>    
81564>>>>>>>    //
81564>>>>>>>    Function DFGetUserDefinedLength Returns Number
81566>>>>>>>        Integer iRetVal
81566>>>>>>>        Number  nRetVal
81566>>>>>>>        
81566>>>>>>>        Move (WP_GetUserDefinedPapersize()) to iRetVal
81567>>>>>>>        
81567>>>>>>>        If (iRetVal=0) Begin
81569>>>>>>>            Error DFERR_WINPRINT DFPrintError962
81570>>>>>>>>
81570>>>>>>>            Function_Return 0
81571>>>>>>>        End
81571>>>>>>>>
81571>>>>>>>        
81571>>>>>>>        Move (Hi(iRetVal)) to nRetVal
81572>>>>>>>        Move (nRetVal/100) to nRetVal //Returns CM
81573>>>>>>>        
81573>>>>>>>        Function_Return nRetVal
81574>>>>>>>    End_Function
81575>>>>>>>    
81575>>>>>>>    
81575>>>>>>>    //
81575>>>>>>>    Function DFGetUserDefinedWidth Returns Number
81577>>>>>>>        Integer iRetVal
81577>>>>>>>        Number  nRetVal
81577>>>>>>>        
81577>>>>>>>        Move (WP_GetUserDefinedPapersize()) to iRetVal
81578>>>>>>>        
81578>>>>>>>        If (iRetVal=0) Begin
81580>>>>>>>            Error DFERR_WINPRINT DFPrintError963
81581>>>>>>>>
81581>>>>>>>            Function_Return 0
81582>>>>>>>        End
81582>>>>>>>>
81582>>>>>>>        
81582>>>>>>>        Move (Low(iRetVal)) to nRetVal
81583>>>>>>>        Move (nRetVal/100) to nRetVal //Returns CM
81584>>>>>>>        
81584>>>>>>>        Function_Return nRetVal
81585>>>>>>>    End_Function
81586>>>>>>>    
81586>>>>>>>    
81586>>>>>>>    // To be set in CM
81586>>>>>>>    Procedure DFSetUserDefinedPapersize Number nLength Number nWidth
81588>>>>>>>        Integer bOk
81588>>>>>>>        Integer iLength iWidth iSize
81588>>>>>>>        
81588>>>>>>>        Move (nLength*100) to iLength
81589>>>>>>>        Move (nWidth*100)  to iWidth
81590>>>>>>>        Move ((iLength*65536)+iWidth) to iSize
81591>>>>>>>        
81591>>>>>>>        Move (WP_SetUserDefinedPapersize(iSize)) to bOk
81592>>>>>>>        
81592>>>>>>>        If not bOk Begin
81594>>>>>>>            Error DFERR_WINPRINT DFPrintError964
81595>>>>>>>>
81595>>>>>>>        End
81595>>>>>>>>
81595>>>>>>>    End_Procedure
81596>>>>>>>    
81596>>>>>>>    Procedure DFSetNumberOfCopies Integer iNrOfCopies
81598>>>>>>>        Boolean bOk
81598>>>>>>>        
81598>>>>>>>        Move (WP_SetNumberOfPrintCopies(iNrOfCopies)) to bOk
81599>>>>>>>        
81599>>>>>>>        If not bOk Begin
81601>>>>>>>            Error DFERR_WINPRINT DFPrintError965
81602>>>>>>>>
81602>>>>>>>        End
81602>>>>>>>>
81602>>>>>>>    End_Procedure
81603>>>>>>>    
81603>>>>>>>    
81603>>>>>>>    
81603>>>>>>>    
81603>>>>>>>    // This procedures and functions are used when building 
81603>>>>>>>    // complex graphics when you need to change value of the
81603>>>>>>>    // current diagram, so you can mix diagrams within each 
81603>>>>>>>    // other.                                               
81603>>>>>>>    
81603>>>>>>>    
81603>>>>>>>    Function DFGetCurrentDiagram Returns Integer
81605>>>>>>>        Integer iRetVal
81605>>>>>>>        Get DFCurrent_Diagram to iRetVal
81606>>>>>>>        Function_Return iRetVal
81607>>>>>>>    End_Function
81608>>>>>>>    
81608>>>>>>>    Procedure DFSetCurrentDiagram Integer iDiagram
81610>>>>>>>        Set DFCurrent_Diagram to iDiagram
81611>>>>>>>    End_Procedure
81612>>>>>>>    
81612>>>>>>>    Procedure DFSetDiagramList Integer iItem Integer iDiagram
81614>>>>>>>        Set Value of oDiagramArray iItem to iDiagram
81615>>>>>>>    End_Procedure
81616>>>>>>>    
81616>>>>>>>    Function DFGetDiagramList Integer iItem Returns Integer
81618>>>>>>>        Integer iRetVal
81618>>>>>>>        Get Value of oDiagramArray iItem to iRetVal
81619>>>>>>>        Function_Return iRetVal
81620>>>>>>>    End_Function
81621>>>>>>>    
81621>>>>>>>    Procedure DFClearDiagramList
81623>>>>>>>        Send Delete_Data to oDiagramArray
81624>>>>>>>    End_Procedure
81625>>>>>>>    
81625>>>>>>>    
81625>>>>>>>    Function DFGetColor Integer iColor Returns DWord
81627>>>>>>>        DWord   dwRetVal
81627>>>>>>>        Get Value of oDFColorArray iColor to dwRetVal
81628>>>>>>>        Function_Return dwRetVal
81629>>>>>>>    End_Function
81630>>>>>>>    
81630>>>>>>>    Function DFGetCurrentColor Returns DWord
81632>>>>>>>        DWord   dwRetVal
81632>>>>>>>        Integer iCurrColor
81632>>>>>>>        
81632>>>>>>>        Get DFCurrent_Color to iCurrColor
81633>>>>>>>        Get DFGetColor iCurrColor to dwRetVal
81634>>>>>>>        
81634>>>>>>>        Function_Return dwRetVal
81635>>>>>>>    End_Function
81636>>>>>>>    
81636>>>>>>>    Procedure DFEndDocument
81638>>>>>>>        Integer iVoid
81638>>>>>>>        Move (WP_EndDocument()) to iVoid
81639>>>>>>>        Send DfSuspendGui False
81640>>>>>>>    End_Procedure
81641>>>>>>>    
81641>>>>>>>    Procedure DFClosePreview
81643>>>>>>>        Integer iVoid
81643>>>>>>>        Move (WP_ClosePreview()) to iVoid
81644>>>>>>>        Send DfSuspendGui False
81645>>>>>>>    End_Procedure
81646>>>>>>>    
81646>>>>>>>    Procedure SetProgressCaption String sCaption
81648>>>>>>>        Integer iVoid
81648>>>>>>>        Move (ToAnsi(sCaption)) to sCaption
81649>>>>>>>        Move (WP_SetProgressCaption(sCaption)) to iVoid
81650>>>>>>>    End_Procedure
81651>>>>>>>    
81651>>>>>>>    Procedure SetReportTitle String sTitle
81653>>>>>>>        Integer iVoid
81653>>>>>>>        Move (ToAnsi(sTitle)) to sTitle
81654>>>>>>>        Move (WP_SetReportTitle(sTitle)) to iVoid
81655>>>>>>>    End_Procedure
81656>>>>>>>    
81656>>>>>>>    Function PreviewYesNoBox String sCaption String sText Returns Integer
81658>>>>>>>        Integer eResult
81658>>>>>>>        Move (ToAnsi(sCaption)) to sCaption
81659>>>>>>>        Move (ToAnsi(sText))    to sText
81660>>>>>>>        Move (WP_DisplayMessageBox(sCaption, sText)) to eResult
81661>>>>>>>        Function_Return eResult
81662>>>>>>>    End_Function
81663>>>>>>>    
81663>>>>>>>    // internal function, used to extract different printer flags ranges based on
81663>>>>>>>    // the print flag integer. These flags use a decimal style of packing information
81663>>>>>>>    // where different printer options (paper, bin, etc) use different ranges and
81663>>>>>>>    // different steps. Everything above iTopVal is removed and everything that is not
81663>>>>>>>    // within the iStep range is removed.
81663>>>>>>>    Function PrintFlagRange Integer iTopVal Integer iStep Returns Integer
81665>>>>>>>        Integer iFgs iFg
81665>>>>>>>        Get DFGetPrintDialogFlags to iFg
81666>>>>>>>        Move (mod(iFg,iTopVal) / iStep * iStep ) to iFg
81667>>>>>>>        Function_Return iFg
81668>>>>>>>    End_Function
81669>>>>>>>    
81669>>>>>>>    Procedure DFSetPrinterPaper Integer ePaperType
81671>>>>>>>        Send DFSetSpecPrintFlag ePaperType
81672>>>>>>>    End_Procedure
81673>>>>>>>    
81673>>>>>>>    Function DFGetPrinterPaper Returns Integer //ePaperType
81675>>>>>>>        Integer ePaperType
81675>>>>>>>        Get PrintFlagRange 500 10 to ePaperType // 10-490 in steps of 10
81676>>>>>>>        Function_Return ePaperType
81677>>>>>>>    End_Function
81678>>>>>>>    
81678>>>>>>>    
81678>>>>>>>    Procedure DFSetPrinterBin Integer eBinType
81680>>>>>>>        Send DFSetSpecPrintFlag eBinType
81681>>>>>>>    End_Procedure
81682>>>>>>>    
81682>>>>>>>    Function DFGetPrinterBin Returns Integer //eBinType
81684>>>>>>>        Integer eBinType
81684>>>>>>>        Get PrintFlagRange 10000 500 to eBinType // 1000-9000 steps 500
81685>>>>>>>        Function_Return eBinType
81686>>>>>>>    End_Function
81687>>>>>>>    
81687>>>>>>>    
81687>>>>>>>    Procedure DFSetPrinterResolution Integer eResType
81689>>>>>>>        Send DFSetSpecPrintFlag eResType
81690>>>>>>>    End_Procedure
81691>>>>>>>    
81691>>>>>>>    Function DFGetPrinterResolution Returns Integer //eResType
81693>>>>>>>        Integer eResType
81693>>>>>>>        Get PrintFlagRange 50000 10000 to eResType // 10000-500000 steps 10000
81694>>>>>>>        Function_Return eResType
81695>>>>>>>    End_Function
81696>>>>>>>    
81696>>>>>>>    
81696>>>>>>>    Procedure DFSetLandscape Boolean bIsLandscape
81698>>>>>>>        Send DFSetSpecPrintFlag (If(bIsLandscape,DF_Landscape,DF_Portrait))
81699>>>>>>>    End_Procedure
81700>>>>>>>    
81700>>>>>>>    Function DFGetLandscape Returns Boolean // bIsLandscape
81702>>>>>>>        Boolean bIsLandscape
81702>>>>>>>        Get DFCheckPrintDialogFlag DF_Landscape to bIsLandscape
81703>>>>>>>        Function_Return bIsLandscape
81704>>>>>>>    End_Function
81705>>>>>>>    
81705>>>>>>>    Function RGBToWPColor Integer iRgb Returns Integer
81707>>>>>>>        Integer iRed iGreen iBlue
81707>>>>>>>        Integer iWPColor
81707>>>>>>>        Move (R_from_rgb(iRGB)) to iRed
81708>>>>>>>        Move (G_from_rgb(iRGB)) to iGreen
81709>>>>>>>        Move (B_from_rgb(iRGB)) to iBlue
81710>>>>>>>        Get DfGetDfColor iRed iGreen iBlue to iWPColor
81711>>>>>>>        Function_Return iWPColor
81712>>>>>>>    End_Function
81713>>>>>>>    
81713>>>>>>>    
81713>>>>>>>    
81713>>>>>>>End_Class
81714>>>>>>>
81714>>>>>>>Global_Variable Integer ghoWinPrint2
81714>>>>>>>
81714>>>>>>>Get Create of desktop U_cWinPrint2 to ghoWinPrint2
81715>>>>>Use Winprint_Commands.pkg  // commands used by this class
Including file: Winprint_Commands.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\Winprint_Commands.pkg)
81715>>>>>>>// Commands used by Winprint (old and new).
81715>>>>>>>Global_Variable Integer WinPrintId  // Provide simple access to global object //JT
81715>>>>>>>Move 0 to WinPrintId
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// With the DFWRITE/LN commands you can use 1-3 arguments
81716>>>>>>>// 1. Not Required = Text
81716>>>>>>>// 2. Not Req. = FonstStyle
81716>>>>>>>// 3. Not Req. = Number of decimals
81716>>>>>>>//    !!! If you want to set decimals you MUST use all 3 arguments
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// With the WRITECOL/LN commands you can use 2-4 arguments
81716>>>>>>>// 1. Required = Text
81716>>>>>>>// 2. Required = Column to write to
81716>>>>>>>// 3. Not Req. = FonstStyle
81716>>>>>>>// 4. Not Req. = Number of decimals
81716>>>>>>>//    !!! If you want to set decimals you MUST use all 4 arguments
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// With the WWRITEPOS/LN commands you can use 2-4 arguments
81716>>>>>>>// 1. Required = Text
81716>>>>>>>// 2. Required = Position to start at from left margin. Depending
81716>>>>>>>//    on if DFCurrent_Metrics is set to CM or INCH
81716>>>>>>>// 3. Not Req. = FonstStyle
81716>>>>>>>// 4. Not Req. = Number of decimals
81716>>>>>>>//    !!! If you want to set decimals you MUST use all 4 arguments
81716>>>>>>>// 5. Max length (0 means no max)
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// Following command sets the font and remains active until
81716>>>>>>>// you change to another font
81716>>>>>>>// 1. Required = A valid Windows font
81716>>>>>>>//
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// With the WFontsize command you can use 1-2 arguments
81716>>>>>>>// 1. Required = Hi
81716>>>>>>>// 2. Not Req. = Wi
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// Following commands sets the margins of your document
81716>>>>>>>// 1. Required = Margin in CM or INCH depending in metrics
81716>>>>>>>//
81716>>>>>>>// You can also use the procedure DFSetMargins to set all
81716>>>>>>>// margins at the same time.
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFBeginHeader creates a headertype of your choise
81716>>>>>>>// 1. Required = HeaderType
81716>>>>>>>// 2. Not Req. = Headernumber
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFEndHeader endns a header section. And prints the header.
81716>>>>>>>// Headers can NOT be nested
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFHeaderPos
81716>>>>>>>// 1. Required = Header position
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFHeaderFrame
81716>>>>>>>// 1. Required = Header frame type
81716>>>>>>>// 2. Not Req. = Weight of line
81716>>>>>>>// 3. Not Req. = line color        //RGB_??
81716>>>>>>>// 4. Not Reg. = Fill color        //RGB_??
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>// DFHeaderMargin (JvH)
81716>>>>>>>// 1. Required = Margin type
81716>>>>>>>//   HM_TOPOUTER    = 0   // margin above the top of the header's frame
81716>>>>>>>//   HM_TOPINNER    = 1   // margin below the top of the header's frame
81716>>>>>>>//   HM_BOTTOMINNER = 2   // margin above the bottom of the header's frame
81716>>>>>>>//   HM_BOTTOMOUTER = 3   // margin below the bottom of the header's frame
81716>>>>>>>// 2. Required = Size of margin
81716>>>>>>>//
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFHeaderWrap
81716>>>>>>>// 1. Required = On/Off
81716>>>>>>>// HDR_NOWRAP = 0
81716>>>>>>>// HDR_WRAP   = 1
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFHeaderLineCheck
81716>>>>>>>// 1. Required = Number of lines to check. Using last settings of font
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>// DFWriteBMP
81716>>>>>>>// 1. Required = Filename and path
81716>>>>>>>// 2. Required = Vertical start
81716>>>>>>>// 3. Required = Horizontal start
81716>>>>>>>// 4. Required = Height
81716>>>>>>>// 5. Required = Width
81716>>>>>>>// 6. Not Req. = Set current position or not //DFGR_NOPOS, DFGR_SETPOS
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFWriteEllip
81716>>>>>>>// 1. Required = Vertical start
81716>>>>>>>// 2. Required = Horizontal start
81716>>>>>>>// 3. Required = Height
81716>>>>>>>// 4. Required = Width
81716>>>>>>>// 5. Not Req. = Boarder/line color    //RGB_??
81716>>>>>>>// 6. Not Req. = Weight of line
81716>>>>>>>// 7. Not Req. = Wrap to next page     //DFGR_NOWRAP,DFGR_WRAP
81716>>>>>>>// 8. Not Req. = Fill color            //RGB_??
81716>>>>>>>// 9. Not Req. = Set current position or not //DFGR_NOPOS, DFGR_SETPOS
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFWriteRect
81716>>>>>>>// 1. Required = Vertical start
81716>>>>>>>// 2. Required = Horizontal start
81716>>>>>>>// 3. Required = Height
81716>>>>>>>// 4. Required = Width
81716>>>>>>>// 5. Not Req. = Boarder/line color    //RGB_??
81716>>>>>>>// 6. Not Req. = Weight of line
81716>>>>>>>// 7. Not Req. = Wrap to next page     //DFGR_NOWRAP,DFGR_WRAP
81716>>>>>>>// 8. Not Req. = Fill color            //RGB_??
81716>>>>>>>// 9. Not Req. = Set current position or not //DFGR_NOPOS, DFGR_SETPOS
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFLineCheck
81716>>>>>>>// 1. Required = Number of lines to check. Using last settings of font
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFCreateDiagram
81716>>>>>>>// 1. Required = Type of diagram //DFGR_??
81716>>>>>>>// 2. Required = Type of effect  //DFGR_??
81716>>>>>>>// 3. Required = Height
81716>>>>>>>// 4. Required = Width
81716>>>>>>>// 5. Optional = Display XY Axis (true/false), valid ONLY for bar charts
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFWriteDiagram
81716>>>>>>>// 1. Required = Y-Position using current metrics //Constant can be used !!
81716>>>>>>>// 2. Required = X-Position using current metrics
81716>>>>>>>// 3. Optional = Set current position or not //DFGR_NOPOS, DFGR_SETPOS
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFBeginDiagram
81716>>>>>>>// 1. Required = Type of diagram //DFGR_??
81716>>>>>>>// 2. Required = Type of effect  //DFGR_??
81716>>>>>>>// 3. Required = Y-Position using current metrics //Constant can be used !!
81716>>>>>>>// 4. Required = X-Position using current metrics
81716>>>>>>>// 5. Required = Height
81716>>>>>>>// 6. Required = Width
81716>>>>>>>// 7. Optional = Display XY Axis (true/false), valid ONLY for bar charts
81716>>>>>>>// 8. Optional = Set current position or not //DFGR_NOPOS, DFGR_SETPOS
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFDiagram_Item
81716>>>>>>>// 1. Required = Value
81716>>>>>>>// 2. Required = Label
81716>>>>>>>// 3. Not Req. = No value, Value or percent DFGR_NOVAL,DFGR_VAL,DFGR_PER
81716>>>>>>>// 4. Not Req. = Number of decimals
81716>>>>>>>// 5. Not Req. = Move slice in pie     //DFGR_IN, DFGR_OUT
81716>>>>>>>// 6. Not Reg. = Fill color            //RGB_??
81716>>>>>>>// 8. Not Req. = Boarder color         //RGB_??
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFEndDiagram
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFDiagramLabel
81716>>>>>>>// 1. Required = Label text (top)
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFDiagramXLabel
81716>>>>>>>// 1. Required = Label text (top)
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFDiagramYLabel
81716>>>>>>>// 1. Required    = Label text (top)
81716>>>>>>>// 2. Orientation = Vertical/Horizontal
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFWriteXYLine
81716>>>>>>>// 1. Required = Vertical start
81716>>>>>>>// 2. Required = Horizontal start
81716>>>>>>>// 3. Required = Vertical stopp
81716>>>>>>>// 4. Required = Horizontal stopp
81716>>>>>>>// 5. Not Req. = Boarder/line color    //RGB_??
81716>>>>>>>// 6. Not Req. = Weight of line
81716>>>>>>>// 7. Not Req. = Wrap to next page     //DFGR_NOWRAP,DFGR_WRAP
81716>>>>>>>// 8. Not Req. = Set current position or not //DFGR_NOPOS, DFGR_SETPOS
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFWriteLine
81716>>>>>>>// 1. Required = Vertical start
81716>>>>>>>// 2. Required = Horizontal start
81716>>>>>>>// 3. Required = Length
81716>>>>>>>// 4. Not Req. = Horizontal/Vertical   //RGB_HORI RGB_VERT
81716>>>>>>>// 5. Not Req. = Boarder/line color    //RGB_??
81716>>>>>>>// 6. Not Req. = Weight of line
81716>>>>>>>// 7. Not Req. = Set current position or not //DFGR_NOPOS, DFGR_SETPOS
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>>>// DFSetNumberOfCopies
81716>>>>>>>// 1. Required = Number of copies
81716>>>>>>>//
81716>>>>>>>
81716>>>>>>>
81716>>>>>
81716>>>>>Class cWinReport2 is a BasicReport
81717>>>>>    
81717>>>>>    Procedure Construct_Object
81719>>>>>        Forward Send construct_object
81721>>>>>        
81721>>>>>        Date Today
81721>>>>>        Sysdate Today
81722>>>>>        
81722>>>>>        // should use built in DF function CurrentDateTime()
81722>>>>>        Property Date  RptToday    Today
81723>>>>>        
81723>>>>>        Object RptTotal is an Array
81725>>>>>        End_Object
81726>>>>>        
81726>>>>>        // If true, report is output upon completion. Either preview
81726>>>>>        // or printer depending on output_device_mode
81726>>>>>        Property Boolean AutoOutput_State True
81727>>>>>        
81727>>>>>        // When a new page is created (DFNew_Page) and the number
81727>>>>>        // of columns is not passed, this is used.
81727>>>>>        Property Integer Print_Columns 0
81728>>>>>        
81728>>>>>        // This determines if a DFNew_Page should be executed when the
81728>>>>>        // report starts. In some rare cases, you would not want this to
81728>>>>>        // occur until a subheader
81728>>>>>        Property Boolean AutoNew_Page_State True
81729>>>>>        
81729>>>>>        // Output device (print or preview). Normally this is delegated to
81729>>>>>        // the report view.
81729>>>>>        //
81729>>>>>        
81729>>>>>        Property Integer Private.Output_Device_Mode PRINT_TO_UNDEFINED
81730>>>>>        
81730>>>>>        Property Handle phoWinPrint  ghoWinPrint2 // the report engine to use.
81731>>>>>        
81731>>>>>        // For now this is for testing.
81731>>>>>        Property Boolean pbModalViewer False
81732>>>>>        
81732>>>>>        Property Boolean pbMultiReports False
81733>>>>>        
81733>>>>>        Property Boolean pbFirstPagePrinted False
81734>>>>>        
81734>>>>>    End_Procedure
81735>>>>>    
81735>>>>>    // returns the current status of Winprint Document object. dsNotStarted, dsStarted, dsFinished
81735>>>>>    // note that the status can reflect a status from a different report. The winprint object is global.
81735>>>>>    Function DocumentStatus Returns Boolean
81737>>>>>        Integer iStatus
81737>>>>>        Get DocumentStatus of (phoWinprint(Self)) to iStatus
81738>>>>>        Function_Return iStatus
81739>>>>>    End_Function
81740>>>>>    
81740>>>>>    Function IsViewerActive Returns Boolean
81742>>>>>        Boolean bIsActive
81742>>>>>        Get IsViewerActive of (phoWinPrint(Self)) to bIsActive
81743>>>>>        Function_Return bIsActive
81744>>>>>    End_Function
81745>>>>>    
81745>>>>>    Function IsPrinterValid Returns Boolean
81747>>>>>        Function_Return (WP_IsPrinterValid()<>0)
81748>>>>>    End_Function
81749>>>>>    
81749>>>>>    Function ArePrintersInstalled Returns Boolean
81751>>>>>        Function_Return (WP_ArePrintersInstalled()<>0)
81752>>>>>    End_Function
81753>>>>>    
81753>>>>>    
81753>>>>>    // All subtotal commands use the outer main report. This makes it easier to keep
81753>>>>>    // track of these numbers
81753>>>>>    
81753>>>>>    Procedure Add_SubTotal Integer iCounter Number nData
81755>>>>>        Number nValue
81755>>>>>        Integer iObj
81755>>>>>        Move (RptTotal(Main_Report_Id(Self))) to iObj
81756>>>>>        Get Number_Value of iObj iCounter to nValue
81757>>>>>        Add nData to nValue
81758>>>>>        Set Array_Value of iObj iCounter to nValue
81759>>>>>    End_Procedure
81760>>>>>    
81760>>>>>    Procedure Clr_SubTotal Integer iCounter
81762>>>>>        Set Array_Value of (RptTotal(Main_Report_Id(Self))) iCounter to 0
81763>>>>>    End_Procedure
81764>>>>>    
81764>>>>>    Procedure Clr_AllSubTotals
81766>>>>>        Send Delete_Data of (RptTotal(Main_Report_Id(Self)))
81767>>>>>    End_Procedure
81768>>>>>    
81768>>>>>    Function Sum_SubTotal Integer iTotal Returns Number
81770>>>>>        Number nRetVal
81770>>>>>        Get Number_Value of (RptTotal(Main_Report_Id(Self))) iTotal to nRetVal
81771>>>>>        Function_Return nRetVal
81772>>>>>    End_Function
81773>>>>>    
81773>>>>>    //Return sub-total and clear accumulator
81773>>>>>    //
81773>>>>>    Function SubTotal Integer iTotal Returns Number
81775>>>>>        Number nRetVal
81775>>>>>        Get Sum_SubTotal  iTotal to nRetVal
81776>>>>>        Send Clr_SubTotal iTotal
81777>>>>>        Function_Return nRetVal
81778>>>>>    End_Function
81779>>>>>    
81779>>>>>    
81779>>>>>    // Note: Cols is optional. If no argument is passed it will use
81779>>>>>    //       the object's property Print_Columns (0 by default)
81779>>>>>    //
81779>>>>>    Procedure DFNew_Page Integer Cols
81781>>>>>        Integer PageNumber Columns
81781>>>>>        Boolean bFirstPagePrinted
81781>>>>>        // If no args passed used default setting
81781>>>>>        If (Num_Arguments=0) ;            Move (Print_Columns(Main_Report_id(Self))) to Columns
81784>>>>>        Else ;            Move Cols to Columns
81786>>>>>        Set Page_Feed   to -2   // No FormFeed
81787>>>>>        If (Child_Rpt_State(Self)) ;            Send DFNew_Page of (Main_Report_Id(Self)) Columns
81790>>>>>        Else Begin
81791>>>>>            // we only want to print report_header once. When report starts
81791>>>>>            // this is set true, after the first print it is false. You can set
81791>>>>>            // this to true before and explicit dfNew_page to force a header
81791>>>>>            Get pbFirstPagePrinted to bFirstPagePrinted
81792>>>>>            Get  DFNewPage of (phoWinPrint(Self)) Columns to PageNumber
81793>>>>>            If (PageNumber<>0) Begin // if 0, it failed
81795>>>>>                Set No_PageCheck_State to True
81796>>>>>                
81796>>>>>                //Top section
81796>>>>>                Send Page_Top
81797>>>>>                If not bFirstPagePrinted ;                    Send Report_Header
81800>>>>>                Send Page_Header
81801>>>>>                Send Page_Title
81802>>>>>                
81802>>>>>                Set New_Page_State to False
81803>>>>>                Set Page_End_State to False
81804>>>>>                Set No_PageCheck_State to False        // No longer Paging
81805>>>>>                Set pbFirstPagePrinted to True
81806>>>>>            End
81806>>>>>>
81806>>>>>        End
81806>>>>>>
81806>>>>>        
81806>>>>>        // Footer section
81806>>>>>        //
81806>>>>>        // DO NOT CHANGE THE ORDER OF BOTTOM SECTIONS !!!!!
81806>>>>>        //
81806>>>>>        
81806>>>>>        Send Page_Bottom
81807>>>>>        
81807>>>>>        // in WinPrint it is not possible to replace Page_Footer
81807>>>>>        // with Report_Footer. If you use Report_Footer you will
81807>>>>>        // have both Page_Footer and Report_Footer
81807>>>>>        //
81807>>>>>        //If LastTime eq 0 Send Page_Footer
81807>>>>>        //else             Send Report_Footer
81807>>>>>        
81807>>>>>        Send Page_Footer
81808>>>>>        Send Page_Total
81809>>>>>    End_Procedure
81810>>>>>    
81810>>>>>    Procedure Ending_Main_Report
81812>>>>>        Boolean bCancel bMultiReports
81812>>>>>        
81812>>>>>        Get Cancelled_state to bCancel
81813>>>>>        Get pbMultiReports to bMultiReports
81814>>>>>        
81814>>>>>        Forward Send Ending_Main_Report
81816>>>>>        
81816>>>>>        If bCancel Begin
81818>>>>>            Send DFEndDocument
81819>>>>>            Send DFClearDoc // this will also close the previewer
81820>>>>>        End
81820>>>>>>
81820>>>>>        Else Begin
81821>>>>>            Send Report_Footer
81822>>>>>            
81822>>>>>            // if multi-reports, we don't do an end of report yet. The programmer must
81822>>>>>            // manually end the report by sending EndMultiReport
81822>>>>>            If (not(bMultiReports)) Begin
81824>>>>>                Send EndWinPrintReport
81825>>>>>            End
81825>>>>>>
81825>>>>>            
81825>>>>>        End
81825>>>>>>
81825>>>>>        
81825>>>>>    End_Procedure
81826>>>>>    
81826>>>>>    // This must get called when you are running multiple reports (pbMultiReport).
81826>>>>>    // Send this when the last report is complete.
81826>>>>>    Procedure EndMultiReport
81828>>>>>        Send EndWinPrintReport
81829>>>>>    End_Procedure
81830>>>>>    
81830>>>>>    
81830>>>>>    Procedure EndWinPrintReport
81832>>>>>        Boolean bAutoOutput
81832>>>>>        Integer iStatus eMode
81832>>>>>        Get DocumentStatus to iStatus
81833>>>>>        If (iStatus<>dsStarted) ;            Procedure_Return
81836>>>>>        
81836>>>>>        // this tells winprint that the report is complete
81836>>>>>        Send DFEndDocument
81837>>>>>        // if auto-output we print or display automatically.
81837>>>>>        // for winprint2, if in preview mode you must do this so the previewer can enter
81837>>>>>        // a modal state (which it may or may not need to do).
81837>>>>>        Get AutoOutput_state to bAutoOutput
81838>>>>>        Get Output_device_mode to eMode
81839>>>>>        If (bAutoOutput or eMode=PRINT_TO_WINDOW) Begin
81841>>>>>            Send PrintReport
81842>>>>>            // if auto output, we assume that you are done when it is all over
81842>>>>>            // we only can do this with the modal viewer
81842>>>>>            If (bAutoOutput and pbModalViewer(Self)) Begin
81844>>>>>                Send DFClearDoc
81845>>>>>            End
81845>>>>>>
81845>>>>>        End
81845>>>>>>
81845>>>>>        
81845>>>>>    End_Procedure
81846>>>>>    
81846>>>>>    
81846>>>>>    Function Setup_Report Returns Integer
81848>>>>>        Integer iErr iStatus eMode
81848>>>>>        Boolean bActiveViewer bChildReport bMultiReports bOk
81848>>>>>        
81848>>>>>        Get Child_rpt_state to bChildReport
81849>>>>>        
81849>>>>>        If not bChildReport Begin
81851>>>>>            
81851>>>>>            // This makes sure that we are pointing to the new winprint2 engine object.
81851>>>>>            // normally this will be the new winprint, but it can be redirected
81851>>>>>            Get phoWinPrint to WinPrintID
81852>>>>>            
81852>>>>>            // winprint must have installed printer. If not installed, generate error and stop the report
81852>>>>>            Get ArePrintersInstalled to bOk
81853>>>>>            If not bOk Begin
81855>>>>>                Error DFERR_WINPRINT C_$NoInstalledPrinters
81856>>>>>>
81856>>>>>                Function_Return 1
81857>>>>>            End
81857>>>>>>
81857>>>>>            
81857>>>>>            // check if selected printer is valid. If not, generate error and stop the report
81857>>>>>            Get IsPrinterValid to bOk
81858>>>>>            If not bOk Begin
81860>>>>>                Error DFERR_WINPRINT DFPrintError936    // Could not select a valid printer
81861>>>>>>
81861>>>>>                Function_Return 1
81862>>>>>            End
81862>>>>>>
81862>>>>>            
81862>>>>>            // make sure it is ok to start a new report but try to be smart about it.
81862>>>>>            // if a report is active (dsstarted or dsFinished) check to see if it is
81862>>>>>            // finished w/ no viewer. If so, assume the user closed the report and is done
81862>>>>>            // so just clear the report. If a viewer is present, declare an error.
81862>>>>>            Get DocumentStatus to iStatus
81863>>>>>            Get pbMultiReports to bMultiReports
81864>>>>>            // multi-report only in-progress is multi and it is started
81864>>>>>            Move (bMultiReports and iStatus=dsStarted) to bMultiReports
81865>>>>>            If not bMultiReports Begin
81867>>>>>                If (iStatus<>dsNotStarted) Begin
81869>>>>>                    Get IsViewerActive to bActiveViewer
81870>>>>>                    If (iStatus=dsFinished and not(bActiveViewer)) Begin
81872>>>>>                        Send DfClearDoc
81873>>>>>                    End
81873>>>>>>
81873>>>>>                    Else Begin
81874>>>>>                        Error DFERR_WINPRINT DFPrintError967
81875>>>>>>
81875>>>>>                        Function_Return 1
81876>>>>>                    End
81876>>>>>>
81876>>>>>                End
81876>>>>>>
81876>>>>>                
81876>>>>>                // all new reports by default allow printing from viewer and they have the print job set up when you select print
81876>>>>>                // if you need to change these defaults, you can change these inside of Starting_main_report
81876>>>>>                // We only do this with non-multi-reports.
81876>>>>>                Send DFSetPrintDlgInPreview      True
81877>>>>>                Send DFSetEnablePrintFromPreview True
81878>>>>>                
81878>>>>>            End
81878>>>>>>
81878>>>>>            
81878>>>>>            // In the new winprint, this message is not needed and is a stub. For
81878>>>>>            // now it is in here for compatibility purposes
81878>>>>>            //You MUST always start a new report with this procedure
81878>>>>>            Send DFZeroCounters of (phoWinPrint(Self))
81879>>>>>            Send Clr_AllSubTotals
81880>>>>>            
81880>>>>>        End
81880>>>>>>
81880>>>>>        
81880>>>>>        Forward Get Setup_report to iErr
81882>>>>>        
81882>>>>>        If (iErr=0) Begin
81884>>>>>            If not bChildReport Begin
81886>>>>>                // if part of a multi-report we don't do a new doc
81886>>>>>                If not bMultiReports Begin
81888>>>>>                    Get Output_Device_Mode to eMode
81889>>>>>                    Send DFNewDoc of (phoWinPrint(Self))  (eMode = PRINT_TO_WINDOW) // pass True of display while printing
81890>>>>>                End
81890>>>>>>
81890>>>>>                // Do new page if not part of a multi-report and we say don't do a new page
81890>>>>>                If (not(bMultiReports) or AutoNew_Page_State(Self)) Begin
81892>>>>>                    Set pbFirstPagePrinted to False // tells new page that this is the first time for this report
81893>>>>>                    Send DFNew_page
81894>>>>>                End
81894>>>>>>
81894>>>>>            End
81894>>>>>>
81894>>>>>        End
81894>>>>>>
81894>>>>>        Function_Return iErr
81895>>>>>    End_Function
81896>>>>>    
81896>>>>>    
81896>>>>>    
81896>>>>>    // Cancel RO behavior - there is no device to close
81896>>>>>    //
81896>>>>>    Procedure Close_Output_Device
81898>>>>>    End_Procedure
81899>>>>>    
81899>>>>>    // Cancel RO Behavior
81899>>>>>    //
81899>>>>>    Procedure Initialize_Output_Device
81901>>>>>    End_Procedure
81902>>>>>    
81902>>>>>    
81902>>>>>    Function Output_Device_Mode Returns Integer
81904>>>>>        Integer hoId
81904>>>>>        String DevMode
81904>>>>>        Get Private.Output_Device_Mode to DevMode
81905>>>>>        If (DevMode=PRINT_TO_UNDEFINED) Begin
81907>>>>>            Get Report_View_Id to hoId
81908>>>>>            If hoID ;                Get OutPut_Device_Mode of hoID to DevMode
81911>>>>>            If (DevMode=PRINT_TO_UNDEFINED) ;                Move PRINT_TO_WINDOW to DevMode
81914>>>>>        End
81914>>>>>>
81914>>>>>        Function_Return DevMode
81915>>>>>    End_Function
81916>>>>>    
81916>>>>>    Procedure Set Output_Device_Mode Integer DevMode
81918>>>>>        Set Private.Output_Device_Mode to DevMode
81919>>>>>    End_Procedure
81920>>>>>    
81920>>>>>    // displays a metric ruler in .5 increments. This can be
81920>>>>>    // sent to make it easy to see how fields and labels should
81920>>>>>    // be moved for alignment.
81920>>>>>    //
81920>>>>>    Procedure ShowRuler
81922>>>>>        Integer i
81922>>>>>        Number n
81922>>>>>        For i from 0 to 30
81928>>>>>>
81928>>>>>            Send DFWritePos of (phoWinPrint(Self)) (String(i)) FONT_DEFAULT i -1 0
81929>>>>>            Move (i+.5) to n
81930>>>>>            Send DFWritePos of (phoWinPrint(Self)) "." FONT_DEFAULT n -1 0
81931>>>>>        Loop
81932>>>>>>
81932>>>>>        Send DFWriteLn of (phoWinPrint(Self)) ''  FONT_DEFAULT FONT_DEFAULT -1
81933>>>>>    End_Procedure
81934>>>>>    
81934>>>>>    // status panel related agumentations to handle the auto-previewer
81934>>>>>    
81934>>>>>    Procedure Update_Status String sVal
81936>>>>>        Integer eMode
81936>>>>>        Get Output_device_mode to eMode
81937>>>>>        If (eMode=PRINT_TO_WINDOW) Begin
81939>>>>>            Send SetProgressCaption  of (phoWinPrint(Self)) sVal
81940>>>>>        End
81940>>>>>>
81940>>>>>        Else Begin
81941>>>>>            Forward Send Update_Status sVal
81943>>>>>        End
81943>>>>>>
81943>>>>>    End_Procedure
81944>>>>>    
81944>>>>>    Procedure Start_Status
81946>>>>>        Integer eMode
81946>>>>>        String sTitle sCaption
81946>>>>>        Get Output_device_mode to eMode
81947>>>>>        If (eMode=PRINT_TO_WINDOW) Begin
81949>>>>>            Get Report_Caption to sCaption
81950>>>>>            Get Report_Title to sTitle
81951>>>>>            If (sTitle<>"" and sCaption<>"") Begin
81953>>>>>                Move ( sCaption- ":" * sTitle) to sTitle
81954>>>>>            End
81954>>>>>>
81954>>>>>            Else Begin
81955>>>>>                Move (sCaption - sTitle) to sTitle
81956>>>>>            End
81956>>>>>>
81956>>>>>            Send SetReportTitle of (phoWinPrint(Self)) sTitle
81957>>>>>        End
81957>>>>>>
81957>>>>>        Else Begin
81958>>>>>            Forward Send Start_status
81960>>>>>        End
81960>>>>>>
81960>>>>>    End_Procedure
81961>>>>>    
81961>>>>>    Procedure Resume_Status
81963>>>>>        Integer eMode
81963>>>>>        Get Output_device_mode to eMode
81964>>>>>        If (eMode=PRINT_TO_WINDOW) Begin
81966>>>>>            Send DfPreviewNoWait of (phoWinPrint(Self))
81967>>>>>        End
81967>>>>>>
81967>>>>>        Else Begin
81968>>>>>            Forward Send Resume_Status
81970>>>>>        End
81970>>>>>>
81970>>>>>    End_Procedure
81971>>>>>    
81971>>>>>    Procedure End_Status
81973>>>>>        Integer eMode
81973>>>>>        Get Output_device_mode to eMode
81974>>>>>        If (error_processing_state(Self)) Begin
81976>>>>>            Send DFClosePreview
81977>>>>>        End
81977>>>>>>
81977>>>>>        If (eMode=PRINT_TO_WINDOW) Begin
81979>>>>>        End
81979>>>>>>
81979>>>>>        Else Begin
81980>>>>>            Forward Send End_Status
81982>>>>>        End
81982>>>>>>
81982>>>>>    End_Procedure
81983>>>>>    
81983>>>>>    Function Report_Interrupt Returns Integer
81985>>>>>        Integer eStat
81985>>>>>        String sMess
81985>>>>>        Boolean bActiveViewer
81985>>>>>        Get IsViewerActive to bActiveViewer
81986>>>>>        If (Error_Check_State(Self)) Begin
81988>>>>>            Move C_$AnErrorWishToCancel to sMess
81989>>>>>        End
81989>>>>>>
81989>>>>>        Else Begin
81990>>>>>            Move  C_$CancelThisReport to sMess
81991>>>>>        End
81991>>>>>>
81991>>>>>        If bActiveViewer Begin
81993>>>>>            Get PreviewYesNoBox of (phoWinPrint(Self)) C_$ReportInterrupt sMess to eStat
81994>>>>>        End
81994>>>>>>
81994>>>>>        Else Begin
81995>>>>>            Move (YesNo_Box(sMess, C_$ReportInterrupt, MB_DEFBUTTON1)) to eStat
81996>>>>>        End
81996>>>>>>
81996>>>>>        
81996>>>>>        Function_Return (eStat=MBR_YES)
81997>>>>>        
81997>>>>>    End_Function
81998>>>>>    
81998>>>>>    Function Test_KeyPressed Returns Integer
82000>>>>>        Boolean bStop bError bActiveViewer
82000>>>>>        Integer eMode
82000>>>>>        // winreport will do this also, but this makes sure that this gets called
82000>>>>>        // for each body loop -- even if the body loop prints nothing
82000>>>>>        Send PumpMsgQueue of (phoWinPrint(Self)) // permit painting
82001>>>>>        Get IsViewerActive to bActiveViewer
82002>>>>>        Get Output_device_mode to eMode
82003>>>>>        If bActiveViewer Begin
82005>>>>>            Get ViewerWantsToClose of (phoWinPrint(Self)) to bStop
82006>>>>>            Get Error_Check_State to bError
82007>>>>>            If (bStop or bError) Begin
82009>>>>>                Get Report_Interrupt to bStop
82010>>>>>            End
82010>>>>>>
82010>>>>>        End
82010>>>>>>
82010>>>>>        Else Begin
82011>>>>>            Forward Get Test_KeyPressed to bStop
82013>>>>>            If (eMode=PRINT_TO_WINDOW and not(bStop)) Begin
82015>>>>>                Send DfPreviewNoWait
82016>>>>>            End
82016>>>>>>
82016>>>>>        End
82016>>>>>>
82016>>>>>        
82016>>>>>        Function_Return bStop
82017>>>>>    End_Function
82018>>>>>    
82018>>>>>    Procedure OnClosingView
82020>>>>>        Send DFClearDoc
82021>>>>>    End_Procedure
82022>>>>>    
82022>>>>>    
82022>>>>>    // Attempt to make this as intuitive as possible. You cannot invoke this when a
82022>>>>>    // report is active. If a report is not finished, you cannot do this.
82022>>>>>    // If a report is finsihed it may or may not have a viewer present.
82022>>>>>    // If a viewer is not present, we will clear the exising report (making the assumption
82022>>>>>    // that a modeless viewer was closed and the report will not be invoked again). If a viewer
82022>>>>>    // is active, we will pass this through to the winprint object which will show an error
82022>>>>>    
82022>>>>>    Function DFPrintSetupDialog Returns Boolean// invoke printer setup dialog
82024>>>>>        Integer iStatus
82024>>>>>        Boolean bActiveViewer bOk
82024>>>>>        // we must have printers installed for this to work
82024>>>>>        Get ArePrintersInstalled to bOk
82025>>>>>        If not bOk Begin
82027>>>>>            Error DFERR_WINPRINT C_$NoInstalledPrinters
82028>>>>>>
82028>>>>>        End
82028>>>>>>
82028>>>>>        Else Begin
82029>>>>>            Get DocumentStatus to iStatus
82030>>>>>            If (iStatus=dsFinished) Begin
82032>>>>>                Get IsViewerActive to bActiveViewer
82033>>>>>                If not bActiveViewer Begin
82035>>>>>                    Send DfClearDoc
82036>>>>>                End
82036>>>>>>
82036>>>>>            End
82036>>>>>>
82036>>>>>            // the winprint object will generate an error if the status is not dsNotStarted.
82036>>>>>            // we want those errors
82036>>>>>            Get DFPrintSetupDialog of (phoWinPrint(Self)) to bOk
82037>>>>>        End
82037>>>>>>
82037>>>>>        Function_Return bOk
82038>>>>>    End_Function
82039>>>>>    
82039>>>>>    // It is better to use DFPrintSetupDialog which tells you if the dialog was canceled
82039>>>>>    Procedure DFPrintSetup // invoke printer setup dialog
82041>>>>>        Boolean bOk
82041>>>>>        Get DFPrintSetupDialog to bOk
82042>>>>>    End_Procedure
82043>>>>>    
82043>>>>>    Procedure DFClearDoc // clear document, remove viewer
82045>>>>>        Send DFClearDoc of (phoWinPrint(Self))
82046>>>>>    End_Procedure
82047>>>>>    
82047>>>>>    Procedure DFEndDocument // tell winprint that the report is complete
82049>>>>>        Send DfEndDocument of (phoWinPrint(Self))
82050>>>>>    End_Procedure
82051>>>>>    
82051>>>>>    Procedure DFClosePreview //close the previewer, does not clear the document
82053>>>>>        Send DfClosePreview of (phoWinPrint(Self))
82054>>>>>    End_Procedure
82055>>>>>    
82055>>>>>    Procedure DFPrintDialog // popup print job dialog
82057>>>>>        Send DFPrintDialog of (phoWinPrint(Self))
82058>>>>>    End_Procedure
82059>>>>>    
82059>>>>>    Procedure DFPrint // print with printer dialog
82061>>>>>        Send DFPrint of (phoWinPrint(Self))
82062>>>>>    End_Procedure
82063>>>>>    
82063>>>>>    Procedure DFPrintDoc // print without printer dialog
82065>>>>>        Send DFPrintDoc of (phoWinPrint(Self))
82066>>>>>    End_Procedure
82067>>>>>    
82067>>>>>    Procedure DFPreviewWait // invoke previewer in modal mode
82069>>>>>        Send DFPreviewWait of (phoWinPrint(Self))
82070>>>>>    End_Procedure
82071>>>>>    
82071>>>>>    Procedure DFPreviewNoWait // invoke previwer in modeless mode
82073>>>>>        Send DFPreviewNoWait of (phoWinPrint(Self))
82074>>>>>    End_Procedure
82075>>>>>    
82075>>>>>    Procedure DFPreview // invokde previewer based on pbModalViewer property
82077>>>>>        Boolean bModalViewer
82077>>>>>        Get pbModalViewer to bModalViewer
82078>>>>>        If bModalViewer Begin
82080>>>>>            Send DFPreviewWait
82081>>>>>        End
82081>>>>>>
82081>>>>>        Else Begin
82082>>>>>            Send DFPreviewNoWait
82083>>>>>        End
82083>>>>>>
82083>>>>>    End_Procedure
82084>>>>>    
82084>>>>>    // Print report to appropriate device (printer, preview) based
82084>>>>>    // on output_device_mode
82084>>>>>    //
82084>>>>>    Procedure PrintReport
82086>>>>>        Integer eMode
82086>>>>>        Get OutPut_Device_Mode to eMode
82087>>>>>        If ((eMode=PRINT_TO_WINDOW) or (eMode=DEFERRED_PRINT_TO_WINDOW)) Begin
82089>>>>>            Send DFPreview
82090>>>>>        End
82090>>>>>>
82090>>>>>        Else If (eMode=PRINT_TO_PRINTER_NO_DIALOG) Begin
82093>>>>>            Send DFPrintDoc // print, no print job dialog
82094>>>>>        End
82094>>>>>>
82094>>>>>        Else Begin // (eMode=PRINT_TO_PRINTER)
82095>>>>>            Send DFPrint // print with print job dialog
82096>>>>>        End
82096>>>>>>
82096>>>>>    End_Procedure
82097>>>>>    
82097>>>>>    
82097>>>>>    Procedure DFSetPrinterPaper Integer ePaperType
82099>>>>>        Send DFSetPrinterPaper of (phoWinPrint(Self)) ePaperType
82100>>>>>    End_Procedure
82101>>>>>    
82101>>>>>    Function DFGetPrinterPaper Returns Integer //ePaperType
82103>>>>>        Integer ePaperType
82103>>>>>        Get DFGetPrinterPaper of (phoWinPrint(Self)) to ePaperType
82104>>>>>        Function_Return ePaperType
82105>>>>>    End_Function
82106>>>>>    
82106>>>>>    
82106>>>>>    Procedure DFSetPrinterBin Integer eBinType
82108>>>>>        Send DFSetPrinterBin of (phoWinPrint(Self)) eBinType
82109>>>>>    End_Procedure
82110>>>>>    
82110>>>>>    Function DFGetPrinterBin Returns Integer //eBinType
82112>>>>>        Integer eBinType
82112>>>>>        Get DFGetPrinterBin of (phoWinPrint(Self)) to eBinType
82113>>>>>        Function_Return eBinType
82114>>>>>    End_Function
82115>>>>>    
82115>>>>>    
82115>>>>>    Procedure DFSetPrinterResolution Integer eResType
82117>>>>>        Send DFSetPrinterResolution of (phoWinPrint(Self)) eResType
82118>>>>>    End_Procedure
82119>>>>>    
82119>>>>>    Function DFGetPrinterResolution Returns Integer //eResType
82121>>>>>        Boolean eResType
82121>>>>>        Get DFGetPrinterResolution of (phoWinPrint(Self)) to eResType
82122>>>>>        Function_Return eResType
82123>>>>>    End_Function
82124>>>>>    
82124>>>>>    
82124>>>>>    Procedure DFSetLandscape Boolean bIsLandscape
82126>>>>>        Send DFSetLandscape of (phoWinPrint(Self)) bIsLandscape
82127>>>>>    End_Procedure
82128>>>>>    
82128>>>>>    Function DFGetLandscape Returns Boolean // bIsLandscape
82130>>>>>        Boolean bIsLandscape
82130>>>>>        Get DFGetLandscape of (phoWinPrint(Self)) to bIsLandscape
82131>>>>>        Function_Return bIsLandscape
82132>>>>>    End_Function
82133>>>>>    
82133>>>>>    Procedure DFSetMetrics Integer eType
82135>>>>>        Send DFSetMetrics of (phoWinPrint(Self)) eType
82136>>>>>    End_Procedure
82137>>>>>    
82137>>>>>    Function DFGetMetrics Returns Integer
82139>>>>>        Integer eType
82139>>>>>        Get DFGetMetrics of (phoWinPrint(Self)) to eType
82140>>>>>        Function_Return eType
82141>>>>>    End_Function
82142>>>>>    
82142>>>>>    
82142>>>>>    Procedure DFSetPrintDlgInPreview Boolean bShowDialog
82144>>>>>        Set PrintDlgInPreview of (phoWinPrint(Self)) to bShowDialog
82145>>>>>    End_Procedure
82146>>>>>    
82146>>>>>    Function DFGetPrintDlgInPreview Returns Boolean
82148>>>>>        Boolean bShowDialog
82148>>>>>        Get PrintDlgInPreview of (phoWinPrint(Self)) to bShowDialog
82149>>>>>        Function_Return bShowDialog
82150>>>>>    End_Function
82151>>>>>    
82151>>>>>    
82151>>>>>    Procedure DFSetEnablePrintFromPreview Boolean bEnablePrint
82153>>>>>        Set EnablePrintFromPreview of (phoWinPrint(Self)) to bEnablePrint
82154>>>>>    End_Procedure
82155>>>>>    
82155>>>>>    Function DFGetEnablePrintFromPreview Returns Boolean
82157>>>>>        Boolean bEnablePrint
82157>>>>>        Get EnablePrintFromPreview of (phoWinPrint(Self)) to bEnablePrint
82158>>>>>        Function_Return bEnablePrint
82159>>>>>    End_Function
82160>>>>>    
82160>>>>>    
82160>>>>>    
82160>>>>>    Procedure DFSetMargins Number nLeft Number nTop Number nRight Number nBottom
82162>>>>>        Send DFSetMargins of (phoWinPrint(Self)) nLeft nTop nRight nBottom
82163>>>>>    End_Procedure
82164>>>>>    
82164>>>>>    Procedure DFSetTopBottom Number nTop Number nBottom Boolean bAllPages
82166>>>>>        Send DFSetTopBottom of (phoWinPrint(Self)) nTop nBottom bAllPages
82167>>>>>    End_Procedure
82168>>>>>    
82168>>>>>    
82168>>>>>    Procedure DFSetDevice String sPrinterName
82170>>>>>        Send DFSetDevice of (phoWinPrint(Self)) sPrinterName
82171>>>>>    End_Procedure
82172>>>>>    
82172>>>>>    Function DFGetCurrentDevice Returns String // sPrinterName
82174>>>>>        String sPrinterName
82174>>>>>        Get DFGetCurrentDevice of (phoWinPrint(Self)) to sPrinterName
82175>>>>>        Function_Return sPrinterName
82176>>>>>    End_Function
82177>>>>>    
82177>>>>>    
82177>>>>>    Procedure DFSetUserDefinedPapersize Number nLength Number nWidth
82179>>>>>        Send DFSetUserDefinedPapersize of (phoWinPrint(Self)) nLength nWidth
82180>>>>>    End_Procedure
82181>>>>>    
82181>>>>>    Function DFGetUserDefinedLength Returns Number
82183>>>>>        Number nSize
82183>>>>>        Get DFGetUserDefinedLength of (phoWinPrint(Self)) to nSize
82184>>>>>        Function_Return nSize
82185>>>>>    End_Function
82186>>>>>    
82186>>>>>    Function DFGetUserDefinedWidth Returns Number
82188>>>>>        Number nSize
82188>>>>>        Get DFGetUserDefinedWidth of (phoWinPrint(Self)) to nSize
82189>>>>>        Function_Return nSize
82190>>>>>    End_Function
82191>>>>>    
82191>>>>>    
82191>>>>>    Procedure DFSetNumberOfCopies Integer iCopies
82193>>>>>        Send DFSetNumberOfCopies of (phoWinPrint(Self)) iCopies
82194>>>>>    End_Procedure
82195>>>>>    
82195>>>>>    Procedure DFPrinterBinFirstPage Integer eBinType
82197>>>>>        Send DFPrinterBinFirstPage of (phoWinPrint(Self)) eBinType
82198>>>>>    End_Procedure
82199>>>>>    
82199>>>>>    Procedure DFClearPrinter
82201>>>>>        Send DFClearPrinter of (phoWinPrint(Self))
82202>>>>>    End_Procedure
82203>>>>>    
82203>>>>>    Function DFGetDFColor Integer iRed Integer iGreen Integer iBlue Returns Integer
82205>>>>>        Integer iWPColor
82205>>>>>        Get DFGetDFColor of (phoWinPrint(Self)) iRed iGreen iBlue to iWPColor
82206>>>>>        Function_Return iWPColor
82207>>>>>    End_Function
82208>>>>>    
82208>>>>>    Function RGBToWPColor Integer iRgb Returns Integer
82210>>>>>        Integer iWPColor
82210>>>>>        Get RGBToWPColor of (phoWinPrint(Self)) iRGB to iWPColor
82211>>>>>        Function_Return iWPColor
82212>>>>>    End_Function
82213>>>>>    
82213>>>>>    
82213>>>>>End_Class
82214>>>
82214>>>Use cCustomerDataDictionary.dd
82214>>>
82214>>>Activate_View Activate_oCustomerListWP for oCustomerListWP
82224>>>>
82224>>>
82224>>>Object oCustomerListWP is a ReportView
82226>>>    
82226>>>    Property Boolean pbComments False
82228>>>    
82228>>>    Set Label to "Customer List"
82229>>>    Set Location to 6 6
82230>>>    Set Size to 95 180
82231>>>    
82231>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
82233>>>    End_Object
82234>>>    
82234>>>    Set Main_DD to oCustomerDataDictionary
82235>>>    Set Server to oCustomerDataDictionary
82236>>>    
82236>>>    Object oPrintTo is a RadioGroup
82238>>>        Set Size to 50 80
82239>>>        Set Location to 5 5
82240>>>        Set Label to "Send Report to"
82241>>>        Object oScreenRadio is a Radio
82243>>>            Set Label to "Report Viewer"
82244>>>            Set Size to 10 61
82245>>>            Set Location to 15 10
82246>>>            Set Status_Help to "Preview the report to screen"
82247>>>        End_Object
82248>>>        
82248>>>        Object oPrinterRadio is a Radio
82250>>>            Set Label to "Printer"
82251>>>            Set Size to 10 37
82252>>>            Set Location to 30 10
82253>>>            Set Status_Help to "Send the report to the default printer"
82254>>>        End_Object
82255>>>        
82255>>>        Function IsToPrinter Returns Boolean
82258>>>            Integer iRadio
82258>>>            Get Current_radio to iRadio
82259>>>            Function_Return (iRadio=1)
82260>>>        End_Function
82261>>>        
82261>>>    End_Object
82262>>>    
82262>>>    Object oOrder is a RadioGroup
82264>>>        Set Size to 50 80
82265>>>        Set Location to 5 95
82266>>>        Set Label to "Report Order"
82267>>>        Object oNumberRadio is a Radio
82269>>>            Set Label to "Number"
82270>>>            Set Size to 10 41
82271>>>            Set Location to 15 10
82272>>>            Set Status_Help to "Sort by customer number"
82273>>>        End_Object
82274>>>        
82274>>>        Object oNameRadio is a Radio
82276>>>            Set Label to "Name"
82277>>>            Set Size to 10 35
82278>>>            Set Location to 30 10
82279>>>            Set Status_Help to "Sort by customer name"
82280>>>        End_Object
82281>>>        
82281>>>        Function IsSortedByNumber Returns Boolean
82284>>>            Integer iRadio
82284>>>            Get Current_radio to iRadio
82285>>>            Function_Return (iRadio=1)
82286>>>        End_Function
82287>>>        
82287>>>    End_Object
82288>>>    
82288>>>    Object oCommentsCkBx is a CheckBox
82290>>>        Set Label to "Print Comments"
82291>>>        Set Size to 10 65
82292>>>        Set Location to 59 95
82293>>>        
82293>>>    End_Object
82294>>>    
82294>>>    Object oBtnPrint is a Button
82296>>>        Set Label to "Print"
82297>>>        Set Location to 76 7
82298>>>        
82298>>>        Procedure OnClick
82301>>>            Send StartReport
82302>>>        End_Procedure
82303>>>        
82303>>>    End_Object
82304>>>    
82304>>>    Object oBtnCancel is a Button
82306>>>        Set Label to "Cancel"
82307>>>        Set Location to 76 65
82308>>>        
82308>>>        Procedure OnClick
82311>>>            Send Close_Panel
82312>>>        End_Procedure
82313>>>        
82313>>>    End_Object
82314>>>    
82314>>>    Object oBtnPrinterSetup is a Button
82316>>>        Set Label to "Printer Setup"
82317>>>        Set Location to 76 123
82318>>>        
82318>>>        Procedure OnClick
82321>>>            Boolean bSetupOk
82321>>>            Get DFPrintSetupDialog of oReport to bSetupOk
82322>>>        End_Procedure
82323>>>        
82323>>>    End_Object
82324>>>    
82324>>>    Object oReport is a cWinReport2
82326>>>        Set Report_Title to "Customer List"
82327>>>        
82327>>>        // Set DDO, Index and breaks for the report
82327>>>        Set Server to oCustomerDataDictionary
82328>>>        Set Ordering to 1
82329>>>        
82329>>>        // Report_Breaks file.field // no breaks in this report
82329>>>        
82329>>>        Property Boolean pbLandscape False
82331>>>        
82331>>>        Function Starting_Main_Report Returns Integer
82334>>>            Integer iIndex
82334>>>            Boolean bOn bErr
82334>>>            
82334>>>            Send DFSetMetrics wpm_cm
82335>>>            Send DFSetmargins 1 1 1 1
82336>>>            
82336>>>            Get pbComments to bOn
82337>>>            Send DFSetLandscape (If(bOn,True,False))  // This can be used to force a page orientation
82338>>>            Get DFGetLandscape to bOn
82339>>>            Set pbLandscape to bOn
82340>>>            
82340>>>            Forward Get Starting_Main_Report to bErr
82342>>>            
82342>>>            Function_Return bErr
82343>>>        End_Function
82344>>>        
82344>>>        // Page_Top is printed first at the top margin of each page
82344>>>        Procedure Page_Top
82347>>>            String sFont
82347>>>            Integer iFontSize iStyle
82347>>>            
82347>>>            Move "arial" to sFont
82348>>>            Move 8 to iFontSize
82349>>>            Move (Font_Default) to iStyle
82350>>>            
82350>>>            DFFont sFont
82351>>>            DFFontSize iFontSize
82352>>>            DFBeginHeader DFPageTop
82353>>>            DFHeaderFrame Hdr_NoFrame
82354>>>            DFHeaderPos   Hdr_Left
82355>>>            DFWriteLn ("Page:" * "#pagecount#") iStyle
82356>>>            DFEndHeader
82358>>>            
82358>>>        End_Procedure
82359>>>        
82359>>>        Procedure Page_Header
82362>>>            Integer iFill iBorder iStyle
82362>>>            String  sFont sReportTitle
82362>>>            Integer iFontSize
82362>>>            
82362>>>            Move "arial" to sFont
82363>>>            Move 16 to iFontSize
82364>>>            Move (Font_bold + rgb_White) to iStyle
82365>>>            Move (rgb_dGrey) to iFill
82366>>>            Move (rgb_dGrey) to iBorder
82367>>>            Get Report_Title to sReportTitle
82368>>>            
82368>>>            DFFont sFont
82369>>>            DFFontSize iFontSize
82370>>>            DFBeginHeader DFPageHeader
82371>>>            DFHeaderPos   Hdr_Left
82372>>>            DFHeaderFrame Hdr_Margins 0.01 iBorder iFill
82373>>>            DFWriteLnPos sReportTitle 0.1 iStyle
82374>>>            DFHeaderMargin HM_BottomOuter 0.08
82375>>>            DFEndHeader
82377>>>            
82377>>>        End_Procedure
82378>>>        
82378>>>        Procedure Page_Title
82381>>>            String  sFont
82381>>>            Integer iFontSize iHeaderStyle iFill iBorder
82381>>>            Boolean bOn
82381>>>            
82381>>>            Get pbLandscape to bOn
82382>>>            
82382>>>            Move "arial" to sFont
82383>>>            Move 8 to iFontSize
82384>>>            Move (Font_Bold + rgb_dBlue) to iHeaderStyle
82385>>>            Move (rgb_Grey) to iFill
82386>>>            Move (rgb_Grey) to iBorder
82387>>>            
82387>>>            DFFont sFont
82388>>>            DFFontSize iFontSize
82389>>>            DFBeginHeader DFPageTitle
82390>>>            DFHeaderPos   Hdr_Left
82391>>>            DFHeaderFrame Hdr_Margins 0 iBorder iFill
82392>>>            DFHeaderMargin HM_TopInner    0.01
82393>>>            DFHeaderMargin HM_BottomInner 0.01
82394>>>            DFHeaderMargin HM_BottomOuter 0.16
82395>>>            
82395>>>            DFWritePos "Number"                        0.1 (iHeaderStyle)
82396>>>            DFWritePos "Customer Name"                   2 (iHeaderStyle)
82397>>>            DFWritePos "Address"                         7 (iHeaderStyle)
82398>>>            DFWritePos "City"                           12 (iHeaderStyle)
82399>>>            DFWritePos "St."                            15 (iHeaderStyle)
82400>>>            DFWritePos "Zip"                            17 (iHeaderStyle)
82401>>>            
82401>>>            If bOn Begin
82403>>>                DFWritePos "Comments"                    19 (iHeaderStyle)
82404>>>            End
82404>>>>
82404>>>            DFWriteLn
82405>>>            DFEndHeader
82407>>>            
82407>>>        End_Procedure
82408>>>        
82408>>>        Procedure Body
82411>>>            String  sFont
82411>>>            Integer iFontSize iStyle
82411>>>            Boolean bOn
82411>>>            
82411>>>            Send Update_Status (String(Customer.Customer_number))
82412>>>            
82412>>>            Get pbLandscape to bOn
82413>>>            
82413>>>            Move "arial" to sFont
82414>>>            Move 8 to iFontSize
82415>>>            Move (font_default) to iStyle
82416>>>            
82416>>>            DFFont sFont
82417>>>            DFFontSize iFontSize
82418>>>            DFLineCheck 5
82419>>>            
82419>>>            DFWritePos Customer.Customer_Number       0.8 (iStyle + Font_Right) 0
82420>>>            DFWritePos Customer.Name                    2 iStyle -1 4.98
82421>>>            DFWritePos Customer.Address                 7 iStyle -1 4.98
82422>>>            DFWritePos Customer.City                   12 iStyle -1 3.98
82423>>>            DFWritePos Customer.State                  15 iStyle -1 0.98
82424>>>            DFWritePos Customer.Zip                    17 iStyle -1 1.98
82425>>>            
82425>>>            If bOn Begin
82427>>>                DFWritePos Customer.Comments           19 iStyle -1 0
82428>>>                DFWriteLn
82429>>>            End
82429>>>>
82429>>>            DFWriteLn
82430>>>        End_Procedure
82431>>>        
82431>>>        // Page_Bottom is printed last at the bottom margin of each page
82431>>>        Procedure Page_Bottom
82434>>>            String sFont
82434>>>            Integer iFontSize iBorder iStyle iFill
82434>>>            DateTime dtDT
82434>>>            
82434>>>            Move (CurrentDateTime()) to dtDT
82435>>>            
82435>>>            Move "arial" to sFont
82436>>>            Move 8 to iFontSize
82437>>>            Move (font_default) to iStyle
82438>>>            Move (rgb_dGrey) to iBorder
82439>>>            Move (rgb_White) to iFill
82440>>>            
82440>>>            DFFont sFont
82441>>>            DFFontSize iFontSize
82442>>>            DFBeginHeader DFPageBottom
82443>>>            DFHeaderFrame Hdr_Margins 0 iBorder iFill
82444>>>            DFHeaderPos Hdr_Center  // Write data in center
82445>>>            DFWriteLn ("Report Printed on" * String(dtDT)) (iStyle)
82446>>>            DFEndHeader
82448>>>            
82448>>>        End_Procedure
82449>>>        
82449>>>    End_Object
82450>>>    
82450>>>    Procedure StartReport
82453>>>        Boolean bToPrinter bComments bSortByNumber
82453>>>        
82453>>>        // determine if direct print
82453>>>        Get IsToPrinter of oPrintTo to bToPrinter
82454>>>        Set OutPut_Device_Mode of oReport to (If(bToPrinter, PRINT_TO_PRINTER, PRINT_TO_WINDOW))
82455>>>        
82455>>>        // determine if sort order is by number or name
82455>>>        Get IsSortedByNumber of oOrder to bSortByNumber
82456>>>        Set Ordering of oReport to (If(bSortByNumber, 2, 1))
82457>>>        
82457>>>        Get Checked_State of oCommentsCkBx to bComments
82458>>>        Set pbComments to bComments
82459>>>        
82459>>>        // run the report
82459>>>        Send Run_Report of oReport
82460>>>        
82460>>>    End_Procedure
82461>>>    
82461>>>End_Object
82462>>>
82462>        Use WinPrint\ItemsPerOrderWP.rv
Including file: WinPrint\ItemsPerOrderWP.rv    (C:\test\BuildTools\Order Entry\AppSrc\WinPrint\ItemsPerOrderWP.rv)
82462>>>Use dfrptvw.pkg
82462>>>Use DataDict.pkg
82462>>>Use Windows.pkg
82462>>>Use cWinReport2.pkg
82462>>>
82462>>>Use cVendorDataDictionary.DD
82462>>>Use cInventoryDataDictionary.DD
82462>>>Use cCustomerDataDictionary.DD
82462>>>Use cSalesPersonDataDictionary.DD
82462>>>Use cOrderHeaderDataDictionary.DD
82462>>>Use cOrderDetailDataDictionary.DD
82462>>>
82462>>>Activate_View Activate_oItemsPerOrderWP for oItemsPerOrderWP
82472>>>>
82472>>>
82472>>>Object oItemsPerOrderWP is a ReportView
82474>>>    Set Label to "Items per Order"
82475>>>    Set Location to 6 6
82476>>>    Set Size to 84 140
82477>>>    
82477>>>    Object oVendorDataDictionary is a cVendorDataDictionary
82479>>>    End_Object
82480>>>    
82480>>>    Object oInventoryDataDictionary is a cInventoryDataDictionary
82482>>>        Set DDO_Server to oVendorDataDictionary
82483>>>    End_Object
82484>>>    
82484>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
82486>>>    End_Object
82487>>>    
82487>>>    Object oSalesPersonDataDictionary is a cSalesPersonDataDictionary
82489>>>    End_Object
82490>>>    
82490>>>    Object oOrderHeaderDataDictionary is a cOrderHeaderDataDictionary
82492>>>        Set DDO_Server to oCustomerDataDictionary
82493>>>        Set DDO_Server to oSalesPersonDataDictionary
82494>>>    End_Object
82495>>>    
82495>>>    Object oOrderDetailDataDictionary is a cOrderDetailDataDictionary
82497>>>        Set DDO_Server to oOrderHeaderDataDictionary
82498>>>        Set DDO_Server to oInventoryDataDictionary
82499>>>    End_Object
82500>>>    
82500>>>    Object oPrintTo is a RadioGroup
82502>>>        Set Size to 38 131
82503>>>        Set Location to 5 5
82504>>>        Set Label to "Print to"
82505>>>        Object oRadio1 is a Radio
82507>>>            Set Label to "Preview"
82508>>>            Set Size to 10 42
82509>>>            Set Location to 12 6
82510>>>            Set Status_Help to "Prints the report to screen"
82511>>>        End_Object
82512>>>        
82512>>>        Object oRadio2 is a Radio
82514>>>            Set Label to "Printer"
82515>>>            Set Size to 10 42
82516>>>            Set Location to 24 6
82517>>>            Set Status_Help to "Prints the report to printer"
82518>>>        End_Object
82519>>>        
82519>>>    End_Object
82520>>>    
82520>>>    Object oBtnPrint is a Button
82522>>>        Set Label to "Print"
82523>>>        Set Location to 48 85
82524>>>        Set Status_Help to "Print the Selected report"
82525>>>        Set Default_State to True
82526>>>        
82526>>>        Procedure OnClick
82529>>>            Send StartReport
82530>>>        End_Procedure
82531>>>        
82531>>>    End_Object
82532>>>    
82532>>>    Object oBtnCancel is a Button
82534>>>        Set Label to "Cancel"
82535>>>        Set Location to 66 85
82536>>>        Set Status_Help to "Close this Panel"
82537>>>        
82537>>>        Procedure OnClick
82540>>>            Send Close_Panel
82541>>>        End_Procedure
82542>>>        
82542>>>    End_Object
82543>>>    
82543>>>    Object oOrders is a cWinReport2
82545>>>        Set Report_Title to "Customer Report"
82546>>>        
82546>>>        //Main File for the report
82546>>>        Set Server to oOrderDetailDataDictionary
82547>>>        
82547>>>        //Breaks and Index for the report
82547>>>        Report_Breaks ORDERHEAder.ORDER_NUMBER
82561>>>        Set Ordering to 1
82562>>>        
82562>>>        Function Starting_Main_Report Returns Integer
82565>>>            Integer iRetVal
82565>>>            Send DFSetMetrics WPM_CM
82566>>>            Send DFSetmargins 1 1 1 1
82567>>>            Forward Get Starting_Main_Report to iRetVal
82569>>>            If iRetVal;                Function_Return iRetVal
82572>>>        End_Function
82573>>>        
82573>>>        Procedure Page_Top
82576>>>            DFFont "Arial" //  Use Arial
82577>>>            DFFontSize 8
82578>>>            DFBeginHeader DFPageTop
82579>>>            DFHeaderPos   HDR_RIGHT
82580>>>            DFHeaderFrame HDR_NOFRAME
82581>>>            DFWriteLn ("Page:" * "#pagecount#")
82582>>>            DFEndHeader
82584>>>        End_Procedure
82585>>>        
82585>>>        Procedure Page_Header
82588>>>            DFFont "Arial"
82589>>>            DFFontSize 14
82590>>>            DFBeginHeader DFPageHeader
82591>>>            DFHeaderFrame HDR_MARGINs 0 RGB_DGREY RGB_DGREY
82592>>>            DFHeaderPos HDR_LEFT
82593>>>            DFHeaderMargin HM_BottomOuter 0.08
82594>>>            DFWriteLnPos "Orders by Order Number Report" 0.10 (FONT_BOLD+RGB_WHITE)
82595>>>            DFEndHeader
82597>>>        End_Procedure
82598>>>        
82598>>>        Procedure Page_Title
82601>>>            DFFont "Arial"
82602>>>            DFFontSize 8
82603>>>            DFBeginHeader DFPageTitle
82604>>>            DFHeaderFrame HDR_MARGINs 0 RGB_GREY RGB_GREY
82605>>>            DFHeaderPos HDR_LEFT
82606>>>            DFWritePos    "Item Id"                 0.1     (FONT_BOLD+RGB_DBLUE)            -1 1.36
82607>>>            DFWritePos    "Description"             4.00    (FONT_BOLD+RGB_DBLUE)            -1 4.77
82608>>>            DFWritePos    "Qty Ordered"             11.5     (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 1.87
82609>>>            DFWritePos    "Price"                   13.22   (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 1.22
82610>>>            DFWritePos    "Extended Price"          16.0    (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 2.38
82611>>>            DFWriteLn
82612>>>            DFEndHeader
82614>>>        End_Procedure
82615>>>        
82615>>>        Procedure SubHeader1
82618>>>            
82618>>>            DFFont "Arial" //  Use Arial
82619>>>            DFFontSize 10
82620>>>            
82620>>>            DFBeginHeader DFSubHeader 1    //Header of type DFSubHeader
82621>>>            
82621>>>            Send Update_Status ("Order:" * String(OrderHeader.Order_number))
82622>>>            
82622>>>            DFHeaderWrap HDR_WRAP
82623>>>            DFHeaderLineCheck 5            //Check that the header + 5 lines fits on the page, if not wrap
82624>>>            
82624>>>            DFHeaderPos   HDR_LEFT         //Write data from left margin in the header
82625>>>            DFHeaderFrame HDR_NoFrame      //Set the box from margin to margin using size 0.05
82626>>>            
82626>>>            DFWriteLnPos    ("Order: "+String(OrderHeader.ORDER_NUMBER)) 0.1 (FONT_BOLD)
82627>>>            
82627>>>            DFEndHeader                     //End and print header
82629>>>            
82629>>>        End_Procedure
82630>>>        
82630>>>        Procedure Body
82633>>>            
82633>>>            DFFont "Arial" //  Use Arial
82634>>>            DFFontSize 8
82635>>>            
82635>>>            DFLineCheck 5
82636>>>            
82636>>>            DFWritePos    Inventory.ITEM_ID                0.1     (FONT_DEFAULT)            -1 2.28
82637>>>            DFWritePos    Inventory.DESCRIPTION            4.00    (FONT_DEFAULT)            -1 4.77
82638>>>            DFWritePos    OrderDetail.QTY_ORDERED        11.5     (FONT_DEFAULT+FONT_RIGHT)  0 1.87
82639>>>            DFWritePos    OrderDetail.PRICE              13.22   (FONT_DEFAULT+FONT_RIGHT)  2 1.22
82640>>>            DFWritePos    OrderDetail.EXTENDED_PRICE     16.0    (FONT_DEFAULT+FONT_RIGHT)  2 2.38
82641>>>            DFWriteLn ""
82642>>>            
82642>>>            // Using SubTotal in WinPrint.
82642>>>            Send Add_SubTotal 1 (OrderDetail.EXTENDED_PRICE)
82643>>>            
82643>>>        End_Procedure
82644>>>        
82644>>>        Procedure SubTotal1
82647>>>            Number nAmount
82647>>>            Get SubTotal 1 to nAmount
82648>>>            Send Add_SubTotal 2 nAmount // subtotal 2 is total
82649>>>            
82649>>>            DFFont "Arial" //  Use Arial
82650>>>            DFFontSize 8
82651>>>            DFBeginHeader DFSubTotal 1
82652>>>            
82652>>>            DFHeaderPos HDR_LEFT
82653>>>            DFHeaderFrame HDR_NOFRAME
82654>>>            
82654>>>            DFWriteLnPos  nAmount         16.0      (FONT_BOLD+FONT_RIGHT) 2 0
82655>>>            DFWriteLine DFGR_CURRLINE DFGR_CURRLINE DFGR_RB_MARGIN DFGR_HORI Rgb_dGrey
82656>>>            
82656>>>            DFEndHeader
82658>>>            
82658>>>        End_Procedure
82659>>>        
82659>>>        Procedure Total
82662>>>            Number nTotal
82662>>>            Get SubTotal 2 to nTotal
82663>>>            
82663>>>            DFFont "Arial" //  Use Arial
82664>>>            DFFontSize 8
82665>>>            DFBeginHeader DFTotal           //Header of type DFTotal
82666>>>            
82666>>>            DFHeaderPos   HDR_LEFT         //Write data from left margin in the header
82667>>>            DFHeaderFrame HDR_MARGINs 0 RGB_DGREY RGB_GREY //rgb_Cyan rgb_Cyan
82668>>>            
82668>>>            DFWriteLnPos   nTotal         16.0      (FONT_BOLD+FONT_RIGHT) 2
82669>>>            
82669>>>            DFEndHeader                     //End and print header
82671>>>            
82671>>>        End_Procedure
82672>>>        
82672>>>        Procedure Page_Bottom
82675>>>            DateTime dtDT
82675>>>            Move (CurrentDateTime()) to dtDT
82676>>>            
82676>>>            DFFont "Arial" //  Use Arial
82677>>>            DFFontSize 8
82678>>>            DFBeginHeader DFPageBottom
82679>>>            DFHeaderPos   HDR_CENTER       //Write data in center
82680>>>            DFHeaderFrame HDR_MARGINS 0.01 rgb_dGrey
82681>>>            DFWriteLn   ("Report Printed on: " +String(dtDT)) (rgb_dBlue)
82682>>>            DFEndHeader
82684>>>            
82684>>>        End_Procedure
82685>>>        
82685>>>    End_Object
82686>>>    
82686>>>    // Procedures and functions used by the user interface
82686>>>    
82686>>>    //This function is called by the procedure StartReport
82686>>>    Function Print_to_Screen_State Returns Integer
82689>>>        Integer iRad
82689>>>        Get Current_Radio of oPrintTo to iRad
82690>>>        Function_Return (iRad=1)
82691>>>    End_Function
82692>>>    
82692>>>    // Use this procedure to do print setup
82692>>>    Procedure SetupReport
82695>>>        Boolean bSetupOk
82695>>>        Get DFPrintSetupDialog of (Report_Object_Id(Self)) to bSetupOk
82696>>>    End_Procedure
82697>>>    
82697>>>    // Use this procedure to start the report
82697>>>    Procedure StartReport
82700>>>        Integer iToPrinter iRepObj
82700>>>        String sVal
82700>>>        Get Report_Object_Id to iRepObj
82701>>>        
82701>>>        Get Print_to_Screen_State to iToPrinter
82702>>>        If iToPrinter;            Set OutPut_Device_Mode to PRINT_TO_PRINTER
82705>>>        Else;            Set OutPut_Device_Mode to PRINT_TO_WINDOW
82707>>>        
82707>>>        Send Run_Report to iRepObj
82708>>>        
82708>>>    End_Procedure
82709>>>    
82709>>>End_Object
82710>>>
82710>        Use WinPrint\OrdersWP.rv
Including file: WinPrint\OrdersWP.rv    (C:\test\BuildTools\Order Entry\AppSrc\WinPrint\OrdersWP.rv)
82710>>>Use dfrptvw.pkg
82710>>>Use DataDict.pkg
82710>>>Use Windows.pkg
82710>>>Use cWinReport2.pkg
82710>>>
82710>>>Use cVendorDataDictionary.dd
82710>>>Use cInventoryDataDictionary.dd
82710>>>Use cCustomerDataDictionary.dd
82710>>>Use cSalesPersonDataDictionary.dd
82710>>>Use cOrderHeaderDataDictionary.dd
82710>>>Use cOrderDetailDataDictionary.dd
82710>>>
82710>>>Activate_View Activate_oOrdersWP for oOrdersWP
82720>>>>
82720>>>
82720>>>Object oOrdersWP is a ReportView
82722>>>    Set Label to "Orders by Order Number"
82723>>>    Set Location to 6 6
82724>>>    Set Size to 46 175
82725>>>    
82725>>>    Object oVendorDataDictionary is a cVendorDataDictionary
82727>>>    End_Object
82728>>>    
82728>>>    Object oInventoryDataDictionary is a cInventoryDataDictionary
82730>>>        Set DDO_Server to oVendorDataDictionary
82731>>>    End_Object
82732>>>    
82732>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
82734>>>    End_Object
82735>>>    
82735>>>    Object oSalesPersonDataDictionary is a cSalesPersonDataDictionary
82737>>>    End_Object
82738>>>    
82738>>>    Object oOrderHeaderDataDictionary is a cOrderHeaderDataDictionary
82740>>>        Set DDO_Server to oCustomerDataDictionary
82741>>>        Set DDO_Server to oSalesPersonDataDictionary
82742>>>    End_Object
82743>>>    
82743>>>    Object oOrderDetailDataDictionary is a cOrderDetailDataDictionary
82745>>>        Set DDO_Server to oOrderHeaderDataDictionary
82746>>>        Set DDO_Server to oInventoryDataDictionary
82747>>>    End_Object
82748>>>    
82748>>>    Object oPrintTo is a RadioGroup
82750>>>        Set Size to 38 105
82751>>>        Set Location to 4 5
82752>>>        Set Label to "Print to"
82753>>>        Object oRadio1 is a Radio
82755>>>            Set Label to "Preview"
82756>>>            Set Size to 10 42
82757>>>            Set Location to 12 6
82758>>>            Set Status_Help to "Prints the report to screen"
82759>>>        End_Object
82760>>>        
82760>>>        Object oRadio2 is a Radio
82762>>>            Set Label to "Printer"
82763>>>            Set Size to 10 42
82764>>>            Set Location to 24 6
82765>>>            Set Status_Help to "Prints the report to printer"
82766>>>        End_Object
82767>>>        
82767>>>    End_Object
82768>>>    
82768>>>    Object oBtnPrint is a Button
82770>>>        Set Label to "Print"
82771>>>        Set Location to 10 120
82772>>>        Set Status_Help to "Print the Selected report"
82773>>>        Set Default_State to True
82774>>>        
82774>>>        Procedure OnClick
82777>>>            Send StartReport
82778>>>        End_Procedure
82779>>>        
82779>>>    End_Object
82780>>>    
82780>>>    Object oBtnCancel is a Button
82782>>>        Set Label to "Cancel"
82783>>>        Set Location to 28 120
82784>>>        Set Status_Help to "Close this Panel"
82785>>>        
82785>>>        Procedure OnClick
82788>>>            Send Close_Panel
82789>>>        End_Procedure
82790>>>        
82790>>>    End_Object
82791>>>    
82791>>>    Object oOrders is a cWinReport2
82793>>>        Set Report_Title to "Customer Report"
82794>>>        
82794>>>        //Main File for the report
82794>>>        Set Server to oOrderDetailDataDictionary
82795>>>        
82795>>>        //Breaks and Index for the report
82795>>>        Report_Breaks ORDERHEAder.ORDER_NUMBER
82809>>>        Report_Index by 1
82811>>>        
82811>>>        Function Starting_Main_Report Returns Integer
82814>>>            Integer iRetVal
82814>>>            Set PrintDlgInPreview of WinprintId to True
82815>>>            Send DFSetMetrics to WinPrintId "CM"
82816>>>            Send DFSetmargins to WinPrintId 1 1 1 1
82817>>>            Forward Get Starting_Main_Report to iRetVal
82819>>>            If iRetVal;                Function_Return iRetVal
82822>>>        End_Function
82823>>>        
82823>>>        Procedure Page_Top
82826>>>            DFFont "Arial" //  Use Arial
82827>>>            DFFontSize 8
82828>>>            DFBeginHeader DFPageTop
82829>>>            DFHeaderPos   HDR_RIGHT
82830>>>            DFHeaderFrame HDR_NOFRAME
82831>>>            DFWriteLn ("Page:" * "#pagecount#")
82832>>>            DFEndHeader
82834>>>        End_Procedure
82835>>>        
82835>>>        Procedure Page_Title
82838>>>            DFFont "Arial"
82839>>>            DFFontSize 14
82840>>>            DFBeginHeader DFPageTitle
82841>>>            DFHeaderFrame HDR_MARGINs 0 RGB_DGREY RGB_DGREY
82842>>>            DFHeaderPos HDR_LEFT
82843>>>            DFWriteLnPos "Orders by Order Number Report" 0.10 (FONT_BOLD+RGB_WHITE)
82844>>>            DFEndHeader
82846>>>        End_Procedure
82847>>>        
82847>>>        Procedure SubHeader1
82850>>>            
82850>>>            DFFont "Arial" //  Use Arial
82851>>>            DFFontSize 8
82852>>>            
82852>>>            DFBeginHeader DFSubHeader 1    //Header of type DFSubHeader
82853>>>            
82853>>>            Send Update_Status ("Order:" * String(OrderHeader.Order_number))
82854>>>            
82854>>>            
82854>>>            DFHeaderWrap HDR_WRAP
82855>>>            DFHeaderLineCheck 5            //Check that the header + 5 lines fits on the page, if not wrap
82856>>>            
82856>>>            DFHeaderPos   HDR_LEFT         //Write data from left margin in the header
82857>>>            DFHeaderFrame HDR_NoFrame      //Set the box from margin to margin using size 0.05
82858>>>            DFHeaderMargin hm_BottomOuter 0.04
82859>>>            
82859>>>            DFWritePos    "Order Number"            0.10  (FONT_BOLD+RGB_DBLUE)
82860>>>            DFWriteLnPos  OrderHeader.ORDER_NUMBER       4.0   (FONT_DEFAULT)
82861>>>            DFWritePos    "Order Date"              0.10  (FONT_BOLD+RGB_DBLUE)
82862>>>            DFWriteLnPos  OrderHeader.ORDER_DATE         4.0   (FONT_DEFAULT)
82863>>>            DFWritePos    "Customer Number"         0.10  (FONT_BOLD+RGB_DBLUE)
82864>>>            DFWriteLnPos  Customer.CUSTOMER_NUMBER    4.0
82865>>>            DFWritePos    "Name"                    0.10  (FONT_BOLD+RGB_DBLUE)
82866>>>            DFWriteLnPos  Customer.NAME               4.0   (FONT_DEFAULT)
82867>>>            DFWritePos    "Address"                 0.10  (FONT_BOLD+RGB_DBLUE)
82868>>>            DFWriteLnPos  Customer.Address            4.0   (FONT_DEFAULT)
82869>>>            DFWritePos    "City"                    0.10  (FONT_BOLD+RGB_DBLUE)
82870>>>            DFWriteLnPos  Customer.CITY               4.0   (FONT_DEFAULT)
82871>>>            DFWritePos    "State"                   0.10  (FONT_BOLD+RGB_DBLUE)
82872>>>            DFWriteLnPos  Customer.STATE              4.0   (FONT_DEFAULT)
82873>>>            DFWritePos    "Zip"                     0.10  (FONT_BOLD+RGB_DBLUE)
82874>>>            DFWriteLnPos  Customer.ZIP                4.0   (FONT_DEFAULT)
82875>>>            DFWritePos    "Terms"                   0.10  (FONT_BOLD+RGB_DBLUE)
82876>>>            DFWriteLnPos  OrderHeader.TERMS              4.0   (FONT_DEFAULT)
82877>>>            DFWritePos    "Ship Via"                0.10  (FONT_BOLD+RGB_DBLUE)
82878>>>            DFWriteLnPos  OrderHeader.SHIP_VIA           4.0   (FONT_DEFAULT)
82879>>>            DFFontSize 2
82880>>>            DFWriteLn
82881>>>            
82881>>>            DFFontSize 8
82882>>>            DFWriteRect DFGR_CURRLINE 0 0.34 DFGR_RB_MARGIN RGB_GREY 0.0 dfgr_noWrap RGB_GREY
82883>>>            DFWritePos    "Item Id"                 0.1     (FONT_BOLD+RGB_DBLUE)            -1 1.36
82884>>>            DFWritePos    "Description"             4.00    (FONT_BOLD+RGB_DBLUE)            -1 4.77
82885>>>            DFWritePos    "Qty Ordered"             11.5     (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 1.87
82886>>>            DFWritePos    "Price"                   13.22   (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 1.22
82887>>>            DFWritePos    "Extended Price"          16.0    (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 2.40
82888>>>            DFWriteLn
82889>>>            
82889>>>            DFEndHeader                     //End and print header
82891>>>            
82891>>>        End_Procedure
82892>>>        
82892>>>        Procedure Body
82895>>>            
82895>>>            DFFont "Arial" //  Use Arial
82896>>>            DFFontSize 8
82897>>>            
82897>>>            DFLineCheck 5
82898>>>            
82898>>>            DFWritePos    Inventory.ITEM_ID                0.1     (FONT_DEFAULT)            -1 2.28
82899>>>            DFWritePos    Inventory.DESCRIPTION            4.00    (FONT_DEFAULT)            -1 4.77
82900>>>            DFWritePos    OrderDetail.QTY_ORDERED        11.5     (FONT_DEFAULT+FONT_RIGHT)  0 1.87
82901>>>            DFWritePos    OrderDetail.PRICE              13.22   (FONT_DEFAULT+FONT_RIGHT)  2 1.22
82902>>>            DFWritePos    OrderDetail.EXTENDED_PRICE     16.0    (FONT_DEFAULT+FONT_RIGHT)  2 2.40
82903>>>            DFWriteLn
82904>>>            
82904>>>            // Using SubTotal in WinPrint.
82904>>>            Send Add_SubTotal 1 (OrderDetail.EXTENDED_PRICE)
82905>>>            
82905>>>        End_Procedure
82906>>>        
82906>>>        Procedure SubTotal1
82909>>>            Number nAmount
82909>>>            Get SubTotal 1 to nAmount
82910>>>            Send Add_SubTotal 2 nAmount // subtotal 2 is total
82911>>>            
82911>>>            DFFont "Arial" //  Use Arial
82912>>>            DFFontSize 8
82913>>>            DFBeginHeader DFSubTotal 1
82914>>>            
82914>>>            DFHeaderPos HDR_LEFT
82915>>>            DFHeaderFrame hdr_margins 0.01 rgb_grey rgb_Grey
82916>>>            DFHeaderMargin hm_bottomOuter 0.10
82917>>>            DFHeaderMargin hm_bottomInner 0.01
82918>>>            DFHeaderMargin hm_TopInner    0.01
82919>>>            
82919>>>            DFWriteLnPos  nAmount         16.0      (Font_BOLD+FONT_RIGHT) 2 0
82920>>>            DFEndHeader
82922>>>            
82922>>>        End_Procedure
82923>>>        
82923>>>        Procedure Total
82926>>>            Number nTotal
82926>>>            Get SubTotal 2 to nTotal
82927>>>            
82927>>>            DFFont "Arial" //  Use Arial
82928>>>            DFFontSize 8
82929>>>            DFBeginHeader DFTotal           //Header of type DFTotal
82930>>>            
82930>>>            DFHeaderPos   HDR_LEFT         //Write data from left margin in the header
82931>>>            DFHeaderFrame HDR_MARGINs 0 RGB_DGREY RGB_GREY //rgb_Cyan rgb_Cyan
82932>>>            
82932>>>            DFWriteLnPos   nTotal         16.0      (FONT_BOLD+FONT_RIGHT) 2
82933>>>            
82933>>>            DFEndHeader                     //End and print header
82935>>>            
82935>>>        End_Procedure
82936>>>        
82936>>>        Procedure Page_Bottom
82939>>>            DateTime dtDT
82939>>>            Move (CurrentDateTime()) to dtDT
82940>>>            
82940>>>            DFFont "Arial" //  Use Arial
82941>>>            DFFontSize 8
82942>>>            DFBeginHeader DFPageBottom
82943>>>            DFHeaderPos   HDR_CENTER       //Write data in center
82944>>>            DFHeaderFrame HDR_MARGINS 0.01 rgb_dGrey
82945>>>            DFWriteLn   ("Report Printed on: " +String(dtDT)) (rgb_dBlue)
82946>>>            DFEndHeader
82948>>>            
82948>>>        End_Procedure
82949>>>        
82949>>>    End_Object
82950>>>    
82950>>>    // Procedures and functions used by the user interface
82950>>>    
82950>>>    //This function is called by the procedure StartReport
82950>>>    Function Print_to_Screen_State Returns Integer
82953>>>        Integer iRad
82953>>>        Get Current_Radio of oPrintTo to iRad
82954>>>        Function_Return (iRad=1)
82955>>>    End_Function
82956>>>    
82956>>>    // Use this procedure to do print setup
82956>>>    Procedure SetupReport
82959>>>        Boolean bSetupOk
82959>>>        Get DFPrintSetupDialog of (Report_Object_Id(Self)) to bSetupOk
82960>>>    End_Procedure
82961>>>    
82961>>>    // Use this procedure to start the report
82961>>>    Procedure StartReport
82964>>>        Integer iToPrinter iRepObj
82964>>>        String sVal
82964>>>        Get Report_Object_Id to iRepObj
82965>>>        
82965>>>        Get Print_to_Screen_State to iToPrinter
82966>>>        If iToPrinter;            Set OutPut_Device_Mode to PRINT_TO_PRINTER
82969>>>        Else;            Set OutPut_Device_Mode to PRINT_TO_WINDOW
82971>>>        
82971>>>        Send Run_Report to iRepObj
82972>>>        
82972>>>    End_Procedure
82973>>>    
82973>>>End_Object
82974>>>
82974>        Use WinPrint\OrdersByCustomerWP.rv
Including file: WinPrint\OrdersByCustomerWP.rv    (C:\test\BuildTools\Order Entry\AppSrc\WinPrint\OrdersByCustomerWP.rv)
82974>>>Use dfrptvw.pkg
82974>>>Use DataDict.pkg
82974>>>Use Windows.pkg
82974>>>Use cWinReport2.pkg
82974>>>
82974>>>Use cVendorDataDictionary.dd
82974>>>Use cInventoryDataDictionary.dd
82974>>>Use cCustomerDataDictionary.dd
82974>>>Use cSalesPersonDataDictionary.dd
82974>>>Use cOrderHeaderDataDictionary.dd
82974>>>Use cOrderDetailDataDictionary.dd
82974>>>
82974>>>Activate_View Activate_oOrdersByCustomerWP for oOrdersByCustomerWP
82984>>>>
82984>>>
82984>>>Object oOrdersByCustomerWP is a ReportView
82986>>>    
82986>>>    Property Integer main_dd
82988>>>    Property Integer server
82990>>>    
82990>>>    Set Label to "Orders by Customer"
82991>>>    Set Location to 6 6
82992>>>    Set Size to 110 174
82993>>>    
82993>>>    Object oVendorDataDictionary is a cVendorDataDictionary
82995>>>    End_Object
82996>>>    
82996>>>    Object oInventoryDataDictionary is a cInventoryDataDictionary
82998>>>        Set DDO_Server to oVendorDataDictionary
82999>>>    End_Object
83000>>>    
83000>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
83002>>>    End_Object
83003>>>    
83003>>>    Object oSalesPersonDataDictionary is a cSalesPersonDataDictionary
83005>>>    End_Object
83006>>>    
83006>>>    Object oOrderHeaderDataDictionary is a cOrderHeaderDataDictionary
83008>>>        Set DDO_Server to oCustomerDataDictionary
83009>>>        Set DDO_Server to oSalesPersonDataDictionary
83010>>>        Set Constrain_File to Customer.File_Number
83011>>>    End_Object
83012>>>    
83012>>>    Object oOrderDetailDataDictionary is a cOrderDetailDataDictionary
83014>>>        Set DDO_Server to oOrderHeaderDataDictionary
83015>>>        Set DDO_Server to oInventoryDataDictionary
83016>>>        Set Constrain_File to OrderHeader.File_Number
83017>>>    End_Object
83018>>>    
83018>>>    Set Main_DD to oCustomerDataDictionary
83019>>>    Set Server to oCustomerDataDictionary
83020>>>    
83020>>>    Object oPrintTo is a RadioGroup
83022>>>        Set Size to 38 105
83023>>>        Set Location to 5 5
83024>>>        Set Label to "Print to"
83025>>>        Object oRadio1 is a Radio
83027>>>            Set Label to "Preview"
83028>>>            Set Size to 10 42
83029>>>            Set Location to 12 6
83030>>>            Set Status_Help to "Prints the report to screen"
83031>>>        End_Object
83032>>>        
83032>>>        Object oRadio2 is a Radio
83034>>>            Set Label to "Printer"
83035>>>            Set Size to 10 42
83036>>>            Set Location to 24 6
83037>>>            Set Status_Help to "Prints the report to printer"
83038>>>        End_Object
83039>>>        
83039>>>    End_Object
83040>>>    
83040>>>    Object oReportOrder is a RadioGroup
83042>>>        Set Size to 38 105
83043>>>        Set Location to 45 5
83044>>>        Set Label to "Report Order"
83045>>>        Object oRadio3 is a Radio
83047>>>            Set Label to "Customer Number"
83048>>>            Set Size to 10 73
83049>>>            Set Location to 12 6
83050>>>            Set Status_Help to "Prints the report to screen"
83051>>>        End_Object
83052>>>        
83052>>>        Object oRadio4 is a Radio
83054>>>            Set Label to "Customer Name"
83055>>>            Set Size to 10 67
83056>>>            Set Location to 24 6
83057>>>            Set Status_Help to "Prints the report to printer"
83058>>>        End_Object
83059>>>        
83059>>>        Function OrderByNumber Returns Boolean
83062>>>            Function_Return (current_radio(Self)=0)
83063>>>        End_Function
83064>>>        
83064>>>    End_Object
83065>>>    
83065>>>    Object oSetupButton is a Button
83067>>>        Set Label to "Printer Setup"
83068>>>        Set Location to 7 120
83069>>>        
83069>>>        Procedure OnClick
83072>>>            Boolean bSetupOk
83072>>>            Get DFPrintSetupDialog of oOrders to bSetupOk
83073>>>        End_Procedure
83074>>>        
83074>>>    End_Object
83075>>>    
83075>>>    Object oBtnPrint is a Button
83077>>>        Set Label to "Print"
83078>>>        Set Location to 49 120
83079>>>        Set Status_Help to "Print the Selected report"
83080>>>        Set Default_State to True
83081>>>        
83081>>>        Procedure OnClick
83084>>>            Boolean bByNumber
83084>>>            Get OrderByNumber of oReportOrder  to bByNumber
83085>>>            Set Ordering of oOrders to (If(bByNumber,1,2))
83086>>>            Send StartReport
83087>>>        End_Procedure
83088>>>        
83088>>>    End_Object
83089>>>    
83089>>>    Object oBtnCancel is a Button
83091>>>        Set Label to "Cancel"
83092>>>        Set Location to 67 120
83093>>>        Set Status_Help to "Close this Panel"
83094>>>        
83094>>>        Procedure OnClick
83097>>>            Send Close_Panel
83098>>>        End_Procedure
83099>>>        
83099>>>    End_Object
83100>>>    
83100>>>    Object oOnePageCkBx is a CheckBox
83102>>>        Set Label to "New Page for Each Customer"
83103>>>        Set Size to 10 110
83104>>>        Set Location to 92 6
83105>>>        
83105>>>        Procedure OnChange
83108>>>            Boolean bChecked
83108>>>            
83108>>>            Get Checked_State to bChecked
83109>>>        End_Procedure
83110>>>        
83110>>>    End_Object
83111>>>    
83111>>>    Object oOrders is a cWinReport2
83113>>>        
83113>>>        Property Boolean pbOnePagePerCust False
83115>>>        
83115>>>        Set Report_Title to "Printing all Orders by Customer"
83116>>>        
83116>>>        //Main File for the report
83116>>>        Set Server to oCustomerDataDictionary
83117>>>        //Breaks and Index for the report
83117>>>        Report_Breaks Customer.Customer_number
83131>>>        
83131>>>        Set Ordering to 2
83132>>>        
83132>>>        Object oOrderHeader is a cWinReport2
83134>>>            
83134>>>            Set Server to oOrderHeaderDataDictionary
83135>>>            Report_Breaks ORDERHEAder.Order_number
83149>>>            Set Ordering to 2
83150>>>            
83150>>>            Object oOrderDetail is a cWinReport2
83152>>>                
83152>>>                Set Server to oOrderDetailDataDictionary
83153>>>                Report_Breaks OrderHeader.Order_Number
83167>>>                Set Ordering to 1
83168>>>                
83168>>>                Procedure SubHeader1
83171>>>                    Send Update_Status (Customer.Name - '/' - String(OrderHeader.Order_number))
83172>>>                    
83172>>>                    DFFont "Arial"
83173>>>                    DFFontSize 8
83174>>>                    
83174>>>                    DFBeginHeader DFSubHeader 2
83175>>>                    DFHeaderFrame hdr_NoFrame
83176>>>                    DFHeaderPos   hdr_Left
83177>>>                    DFHeaderWrap hdr_Wrap
83178>>>                    DFHeaderMargin hm_BottomOuter 0.04
83179>>>                    DFHeaderLineCheck 5            //Check that the header + 5 lines fits on the page, if not wrap
83180>>>                    
83180>>>                    DFWritePos    "Order Number"            0.10  (FONT_BOLD+RGB_DBLUE)
83181>>>                    DFWriteLnPos  OrderHeader.Order_number       4.0   (FONT_DEFAULT)
83182>>>                    DFWritePos    "Order Date"              0.10  (FONT_BOLD+RGB_DBLUE)
83183>>>                    DFWriteLnPos  OrderHeader.Order_date         4.0   (FONT_DEFAULT)
83184>>>                    DFWritePos    "Terms"                   0.10  (FONT_BOLD+RGB_DBLUE)
83185>>>                    DFWriteLnPos  OrderHeader.Terms              4.0   (FONT_DEFAULT)
83186>>>                    DFWritePos    "Ship Via"                0.10  (FONT_BOLD+RGB_DBLUE)
83187>>>                    DFWriteLnPos  OrderHeader.Ship_via           4.0   (FONT_DEFAULT)
83188>>>                    
83188>>>                    DFWriteRect dfgr_CurrLine 0 0.34 dfgr_rb_Margin rgb_Grey 0.0 dfgr_NoWrap rgb_Grey
83189>>>                    DFWritePos    "Item Id"                 0.1     (FONT_BOLD+RGB_DBLUE)            -1 1.36
83190>>>                    DFWritePos    "Description"             4.00    (FONT_BOLD+RGB_DBLUE)            -1 4.77
83191>>>                    DFWritePos    "Qty Ordered"             11.5     (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 1.87
83192>>>                    DFWritePos    "Price"                   13.22   (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 1.22
83193>>>                    DFWritePos    "Extended Price"          16.0    (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 2.50
83194>>>                    DFWriteLn
83195>>>                    
83195>>>                    DFEndHeader
83197>>>                    
83197>>>                End_Procedure
83198>>>                
83198>>>                Procedure Body // order detail body
83201>>>                    
83201>>>                    DFFont "Arial"
83202>>>                    DFFontSize 8
83203>>>                    
83203>>>                    DFLineCheck 5
83204>>>                    
83204>>>                    DFWritePos    Inventory.Item_id                0.1     (FONT_DEFAULT)            -1 2.28
83205>>>                    DFWritePos    Inventory.Description            4.00    (FONT_DEFAULT)            -1 4.77
83206>>>                    DFWritePos    OrderDetail.Qty_ordered        11.5     (FONT_DEFAULT+FONT_RIGHT)  0 1.87
83207>>>                    DFWritePos    OrderDetail.Price              13.22   (FONT_DEFAULT+FONT_RIGHT)  2 1.22
83208>>>                    DFWritePos    OrderDetail.Extended_price     16.0    (FONT_DEFAULT+FONT_RIGHT)  2 2.50
83209>>>                    DFWriteLn
83210>>>                    
83210>>>                    // Using rectotal in WinPrint.
83210>>>                    Send Add_SubTotal 1 (OrderDetail.Extended_price)
83211>>>                    
83211>>>                End_Procedure
83212>>>                
83212>>>                Procedure SubTotal1 // order total
83215>>>                    Number nAmount
83215>>>                    
83215>>>                    Get SubTotal 1 to nAmount
83216>>>                    Send Add_SubTotal 2 nAmount // subtotal 2 is customer total
83217>>>                    
83217>>>                    DFFont "Arial"
83218>>>                    DFFontSize 8
83219>>>                    DFBeginHeader DFSubTotal 2
83220>>>                    DFHeaderPos hdr_Left
83221>>>                    DFHeaderFrame hdr_Margins 0.01 rgb_dGrey rgb_Grey
83222>>>                    DFHeaderMargin hm_TopInner 0.02
83223>>>                    DFHeaderMargin hm_BottomInner 0.02
83224>>>                    DFHeaderMargin hm_BottomOuter 0.08
83225>>>                    DFHeaderMargin hm_TopOuter 0.04
83226>>>                    
83226>>>                    DFWritePos   "Order Total:"  14.0  (FONT_BOLD+RGB_DBLUE+FONT_RIGHT)
83227>>>                    DFWriteLnPos nAmount         16.0   (FONT_RIGHT) 2
83228>>>                    DFEndHeader
83230>>>                    
83230>>>                End_Procedure
83231>>>                
83231>>>            End_Object
83232>>>            
83232>>>        End_Object
83233>>>        
83233>>>        Function Starting_Main_Report Returns Integer
83236>>>            Integer iRetVal bBreak
83236>>>            Get OnePagePerCust to bBreak
83237>>>            Set pbOnePagePerCust to bBreak
83238>>>            Send DFSetMetrics to WinPrintId "CM"
83239>>>            Send DFSetmargins to WinPrintId 1 1 1 1
83240>>>            Forward Get Starting_Main_Report to iRetVal
83242>>>            If iRetVal;                Function_Return iRetVal
83245>>>        End_Function
83246>>>        
83246>>>        Procedure Page_Top
83249>>>            DFFont "Arial"
83250>>>            DFFontSize 8
83251>>>            DFBeginHeader DFPageTop
83252>>>            DFHeaderFrame hdr_NoFrame
83253>>>            DFHeaderPos   hdr_Right
83254>>>            
83254>>>            DFWriteLn ("Page:" * "#pagecount#")
83255>>>            DFEndHeader
83257>>>        End_Procedure
83258>>>        
83258>>>        Procedure Page_Title
83261>>>            DFFont "Arial"
83262>>>            DFFontSize 14
83263>>>            DFBeginHeader DFPageTitle
83264>>>            DFHeaderFrame hdr_Margins 0.01 rgb_dGrey rgb_dGrey
83265>>>            DFHeaderPos hdr_Left
83266>>>            DFHeaderMargin hm_BottomOuter 0.08
83267>>>            
83267>>>            DFWriteLnPos "Orders by Customer Report" 0.10 (FONT_BOLD+RGB_WHITE)
83268>>>            DFEndHeader
83270>>>        End_Procedure
83271>>>        
83271>>>        Procedure SubHeader1
83274>>>            Integer iClr
83274>>>            DFFont "Arial" //  Use Arial
83275>>>            DFFontSize 8
83276>>>            Get DFGetDFColor of winprintId  242 242 242 to iClr // Move -218959360 to iClr  can be used instead
83277>>>            
83277>>>            DFBeginHeader DFSubHeader 1 // customer sub-header
83278>>>            DFHeaderFrame hdr_Margins 0.01 rgb_dGrey iClr
83279>>>            DFHeaderPos   hdr_Left
83280>>>            DFHeaderWrap hdr_Wrap
83281>>>            DFHeaderLineCheck 10 //Check that the header + 10 lines fits on the page, if not wrap
83282>>>            
83282>>>            DFWritePos    "Customer Number"         0.10  (FONT_BOLD+RGB_DBLUE)
83283>>>            DFWriteLnPos  Customer.Customer_number    4.0
83284>>>            DFWritePos    "Name"                    0.10  (FONT_BOLD+RGB_DBLUE)
83285>>>            DFWriteLnPos  Customer.Name               4.0   (FONT_DEFAULT)
83286>>>            DFWritePos    "Address"                 0.10  (FONT_BOLD+RGB_DBLUE)
83287>>>            DFWriteLnPos  Customer.Address            4.0   (FONT_DEFAULT)
83288>>>            DFWritePos    "City"                    0.10  (FONT_BOLD+RGB_DBLUE)
83289>>>            DFWriteLnPos  Customer.City               4.0   (FONT_DEFAULT)
83290>>>            DFWritePos    "State"                   0.10  (FONT_BOLD+RGB_DBLUE)
83291>>>            DFWriteLnPos  Customer.State              4.0   (FONT_DEFAULT)
83292>>>            DFWritePos    "Zip"                     0.10  (FONT_BOLD+RGB_DBLUE)
83293>>>            DFWriteLnPos  Customer.Zip                4.0   (FONT_DEFAULT)
83294>>>            DFEndHeader
83296>>>        End_Procedure
83297>>>        
83297>>>        Procedure SubTotal1 // customer total
83300>>>            Number nAmount
83300>>>            Integer iClr
83300>>>            Boolean bBreak
83300>>>            
83300>>>            Get SubTotal 2 to nAmount
83301>>>            Send Add_SubTotal 3 nAmount // subtotal 3 is total of all
83302>>>            
83302>>>            Get DFGetDFColor of winprintId  242 242 242 to iClr // Move -218959360 to iClr   can be used instead
83303>>>            
83303>>>            DFFont "Arial" //  Use Arial
83304>>>            DFFontSize 8
83305>>>            DFBeginHeader DFSubTotal 1
83306>>>            DFHeaderPos hdr_Left
83307>>>            DFHeaderFrame hdr_Margins 0.01 rgb_dGrey iClr
83308>>>            DFHeaderMargin hm_BottomOuter 0.16
83309>>>            
83309>>>            DFWritePos   "Customer Total:"  14.0 (FONT_BOLD+RGB_DBLUE+FONT_RIGHT)
83310>>>            DFWriteLnPos nAmount 16.0              (FONT_RIGHT+FONT_Bold) 2 0
83311>>>            DFEndHeader
83313>>>            Get pbOnePagePerCust to bBreak
83314>>>            If bBreak Begin
83316>>>                Send DFNew_Page
83317>>>            End
83317>>>>
83317>>>        End_Procedure
83318>>>        
83318>>>        Procedure Total // total of all customers
83321>>>            Number nTotal
83321>>>            Get SubTotal 3 to nTotal
83322>>>            
83322>>>            DFFont "Arial" //  Use Arial
83323>>>            DFFontSize 10
83324>>>            
83324>>>            DFBeginHeader DFTotal
83325>>>            
83325>>>            DFHeaderPos   hdr_Left
83326>>>            DFHeaderFrame hdr_Margins 0.01 rgb_dGrey rgb_Grey
83327>>>            
83327>>>            DFWritePos    "Grand Total:"  14.0        (FONT_BOLD+RGB_DBLUE+FONT_RIGHT)
83328>>>            DFWriteLnPos   nTotal         16.0      (FONT_BOLD+FONT_RIGHT) 2
83329>>>            
83329>>>            DFEndHeader                     //End and print header
83331>>>            
83331>>>        End_Procedure
83332>>>        
83332>>>        Procedure Page_Bottom
83335>>>            DateTime dtDT
83335>>>            Move (CurrentDateTime()) to dtDT
83336>>>            
83336>>>            DFFont "Arial"
83337>>>            DFFontSize 8
83338>>>            DFBeginHeader DFPageBottom
83339>>>            DFHeaderPos   hdr_Center
83340>>>            DFHeaderFrame hdr_Margins 0.01 rgb_dGrey
83341>>>            DFWriteLn   ("Report Printed on: " +String(dtDT)) (rgb_dBlue)
83342>>>            DFEndHeader
83344>>>            
83344>>>        End_Procedure
83345>>>        
83345>>>    End_Object
83346>>>    
83346>>>    // Procedures and functions used by the user interface
83346>>>    
83346>>>    //This function is called by the procedure StartReport
83346>>>    Function Print_to_Screen_State Returns Integer
83349>>>        Integer iRad
83349>>>        Get Current_Radio of oPrintTo to iRad
83350>>>        Function_Return (iRad=1)
83351>>>    End_Function
83352>>>    
83352>>>    // Use this procedure to do print setup
83352>>>    Procedure SetupReport
83355>>>        Boolean bSetupOk
83355>>>        Get DFPrintSetupDialog of oOrders to bSetupOk
83356>>>    End_Procedure
83357>>>    
83357>>>    // Use this procedure to start the report
83357>>>    Procedure StartReport
83360>>>        Boolean bToPrinter
83360>>>        String sVal
83360>>>        Get Print_to_Screen_State to bToPrinter
83361>>>        If bToPrinter;            Set OutPut_Device_Mode to PRINT_TO_PRINTER
83364>>>        Else;            Set OutPut_Device_Mode to PRINT_TO_WINDOW
83366>>>        
83366>>>        Send Run_Report of oOrders
83367>>>        
83367>>>    End_Procedure
83368>>>    
83368>>>    Function OnePagePerCust Returns Boolean
83371>>>        Boolean bBreak
83371>>>        Get checked_state of oOnePageCkBx to bBreak
83372>>>        Function_Return bBreak
83373>>>    End_Function
83374>>>    
83374>>>    // The Report
83374>>>    //    Object oOrders is a cWinReport2
83374>>>    //    //Object oOrders is a WinReport
83374>>>    
83374>>>    //        Property Boolean pbOnePagePerCust False
83374>>>    //        Set Report_Title to "Printing all Orders by Customer"
83374>>>    
83374>>>    //        //Main File for the report
83374>>>    //        Set Server to CustomerDataDictionary
83374>>>    //        //Breaks and Index for the report
83374>>>    //        Report_Breaks ORDERHEA.CUSTOMER_NUMBER
83374>>>    //        Set Ordering to 2
83374>>>    
83374>>>    //        Function Starting_Main_Report Returns Integer
83374>>>    //            Integer iRetVal bBreak
83374>>>    //            Get OnePagePerCust to bBreak
83374>>>    //            Set pbOnePagePerCust to bBreak
83374>>>    //            Send DFSetMetrics To WinPrintId "CM"
83374>>>    //            Send DFSetmargins To WinPrintId 1 1 1 1
83374>>>    //            Forward Get Starting_Main_Report To iRetVal
83374>>>    //            If iRetVal Function_return iRetVal
83374>>>    //        End_Function
83374>>>    
83374>>>    //        Procedure Page_Top
83374>>>    //            DFFont "Arial"
83374>>>    //            DFFontSize 8
83374>>>    //            DFBeginHeader DFPageTop
83374>>>    //                DFHeaderFrame HDR_NOFRAME
83374>>>    //                DFHeaderPos   HDR_RIGHT
83374>>>    
83374>>>    //                DFWriteLn ("Page:" * "#pagecount#")
83374>>>    //            DFEndHeader
83374>>>    //        End_Procedure
83374>>>    
83374>>>    //        Procedure Page_Title
83374>>>    //            DFFont "Arial"
83374>>>    //            DFFontSize 14
83374>>>    //            DFBeginHeader DFPageTitle
83374>>>    //                DFHeaderFrame HDR_MARGINs 0.01 RGB_DGREY RGB_DGREY
83374>>>    //                DFHEADERPOS HDR_LEFT
83374>>>    //                DfHeaderMargin hm_BottomOuter 0.08
83374>>>    
83374>>>    //                DFWritelnPos "Orders by Customer Report" 0.10 (FONT_BOLD+RGB_WHITE)
83374>>>    //            DFEndHeader
83374>>>    //        End_Procedure
83374>>>    
83374>>>    //        Procedure SubHeader1
83374>>>    //            integer iClr
83374>>>    //            DFFont "Arial" //  Use Arial
83374>>>    //            DFFontSize 8
83374>>>    //            //Get DFGetDFColor of winprintId  242 242 242 to iClr // doesn't work YET
83374>>>    //            Move -218959360 to iClr
83374>>>    
83374>>>    //            DFBeginHeader DFSubHeader 1 // customer sub-header
83374>>>    //                DFHeaderFrame hdr_Margins 0.01 rgb_dGrey iClr
83374>>>    //                DFHeaderPos   HDR_LEFT
83374>>>    //                DFHeaderWrap HDR_WRAP
83374>>>    //                DFHeaderLineCheck 10 //Check that the header + 10 lines fits on the page, if not wrap
83374>>>    
83374>>>    //                DFWritePos    "Customer Number"         0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                DFWritelnPos  Customer.CUSTOMER_NUMBER    4.0
83374>>>    //                DFWritePos    "Name"                    0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                DFWritelnPos  Customer.NAME               4.0   (FONT_DEFAULT)
83374>>>    //                DFWritePos    "Address"                 0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                DFWritelnPos  Customer.ADDRESS            4.0   (FONT_DEFAULT)
83374>>>    //                DFWritePos    "City"                    0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                DFWritelnPos  Customer.CITY               4.0   (FONT_DEFAULT)
83374>>>    //                DFWritePos    "State"                   0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                DFWritelnPos  Customer.STATE              4.0   (FONT_DEFAULT)
83374>>>    //                DFWritePos    "Zip"                     0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                DFWritelnPos  Customer.ZIP                4.0   (FONT_DEFAULT)
83374>>>    //            DFEndHeader
83374>>>    //        End_Procedure
83374>>>    
83374>>>    //        Object oOrderHea is a cWinReport2
83374>>>    //    //        Object oOrders is a WinReport
83374>>>    
83374>>>    //            Set Server to OrderHeaderDataDictionary
83374>>>    //            Report_Breaks ORDERHEA.Order_number
83374>>>    //            set Ordering to 2
83374>>>    
83374>>>    //            Object oOrderDetail is a cWinReport2
83374>>>    //    //            Object oOrders is a WinReport
83374>>>    
83374>>>    //                Set Server to OrderDetailDataDictionary
83374>>>    //                Report_Breaks ORDERHEA.Order_Number
83374>>>    //                Set Ordering to 1
83374>>>    
83374>>>    //                Procedure SubHeader1 // order sub-header
83374>>>    //                      Send Update_Status (Customer.Name - '/' - string(OrderHeader.order_number))
83374>>>    
83374>>>    //                      DFFont "Arial"
83374>>>    //                      DFFontSize 8
83374>>>    
83374>>>    //                      DFBeginHeader DFSubHeader 2
83374>>>    //                        DFHeaderFrame hdr_NoFrame
83374>>>    //                        DFHeaderPos   HDR_LEFT
83374>>>    //                        DFHeaderWrap HDR_WRAP
83374>>>    //                        DfHeaderMargin hm_BottomOuter 0.04
83374>>>    //                        DFHeaderLineCheck 5            //Check that the header + 5 lines fits on the page, if not wrap
83374>>>    
83374>>>    //                        DFWritePos    "Order Number"            0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                        DFWritelnPos  OrderHeader.ORDER_NUMBER       4.0   (FONT_DEFAULT)
83374>>>    //                        DFWritePos    "Order Date"              0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                        DFWritelnPos  OrderHeader.ORDER_DATE         4.0   (FONT_DEFAULT)
83374>>>    //                        DFWritePos    "Terms"                   0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                        DFWritelnPos  OrderHeader.TERMS              4.0   (FONT_DEFAULT)
83374>>>    //                        DFWritePos    "Ship Via"                0.10  (FONT_BOLD+RGB_DBLUE)
83374>>>    //                        DFWritelnPos  OrderHeader.SHIP_VIA           4.0   (FONT_DEFAULT)
83374>>>    
83374>>>    //                        DfWriteRect DFGR_CURRLINE 0 0.34 DFGR_RB_MARGIN RGB_GREY 0.0 dfgr_noWrap RGB_GREY
83374>>>    //                        DFWritePos    "Item Id"                 0.1     (FONT_BOLD+RGB_DBLUE)            -1 1.36
83374>>>    //                        DFWritePos    "Description"             2.36    (FONT_BOLD+RGB_DBLUE)            -1 4.77
83374>>>    //                        DFWritePos    "Qty Ordered"             9.5     (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 1.87
83374>>>    //                        DFWritePos    "Price"                   11.22   (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 1.22
83374>>>    //                        DFWritePos    "Extended Price"          14.1    (FONT_BOLD+FONT_RIGHT+RGB_DBLUE) -1 2.38
83374>>>    //                        DFWriteln
83374>>>    
83374>>>    //                      DFEndHeader
83374>>>    
83374>>>    //                End_Procedure
83374>>>    
83374>>>    //                Procedure Body // order detail body
83374>>>    
83374>>>    //                    DFFont "Arial"
83374>>>    //                    DFFontSize 8
83374>>>    
83374>>>    //                    DFLineCheck 5
83374>>>    
83374>>>    //                    DFWritePos    Inventory.ITEM_ID                0.1     (FONT_DEFAULT)            -1 2.24
83374>>>    //                    DFWritePos    Inventory.DESCRIPTION            2.36    (FONT_DEFAULT)            -1 4.77
83374>>>    //                    DFWritePos    OrderDetail.QTY_ORDERED        9.5     (FONT_DEFAULT+FONT_RIGHT)  0 1.87
83374>>>    //                    DFWritePos    OrderDetail.PRICE              11.22   (FONT_DEFAULT+FONT_RIGHT)  2 1.22
83374>>>    //                    DFWritePos    OrderDetail.EXTENDED_PRICE     14.1    (FONT_DEFAULT+FONT_RIGHT)  2 2.38
83374>>>    //                    DFWriteln
83374>>>    
83374>>>    //                    // Using rectotal in WinPrint.
83374>>>    //                    Send Add_SubTotal 1 (OrderDetail.EXTENDED_PRICE)
83374>>>    
83374>>>    //                End_Procedure
83374>>>    
83374>>>    //                Procedure SubTotal1 // order total
83374>>>    //                    Number nAmount
83374>>>    
83374>>>    //                    Get SubTotal 1 to nAmount
83374>>>    //                    Send Add_SubTotal 2 nAmount // subtotal 2 is customer total
83374>>>    
83374>>>    //                    DFFont "Arial"
83374>>>    //                    DFFontSize 8
83374>>>    //                    DFBeginHeader DFSubTotal 2
83374>>>    //                        DFHEADERPOS HDR_LEFT
83374>>>    //                        DFHEADERFRAME HDR_Margins 0.01 rgb_dGrey rgb_Grey
83374>>>    //                        DfHeaderMargin hm_TopInner 0.02
83374>>>    //                        DfHeaderMargin hm_BottomInner 0.02
83374>>>    //                        DfHeaderMargin hm_BottomOuter 0.08
83374>>>    //                        DfHeaderMargin hm_TopOuter 0.04
83374>>>    
83374>>>    //                        DFWritePos   "Order Total:"  12.00  (FONT_BOLD+RGB_DBLUE+FONT_RIGHT)
83374>>>    //                        DFWritelnPos nAmount         14.1   (FONT_RIGHT) 2
83374>>>    //                    DFEndHeader
83374>>>    
83374>>>    //                End_Procedure
83374>>>    
83374>>>    //            end_object // OrderDetail nested report
83374>>>    
83374>>>    //        end_object // orderhea nested report
83374>>>    
83374>>>    //        Procedure SubTotal1 // customer total
83374>>>    //            Number nAmount
83374>>>    //            integer iClr
83374>>>    //            Boolean bBreak
83374>>>    
83374>>>    //            Get SubTotal 2 to nAmount
83374>>>    //            Send Add_SubTotal 3 nAmount // subtotal 3 is total of all
83374>>>    
83374>>>    //            //Get DFGetDFColor of winprintId  242 242 242 to iClr // doesn't work YET
83374>>>    //            Move -218959360 to iClr
83374>>>    
83374>>>    //            DFFont "Arial" //  Use Arial
83374>>>    //            DFFontSize 8
83374>>>    //            DFBeginHeader DFSubTotal 1
83374>>>    //                DFHEADERPOS HDR_LEFT
83374>>>    //                DFHeaderFrame HDR_Margins 0.01 RGB_DGREY iClr
83374>>>    //                DfHeaderMargin hm_BottomOuter 0.16
83374>>>    
83374>>>    //                DFWritePos   "Customer Total:"  12.00 (FONT_BOLD+RGB_DBLUE+FONT_RIGHT)
83374>>>    //                DFWritelnPos nAmount 14.1              (FONT_RIGHT+FONT_Bold) 2 0
83374>>>    //            DFEndHeader
83374>>>    //            Get pbOnePagePerCust to bBreak
83374>>>    //            If bBreak Begin
83374>>>    //                send DFNew_Page
83374>>>    //            end
83374>>>    //        end_procedure
83374>>>    
83374>>>    //        Procedure Total // total of all customers
83374>>>    //            Number nTotal
83374>>>    //            Get SubTotal 3 to nTotal
83374>>>    
83374>>>    //            DFFont "Arial" //  Use Arial
83374>>>    //            DFFontSize 10
83374>>>    
83374>>>    //            DFBeginHeader DFTotal
83374>>>    
83374>>>    //                DFHeaderPos   HDR_LEFT
83374>>>    //                DFHeaderFrame HDR_MARGINs 0.01 RGB_DGREY RGB_GREY
83374>>>    
83374>>>    //                DFWritePos    "Grand Total:"  12        (FONT_BOLD+RGB_DBLUE+FONT_RIGHT)
83374>>>    //                DFWritelnPos   nTotal         14.1      (FONT_BOLD+FONT_RIGHT) 2
83374>>>    
83374>>>    //            DFEndHeader                     //End and print header
83374>>>    
83374>>>    //        End_Procedure
83374>>>    
83374>>>    //        Procedure Page_Bottom
83374>>>    //            DateTime dtDT
83374>>>    //            Move (CurrentDateTime()) to dtDT
83374>>>    
83374>>>    //            DFFont "Arial"
83374>>>    //            DFFontSize 8
83374>>>    //            DFBeginHeader DFPageBottom
83374>>>    //                DFHeaderPos   HDR_CENTER
83374>>>    //                DFHeaderFrame HDR_MARGINS 0.01 rgb_dGrey
83374>>>    //                DFWriteLn   ("Report Printed on: " +string(dtDT)) (rgb_dBlue)
83374>>>    //            DFEndHeader
83374>>>    
83374>>>    //        End_Procedure
83374>>>    
83374>>>    //    End_Object // customer main report
83374>>>    
83374>>>End_Object
83375>>>
83375>        
83375>        On_Key Key_Ctrl+Key_1 Send Activate_oCustomerView
83376>        On_Key Key_Ctrl+Key_2 Send Activate_oInventoryView
83377>        On_Key Key_Ctrl+Key_3 Send Activate_oOrderEntryView
83378>        On_Key Key_Ctrl+Key_4 Send Activate_oSalesPersonView
83379>        On_Key Key_Ctrl+Key_5 Send Activate_oVendorView
83380>        On_Key Key_Ctrl+Key_6 Send Activate_oCustomerListWP
83381>        On_Key Key_Ctrl+Key_7 Send Activate_oItemsPerOrderWP
83382>        On_Key Key_Ctrl+Key_8 Send Activate_oOrdersByCustomerWP
83383>        On_Key Key_Ctrl+Key_9 Send Activate_oOrdersWP
83384>        
83384>        Use StdAbout.pkg
Including file: StdAbout.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\StdAbout.pkg)
83384>>>// This provides a quick and simple way to create an about package for a program.
83384>>>// You need to create a message inside you client area called Activate_About.
83384>>>// Within this message you should send the message DoAbout passing needed
83384>>>// string information.
83384>>>//
83384>>>//       Procedure Activate_About
83384>>>//           Send DoAbout sTitle sVersion sCopyright sAuthor sBitmap
83384>>>//       End_Procedure
83384>>>//    where: sTitle =     Name of application. If none provided, uses caption
83384>>>//                        bar title
83384>>>//           sVersion   = Version Line. If none provided, will be blank
83384>>>//           sCopyRight = Copyright Line. If none provided, will be blank
83384>>>//           sAuthor    = Author name, blank if none provided
83384>>>//           sBitMap    = Bitmap logo. If none provided, standard VDF bitmap
83384>>>//                        is used.
83384>>>// It is expected that you will place this in your own object package. For
83384>>>// example an order about package may look like this:
83384>>>//
83384>>>//   // OrderAbout.pkg
83384>>>//   Use StdAbout.pkg
83384>>>//   Procedure Activate_About
83384>>>//      String sTitle sCopyright sVersion sAuthor
83384>>>//      Move "My Order Entry System" to sTitle
83384>>>//      Move "Version 2.1" to sVersion
83384>>>//      Move "Copyright xxxx, Super Software Inc." to sCopyright
83384>>>//      Move "John Smith"  to sAuthor
83384>>>//      Send DoAbout sTitle sVersion sCopyright sAuthor ""
83384>>>//   end_procedure
83384>>>//   // end of file.
83384>>>
83384>>>Use DfAbout.pkg
Including file: Dfabout.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\Dfabout.pkg)
83384>>>>>Use LanguageText.pkg
83384>>>>>Use Windows.pkg
83384>>>>>Use DFbitmap.pkg
83384>>>>>Use GlobalFunctionsProcedures.pkg
83384>>>>>Use cTextEdit.pkg
83384>>>>>Use tWinStructs.pkg
83384>>>>>
83384>>>>>Use cli.pkg
83384>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files (x86)\DataFlex 19.1\Pkg\DFBTRDRV.PKG)
83384>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
83384>>>>>>>// Notice      : This package contains constants and commands, used to call
83384>>>>>>>//               specific functions in the DFBTRDRV.
83384>>>>>>>Use Ui
83384>>>>>>>//
83384>>>>>>>// Driver Indentification
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>// Driver attributes
83384>>>>>>>//
83384>>>>>>>// Call_Driver functions ID's
83384>>>>>>>//
83384>>>>>>>//
83384>>>>>>>// DFBTRFN_CONVERT_FILE options
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// DFBTRFN_SET_OWNER options
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to create all vars which may be needed
83384>>>>>>>// in other commands.
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to set the owner of a Btrieve file.
83384>>>>>>>// File must have been opened.
83384>>>>>>>// Filenumber needs to be passed.
83384>>>>>>>// To clear set the owner to "".
83384>>>>>>>// Examples:
83384>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
83384>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
83384>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
83384>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
83384>>>>>>>// To clear:
83384>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to parse DFBTR_SET_OWNVER
83384>>>>>>>// options.
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to parse for Callback
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to clear the owner of a Btrieve file.
83384>>>>>>>// File must have been opened.
83384>>>>>>>// Filenumber needs to be passed.
83384>>>>>>>// Examples:
83384>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to add a owner name to the internal list of ownernames
83384>>>>>>>// which will be tries when opening files.
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to remove all owners from the internal list of ownernames
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to set the owner name to be used when opening the DDF files.
83384>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
83384>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
83384>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to change the transaction type.
83384>>>>>>>// Valid types are:
83384>>>>>>>//     DFBTRTT_NONE
83384>>>>>>>//     DFBTRTT_EXCLUSIVE
83384>>>>>>>//     DFBTRTT_CONCURRENT
83384>>>>>>>//
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to get the current transaction type.
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to set explicit_locking
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to get explicit locking
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>//
83384>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
83384>>>>>>>//
83384>>>>>>>
83384>>>>>>>// Purpose: An instance of this class can be used as a broker object to
83384>>>>>>>//          call several Dfbtrdrv releated methods.
83384>>>>>>>
83384>>>>>>>Class cDFBtrDrvHandler is an Array
83385>>>>>>>    
83385>>>>>>>    Procedure Construct_Object Integer iImage
83387>>>>>>>        Forward Send Construct_object iImage
83389>>>>>>>        
83389>>>>>>>        Property String  psDriverID "DFBTRDRV"
83390>>>>>>>    End_Procedure
83391>>>>>>>    
83391>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
83391>>>>>>>    //
83391>>>>>>>    
83391>>>>>>>    Function CKRevision Returns String
83393>>>>>>>        String  sDriverID
83393>>>>>>>        String  sRevision
83393>>>>>>>        String  sVoid
83393>>>>>>>        Integer iRetval
83393>>>>>>>        
83393>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
83393>>>>>>>        // This error would otherwise be raised when we have an older
83393>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
83393>>>>>>>        Send Ignore_error to Error_object_Id 20491
83394>>>>>>>        Get psDriverID to sDriverID
83395>>>>>>>        Move (Repeat(" ", 255)) to sRevision
83396>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
83401>>>>>>>        Send Trap_Error to Error_object_Id 20491
83402>>>>>>>        If (Trim(sRevision) = "") Begin
83404>>>>>>>            // Unable to get the revision. return all zeroes.
83404>>>>>>>            Move "0.0.0.0" to sRevision
83405>>>>>>>        End
83405>>>>>>>>
83405>>>>>>>        Function_Return sRevision
83406>>>>>>>    End_Function
83407>>>>>>>    
83407>>>>>>>    Function CkUsesUri Returns Integer
83409>>>>>>>        String  sDriverID
83409>>>>>>>        String  sVoid1
83409>>>>>>>        String  sVoid2
83409>>>>>>>        Integer iRetval
83409>>>>>>>        
83409>>>>>>>        Get psDriverID to sDriverID
83410>>>>>>>        
83410>>>>>>>        Move 0 to iRetval
83411>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
83411>>>>>>>        // This error would otherwise be raised when we have an older
83411>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
83411>>>>>>>        Send Ignore_error to Error_object_Id 20491
83412>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
83417>>>>>>>        Send Trap_Error to Error_object_Id 20491
83418>>>>>>>        
83418>>>>>>>        Function_Return iRetval
83419>>>>>>>    End_Function
83420>>>>>>>    
83420>>>>>>>    
83420>>>>>>>    
83420>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
83420>>>>>>>    //
83420>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
83420>>>>>>>    //
83420>>>>>>>    
83420>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
83422>>>>>>>        Integer iPartRev
83422>>>>>>>        Integer iCurrentPart
83422>>>>>>>        Integer iSeparatorPos
83422>>>>>>>        
83422>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
83425>>>>>>>        
83425>>>>>>>        Move 0 to iCurrentPart
83426>>>>>>>        Repeat
83426>>>>>>>>
83426>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
83427>>>>>>>            If (iSeparatorPos > 0) Begin
83429>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
83430>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
83431>>>>>>>                Increment iCurrentPart
83432>>>>>>>            End
83432>>>>>>>>
83432>>>>>>>            Else If (sRevision <> "") Begin
83435>>>>>>>                Move sRevision to iPartRev
83436>>>>>>>                Move "" to sRevision
83437>>>>>>>                Increment iCurrentPart
83438>>>>>>>            End
83438>>>>>>>>
83438>>>>>>>            Else ;                Move -1 to iPartRev
83440>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
83442>>>>>>>        
83442>>>>>>>        Function_Return iPartRev
83443>>>>>>>    End_Function
83444>>>>>>>    
83444>>>>>>>    
83444>>>>>>>    
83444>>>>>>>    //
83444>>>>>>>    //  Returns the major revision of the CK
83444>>>>>>>    //
83444>>>>>>>    
83444>>>>>>>    Function CKMajorRevision Returns Integer
83446>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
83447>>>>>>>    End_Function
83448>>>>>>>    
83448>>>>>>>    
83448>>>>>>>    
83448>>>>>>>    //  Returns the minor revision of the CK
83448>>>>>>>    //
83448>>>>>>>    
83448>>>>>>>    Function CKMinorRevision Returns Integer
83450>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
83451>>>>>>>    End_Function
83452>>>>>>>    
83452>>>>>>>    
83452>>>>>>>    //  Returns the release revision of the CK
83452>>>>>>>    //
83452>>>>>>>    
83452>>>>>>>    Function CKReleaseRevision Returns Integer
83454>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
83455>>>>>>>    End_Function
83456>>>>>>>    
83456>>>>>>>    
83456>>>>>>>    //  Returns the major revision of the CK
83456>>>>>>>    //
83456>>>>>>>    
83456>>>>>>>    Function CKBuildRevision Returns Integer
83458>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
83459>>>>>>>    End_Function
83460>>>>>>>    
83460>>>>>>>    
83460>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
83460>>>>>>>    //
83460>>>>>>>    
83460>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
83462>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
83465>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
83468>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
83471>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
83474>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
83477>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
83481>>>>>>>            End
83481>>>>>>>>
83481>>>>>>>        End
83481>>>>>>>>
83481>>>>>>>        
83481>>>>>>>        Function_Return (False)
83482>>>>>>>    End_Function
83483>>>>>>>    
83483>>>>>>>    //   Functions to query the Pervasive.SQL version:
83483>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
83483>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
83483>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
83483>>>>>>>    //
83483>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
83483>>>>>>>    //   in the following format:
83483>>>>>>>    //       <version>.<revision>.<type>
83483>>>>>>>    //   possible values for <type>:
83483>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
83483>>>>>>>    //         server using Workgroup authentication mode
83483>>>>>>>    //       C for client cache engine
83483>>>>>>>    //       D for DOS workstation
83483>>>>>>>    //       N for client Requester
83483>>>>>>>    //       S for NetWare server
83483>>>>>>>    //       T for 32-bit Windows server engine
83483>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
83483>>>>>>>    //
83483>>>>>>>    //   example:
83483>>>>>>>    //       8.50.T
83483>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
83483>>>>>>>    //   32-bits Windows server.
83483>>>>>>>    //
83483>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
83483>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
83483>>>>>>>    //
83483>>>>>>>    //   If the version information is not available or can not be obtained
83483>>>>>>>    //   the functions will return "0.0.0"
83483>>>>>>>    
83483>>>>>>>    //  Returns the version information of the
83483>>>>>>>    //           Pervasive.SQL Client requester.
83483>>>>>>>    
83483>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
83485>>>>>>>        
83485>>>>>>>        String  sDriverID
83485>>>>>>>        String  sVersion
83485>>>>>>>        String  sVoid
83485>>>>>>>        Integer iRetval
83485>>>>>>>        
83485>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
83485>>>>>>>        // This error would otherwise be raised when we have an older
83485>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
83485>>>>>>>        Send Ignore_error to Error_object_Id 20491
83486>>>>>>>        Get psDriverID to sDriverID
83487>>>>>>>        Move (Repeat(" ", 255)) to sVersion
83488>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
83493>>>>>>>        Send Trap_Error to Error_object_Id 20491
83494>>>>>>>        If (Trim(sVersion) = "") Begin
83496>>>>>>>            // Unable to get the revision. return all zeroes.
83496>>>>>>>            Move "0.0.0" to sVersion
83497>>>>>>>        End
83497>>>>>>>>
83497>>>>>>>        Function_Return sVersion
83498>>>>>>>    End_Function
83499>>>>>>>    
83499>>>>>>>    //           Pervasive.SQL Engine
83499>>>>>>>    
83499>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
83501>>>>>>>        
83501>>>>>>>        String  sDriverID
83501>>>>>>>        String  sVersion
83501>>>>>>>        String  sVoid
83501>>>>>>>        Integer iRetval
83501>>>>>>>        
83501>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
83501>>>>>>>        // This error would otherwise be raised when we have an older
83501>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
83501>>>>>>>        Send Ignore_error to Error_object_Id 20491
83502>>>>>>>        Get psDriverID to sDriverID
83503>>>>>>>        Move (Repeat(" ", 255)) to sVersion
83504>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
83509>>>>>>>        Send Trap_Error to Error_object_Id 20491
83510>>>>>>>        If (Trim(sVersion) = "") Begin
83512>>>>>>>            // Unable to get the revision. return all zeroes.
83512>>>>>>>            Move "0.0.0" to sVersion
83513>>>>>>>        End
83513>>>>>>>>
83513>>>>>>>        Function_Return sVersion
83514>>>>>>>    End_Function
83515>>>>>>>    
83515>>>>>>>    //  Returns the version information of the
83515>>>>>>>    //           Pervasive.SQL Server Engine
83515>>>>>>>    
83515>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
83517>>>>>>>        
83517>>>>>>>        String  sDriverID
83517>>>>>>>        String  sVersion
83517>>>>>>>        String  sVoid
83517>>>>>>>        Integer iRetval
83517>>>>>>>        
83517>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
83517>>>>>>>        // This error would otherwise be raised when we have an older
83517>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
83517>>>>>>>        Send Ignore_error to Error_object_Id 20491
83518>>>>>>>        Get psDriverID to sDriverID
83519>>>>>>>        Move (Repeat(" ", 255)) to sVersion
83520>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
83525>>>>>>>        Send Trap_Error to Error_object_Id 20491
83526>>>>>>>        If (Trim(sVersion) = "") Begin
83528>>>>>>>            // Unable to get the revision. return all zeroes.
83528>>>>>>>            Move "0.0.0" to sVersion
83529>>>>>>>        End
83529>>>>>>>>
83529>>>>>>>        Function_Return sVersion
83530>>>>>>>    End_Function
83531>>>>>>>    
83531>>>>>>>End_Class
83532>>>>>>>
83532>>>>>>>
83532>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\MSSqldrv.pkg)
83532>>>>>>>//     Package that declares MS SQL driver constants and functions.
83532>>>>>>>//     This package can be used by developers who want to add Data Access
83532>>>>>>>//     MS SQL Client specific code to a DataFlex application.
83532>>>>>>>
83532>>>>>>>Use Cli.pkg
83532>>>>>>>Use SQL.pkg
83532>>>>>>>
83532>>>>>>>//   Driver Indentification
83532>>>>>>>
83532>>>>>>>//   Error number constants
83532>>>>>>>
83532>>>>>>>
83532>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
83532>>>>>>>
83532>>>>>>>
83532>>>>>>>
83532>>>>>>>
83532>>>>>>>
83532>>>>>>>
83532>>>>>>>// SQL Server spcific types.
83532>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
83532>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
83532>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
83532>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
83532>>>>>>>
83532>>>>>>>// SQL Server spcific types.
83532>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
83532>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
83532>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
83532>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
83532>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
83532>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
83532>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
83532>>>>>>>
83532>>>>>>>
83532>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
83532>>>>>>>//
83532>>>>>>>//     Setup a constraint for a file.
83532>>>>>>>
83532>>>>>>>
83532>>>>>>>Class cMSSQLHandler is a cCLIHandler
83533>>>>>>>    
83533>>>>>>>    Procedure Construct_Object
83535>>>>>>>        Forward Send Construct_Object
83537>>>>>>>        
83537>>>>>>>        Set psDriverID to MSSQLDRV_ID
83538>>>>>>>    End_Procedure
83539>>>>>>>    
83539>>>>>>>    
83539>>>>>>>    
83539>>>>>>>    //   Extract the list from the out connect string.
83539>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
83541>>>>>>>        String  sItem
83541>>>>>>>        Integer iStart
83541>>>>>>>        Integer iEnd
83541>>>>>>>        
83541>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
83544>>>>>>>        
83544>>>>>>>        Send Delete_Data to hoStore
83545>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
83546>>>>>>>        While (iStart > 0)
83550>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
83551>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
83554>>>>>>>            Else Begin
83555>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
83556>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
83557>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
83560>>>>>>>                
83560>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
83563>>>>>>>                
83563>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
83566>>>>>>>            End
83566>>>>>>>>
83566>>>>>>>        Loop
83567>>>>>>>>
83567>>>>>>>        
83567>>>>>>>        Function_Return (Item_Count(hoStore))
83568>>>>>>>    End_Function
83569>>>>>>>    
83569>>>>>>>    
83569>>>>>>>    
83569>>>>>>>    //   Call the driver's browse connect function
83569>>>>>>>    Function BrowseConnect String sInConnStr Returns String
83571>>>>>>>        String  sDriver
83571>>>>>>>        String  sOutConnStr
83571>>>>>>>        Integer iArg
83571>>>>>>>        Integer iRetval
83571>>>>>>>        
83571>>>>>>>        Get psDriverID to sDriver
83572>>>>>>>        If (sDriver <> "") Begin
83574>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
83575>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
83580>>>>>>>        End
83580>>>>>>>>
83580>>>>>>>        
83580>>>>>>>        Function_Return sOutConnStr
83581>>>>>>>    End_Function// BrowseConnect
83582>>>>>>>    
83582>>>>>>>    
83582>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
83584>>>>>>>        String  sDriver
83584>>>>>>>        String  sOutConnStr
83584>>>>>>>        Integer iArg
83584>>>>>>>        Integer iRetval
83584>>>>>>>        
83584>>>>>>>        Move 1 to iArg // Browses only local
83585>>>>>>>        
83585>>>>>>>        Get psDriverID to sDriver
83586>>>>>>>        If (sDriver <> "") Begin
83588>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
83589>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
83594>>>>>>>        End
83594>>>>>>>>
83594>>>>>>>        
83594>>>>>>>        Function_Return sOutConnStr
83595>>>>>>>    End_Function// BrowseConnect
83596>>>>>>>    
83596>>>>>>>    
83596>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
83598>>>>>>>        
83598>>>>>>>        String  sServerList
83598>>>>>>>        Integer iNumServers
83598>>>>>>>        Integer iDriver
83598>>>>>>>        Integer iClientVersion
83598>>>>>>>        String  sDriver
83598>>>>>>>        
83598>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
83599>>>>>>>        
83599>>>>>>>        If (iDriver) Begin
83601>>>>>>>            
83601>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
83604>>>>>>>            
83604>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
83605>>>>>>>            
83605>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
83606>>>>>>>            If (iNetworkLocal = 0) Begin
83608>>>>>>>                Get BrowseConnect sDriver to sServerList
83609>>>>>>>            End
83609>>>>>>>>
83609>>>>>>>            Else Begin
83610>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
83611>>>>>>>            End
83611>>>>>>>>
83611>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
83612>>>>>>>        End
83612>>>>>>>>
83612>>>>>>>        
83612>>>>>>>        Function_Return iNumServers
83613>>>>>>>        
83613>>>>>>>    End_Function
83614>>>>>>>    
83614>>>>>>>    //   Enumerate the available SQL Server database servers
83614>>>>>>>    //   This function will return all SQL Server instances on the network.
83614>>>>>>>    //   This may take a long time.
83614>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
83614>>>>>>>    Function EnumerateServers Returns Integer
83616>>>>>>>        
83616>>>>>>>        Integer iNumServers
83616>>>>>>>        Integer iNetworkLocal
83616>>>>>>>        
83616>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
83617>>>>>>>        
83617>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
83618>>>>>>>        
83618>>>>>>>        Function_Return iNumServers
83619>>>>>>>        
83619>>>>>>>    End_Function
83620>>>>>>>    
83620>>>>>>>    
83620>>>>>>>    //   Enumerate the available SQL Server database servers
83620>>>>>>>    //   This function will return only return SQL Server instance on the local machine
83620>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
83620>>>>>>>    Function EnumerateServersLocal Returns Integer
83622>>>>>>>        
83622>>>>>>>        Integer iNumServers
83622>>>>>>>        Integer iNetworkLocal
83622>>>>>>>        
83622>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
83623>>>>>>>        
83623>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
83624>>>>>>>        
83624>>>>>>>        Function_Return iNumServers
83625>>>>>>>        
83625>>>>>>>    End_Function
83626>>>>>>>    
83626>>>>>>>    
83626>>>>>>>    
83626>>>>>>>    //   Enumerate database in a given server.
83626>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
83628>>>>>>>        Integer hoSQL
83628>>>>>>>        String  sConnect
83628>>>>>>>        String  sDatabase
83628>>>>>>>        Integer hdbc
83628>>>>>>>        Integer hstmt
83628>>>>>>>        Integer iFetchResult
83628>>>>>>>        
83628>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
83631>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
83634>>>>>>>        
83634>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
83637>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
83639>>>>>>>        
83639>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
83641>>>>>>>            Move Current_Object to hoSQL
83642>>>>>>>        End_Object
83643>>>>>>>        
83643>>>>>>>        If (hoSQL <> 0) Begin
83645>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
83646>>>>>>>            If (hdbc <> 0) Begin
83648>>>>>>>                Get SQLOpen of hdbc to hstmt
83649>>>>>>>                If (hstmt <> 0) Begin
83651>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
83651>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
83651>>>>>>>                    //   approach in case meta data might change, the stored procedure will
83651>>>>>>>                    //   stay the same.
83651>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
83652>>>>>>>                    Send SQLCall to hstmt
83653>>>>>>>                    Repeat
83653>>>>>>>>
83653>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
83654>>>>>>>                        If (iFetchResult <> 0) Begin
83656>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
83657>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
83658>>>>>>>                        End
83658>>>>>>>>
83658>>>>>>>                    Until (iFetchResult = 0)
83660>>>>>>>                    
83660>>>>>>>                    Send SQLClose to hstmt
83661>>>>>>>                End
83661>>>>>>>>
83661>>>>>>>                Send SQLDisconnect to hdbc
83662>>>>>>>            End
83662>>>>>>>>
83662>>>>>>>        End
83662>>>>>>>>
83662>>>>>>>        Send Destroy_Object to hoSQL
83663>>>>>>>        
83663>>>>>>>        Function_Return (Item_Count(Current_Object))
83664>>>>>>>    End_Function
83665>>>>>>>    
83665>>>>>>>    
83665>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
83667>>>>>>>        
83667>>>>>>>        String  sSqlServerClientVersionName
83667>>>>>>>        
83667>>>>>>>        
83667>>>>>>>        Case Begin
83667>>>>>>>            
83667>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
83669>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
83670>>>>>>>                Case Break
83671>>>>>>>                
83671>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
83674>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
83675>>>>>>>                Case Break
83676>>>>>>>            
83676>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
83679>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
83680>>>>>>>                Case Break
83681>>>>>>>            
83681>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
83684>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
83685>>>>>>>                Case Break
83686>>>>>>>            
83686>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
83689>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
83690>>>>>>>                Case Break
83691>>>>>>>            
83691>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
83694>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
83695>>>>>>>                Case Break
83696>>>>>>>            
83696>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
83699>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
83700>>>>>>>                Case Break
83701>>>>>>>            
83701>>>>>>>            Case Else
83701>>>>>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
83702>>>>>>>                
83702>>>>>>>        Case End
83702>>>>>>>        
83702>>>>>>>        
83702>>>>>>>        Function_Return sSqlServerClientVersionName
83703>>>>>>>        
83703>>>>>>>    End_Function
83704>>>>>>>
83704>>>>>>>
83704>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
83706>>>>>>>        
83706>>>>>>>        String  sSqlServerClientDriverName
83706>>>>>>>        
83706>>>>>>>        Case Begin
83706>>>>>>>            
83706>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
83708>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
83709>>>>>>>                Case Break
83710>>>>>>>                
83710>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
83713>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
83714>>>>>>>                Case Break
83715>>>>>>>            
83715>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
83718>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
83719>>>>>>>                Case Break
83720>>>>>>>            
83720>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
83723>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
83724>>>>>>>                Case Break
83725>>>>>>>            
83725>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
83728>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
83729>>>>>>>                Case Break
83730>>>>>>>            
83730>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
83733>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
83734>>>>>>>                Case Break
83735>>>>>>>            
83735>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
83738>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
83739>>>>>>>                Case Break
83740>>>>>>>            
83740>>>>>>>            Case Else
83740>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
83741>>>>>>>                
83741>>>>>>>        Case End
83741>>>>>>>        
83741>>>>>>>        
83741>>>>>>>        Function_Return sSqlServerClientDriverName
83742>>>>>>>        
83742>>>>>>>    End_Function
83743>>>>>>>    
83743>>>>>>>    
83743>>>>>>>End_Class
83744>>>>>>>
83744>>>>>>>
83744>>>>>
83744>>>>>
83744>>>>>External_Function WNetGetUser "WNetGetUserA" MPR.DLL Pointer lpName Pointer lpUser_Name Pointer lpLength Returns DWord
83745>>>>>
83745>>>>>Register_Function phoWorkspace Returns Handle
83745>>>>>Register_Function Help_filename Returns String
83745>>>>>Register_Function GetHelpFile Returns String
83745>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
83745>>>>>
83745>>>>>//    This function reads the current username Of windows and returns that
83745>>>>>//    name or an text unknown user
83745>>>>>Function Network_User_Name for cDesktop Returns String
83747>>>>>    String sName
83747>>>>>    Integer iRetval iLength
83747>>>>>    
83747>>>>>    Move 0 to iLength
83748>>>>>    Move (WNetGetUser (0, 0, AddressOf (iLength))) to iRetval
83749>>>>>    Move (ZeroString(iLength)) to sName
83750>>>>>    Move (WNetGetUser (0, AddressOf (sName), AddressOf (iLength))) to iRetval
83751>>>>>    
83751>>>>>    If (iRetval = NO_ERROR) Begin
83753>>>>>        Function_Return (CString (sName))
83754>>>>>    End
83754>>>>>>
83754>>>>>    
83754>>>>>    Function_Return "User Unknown"
83755>>>>>End_Function
83756>>>>>
83756>>>>>External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
83757>>>>>
83757>>>>>External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
83758>>>>>
83758>>>>>Class SysinfoDisplay is a cTextEdit
83759>>>>>    Procedure Construct_Object
83761>>>>>        Forward Send Construct_Object
83763>>>>>        
83763>>>>>        Set Location to 6 6
83764>>>>>        Set Size to 110 255
83765>>>>>        Set Read_Only_State to True
83766>>>>>        Set pbWrap to False
83767>>>>>    End_Procedure
83768>>>>>    
83768>>>>>    //    This method will show the name Of the current directory in the system
83768>>>>>    //    information box
83768>>>>>    Procedure Show_Current_Directory
83770>>>>>        String sDir
83770>>>>>        
83770>>>>>        Get_Current_Directory to sDir
83771>>>>>        
83771>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
83772>>>>>    End_Procedure
83773>>>>>    
83773>>>>>    Procedure Show_Windows_Directory
83775>>>>>        String sWindir
83775>>>>>        
83775>>>>>        Get_Windows_Directory to sWindir
83776>>>>>        
83776>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
83777>>>>>    End_Procedure
83778>>>>>    
83778>>>>>    Procedure Show_Current_User
83780>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
83781>>>>>    End_Procedure
83782>>>>>    
83782>>>>>    Procedure Show_Number_Format
83784>>>>>        Integer iFormat
83784>>>>>        String sFormatText
83784>>>>>        
83784>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
83787>>>>>        Move (Character (iFormat)) to sFormatText
83788>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
83789>>>>>        
83789>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
83792>>>>>        Move (Character (iFormat)) to sFormatText
83793>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
83794>>>>>    End_Procedure
83795>>>>>    
83795>>>>>    Procedure Show_Filelist_Name
83797>>>>>        String sFilename
83797>>>>>        
83797>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
83800>>>>>        
83800>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
83801>>>>>        Send AppendTextLn ""
83802>>>>>    End_Procedure
83803>>>>>    
83803>>>>>    Procedure Show_Lock_Delay
83805>>>>>        Integer iLockdelay
83805>>>>>        
83805>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
83808>>>>>        
83808>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
83809>>>>>    End_Procedure
83810>>>>>    
83810>>>>>    Procedure Show_Lock_Timeout
83812>>>>>        Integer iLockTimeout
83812>>>>>        
83812>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
83815>>>>>        
83815>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
83816>>>>>    End_Procedure
83817>>>>>    
83817>>>>>    Procedure Show_Screen_Size
83819>>>>>        Integer iYscreensize iXscreensize
83819>>>>>        
83819>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) to iXscreensize
83820>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) to iYscreensize
83821>>>>>        
83821>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
83822>>>>>    End_Procedure
83823>>>>>    
83823>>>>>    Procedure Show_Page_Size
83825>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
83826>>>>>    End_Procedure
83827>>>>>    
83827>>>>>    Procedure Show_Date
83829>>>>>        Date dToday
83829>>>>>        
83829>>>>>        Move (CurrentDateTime()) to  dToday
83830>>>>>        
83830>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
83831>>>>>    End_Procedure
83832>>>>>    
83832>>>>>    Procedure Show_Date_Format
83834>>>>>        Integer iDateFormat
83834>>>>>        String sDateFormat
83834>>>>>        
83834>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
83837>>>>>        Case Begin
83837>>>>>            Case (iDateFormat = DF_DATE_USA)
83839>>>>>                Move C_$USA to sDateFormat
83840>>>>>                Case Break
83841>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
83844>>>>>                Move C_$European to sDateFormat
83845>>>>>                Case Break
83846>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
83849>>>>>                Move C_$Military to sDateFormat
83850>>>>>                Case Break
83851>>>>>            Case Else
83851>>>>>                Move C_$UnknownDateType to sDateFormat
83852>>>>>                Case Break
83853>>>>>        Case End
83853>>>>>        
83853>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
83854>>>>>    End_Procedure
83855>>>>>    
83855>>>>>    Procedure Show_Systemresources
83857>>>>>        tWinMemoryStatusEx MemoryStatusInfo
83857>>>>>        tWinMemoryStatusEx MemoryStatusInfo
83857>>>>>        Integer iRetval
83857>>>>>        
83857>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
83858>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
83859>>>>>        If (iRetval = 0) Begin
83861>>>>>            Move (ShowLastError ()) to iRetval
83862>>>>>        End
83862>>>>>>
83862>>>>>        
83862>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, MemoryStatusInfo.ullTotalPhys))
83863>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, MemoryStatusInfo.dwMemoryLoad))
83864>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Integer ( Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0)))
83865>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Integer ( Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0)))
83866>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Integer ( Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0)))
83867>>>>>    End_Procedure
83868>>>>>    
83868>>>>>    Procedure Show_Registration
83870>>>>>        String sRegName
83870>>>>>        Integer iSN iMaxUsers
83870>>>>>        
83870>>>>>        Registration sRegName iSN
83871>>>>>>
83871>>>>>        
83871>>>>>        Get_Licensed_Max_Users to iMaxUsers
83872>>>>>        
83872>>>>>        Send AppendTextLn ""
83873>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
83874>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
83875>>>>>        Send AppendTextLn (SFormat (C_$MaxNumUsers, iMaxUsers))
83876>>>>>    End_Procedure
83877>>>>>    
83877>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
83877>>>>>    // To the workspace object passing the an object and message To send back
83877>>>>>    // To this object. It is expected that the workspace object will send this
83877>>>>>    // message for every line Of information it wants displayed (passing the
83877>>>>>    // information To be displayed
83877>>>>>    Register_Procedure EnumerateWorkspaceData Handle hObjId Handle hmMessId
83877>>>>>    
83877>>>>>    Procedure Show_ServicePack
83879>>>>>        String sKey sVersionDescription sVersion
83879>>>>>        Handle hoRegistry
83879>>>>>        Boolean bExists bOpened
83879>>>>>        
83879>>>>>        Get Create (RefClass (cRegistry)) to hoRegistry
83880>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
83881>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
83882>>>>>        
83882>>>>>        Move C_DFVersionRegistryRoot to sKey
83883>>>>>        Get KeyExists of hoRegistry sKey to bExists
83884>>>>>        If (bExists) Begin
83886>>>>>            Get OpenKey of hoRegistry sKey to bOpened
83887>>>>>            If (bOpened) Begin
83889>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
83890>>>>>                If (bExists) Begin
83892>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersionDescription
83893>>>>>                End
83893>>>>>>
83893>>>>>                
83893>>>>>                Get ValueExists of hoRegistry "CurrentVersion" to bExists
83894>>>>>                If (bExists) Begin
83896>>>>>                    Get ReadString of hoRegistry "CurrentVersion" to sVersion
83897>>>>>                End
83897>>>>>>
83897>>>>>                Send CloseKey of hoRegistry
83898>>>>>            End
83898>>>>>>
83898>>>>>        End
83898>>>>>>
83898>>>>>        Send Destroy of hoRegistry
83899>>>>>        
83899>>>>>        If (sVersionDescription <> "") Begin
83901>>>>>            Send AppendTextLn (sVersionDescription * "-" * sVersion)
83902>>>>>            Send AppendTextLn ""
83903>>>>>        End
83903>>>>>>
83903>>>>>    End_Procedure
83904>>>>>    
83904>>>>>    
83904>>>>>    Procedure Show_WorkspaceInformation
83906>>>>>        Integer hoWorkspace
83906>>>>>        
83906>>>>>        If (ghoApplication <> 0) Begin
83908>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
83909>>>>>            If (hoWorkspace <> 0) Begin
83911>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self (Refproc (AppendTextLn))
83912>>>>>                Send AppendTextLn ""
83913>>>>>            End
83913>>>>>>
83913>>>>>        End
83913>>>>>>
83913>>>>>    End_Procedure
83914>>>>>    
83914>>>>>    // If connection ids are used, we will send the message EnumerateConnections
83914>>>>>    // to the connection manager object passing the an object and message to send
83914>>>>>    // back to this object. It is expected that the connection manager object will
83914>>>>>    // send this message for every line Of information it wants displayed (passing
83914>>>>>    // the information To be displayed
83914>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
83914>>>>>    
83914>>>>>    Procedure Show_ConnectionIdInformation
83916>>>>>        If (ghoConnection > 0) Begin
83918>>>>>            Send AppendTextLn ""
83919>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
83920>>>>>        End
83920>>>>>>
83920>>>>>    End_Procedure
83921>>>>>    
83921>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
83923>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
83924>>>>>    End_Function
83925>>>>>    
83925>>>>>    Procedure Show_Versions
83927>>>>>        Integer iVersion iRevision iBuild
83927>>>>>        
83927>>>>>        Version_Information iVersion iRevision iBuild
83929>>>>>        
83929>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
83930>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
83931>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
83932>>>>>    End_Procedure
83933>>>>>    
83933>>>>>    Function CKRevisionNumber String sDriverID Returns String
83935>>>>>        Handle hoCLIHandler
83935>>>>>        Handle hoDFBtrDrvHandler
83935>>>>>        String sCKRevision
83935>>>>>        
83935>>>>>        
83935>>>>>        If (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV") Begin
83937>>>>>            Get Create (RefClass(cCLIHandler)) to hoCLIHandler
83938>>>>>            Set psDriverID of hoCLIHandler to sDriverID
83939>>>>>            Move (CKRevision(hoCLIHandler)) to sCKRevision
83940>>>>>            Send Destroy of hoCLIHandler
83941>>>>>        End
83941>>>>>>
83941>>>>>        Else Begin
83942>>>>>            If (sDriverID = "DFBTRDRV") Begin
83944>>>>>                Get Create (RefClass(cDFBtrDrvHandler)) to hoDFBtrDrvHandler
83945>>>>>                Set psDriverID of hoDFBtrDrvHandler to sDriverID
83946>>>>>                Move (CKRevision(hoDFBtrDrvHandler)) to sCKRevision
83947>>>>>                Send Destroy of hoDFBtrDrvHandler
83948>>>>>            End
83948>>>>>>
83948>>>>>        End
83948>>>>>>
83948>>>>>        
83948>>>>>        Function_Return sCKRevision
83949>>>>>    End_Function
83950>>>>>    
83950>>>>>    
83950>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
83952>>>>>        
83952>>>>>        If (sDriverID = "DATAFLEX") Begin
83954>>>>>            Function_Return False
83955>>>>>        End
83955>>>>>>
83955>>>>>        
83955>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
83956>>>>>    End_Function
83957>>>>>    
83957>>>>>    
83957>>>>>    Procedure Show_Drivers
83959>>>>>        String sCurrentDriver sRevNumber
83959>>>>>        String sLoadedDrivers sClientDriver
83959>>>>>        Integer iNumberOfDrivers iCount iClientVersion iMSSQLIndex
83959>>>>>        Boolean bOK
83959>>>>>        Handle hoMsqlDrv
83959>>>>>        
83959>>>>>        Move "" to sLoadedDrivers
83960>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
83963>>>>>        For iCount from 1 to iNumberOfDrivers
83969>>>>>>
83969>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
83972>>>>>            If (sLoadedDrivers <> "") Begin
83974>>>>>                Move (Append (sLoadedDrivers, ", ")) to sLoadedDrivers
83975>>>>>            End
83975>>>>>>
83975>>>>>            Get IsDataAccessCK sCurrentDriver to bOK
83976>>>>>            If (bOK) Begin
83978>>>>>                If (sCurrentDriver = "MSSQLDRV") Begin
83980>>>>>                    Move iCount to iMSSQLIndex
83981>>>>>                End
83981>>>>>>
83981>>>>>                Get CKRevisionNumber sCurrentDriver to sRevNumber
83982>>>>>                // if mssqldrv, show the client number
83982>>>>>                Move (sCurrentDriver * "(" + sRevNumber + ")") to sCurrentDriver
83983>>>>>            End
83983>>>>>>
83983>>>>>            Move (Append (sLoadedDrivers, sCurrentDriver)) to sLoadedDrivers
83984>>>>>        Loop
83985>>>>>>
83985>>>>>        Send AppendTextLn (SFormat (C_$DatabaseDriver, sLoadedDrivers))
83986>>>>>        If (iMSSQLIndex>0) Begin
83988>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iMSSQLIndex to iClientVersion
83991>>>>>            Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
83992>>>>>            Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
83993>>>>>            Send Destroy of hoMsqlDrv
83994>>>>>            Send AppendTextLn (SFormat("MSSQLDRV Client Version: %1", sClientDriver))
83995>>>>>        End
83995>>>>>>
83995>>>>>    End_Procedure
83996>>>>>    
83996>>>>>    Procedure Show_HelpFile
83998>>>>>        String sHelpFile
83998>>>>>        Integer eHelpType
83998>>>>>        
83998>>>>>        If (ghoApplication <> 0) Begin
84000>>>>>            Get peHelpType of ghoApplication to eHelpType
84001>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
84003>>>>>                Get GetHelpFile of ghoHtmlHelp to sHelpFile
84004>>>>>            End
84004>>>>>>
84004>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
84007>>>>>                Get Help_filename of Help_object_id to sHelpFile
84008>>>>>            End
84008>>>>>>
84008>>>>>            Else Begin
84009>>>>>                Move C_$ThereIsNoHelpfileDefined to sHelpFile
84010>>>>>            End
84010>>>>>>
84010>>>>>            
84010>>>>>            Send AppendTextLn ""
84011>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
84012>>>>>        End
84012>>>>>>
84012>>>>>    End_Procedure
84013>>>>>    
84013>>>>>    Procedure Show_EnterAsTab
84015>>>>>        Boolean bEnterKeyAsTabKey
84015>>>>>        String sText
84015>>>>>        
84015>>>>>        If (ghoApplication <> 0) Begin
84017>>>>>            Get pbEnterKeyAsTabKey of ghoApplication to bEnterKeyAsTabKey
84018>>>>>            If (bEnterKeyAsTabKey) Begin
84020>>>>>                Move "True" to sText
84021>>>>>            End
84021>>>>>>
84021>>>>>            Else Begin
84022>>>>>                Move "False" to sText
84023>>>>>            End
84023>>>>>>
84023>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
84024>>>>>        End
84024>>>>>>
84024>>>>>    End_Procedure
84025>>>>>    
84025>>>>>    //    During activation we will remove the old information and add the newly
84025>>>>>    //    found systeminformation
84025>>>>>    Procedure Add_Focus Integer hoRoot
84027>>>>>        Forward Send Add_Focus hoRoot
84029>>>>>        
84029>>>>>        Send Delete_Data
84030>>>>>        
84030>>>>>        Set Changed_State to False
84031>>>>>        Set Read_Only_State to True
84032>>>>>        
84032>>>>>        Send Show_ServicePack
84033>>>>>        Send Show_Versions
84034>>>>>        Send Show_Drivers
84035>>>>>        If (ghoConnection <> 0) Begin
84037>>>>>            Send Show_ConnectionIdInformation
84038>>>>>        End
84038>>>>>>
84038>>>>>        Send Show_HelpFile
84039>>>>>        Send Show_Current_Directory
84040>>>>>        Send Show_Filelist_Name
84041>>>>>        If (ghoApplication <> 0) Begin
84043>>>>>            Send Show_WorkSpaceInformation // added To show WS info
84044>>>>>        End
84044>>>>>>
84044>>>>>        Send Show_Current_User
84045>>>>>        Send Show_Windows_Directory
84046>>>>>        Send Show_Screen_Size
84047>>>>>        Send Show_Page_Size
84048>>>>>        Send Show_EnterAsTab
84049>>>>>        Send Show_Number_Format
84050>>>>>        Send Show_Date_Format
84051>>>>>        Send Show_Lock_Delay
84052>>>>>        Send Show_Lock_Timeout
84053>>>>>        Send Show_Date
84054>>>>>        Send Show_Systemresources
84055>>>>>        Send Show_Registration
84056>>>>>        Send Beginning_of_Data
84057>>>>>        
84057>>>>>        Set Icon to 'default.ico'
84058>>>>>    End_Procedure
84059>>>>>End_Class
84060>>>>>
84060>>>>>Class SysInfoDialog is a ModalPanel
84061>>>>>    Procedure Construct_Object
84063>>>>>        Forward Send Construct_Object
84065>>>>>        
84065>>>>>        Set Label to C_$SystemInformation
84066>>>>>        Set Size to 140 267
84067>>>>>        Set piMinSize to 140 267
84068>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
84069>>>>>        Set Border_Style to Border_Thick
84070>>>>>        
84070>>>>>        Object oSysinfoDisplay is a SysInfoDisplay
84072>>>>>            Set peAnchors to anAll
84073>>>>>        End_Object
84074>>>>>        
84074>>>>>        Object oCloseButton is a Button
84076>>>>>            Set Label to C_$Close
84077>>>>>            Set Location to 120 210
84078>>>>>            Set Message 0 to (Refproc (Close_Panel))
84079>>>>>            Set Default_State to True
84080>>>>>            Set peAnchors to anBottomRight
84081>>>>>        End_Object
84082>>>>>        
84082>>>>>        On_Key kCancel Send Close_Panel
84083>>>>>    End_Procedure
84084>>>>>End_Class
84085>>>>>
84085>>>>>Class AboutDialog is a ModalPanel
84086>>>>>    Procedure Construct_Object
84088>>>>>        String sVdfRootDir
84088>>>>>        
84088>>>>>        Forward Send Construct_Object
84090>>>>>        
84090>>>>>        Set Label to C_$About
84091>>>>>        Set Size to 89 212
84092>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
84093>>>>>        
84093>>>>>        Object oSysInfoDialog is a SysInfoDialog
84095>>>>>        End_Object
84096>>>>>        
84096>>>>>        Object oBox is a Container3d
84098>>>>>            Set Border_Style to Border_StaticEdge
84099>>>>>            Set Size to 63 202
84100>>>>>            Set Location to 4 5
84101>>>>>            
84101>>>>>            Object oAboutGraphic is a BitmapContainer
84103>>>>>                Set Border_Style to Border_None
84104>>>>>                Set Bitmap_Style to Bitmap_Center
84105>>>>>                Set Size to 48 48
84106>>>>>                Set Location to 7 2
84107>>>>>            End_Object
84108>>>>>            
84108>>>>>            Object oProductName is a TextBox
84110>>>>>                Set Label to C_$ProductName
84111>>>>>                Set Size to 10 45
84112>>>>>                Set Location to 8 53
84113>>>>>            End_Object
84114>>>>>            
84114>>>>>            Object oVersion is a TextBox
84116>>>>>                Set Label to C_$Version
84117>>>>>                Set Size to 10 25
84118>>>>>                Set Location to 21 53
84119>>>>>            End_Object
84120>>>>>            
84120>>>>>            Object oCopyright is a TextBox
84122>>>>>                Set Label to C_$Copyright
84123>>>>>                Set Size to 10 31
84124>>>>>                Set Location to 34 53
84125>>>>>            End_Object
84126>>>>>            
84126>>>>>            Object oAuthor is a TextBox
84128>>>>>                Set Label to C_$Author
84129>>>>>                Set Size to 10 22
84130>>>>>                Set Location to 46 53
84131>>>>>            End_Object
84132>>>>>        End_Object
84133>>>>>        
84133>>>>>        Object oOKButton is a Button
84135>>>>>            On_Item C_$OK Send Close_Panel
84136>>>>>            Set Size to 14 50
84137>>>>>            Set Location to 71 157
84138>>>>>        End_Object
84139>>>>>        
84139>>>>>        Object oSysInfoButton is a Button
84141>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
84142>>>>>            Set Size to 14 50
84143>>>>>            Set Location to 71 101
84144>>>>>        End_Object
84145>>>>>        
84145>>>>>        On_Key Kcancel Send KeyAction of oOKButton
84146>>>>>        
84146>>>>>        Set Logo to "DacAbout.bmp"  // square bitmaps Of 42x42 work best
84147>>>>>    End_Procedure
84148>>>>>    
84148>>>>>    Procedure Set ProductName String sProductName
84150>>>>>        Set Label of oProductName to sProductName
84151>>>>>    End_Procedure
84152>>>>>    
84152>>>>>    Procedure Set Version String sVersion
84154>>>>>        Set Label of oVersion to sVersion
84155>>>>>    End_Procedure
84156>>>>>    
84156>>>>>    Procedure Set Copyright String sCopyright
84158>>>>>        Set Label of oCopyright to sCopyright
84159>>>>>    End_Procedure
84160>>>>>    
84160>>>>>    Procedure Set Author String sAuthor
84162>>>>>        Set Label of oAuthor to sAuthor
84163>>>>>    End_Procedure
84164>>>>>    
84164>>>>>    Procedure Set Logo String sLogo
84166>>>>>        // square bitmaps Of 42x42 work best
84166>>>>>        Set Bitmap of oAboutGraphic to sLogo
84167>>>>>    End_Procedure
84168>>>>>    
84168>>>>>    Procedure Show_Sysinfo
84170>>>>>        Send Popup_Modal of oSysinfoDialog
84171>>>>>    End_Procedure
84172>>>>>    
84172>>>>>    Procedure End_Construct_Object
84174>>>>>        Handle hoVersionInfo
84174>>>>>        Boolean bIncluded
84174>>>>>        Integer iMajor iMinor iRelease iBuild
84174>>>>>        String sLabel
84174>>>>>        
84174>>>>>        Get Label of oVersion to sLabel
84175>>>>>        If (sLabel = C_$VERSION) Begin
84177>>>>>            // set it To the version info Of the program, if available
84177>>>>>            If (ghoApplication <> 0) Begin
84179>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
84180>>>>>                If (hoVersionInfo <> 0) Begin
84182>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
84183>>>>>                    If (bIncluded) Begin
84185>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
84186>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
84187>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
84188>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
84189>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sLabel
84190>>>>>                        Set Version to sLabel
84191>>>>>                    End
84191>>>>>>
84191>>>>>                End
84191>>>>>>
84191>>>>>            End
84191>>>>>>
84191>>>>>        End
84191>>>>>>
84191>>>>>        
84191>>>>>        Forward Send End_Construct_Object
84193>>>>>    End_Procedure
84194>>>>>End_Class
84195>>>
84195>>>//  This is the default message. It is expected that you will
84195>>>//  create your own message to override this
84195>>>Procedure Activate_About
84198>>>    Send DoAbout "" "" "" "" ""
84199>>>End_Procedure
84200>>>
84200>>>//  It is expected that you will send this message (most
84200>>>//  likely from Activate_About. This creates an about object, activates it
84200>>>//  and destroys it when done. It is not exepected that you will augment this.
84200>>>Procedure DoAbout String sTitle String sVersion String sCopyRight String sAuthor String sBitmap
84203>>>    Integer hoObj hoMain
84203>>>    
84203>>>    // create object
84203>>>    Object About is an AboutDialog
84205>>>        // if no title passed use the label of the main panel
84205>>>        // (if a main panel exists).
84205>>>        If (sTitle = "") Begin
84207>>>            Get Main_Window of desktop to hoMain
84208>>>            If hoMain ;                Get Label of hoMain to sTitle
84211>>>        End
84211>>>>
84211>>>        Set productname to sTitle
84212>>>        Set version     to sVersion
84213>>>        Set copyright   to sCopyRight
84214>>>        Set author      to sAuthor
84215>>>        If (sBitmap <> '') ;            Set logo to sBitMap // square bitmaps of 42x42 work best
84218>>>        Move Self to hoObj // object Id
84219>>>    End_Object
84220>>>    Send Popup   of hoObj    // popup the about object
84221>>>    Send Destroy of hoObj // when done, it will be destroyed
84222>>>End_Procedure
84223>>>
84223>        Use DemoSuggestionForm.vw
Including file: DemoSuggestionForm.vw    (C:\test\BuildTools\Order Entry\AppSrc\DemoSuggestionForm.vw)
84223>>>Use Windows.pkg
84223>>>Use DFClient.pkg
84223>>>Use dbSuggestionForm.pkg
Including file: dbSuggestionForm.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\dbSuggestionForm.pkg)
84223>>>>>Use Dfentry.pkg
84223>>>>>Use WinSuggestion.pkg
Including file: WinSuggestion.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\WinSuggestion.pkg)
84223>>>>>>>Use Windows.pkg
84223>>>>>>>Use tWinStructs.pkg
84223>>>>>>>Use tSuggestion.pkg
Including file: tSuggestion.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\tSuggestion.pkg)
84223>>>>>>>>>// struct used for suggestion forms, representing an item of data
84223>>>>>>>>>Enum_List 
84223>>>>>>>>>    Define smFind
84223>>>>>>>>>    Define smValidationTable
84223>>>>>>>>>    Define smCustom
84223>>>>>>>>>End_Enum_List
84223>>>>>>>>>
84223>>>>>>>>>Struct tSuggestion
84223>>>>>>>>>    String sRowId
84223>>>>>>>>>    String[] aValues
84223>>>>>>>>>End_Struct
84223>>>>>>>>>
84223>>>>>>>Use cTimer.pkg
Including file: cTimer.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cTimer.pkg)
84223>>>>>>>>>// This supercedes the DFTimer class.
84223>>>>>>>>>// It is simpler and more flexible
84223>>>>>>>>>
84223>>>>>>>>>Use Dftimer.pkg // we still use the Timer Manager classes and global objects
Including file: Dftimer.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\Dftimer.pkg)
84223>>>>>>>>>>>Use LanguageText.pkg
84223>>>>>>>>>>>Use Windows.pkg
84223>>>>>>>>>>>Use WinUser.pkg
84223>>>>>>>>>>>
84223>>>>>>>>>>>External_Function SetTimer "SetTimer" User32.DLL ;    Handle  hWnd ;    Longptr idTimer ;    Integer idTimeout ;    Pointer tmprc ;    Returns Longptr     // return type is UINT_PTR
84224>>>>>>>>>>>
84224>>>>>>>>>>>External_Function KillTimer "KillTimer" User32.DLL ;    Handle  hWnd ;    Longptr idTimer ;    Returns Integer
84225>>>>>>>>>>>
84225>>>>>>>>>>>// This global integer holds the ID of the object
84225>>>>>>>>>>>// that manages all timers.
84225>>>>>>>>>>>Integer giTimerManager
84225>>>>>>>>>>>
84225>>>>>>>>>>>// This class is used to store the object IDs
84225>>>>>>>>>>>// of the active timer objects. It augments
84225>>>>>>>>>>>// the Destroy_Object procedure to notify
84225>>>>>>>>>>>// the DFTimerManager to kill all its active
84225>>>>>>>>>>>// timers.
84225>>>>>>>>>>>// NOTE: This class looks very much like the
84225>>>>>>>>>>>// Set class. I didn't want to use Set because
84225>>>>>>>>>>>// Remove_Element shifts items which I don't
84225>>>>>>>>>>>// want to happen because item numbers are used
84225>>>>>>>>>>>// as timerIDs.
84225>>>>>>>>>>>
84225>>>>>>>>>>>Class TimersArray is an Array
84226>>>>>>>>>>>    
84226>>>>>>>>>>>    Function Find_Object Integer iObj Returns Integer
84228>>>>>>>>>>>        Integer iMax
84228>>>>>>>>>>>        Integer iItem
84228>>>>>>>>>>>        Integer iValue
84228>>>>>>>>>>>        Get Item_count to iMax
84229>>>>>>>>>>>        Decrement iMax
84230>>>>>>>>>>>        For iItem from 1 to iMax
84236>>>>>>>>>>>>
84236>>>>>>>>>>>            Get Integer_Value iItem to iValue
84237>>>>>>>>>>>            If (iValue = iObj) ;                Function_Return iItem
84240>>>>>>>>>>>        Loop
84241>>>>>>>>>>>>
84241>>>>>>>>>>>        Function_Return -1
84242>>>>>>>>>>>    End_Function
84243>>>>>>>>>>>    
84243>>>>>>>>>>>    Procedure Add_Object Integer iObj Returns Integer
84245>>>>>>>>>>>        Integer iItem
84245>>>>>>>>>>>        Get Find_Object iObj to iItem
84246>>>>>>>>>>>        If (iItem < 0) Begin
84248>>>>>>>>>>>            Get Find_Object 0 to iItem
84249>>>>>>>>>>>            If (iItem < 0) ;                Get Item_Count to iItem
84252>>>>>>>>>>>        End
84252>>>>>>>>>>>>
84252>>>>>>>>>>>        Set Array_Value iItem to iObj
84253>>>>>>>>>>>        Procedure_Return iItem
84254>>>>>>>>>>>    End_Procedure
84255>>>>>>>>>>>    
84255>>>>>>>>>>>    Procedure Remove_Object Integer iObj
84257>>>>>>>>>>>        Integer iItem
84257>>>>>>>>>>>        Get Find_Object iObj to iItem
84258>>>>>>>>>>>        If (iItem > 0) ;            Set Array_Value iItem to 0
84261>>>>>>>>>>>    End_Procedure
84262>>>>>>>>>>>    
84262>>>>>>>>>>>    Procedure Destroy_Object
84264>>>>>>>>>>>        Delegate Send Kill_All_Timers
84266>>>>>>>>>>>        Forward Send Destroy_Object
84268>>>>>>>>>>>    End_Procedure
84269>>>>>>>>>>>    
84269>>>>>>>>>>>End_Class
84270>>>>>>>>>>>
84270>>>>>>>>>>>// This class is the actual timer manager
84270>>>>>>>>>>>// A timer will be created when Message Set_Timer_Active_State
84270>>>>>>>>>>>// has been send. This message needs two arguments. The first
84270>>>>>>>>>>>// is the objectID of the object to receive the timer event,
84270>>>>>>>>>>>// and the second is state. The object which ID has been passed,
84270>>>>>>>>>>>// needs to have a Timeout property to return the timeout for the
84270>>>>>>>>>>>// timer and it also needs to handle the MSG_OnTimer whenever a
84270>>>>>>>>>>>// timer event occurs.
84270>>>>>>>>>>>// The objectID of the Object will be placed in an array which contains
84270>>>>>>>>>>>// the objectIDs of all active timers. The Windows timer ID of a timer
84270>>>>>>>>>>>// is the itemnumber of the object in the array.
84270>>>>>>>>>>>//
84270>>>>>>>>>>>Class DFTimerManager is a DfBaseControl
84271>>>>>>>>>>>    
84271>>>>>>>>>>>    Procedure Construct_Object
84273>>>>>>>>>>>        
84273>>>>>>>>>>>        Forward Send Construct_Object
84275>>>>>>>>>>>        
84275>>>>>>>>>>>        Set Visible_State to False
84276>>>>>>>>>>>        
84276>>>>>>>>>>>        Set External_Class_Name "cVdfTimer" to "static"
84277>>>>>>>>>>>        Set External_Message WM_TIMER to OnTimer
84278>>>>>>>>>>>        
84278>>>>>>>>>>>        Object TimersArray is a TimersArray
84280>>>>>>>>>>>            Set Array_Value 0 to -9999 // So we don't use item 0
84281>>>>>>>>>>>        End_Object
84282>>>>>>>>>>>        
84282>>>>>>>>>>>        Move Self to giTimerManager
84283>>>>>>>>>>>        
84283>>>>>>>>>>>    End_Procedure
84284>>>>>>>>>>>    
84284>>>>>>>>>>>    Procedure Set Timer_Active_State Integer iObj Integer iState
84286>>>>>>>>>>>        Integer iTimerID
84286>>>>>>>>>>>        Integer iTimeout
84286>>>>>>>>>>>        Integer iResult
84286>>>>>>>>>>>        Integer iSet
84286>>>>>>>>>>>        DWord   nResult
84286>>>>>>>>>>>        Handle  hWnd
84286>>>>>>>>>>>        
84286>>>>>>>>>>>        // Get the handle of this object
84286>>>>>>>>>>>        Get Window_Handle to hWnd
84287>>>>>>>>>>>        If (not(hWnd)) Begin
84289>>>>>>>>>>>            Error DFERR_DFTIMER C_$TimerNoHandle
84290>>>>>>>>>>>>
84290>>>>>>>>>>>            Procedure_Return
84291>>>>>>>>>>>        End
84291>>>>>>>>>>>>
84291>>>>>>>>>>>        
84291>>>>>>>>>>>        // Test if handle is valid. If not, we leave.
84291>>>>>>>>>>>        If (not(IsWindow(hWnd))) ;            Procedure_Return
84294>>>>>>>>>>>        
84294>>>>>>>>>>>        Move (TimersArray(Self)) to iSet
84295>>>>>>>>>>>        
84295>>>>>>>>>>>        If (iSet) Begin
84297>>>>>>>>>>>            
84297>>>>>>>>>>>            // Let's create or modify a timer
84297>>>>>>>>>>>            If iState Begin
84299>>>>>>>>>>>                
84299>>>>>>>>>>>                // Get the exising to new TimerID
84299>>>>>>>>>>>                Get MSG_Add_Object of iSet iObj to iTimerID
84300>>>>>>>>>>>                
84300>>>>>>>>>>>                // Set/Modify the timer
84300>>>>>>>>>>>                Get Timeout of iObj to iTimeout
84301>>>>>>>>>>>                Move (SetTimer(hWnd, iTimerID, iTimeout, 0)) to iResult
84302>>>>>>>>>>>                If not iResult Begin
84304>>>>>>>>>>>                    Error DFERR_DFTIMER C_$TooManyTimers
84305>>>>>>>>>>>>
84305>>>>>>>>>>>                    Procedure_Return
84306>>>>>>>>>>>                End
84306>>>>>>>>>>>>
84306>>>>>>>>>>>                
84306>>>>>>>>>>>            End
84306>>>>>>>>>>>>
84306>>>>>>>>>>>            
84306>>>>>>>>>>>            // Let's kill an existing timer
84306>>>>>>>>>>>            Else Begin
84307>>>>>>>>>>>                
84307>>>>>>>>>>>                // Look up the object in the set
84307>>>>>>>>>>>                Get Find_Object of iSet iObj to iTimerID
84308>>>>>>>>>>>                
84308>>>>>>>>>>>                If (iTimerID = -1) ;                    Procedure_Return
84311>>>>>>>>>>>                
84311>>>>>>>>>>>                // Kill the timer
84311>>>>>>>>>>>                Move (KillTimer(hWnd, iTimerID)) to iResult
84312>>>>>>>>>>>                If not iResult Begin
84314>>>>>>>>>>>                    Move (GetLastError()) to nResult
84315>>>>>>>>>>>                    Error DFERR_DFTIMER (C_$CantKillTimer * String(nResult) - "!")
84316>>>>>>>>>>>>
84316>>>>>>>>>>>                    Procedure_Return
84317>>>>>>>>>>>                End
84317>>>>>>>>>>>>
84317>>>>>>>>>>>                
84317>>>>>>>>>>>                // Remove the objectID
84317>>>>>>>>>>>                Send Remove_Object to iSet iObj
84318>>>>>>>>>>>            End
84318>>>>>>>>>>>>
84318>>>>>>>>>>>        End
84318>>>>>>>>>>>>
84318>>>>>>>>>>>    End_Procedure
84319>>>>>>>>>>>    
84319>>>>>>>>>>>    Function Timer_Active_State Integer iObj Returns Integer
84321>>>>>>>>>>>        Integer iResult
84321>>>>>>>>>>>        Get Find_Object of (TimersArray(Self)) iObj to iResult
84322>>>>>>>>>>>        Function_Return (iResult<>-1) // note: -1= not found
84323>>>>>>>>>>>    End_Function
84324>>>>>>>>>>>    
84324>>>>>>>>>>>    // Will be called by the Set when it is being destroyed.
84324>>>>>>>>>>>    Procedure Kill_All_Timers
84326>>>>>>>>>>>        Integer iMax
84326>>>>>>>>>>>        Integer iSet
84326>>>>>>>>>>>        Integer iItem
84326>>>>>>>>>>>        Integer iObj
84326>>>>>>>>>>>        Integer iResult
84326>>>>>>>>>>>        Handle  hWnd
84326>>>>>>>>>>>        
84326>>>>>>>>>>>        // Get the handle of this object
84326>>>>>>>>>>>        Get Window_Handle to hWnd
84327>>>>>>>>>>>        If (not(hWnd)) Begin
84329>>>>>>>>>>>            Error DFERR_DFTIMER C_$TimerNoHandle
84330>>>>>>>>>>>>
84330>>>>>>>>>>>            Procedure_Return
84331>>>>>>>>>>>        End
84331>>>>>>>>>>>>
84331>>>>>>>>>>>        
84331>>>>>>>>>>>        // If the window handle is no longer valid, we
84331>>>>>>>>>>>        // leave this procedure. This can happen when the
84331>>>>>>>>>>>        // program is begin aborted using Exit_Application
84331>>>>>>>>>>>        If (not(IsWindow(hWnd))) ;            Procedure_Return
84334>>>>>>>>>>>        
84334>>>>>>>>>>>        // Scan the set and kill all known timers
84334>>>>>>>>>>>        Move (TimersArray(Self)) to iSet
84335>>>>>>>>>>>        If (iSet) Begin
84337>>>>>>>>>>>            Get Item_Count of iSet to iMax
84338>>>>>>>>>>>            Decrement iMax
84339>>>>>>>>>>>            For iItem from 1 to iMax
84345>>>>>>>>>>>>
84345>>>>>>>>>>>                Get Integer_Value of iSet iItem to iObj
84346>>>>>>>>>>>                If iObj Begin
84348>>>>>>>>>>>                    Move (KillTimer(hWnd, iItem)) to iResult
84349>>>>>>>>>>>                    Set Array_Value of iSet iItem to 0
84350>>>>>>>>>>>                End
84350>>>>>>>>>>>>
84350>>>>>>>>>>>            Loop
84351>>>>>>>>>>>>
84351>>>>>>>>>>>        End
84351>>>>>>>>>>>>
84351>>>>>>>>>>>        
84351>>>>>>>>>>>    End_Procedure
84352>>>>>>>>>>>    
84352>>>>>>>>>>>    Procedure OnTimer Integer wParam Integer lParam
84354>>>>>>>>>>>        Integer iObj
84354>>>>>>>>>>>        Get Integer_Value of (TimersArray(Self)) wParam to iObj
84355>>>>>>>>>>>        If not iObj Begin
84357>>>>>>>>>>>            Error DFERR_DFTIMER C_$TimerWithoutObject
84358>>>>>>>>>>>>
84358>>>>>>>>>>>            Procedure_Return
84359>>>>>>>>>>>        End
84359>>>>>>>>>>>>
84359>>>>>>>>>>>        Send OnTimer to iObj wParam lParam
84360>>>>>>>>>>>    End_Procedure
84361>>>>>>>>>>>    
84361>>>>>>>>>>>    Procedure Destroy_Object
84363>>>>>>>>>>>        Send Kill_All_Timers
84364>>>>>>>>>>>        Forward Send Destroy_Object
84366>>>>>>>>>>>        Move 0 to giTimerManager
84367>>>>>>>>>>>    End_Procedure
84368>>>>>>>>>>>    
84368>>>>>>>>>>>End_Class
84369>>>>>>>>>>>
84369>>>>>>>>>>>
84369>>>>>>>>>>>
84369>>>>>>>>>>>
84369>>>>>>>>>>>// This class acts as a container for the
84369>>>>>>>>>>>// timer manager object. This is needed because
84369>>>>>>>>>>>// A DFTimerManager object created directly at the
84369>>>>>>>>>>>// desktop doesn't have a Window_Handle which we
84369>>>>>>>>>>>// need to create a Windoows timer. By placing
84369>>>>>>>>>>>// this non-visual container around the timer
84369>>>>>>>>>>>// manager, it does get a Window_Handle.
84369>>>>>>>>>>>// The procedure End_Construct_Object has been
84369>>>>>>>>>>>// augmented to create a window and also
84369>>>>>>>>>>>// automatically page all children, which will
84369>>>>>>>>>>>// be the timer manager.
84369>>>>>>>>>>>//
84369>>>>>>>>>>>Class DFTimerManagerPanel is a dfBasePanel
84370>>>>>>>>>>>    
84370>>>>>>>>>>>    Procedure Construct_Object
84372>>>>>>>>>>>        Forward Send Construct_Object
84374>>>>>>>>>>>        Set Visible_State to False
84375>>>>>>>>>>>        Object DFTimerManager is a DFTimerManager
84377>>>>>>>>>>>        End_Object
84378>>>>>>>>>>>    End_Procedure
84379>>>>>>>>>>>    
84379>>>>>>>>>>>    Procedure End_Construct_Object
84381>>>>>>>>>>>        Forward Send End_Construct_Object
84383>>>>>>>>>>>        Send Page_Object True
84384>>>>>>>>>>>        Broadcast Send Page_Object True
84386>>>>>>>>>>>    End_Procedure
84387>>>>>>>>>>>    
84387>>>>>>>>>>>End_Class
84388>>>>>>>>>>>
84388>>>>>>>>>>>// This is the class the user uses to create DFTimer objects
84388>>>>>>>>>>>
84388>>>>>>>>>>>
84388>>>>>>>>>>>//{ OverrideProperty=Skip_State DesignTime=False }
84388>>>>>>>>>>>//{ OverrideProperty=TypeFace DesignTime=False }
84388>>>>>>>>>>>Class DFTimer is a Textbox
84389>>>>>>>>>>>    
84389>>>>>>>>>>>    Procedure Construct_Object
84391>>>>>>>>>>>        Forward Send Construct_Object
84393>>>>>>>>>>>        
84393>>>>>>>>>>>        // Make sure this object never appears
84393>>>>>>>>>>>        Set Visible_State to False
84394>>>>>>>>>>>        
84394>>>>>>>>>>>        Property Integer Private.Timeout    1000
84395>>>>>>>>>>>        
84395>>>>>>>>>>>        Property Integer Timer_Message      0
84396>>>>>>>>>>>        Property Integer Timer_Object       0
84397>>>>>>>>>>>        Property Integer Auto_Start_State   True
84398>>>>>>>>>>>        Property Integer Auto_Stop_State    True
84399>>>>>>>>>>>    End_Procedure
84400>>>>>>>>>>>    
84400>>>>>>>>>>>    Procedure Set Timer_Active_State Integer iState
84402>>>>>>>>>>>        Integer iObj
84402>>>>>>>>>>>        Move Self to iObj
84403>>>>>>>>>>>        If giTimerManager ;            Set Timer_Active_State of giTimerManager iObj to iState
84406>>>>>>>>>>>    End_Procedure
84407>>>>>>>>>>>    
84407>>>>>>>>>>>    Function Timer_Active_State Returns Integer
84409>>>>>>>>>>>        Integer iState
84409>>>>>>>>>>>        Integer iObj
84409>>>>>>>>>>>        Move Self to iObj
84410>>>>>>>>>>>        If giTimerManager ;            Get Timer_Active_State of giTimerManager iObj to iState
84413>>>>>>>>>>>        Function_Return iState
84414>>>>>>>>>>>    End_Function
84415>>>>>>>>>>>    
84415>>>>>>>>>>>    Procedure Set Timeout Integer iTimeout
84417>>>>>>>>>>>        Integer iActive
84417>>>>>>>>>>>        Set Private.Timeout to iTimeout
84418>>>>>>>>>>>        Get Timer_Active_State to iActive
84419>>>>>>>>>>>        If iActive ;            Set Timer_Active_State to True
84422>>>>>>>>>>>    End_Procedure
84423>>>>>>>>>>>    
84423>>>>>>>>>>>    Function Timeout Returns Integer
84425>>>>>>>>>>>        Integer iTimeout
84425>>>>>>>>>>>        Get Private.Timeout to iTimeout
84426>>>>>>>>>>>        Function_Return iTimeout
84427>>>>>>>>>>>    End_Function
84428>>>>>>>>>>>    
84428>>>>>>>>>>>    Procedure OnTimer Integer iwParam Integer ilParam
84430>>>>>>>>>>>        Integer iMsg
84430>>>>>>>>>>>        Integer iObj
84430>>>>>>>>>>>        Get Timer_Message to iMsg
84431>>>>>>>>>>>        If (iMsg) Begin
84433>>>>>>>>>>>            Get Timer_Object  to iObj
84434>>>>>>>>>>>            If iObj ;                Send iMsg to iObj iwParam ilParam
84437>>>>>>>>>>>            Else ;                Send iMsg iwParam ilParam
84439>>>>>>>>>>>        End
84439>>>>>>>>>>>>
84439>>>>>>>>>>>    End_Procedure
84440>>>>>>>>>>>    
84440>>>>>>>>>>>    // Augmented to Auto_Start a timer
84440>>>>>>>>>>>    //
84440>>>>>>>>>>>    Procedure Page_Object Integer iState
84442>>>>>>>>>>>        Forward Send Page_Object iState
84444>>>>>>>>>>>        If (iState and Auto_Start_State(Self)) ;            Set Timer_Active_State to True
84447>>>>>>>>>>>    End_Procedure
84448>>>>>>>>>>>    
84448>>>>>>>>>>>    // Augmented to Auto_Stop a timer
84448>>>>>>>>>>>    //
84448>>>>>>>>>>>    Procedure Page_Delete
84450>>>>>>>>>>>        If (Auto_Stop_State(Self)) ;            Set Timer_Active_State to False
84453>>>>>>>>>>>        Forward Send Page_Delete
84455>>>>>>>>>>>    End_Procedure
84456>>>>>>>>>>>    
84456>>>>>>>>>>>    // Augmented to stop the timer
84456>>>>>>>>>>>    //
84456>>>>>>>>>>>    Procedure Destroy_Object
84458>>>>>>>>>>>        Set Timer_Active_State to False
84459>>>>>>>>>>>        Forward Send Destroy_Object
84461>>>>>>>>>>>    End_Procedure
84462>>>>>>>>>>>    
84462>>>>>>>>>>>End_Class
84463>>>>>>>>>>>
84463>>>>>>>>>>>//
84463>>>>>>>>>>>// This was moved into a method so it can be reliable created
84463>>>>>>>>>>>// at the desktop. Note that cDesktop adds method to cDesktop class (class of desktop)
84463>>>>>>>>>>>//
84463>>>>>>>>>>>Procedure CreateDfTimerManagerPanel for cDesktop
84465>>>>>>>>>>>    // Create the Desktop Timer Manager Object.
84465>>>>>>>>>>>    Object DFTimerManagerPanel is a DFTimerManagerPanel
84467>>>>>>>>>>>    End_Object
84468>>>>>>>>>>>End_Procedure
84469>>>>>>>>>>>
84469>>>>>>>>>>>Send CreateDfTimerManagerPanel of DESKTOP
84470>>>>>>>>>
84470>>>>>>>>>Class cTimer is a cObject
84471>>>>>>>>>    
84471>>>>>>>>>    Procedure Construct_Object
84473>>>>>>>>>        Forward Send Construct_Object
84475>>>>>>>>>        Property Integer piPrivate_Timeout 1000
84476>>>>>>>>>    End_Procedure
84477>>>>>>>>>    
84477>>>>>>>>>    Procedure Set pbEnabled Boolean bEnabled
84479>>>>>>>>>        If giTimerManager Begin
84481>>>>>>>>>            Set Timer_Active_State of giTimerManager Self to bEnabled
84482>>>>>>>>>        End
84482>>>>>>>>>>
84482>>>>>>>>>    End_Procedure
84483>>>>>>>>>    
84483>>>>>>>>>    Function pbEnabled Returns Boolean
84485>>>>>>>>>        Boolean bEnabled
84485>>>>>>>>>        If giTimerManager Begin
84487>>>>>>>>>            Get Timer_Active_State of giTimerManager Self to bEnabled
84488>>>>>>>>>        End
84488>>>>>>>>>>
84488>>>>>>>>>        Function_Return bEnabled
84489>>>>>>>>>    End_Function
84490>>>>>>>>>    
84490>>>>>>>>>    Procedure Set piTimeout Integer iTimeout
84492>>>>>>>>>        Boolean bEnabled
84492>>>>>>>>>        Set piPrivate_Timeout to iTimeout
84493>>>>>>>>>        Get pbEnabled to bEnabled
84494>>>>>>>>>        If bEnabled Begin
84496>>>>>>>>>            Set pbEnabled to True
84497>>>>>>>>>        End
84497>>>>>>>>>>
84497>>>>>>>>>    End_Procedure
84498>>>>>>>>>    
84498>>>>>>>>>    Function piTimeout Returns Integer
84500>>>>>>>>>        Integer iTimeout
84500>>>>>>>>>        Get piPrivate_Timeout to iTimeout
84501>>>>>>>>>        Function_Return iTimeout
84502>>>>>>>>>    End_Function
84503>>>>>>>>>    
84503>>>>>>>>>    Procedure OnTimer
84505>>>>>>>>>    End_Procedure
84506>>>>>>>>>    
84506>>>>>>>>>    // this is needed by the timer manager
84506>>>>>>>>>    Function Timeout Returns Integer
84508>>>>>>>>>        Integer iTimeout
84508>>>>>>>>>        Get piPrivate_Timeout to iTimeout
84509>>>>>>>>>        Function_Return iTimeout
84510>>>>>>>>>    End_Function
84511>>>>>>>>>    
84511>>>>>>>>>    Procedure Destroy_Object
84513>>>>>>>>>        Set pbEnabled to False
84514>>>>>>>>>        Forward Send Destroy_Object
84516>>>>>>>>>    End_Procedure
84517>>>>>>>>>    
84517>>>>>>>>>End_Class
84518>>>>>>>Use cRichEdit.pkg
Including file: cRichEdit.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cRichEdit.pkg)
84518>>>>>>>>>Use Windows.pkg
84518>>>>>>>>>Use cEdit_Mixin.pkg
84518>>>>>>>>>
84518>>>>>>>>>// constants used for RichEdit Properties
84518>>>>>>>>>// peAlignment
84518>>>>>>>>>Enum_List
84518>>>>>>>>>    Define alLeft   for 1
84518>>>>>>>>>    Define alRight  for 2
84518>>>>>>>>>    Define alCenter for 3
84518>>>>>>>>>End_Enum_List
84518>>>>>>>>>
84518>>>>>>>>>// peBullets
84518>>>>>>>>>Enum_List
84518>>>>>>>>>    Define buNone
84518>>>>>>>>>    Define buBullets
84518>>>>>>>>>    Define buArabicNumbers
84518>>>>>>>>>    Define buLowerLetters
84518>>>>>>>>>    Define buUpperLetters
84518>>>>>>>>>    Define buLowerRomans
84518>>>>>>>>>    Define buUpperRomans
84518>>>>>>>>>End_Enum_List
84518>>>>>>>>>
84518>>>>>>>>>// peBulletStyle
84518>>>>>>>>>Enum_List
84518>>>>>>>>>    Define busRightParen   for 0
84518>>>>>>>>>    Define busEncloseParen for 256
84518>>>>>>>>>    Define busPeriod       for 512
84518>>>>>>>>>    Define busNumberOnly   for 768
84518>>>>>>>>>    Define busNoDisplay    for 1024
84518>>>>>>>>>End_Enum_List
84518>>>>>>>>>
84518>>>>>>>>>// peLineSpacingType
84518>>>>>>>>>Enum_List
84518>>>>>>>>>    Define lstSingle
84518>>>>>>>>>    Define lstSingleAndOneHalf
84518>>>>>>>>>    Define lstDouble
84518>>>>>>>>>End_Enum_List
84518>>>>>>>>>
84518>>>>>>>>>Class cRichEdit is a DFBaseRichEdit
84519>>>>>>>>>    
84519>>>>>>>>>    Procedure Construct_Object
84521>>>>>>>>>        Forward Send Construct_Object
84523>>>>>>>>>        Send Define_cEdit_Mixin
84524>>>>>>>>>        
84524>>>>>>>>>        On_Key Key_Ctrl+Key_B Send ToggleBold
84525>>>>>>>>>        On_Key Key_Ctrl+Key_I Send ToggleItalics
84526>>>>>>>>>        On_Key Key_Ctrl+Key_U Send ToggleUnderline
84527>>>>>>>>>        
84527>>>>>>>>>    End_Procedure
84528>>>>>>>>>    
84528>>>>>>>>>    Import_Class_Protocol cEdit_Mixin
84529>>>>>>>>>    
84529>>>>>>>>>    Procedure ToggleBold
84531>>>>>>>>>        Set pbBold to (not(pbBold(Self)))
84532>>>>>>>>>    End_Procedure
84533>>>>>>>>>    
84533>>>>>>>>>    Procedure ToggleItalics
84535>>>>>>>>>        Set pbItalics to (not(pbItalics(Self)))
84536>>>>>>>>>    End_Procedure
84537>>>>>>>>>    
84537>>>>>>>>>    Procedure ToggleUnderline
84539>>>>>>>>>        Set pbUnderLine to (not(pbUnderLine(Self)))
84540>>>>>>>>>    End_Procedure
84541>>>>>>>>>    
84541>>>>>>>>>End_Class
84542>>>>>>>>>
84542>>>>>>>>>
84542>>>>>>>Use sql.pkg
84542>>>>>>>
84542>>>>>>>// defines interface for cWindowMesageHook - currently a private runtime class
84542>>>>>>>Define     U_DFWINDOWSMESSAGEHOOK  for |CI0106
84542>>>>>>>Define     GET_ENABLEWINDOWSHOOK   for |CI$0542
84542>>>>>>>Define     MSG_DISABLEWINDOWSHOOK  for |CI$0543
84542>>>>>>>Define     GET_ONWINDOWSHOOK       for |CI$0544
84542>>>>>>>Define     WH_MOUSE for 7
84542>>>>>>>Define     WH_KEYBOARD for 2
84542>>>>>>>
84542>>>>>>>
84542>>>>>>>// suggestion lists use a global timer and a global suggestion list
84542>>>>>>>Global_Variable Handle ghoSuggestionList
84542>>>>>>>Move 0 to ghoSuggestionList
84543>>>>>>>
84543>>>>>>>Global_Variable Handle ghoSuggestionTimer
84543>>>>>>>Move 0 to ghoSuggestionTimer
84544>>>>>>>
84544>>>>>>>// this will get created the first time it is needed.
84544>>>>>>>Class cSuggestionTimer is a cTimer
84545>>>>>>>    
84545>>>>>>>    Procedure Construct_Object
84547>>>>>>>        Forward Send Construct_Object
84549>>>>>>>        Property Handle phoTimerOwner 0
84550>>>>>>>        Set piTimeout to 50
84551>>>>>>>    End_Procedure
84552>>>>>>>    
84552>>>>>>>    Procedure OnTimer
84554>>>>>>>        Handle hoOwner
84554>>>>>>>        Get phoTimerOwner to hoOwner
84555>>>>>>>        // do this in case progam close destroys owner before timer
84555>>>>>>>        Get Object_Id of hoOwner to hoOwner
84556>>>>>>>        If hoOwner Begin
84558>>>>>>>            Send OnSuggestionTimer to hoOwner
84559>>>>>>>        End
84559>>>>>>>>
84559>>>>>>>        Else Begin
84560>>>>>>>            // something wrong, shut off timer
84560>>>>>>>            Set pbEnabled to False
84561>>>>>>>        End
84561>>>>>>>>
84561>>>>>>>    End_Procedure
84562>>>>>>>    
84562>>>>>>>End_Class
84563>>>>>>>
84563>>>>>>>Class cSuggestionHookMouse is a DFWindowsMessageHook
84564>>>>>>>    
84564>>>>>>>    // If mouse not in suggestion list or form, close suggestionlist
84564>>>>>>>    Function OnWindowsHook Integer i1 Integer i2 Integer i3 Returns Integer
84566>>>>>>>        tWinMouseHookStruct MouseHook
84566>>>>>>>        tWinMouseHookStruct MouseHook
84566>>>>>>>        Integer ivoid hObj
84566>>>>>>>        Handle hoOwner hoParent
84566>>>>>>>        If (i1=0 and (i2=WM_LBUTTONDOWN or i2=WM_RBUTTONDOWN or i2=WM_MBUTTONDOWN or ;            i2=WM_NCLBUTTONDOWN or i2=WM_NCRBUTTONDOWN or i2=WM_NCMBUTTONDOWN)) Begin
84568>>>>>>>            Move (CopyMemory(AddressOf(MouseHook), i3, SizeOfType(tWinMouseHookStruct))) to iVoid
84569>>>>>>>            GET_OBJECT_FROM_WINDOW MouseHook.hwnd to hObj
84570>>>>>>>            Get Parent to hoParent
84571>>>>>>>            Get phoOwner of hoParent to hoOwner
84572>>>>>>>            If (not(hObj) or (hObj<>hoParent and hObj<>hoOwner)) Begin
84574>>>>>>>                Send DisableWindowsHook
84575>>>>>>>                Send DeActivateSuggestionList of hoOwner
84576>>>>>>>            End
84576>>>>>>>>
84576>>>>>>>        End
84576>>>>>>>>
84576>>>>>>>    End_Function
84577>>>>>>>    
84577>>>>>>>    Procedure End_Construct_Object
84579>>>>>>>        Boolean bOk
84579>>>>>>>        Forward Send End_Construct_Object
84581>>>>>>>        Get EnableWindowsHook WH_MOUSE to bOk
84582>>>>>>>    End_Procedure
84583>>>>>>>    
84583>>>>>>>End_Class
84584>>>>>>>
84584>>>>>>>Class cSuggestionHookKbd is a DFWindowsMessageHook
84585>>>>>>>    
84585>>>>>>>    // If menu key, close suggestionlist
84585>>>>>>>    Function OnWindowsHook Integer i1 Integer i2 Integer i3 Returns Integer
84587>>>>>>>        Handle hoOwner
84587>>>>>>>        If (i1=0 and i2=VK_MENU) Begin
84589>>>>>>>            Delegate Get phoOwner to hoOwner
84591>>>>>>>            Send DisableWindowsHook
84592>>>>>>>            Send DeActivateSuggestionList of hoOwner
84593>>>>>>>        End
84593>>>>>>>>
84593>>>>>>>    End_Function
84594>>>>>>>    
84594>>>>>>>    Procedure End_Construct_Object
84596>>>>>>>        Boolean bOk
84596>>>>>>>        Forward Send End_Construct_Object
84598>>>>>>>        Get EnableWindowsHook WH_KEYBOARD  to bOk
84599>>>>>>>    End_Procedure
84600>>>>>>>    
84600>>>>>>>End_Class
84601>>>>>>>
84601>>>>>>>Class cSuggestionList is a cRichEdit
84602>>>>>>>    
84602>>>>>>>    Procedure Construct_Object
84604>>>>>>>        Handle hoObj
84604>>>>>>>        Forward Send Construct_Object
84606>>>>>>>        Property Handle phoOwner
84607>>>>>>>        Set Focus_Mode to NonFocusable
84608>>>>>>>        Set Attach_Parent_State to True
84609>>>>>>>        Set pbWrap to False
84610>>>>>>>        If (ghoSuggestionList) Begin
84612>>>>>>>            Send Destroy of ghoSuggestionList
84613>>>>>>>        End
84613>>>>>>>>
84613>>>>>>>        Get CreateNamed (RefClass(cSuggestionHookMouse)) "oMouseHook" to hoObj
84614>>>>>>>        Get CreateNamed (RefClass(cSuggestionHookKbd))"oKbdHook" to hoObj
84615>>>>>>>    End_Procedure
84616>>>>>>>    
84616>>>>>>>    Procedure Destroy_Object
84618>>>>>>>        Forward Send Destroy_Object
84620>>>>>>>        Move 0 to ghoSuggestionList
84621>>>>>>>    End_Procedure
84622>>>>>>>    
84622>>>>>>>    Procedure DeactivateList
84624>>>>>>>        Set pbEnabled of ghoSuggestionTimer to False
84625>>>>>>>        Send Deactivate
84626>>>>>>>        Send Destroy
84627>>>>>>>    End_Procedure
84628>>>>>>>    
84628>>>>>>>    Procedure InitList Handle hoForm
84630>>>>>>>        Integer iSize iLoc iLoc2
84630>>>>>>>        Get GuiSize of hoForm to iSize
84631>>>>>>>        Set GuiSize to (Hi(iSize)) (1000)
84632>>>>>>>        Get Absolute_GUIOrigin of hoForm to iLoc
84633>>>>>>>        Delegate Get Absolute_GUIOrigin to iLoc2
84635>>>>>>>        Set GuiLocation to (Hi(iLoc)-Hi(iLoc2)+Hi(iSize)+2) (Low(iLoc)+2-Low(iLoc2))
84636>>>>>>>        Set Visible_State to False
84637>>>>>>>    End_Procedure
84638>>>>>>>    
84638>>>>>>>    // scroll up one line
84638>>>>>>>    Procedure ScrollUp
84640>>>>>>>        Integer iLine
84640>>>>>>>        Get SelectedRow to iLine
84641>>>>>>>        If (iLine) Begin
84643>>>>>>>            Send SelectRow (iLine-1)
84644>>>>>>>        End
84644>>>>>>>>
84644>>>>>>>    End_Procedure
84645>>>>>>>    
84645>>>>>>>    // scroll down one line
84645>>>>>>>    Procedure ScrollDown
84647>>>>>>>        Integer iLine iLines
84647>>>>>>>        Get Line_Count to iLines
84648>>>>>>>        Get SelectedRow to iLine
84649>>>>>>>        // there can be an extra line at the end
84649>>>>>>>        If (iLine<iLines-1) Begin
84651>>>>>>>            Send SelectRow (iLine+1)
84652>>>>>>>        End
84652>>>>>>>>
84652>>>>>>>    End_Procedure
84653>>>>>>>    
84653>>>>>>>    // sets the current line to iLine and highlights it
84653>>>>>>>    Procedure SelectRow Integer iLine
84655>>>>>>>        Integer iPos iLen
84655>>>>>>>        Get FirstCharInLinePos iLine to iPos
84656>>>>>>>        Get LineLength iLine to iLen
84657>>>>>>>        Send SetSel iPos (iPos+iLen)
84658>>>>>>>    End_Procedure
84659>>>>>>>    
84659>>>>>>>    // get the current selected Line
84659>>>>>>>    Function SelectedRow Returns Integer
84661>>>>>>>        Integer iLine
84661>>>>>>>        Get LineFromChar -1 to iLine
84662>>>>>>>        Function_Return iLine
84663>>>>>>>    End_Function
84664>>>>>>>    
84664>>>>>>>    // select the current row
84664>>>>>>>    Procedure Mouse_Up Handle hCell Integer iPos
84666>>>>>>>        Handle hoObj
84666>>>>>>>        Get phoOwner to hoObj
84667>>>>>>>        Send Activate of hoObj // move focus to owner, which will close the list
84668>>>>>>>        Send SelectSuggestion of hoObj
84669>>>>>>>    End_Procedure
84670>>>>>>>    
84670>>>>>>>End_Class
84671>>>>>>>
84671>>>>>>>// This contains mixin support for suggestion logic and contains the interface that
84671>>>>>>>// is accessed publicly. This should be mixed into the form or column DEO object
84671>>>>>>>Class cSuggestion_mixin is a Mixin
84672>>>>>>>    
84672>>>>>>>    Procedure Define_cSuggestion_mixin
84674>>>>>>>        
84674>>>>>>>        Property Integer peSuggestionMode smFind
84675>>>>>>>        Property Boolean pbFullText False
84676>>>>>>>        Property Boolean pbCaseSensitive False
84677>>>>>>>        Property Integer piMaxResults 15
84678>>>>>>>        Property Integer piStartAtChar 2
84679>>>>>>>        Property Boolean pbFullWidth True
84680>>>>>>>        Property Integer piFindIndex 0
84681>>>>>>>        Property Boolean pbFindOnSelect True
84682>>>>>>>        Property Integer piPopupTimeout 50
84683>>>>>>>        
84683>>>>>>>        Property tSuggestion[] pSearchResults
84684>>>>>>>        
84684>>>>>>>        Property Handle phcSuggestionListClass (RefClass(cSuggestionList))
84685>>>>>>>        
84685>>>>>>>    End_Procedure
84686>>>>>>>    
84686>>>>>>>    // Display one Suggestion Line in Suggestion List. Good for augmentation although
84686>>>>>>>    // this must be done carefully as you must know the suggestionlist interface, which
84686>>>>>>>    // if private
84686>>>>>>>    Procedure ShowSuggestion tSuggestion SuggestionData String sSearch
84688>>>>>>>        Integer i iCols iPos
84688>>>>>>>        String sValue
84688>>>>>>>        Integer eSuggestionMode
84688>>>>>>>        Boolean bFullText
84688>>>>>>>        
84688>>>>>>>        Get peSuggestionMode to eSuggestionMode
84689>>>>>>>        Get pbFullText to bFullText
84690>>>>>>>        
84690>>>>>>>        Move SuggestionData.aValues[0] to sValue
84691>>>>>>>        If (not(bFullText)) Begin
84693>>>>>>>            Set pbBold of ghoSuggestionList to True
84694>>>>>>>            Send AppendText of ghoSuggestionList (Left(sValue,Length(sSearch)))
84695>>>>>>>            Set pbBold of ghoSuggestionList to False
84696>>>>>>>            Send AppendText of ghoSuggestionList (Mid(sValue,255,Length(sSearch)+1))
84697>>>>>>>        End
84697>>>>>>>>
84697>>>>>>>        Else Begin
84698>>>>>>>            Set pbBold of ghoSuggestionList to False
84699>>>>>>>            Move (Pos(Uppercase(sSearch),Uppercase(sValue))) to iPos
84700>>>>>>>            If (iPos) Begin
84702>>>>>>>                Send AppendText of ghoSuggestionList (Left(sValue,iPos-1))
84703>>>>>>>                Set pbBold of ghoSuggestionList to True
84704>>>>>>>                Send AppendText of ghoSuggestionList (Mid(sValue,Length(sSearch),iPos))
84705>>>>>>>                Set pbBold of ghoSuggestionList to False
84706>>>>>>>            End
84706>>>>>>>>
84706>>>>>>>            Send AppendText of ghoSuggestionList (Mid(sValue,255,iPos+Length(sSearch)))
84707>>>>>>>        End
84707>>>>>>>>
84707>>>>>>>        
84707>>>>>>>        // if addiitonal columns (usually validation) we assume the first value is the one that is
84707>>>>>>>        // matched and we display all other values (usually just one) to the
84707>>>>>>>        // right of it.
84707>>>>>>>        Move (SizeOfArray(SuggestionData.aValues)) to iCols
84708>>>>>>>        If (iCols>1) Begin
84710>>>>>>>            Move "" to sValue
84711>>>>>>>            For i from 1 to (iCols-1)
84717>>>>>>>>
84717>>>>>>>                Move (sValue + If(i=1," - ","  ") + SuggestionData.aValues[i]) to sValue
84718>>>>>>>            Loop
84719>>>>>>>>
84719>>>>>>>            Send AppendText of ghoSuggestionList sValue
84720>>>>>>>        End
84720>>>>>>>>
84720>>>>>>>    End_Procedure
84721>>>>>>>    
84721>>>>>>>    // used to catch a set_field_value_Error
84721>>>>>>>    Procedure Error_Report Integer iError Integer iLine String sErr
84723>>>>>>>    End_Procedure
84724>>>>>>>    
84724>>>>>>>    // does a Set_Field_Value with error testing around it.
84724>>>>>>>    Function SafeSetFieldValue Integer iFile Integer iField String sValue Returns Boolean
84726>>>>>>>        Handle hoOldError
84726>>>>>>>        Boolean bErr
84726>>>>>>>        Move Error_Object_Id to hoOldError
84727>>>>>>>        Move Self to Error_Object_Id
84728>>>>>>>        Move False to Err
84729>>>>>>>        Set_Field_Value iFile iField to sValue
84732>>>>>>>        Move Err to bErr
84733>>>>>>>        Move hoOldError to Error_Object_Id
84734>>>>>>>        Function_Return bErr
84735>>>>>>>    End_Function
84736>>>>>>>    
84736>>>>>>>    
84736>>>>>>>    Procedure SuggestionsFindIncremental String sSearch tSuggestion[] ByRef aSuggestions
84738>>>>>>>        Integer iFile iField iIndex iLen iRow iMax eType iLength iDec
84738>>>>>>>        Handle hoServer
84738>>>>>>>        Boolean bContinue bCase bOldRelate bNeedsRelate bInvalid
84738>>>>>>>        String sVal sLowSearch
84738>>>>>>>        RowID riTest
84738>>>>>>>        
84738>>>>>>>        Get Server to hoServer
84739>>>>>>>        Get Data_File  to iFile
84740>>>>>>>        Get Data_Field to iField
84741>>>>>>>        
84741>>>>>>>        If ((hoServer <> 0) and (iFile <> 0)) Begin
84743>>>>>>>            Get piFindIndex to iIndex
84744>>>>>>>            Get piMaxResults to iMax
84745>>>>>>>            Get pbCaseSensitive to bCase
84746>>>>>>>            
84746>>>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to eType
84749>>>>>>>            Get_Attribute DF_FIELD_LENGTH of iFile iField to iLength
84752>>>>>>>            Get_Attribute DF_FIELD_PRECISION of iFile iField to iDec
84755>>>>>>>            
84755>>>>>>>            Move (iLength - iDec) to iLength
84756>>>>>>>            
84756>>>>>>>            If (iIndex <= 0) Begin
84758>>>>>>>                Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
84761>>>>>>>            End
84761>>>>>>>>
84761>>>>>>>            
84761>>>>>>>            
84761>>>>>>>            
84761>>>>>>>            If (iIndex > 0) Begin
84763>>>>>>>                Get No_Relate_State of hoServer to bOldRelate
84764>>>>>>>                Get DDOConstraintNeedsRelate of hoServer iIndex to bNeedsRelate
84765>>>>>>>                Set No_Relate_State of hoServer to (not(bNeedsRelate))
84766>>>>>>>                
84766>>>>>>>                Move True to bContinue
84767>>>>>>>                Move (Length(sSearch)) to iLen
84768>>>>>>>                Move (Lowercase(sSearch)) to sLowSearch
84769>>>>>>>                Move 0 to iRow
84770>>>>>>>                
84770>>>>>>>                //  Find first record
84770>>>>>>>                Send Request_Read of hoServer FIRST_RECORD iFile iIndex
84771>>>>>>>                Get SafeSetFieldValue iFile iField sSearch to bInvalid
84772>>>>>>>                If bInvalid Begin
84774>>>>>>>                    Move False to bContinue
84775>>>>>>>                End
84775>>>>>>>>
84775>>>>>>>                
84775>>>>>>>                If (bContinue) Begin
84777>>>>>>>                    Send Request_Read of hoServer GE iFile iIndex
84778>>>>>>>                End
84778>>>>>>>>
84778>>>>>>>                
84778>>>>>>>                While (Found and bContinue)
84782>>>>>>>                    Get_Field_Value iFile iField to sVal
84785>>>>>>>                    
84785>>>>>>>                    If ((not(bCase) and Lowercase(Left(sVal, iLen)) = sLowSearch) or (bCase and Left(sVal, iLen) = sSearch)) Begin
84787>>>>>>>                        
84787>>>>>>>                        Move (SerializeRowID(GetRowID(iFile)))  to aSuggestions[iRow].sRowId
84788>>>>>>>                        Move (Trim(sVal))                       to aSuggestions[iRow].aValues[0]
84789>>>>>>>                        Increment iRow
84790>>>>>>>                        
84790>>>>>>>                        Move (iRow < iMax) to bContinue
84791>>>>>>>                        
84791>>>>>>>                        Send Request_Read of hoServer GT iFile iIndex
84792>>>>>>>                    End
84792>>>>>>>>
84792>>>>>>>                    Else Begin
84793>>>>>>>                        If (eType = DF_BCD and Length(sSearch) < iLength) Begin
84795>>>>>>>                            //  For numeric fields we'll jump in the index to the next possible value (for example from 40 to 400)
84795>>>>>>>                            
84795>>>>>>>                            Move (GetRowID(iFile)) to riTest
84796>>>>>>>                            
84796>>>>>>>                            Move (sSearch * 10) to sSearch
84797>>>>>>>                            
84797>>>>>>>                            Get SafeSetFieldValue iFile iField sSearch to bInvalid
84798>>>>>>>                            If bInvalid Begin
84800>>>>>>>                                Move False to bContinue
84801>>>>>>>                            End
84801>>>>>>>>
84801>>>>>>>                            Else Begin
84802>>>>>>>                                Send Request_Read of hoServer GE iFile iIndex
84803>>>>>>>                                Move (not(IsSameRowID(riTest, GetRowID(iFile)))) to bContinue
84804>>>>>>>                            End
84804>>>>>>>>
84804>>>>>>>                        End
84804>>>>>>>>
84804>>>>>>>                        Else Begin
84805>>>>>>>                            Move False to bContinue
84806>>>>>>>                        End
84806>>>>>>>>
84806>>>>>>>                    End
84806>>>>>>>>
84806>>>>>>>                    
84806>>>>>>>                Loop
84807>>>>>>>>
84807>>>>>>>                Set No_Relate_State of hoServer to bOldRelate
84808>>>>>>>            End
84808>>>>>>>>
84808>>>>>>>        End
84808>>>>>>>>
84808>>>>>>>    End_Procedure
84809>>>>>>>    
84809>>>>>>>    Procedure SuggestionsFindFullText String sSearch tSuggestion[] ByRef aSuggestions
84811>>>>>>>        Integer iFile iField iIndex iRow iMax
84811>>>>>>>        Handle hoServer
84811>>>>>>>        Boolean bContinue bCase  bOldRelate bNeedsRelate
84811>>>>>>>        String sVal sLowSearch
84811>>>>>>>        
84811>>>>>>>        Get Server to hoServer
84812>>>>>>>        Get Data_File  to iFile
84813>>>>>>>        Get Data_Field to iField
84814>>>>>>>        
84814>>>>>>>        If ((hoServer <> 0) and (iFile <> 0)) Begin
84816>>>>>>>            Get piMaxResults to iMax
84817>>>>>>>            Get pbCaseSensitive to bCase
84818>>>>>>>            
84818>>>>>>>            Get piFindIndex to iIndex
84819>>>>>>>            If (iIndex <= 0) Begin
84821>>>>>>>                Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
84824>>>>>>>            End
84824>>>>>>>>
84824>>>>>>>            
84824>>>>>>>            Get No_Relate_State of hoServer to bOldRelate
84825>>>>>>>            Get DDOConstraintNeedsRelate of hoServer iIndex to bNeedsRelate
84826>>>>>>>            Set No_Relate_State of hoServer to (not(bNeedsRelate))
84827>>>>>>>            
84827>>>>>>>            
84827>>>>>>>            Move (Lowercase(sSearch)) to sLowSearch
84828>>>>>>>            Move True to bContinue
84829>>>>>>>            Move 0 to iRow
84830>>>>>>>            
84830>>>>>>>            //  Find first record
84830>>>>>>>            Send Request_Read of hoServer FIRST_RECORD iFile iIndex
84831>>>>>>>            
84831>>>>>>>            While (Found and (iRow < iMax))
84835>>>>>>>                Get_Field_Value iFile iField to sVal
84838>>>>>>>                
84838>>>>>>>                If ((bCase and sVal contains sSearch) or (not(bCase) and Lowercase(sVal) contains sLowSearch)) Begin
84840>>>>>>>                    Move (SerializeRowID(GetRowID(iFile)))  to aSuggestions[iRow].sRowId
84841>>>>>>>                    Move (Trim(sVal))                       to aSuggestions[iRow].aValues[0]
84842>>>>>>>                    Increment iRow
84843>>>>>>>                End
84843>>>>>>>>
84843>>>>>>>                
84843>>>>>>>                Send Request_Read of hoServer GT iFile iIndex
84844>>>>>>>            Loop
84845>>>>>>>>
84845>>>>>>>            Set No_Relate_State of hoServer to bOldRelate
84846>>>>>>>        End
84846>>>>>>>>
84846>>>>>>>    End_Procedure
84847>>>>>>>    
84847>>>>>>>    Procedure SuggestionsSQLFullText String sSearch tSuggestion[] ByRef aSuggestions
84849>>>>>>>        Integer iFile iField iIndex iRow iMax
84849>>>>>>>        Handle hoServer
84849>>>>>>>        Boolean bContinue bOrigActive  bOldRelate bNeedsRelate
84849>>>>>>>        String sVal sOrigFilter sFilter sFile sField
84849>>>>>>>        
84849>>>>>>>        Get Server to hoServer
84850>>>>>>>        Get Data_File  to iFile
84851>>>>>>>        Get Data_Field to iField
84852>>>>>>>        
84852>>>>>>>        If ((hoServer <> 0) and (iFile <> 0)) Begin
84854>>>>>>>            
84854>>>>>>>            // make sure we send DD messages to owner DDO
84854>>>>>>>            Get Which_Data_Set of hoServer iFile to hoServer
84855>>>>>>>            If (hoServer=0) Begin
84857>>>>>>>                Procedure_Return
84858>>>>>>>            End
84858>>>>>>>>
84858>>>>>>>            
84858>>>>>>>            Get piMaxResults to iMax
84859>>>>>>>            Get piFindIndex to iIndex
84860>>>>>>>            If (iIndex <= 0) Begin
84862>>>>>>>                Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
84865>>>>>>>            End
84865>>>>>>>>
84865>>>>>>>            
84865>>>>>>>            //  Determine current filter settings
84865>>>>>>>            Get psSQLFilter of hoServer to sOrigFilter
84866>>>>>>>            Get pbUseDDSqlFilters of hoServer to bOrigActive
84867>>>>>>>            
84867>>>>>>>            // generate the Like filter string
84867>>>>>>>            Get SQLStrLike of hoServer iField sSearch to sFilter
84868>>>>>>>            // If filtering was active append this to what's there
84868>>>>>>>            If (bOrigActive) Begin
84870>>>>>>>                Get SQLStrAppend of hoServer sOrigFilter sFilter to sFilter
84871>>>>>>>            End
84871>>>>>>>>
84871>>>>>>>            
84871>>>>>>>            //  Set filter
84871>>>>>>>            Set psSQLFilter of hoServer to sFilter
84872>>>>>>>            Set pbUseDDSqlFilters of hoServer to True
84873>>>>>>>            
84873>>>>>>>            
84873>>>>>>>            // this will optimize No_relate. If your DF constraint does not
84873>>>>>>>            // need a post-relate test, we will disabled relates for this
84873>>>>>>>            Get No_Relate_State of hoServer to bOldRelate
84874>>>>>>>            Get DDOConstraintNeedsRelate of hoServer iIndex to bNeedsRelate
84875>>>>>>>            Set No_Relate_State of hoServer to (not(bNeedsRelate))
84876>>>>>>>            
84876>>>>>>>            //  Find records
84876>>>>>>>            Move True to bContinue
84877>>>>>>>            Move 0 to iRow
84878>>>>>>>            
84878>>>>>>>            Send Request_Read of hoServer FIRST_RECORD iFile iIndex
84879>>>>>>>            
84879>>>>>>>            While (bContinue)
84883>>>>>>>                Get_Field_Value iFile iField to sVal
84886>>>>>>>                
84886>>>>>>>                If (Found) Begin // and ((bCase and sVal contains sSearch) or (not(bCase) and Lowercase(sVal) contains sLowSearch))) Begin
84888>>>>>>>                    Move (SerializeRowID(GetRowID(iFile)))  to aSuggestions[iRow].sRowId
84889>>>>>>>                    Move (Trim(sVal))                       to aSuggestions[iRow].aValues[0]
84890>>>>>>>                    Increment iRow
84891>>>>>>>                    
84891>>>>>>>                    Move (iRow < iMax) to bContinue
84892>>>>>>>                    
84892>>>>>>>                    Send Request_Read of hoServer GT iFile iIndex
84893>>>>>>>                End
84893>>>>>>>>
84893>>>>>>>                Else Begin
84894>>>>>>>                    Move False to bContinue
84895>>>>>>>                End
84895>>>>>>>>
84895>>>>>>>                
84895>>>>>>>            Loop
84896>>>>>>>>
84896>>>>>>>            
84896>>>>>>>            //  Restore filters
84896>>>>>>>            Set psSQLFilter of hoServer to sOrigFilter
84897>>>>>>>            Set pbUseDDSqlFilters of hoServer to bOrigActive
84898>>>>>>>            Set No_Relate_State of hoServer to bOldRelate
84899>>>>>>>        End
84899>>>>>>>>
84899>>>>>>>    End_Procedure
84900>>>>>>>    
84900>>>>>>>    Procedure SuggestionsValidation String sSearch tSuggestion[] ByRef aSuggestions Boolean bFullText
84902>>>>>>>        Handle hoServer hoTable
84902>>>>>>>        Integer iFile iField iRow iCount iFound iMax iLen
84902>>>>>>>        Variant[][] aData
84903>>>>>>>        Boolean bCaseSensitive bContinue
84903>>>>>>>        String sDescr sVal
84903>>>>>>>        
84903>>>>>>>        Get Server to hoServer
84904>>>>>>>        Get Data_File  to iFile
84905>>>>>>>        Get Data_Field to iField
84906>>>>>>>        
84906>>>>>>>        If ((hoServer <> 0) and (iFile <> 0)) Begin
84908>>>>>>>            Get File_Field_Table_Object of hoServer iFile iField to hoTable
84909>>>>>>>            If (hoTable <> 0) Begin
84911>>>>>>>                Get tabledata of hoTable to aData
84912>>>>>>>                
84912>>>>>>>                Get piMaxResults to iMax
84913>>>>>>>                Get pbCaseSensitive to bCaseSensitive
84914>>>>>>>                
84914>>>>>>>                If (not(bCaseSensitive)) Begin
84916>>>>>>>                    Move (Lowercase(sSearch)) to sSearch
84917>>>>>>>                End
84917>>>>>>>>
84917>>>>>>>                
84917>>>>>>>                
84917>>>>>>>                Move (SizeOfArray(aData)) to iCount
84918>>>>>>>                Move 0 to iRow
84919>>>>>>>                Move (Length(sSearch)) to iLen
84920>>>>>>>                Move True to bContinue
84921>>>>>>>                
84921>>>>>>>                
84921>>>>>>>                While (iFound < iMax and iRow < iCount and bContinue)
84925>>>>>>>                    If (not(bCaseSensitive)) Begin
84927>>>>>>>                        Move (Lowercase(aData[iRow][0])) to sVal
84928>>>>>>>                        Move (Lowercase(aData[iRow][1])) to sDescr
84929>>>>>>>                    End
84929>>>>>>>>
84929>>>>>>>                    Else Begin
84930>>>>>>>                        Move aData[iRow][0] to sVal
84931>>>>>>>                        Move aData[iRow][1] to sDescr
84932>>>>>>>                    End
84932>>>>>>>>
84932>>>>>>>                    
84932>>>>>>>                    If ((bFullText and (sVal contains sSearch)) or (not(bFullText) and (Left(sVal, iLen) = sSearch))) Begin
84934>>>>>>>                        Move aData[iRow][0] to aSuggestions[iFound].sRowId
84935>>>>>>>                        Move aData[iRow][0] to aSuggestions[iFound].aValues[0]
84936>>>>>>>                        Move aData[iRow][1] to aSuggestions[iFound].aValues[1]
84937>>>>>>>                        Increment iFound
84938>>>>>>>                    End
84938>>>>>>>>
84938>>>>>>>                    Else Begin
84939>>>>>>>                        Move (bFullText or iFound = 0) to bContinue
84940>>>>>>>                    End
84940>>>>>>>>
84940>>>>>>>                    
84940>>>>>>>                    Increment iRow
84941>>>>>>>                Loop
84942>>>>>>>>
84942>>>>>>>            End
84942>>>>>>>>
84942>>>>>>>        End
84942>>>>>>>>
84942>>>>>>>        
84942>>>>>>>    End_Procedure
84943>>>>>>>    
84943>>>>>>>    
84943>>>>>>>    Procedure OnFindSuggestions String sSearch tSuggestion[] ByRef aSuggestions
84945>>>>>>>        Integer iMode iFile
84945>>>>>>>        Boolean bFullText bResult bSupportsSQL
84945>>>>>>>        Handle hoServer
84945>>>>>>>        
84945>>>>>>>        Get Server to hoServer
84946>>>>>>>        Get Data_File  to iFile
84947>>>>>>>        
84947>>>>>>>        If ((hoServer <> 0) and (iFile <> 0)) Begin
84949>>>>>>>            
84949>>>>>>>            Get peSuggestionMode to iMode
84950>>>>>>>            Get pbFullText to bFullText
84951>>>>>>>            
84951>>>>>>>            If (iMode = smFind) Begin
84953>>>>>>>                If (not(bFullText)) Begin
84955>>>>>>>                    Send SuggestionsFindIncremental sSearch (&aSuggestions)
84956>>>>>>>                End
84956>>>>>>>>
84956>>>>>>>                Else Begin
84957>>>>>>>                    Get SupportsSQLFilters of hoServer to bSupportsSQL
84958>>>>>>>                    If (bSupportsSQL) Begin
84960>>>>>>>                        Send SuggestionsSQLFullText sSearch (&aSuggestions)
84961>>>>>>>                    End
84961>>>>>>>>
84961>>>>>>>                    Else Begin
84962>>>>>>>                        Send SuggestionsFindFullText sSearch (&aSuggestions)
84963>>>>>>>                    End
84963>>>>>>>>
84963>>>>>>>                End
84963>>>>>>>>
84963>>>>>>>            End
84963>>>>>>>>
84963>>>>>>>            Else If (iMode = smValidationTable) Begin
84966>>>>>>>                Send SuggestionsValidation sSearch (&aSuggestions) bFullText
84967>>>>>>>            End
84967>>>>>>>>
84967>>>>>>>        End
84967>>>>>>>>
84967>>>>>>>    End_Procedure
84968>>>>>>>    
84968>>>>>>>    Procedure OnSelectSuggestion String sSearch tSuggestion Suggestion
84970>>>>>>>        Handle hoServer
84970>>>>>>>        Integer iFile iField iMode
84970>>>>>>>        Boolean bFind
84970>>>>>>>        RowID rRowId
84970>>>>>>>        
84970>>>>>>>        Get Server to hoServer
84971>>>>>>>        Get Data_File  to iFile
84972>>>>>>>        Get Data_Field to iField
84973>>>>>>>        
84973>>>>>>>        If ((hoServer <> 0) and (iFile <> 0)) Begin
84975>>>>>>>            Get peSuggestionMode to iMode
84976>>>>>>>            
84976>>>>>>>            If (iMode = smFind) Begin
84978>>>>>>>                Get pbFindOnSelect to bFind
84979>>>>>>>                If (bFind) Begin
84981>>>>>>>                    Move (DeserializeRowID(Suggestion.sRowId)) to rRowId
84982>>>>>>>                    
84982>>>>>>>                    If (not(IsNullRowID(rRowId))) Begin
84984>>>>>>>                        Send FindByRowId of hoServer iFile rRowId
84985>>>>>>>                    End
84985>>>>>>>>
84985>>>>>>>                End
84985>>>>>>>>
84985>>>>>>>                Else Begin
84986>>>>>>>                    Set Value to Suggestion.aValues[0]
84987>>>>>>>                    Set Item_Changed_State to True
84988>>>>>>>                End
84988>>>>>>>>
84988>>>>>>>            End
84988>>>>>>>>
84988>>>>>>>            Else If (imode = smValidationTable) Begin
84991>>>>>>>                Set Value to Suggestion.sRowId
84992>>>>>>>                Set Item_Changed_State to True
84993>>>>>>>            End
84993>>>>>>>>
84993>>>>>>>            
84993>>>>>>>        End
84993>>>>>>>>
84993>>>>>>>    End_Procedure
84994>>>>>>>    
84994>>>>>>>    // Return true if Suggestion should be invoked. Can be augmented
84994>>>>>>>    Function ShouldSuggestion String sValue Boolean bChanged Returns Boolean
84996>>>>>>>        Integer iStartAtChar
84996>>>>>>>        Get piStartAtChar to iStartAtChar
84997>>>>>>>        Function_Return (bChanged and Length(sValue)>=iStartAtChar)
84998>>>>>>>    End_Function
84999>>>>>>>    
84999>>>>>>>    
84999>>>>>>>End_Class
85000>>>>>>>
85000>>>>>>>
85000>>>>>>>// This contains logic that deals with the Windows object. It relies on the interface in
85000>>>>>>>// sSuggestion_mixin, which means it must be mixed in as a sibling of this object (as is done
85000>>>>>>>// in dbSuggestionForm or as a child of this object (as is done in cDbCJGridColumnSuggestion), which
85000>>>>>>>// means messages are resolved via delegation. sSuggestion_mixin does not send messages to this class.
85000>>>>>>>// Note that cSuggestion_mixin and cSuggestionControl_mixin are designed so they can be mixed in at
85000>>>>>>>// the same level or mixed in such that cSuggestionControl_mixin is in the child object and cSuggestion_mixin
85000>>>>>>>// is in the parent
85000>>>>>>>
85000>>>>>>>Class cSuggestionControl_mixin is a Mixin
85001>>>>>>>    
85001>>>>>>>    Procedure Define_cSuggestionControl_mixin
85003>>>>>>>        
85003>>>>>>>        Property Integer piTimeOutTicks 0
85004>>>>>>>        
85004>>>>>>>        On_Key kEnter Send SelectSuggestion
85005>>>>>>>        On_Key Key_Escape Send DeActivateSuggestionList
85006>>>>>>>        On_Key Key_Up_Arrow Send Up
85007>>>>>>>        On_Key Key_Down_Arrow Send Down
85008>>>>>>>        
85008>>>>>>>    End_Procedure
85009>>>>>>>    
85009>>>>>>>    Procedure AdjustSuggestionListSize Integer iLines
85011>>>>>>>        Integer i  iX iMax iY
85011>>>>>>>        String sTxt
85011>>>>>>>        Boolean bFullWidth
85011>>>>>>>        For i from 0 to (iLines-1)
85017>>>>>>>>
85017>>>>>>>            Get Line of ghoSuggestionList i to sTxt
85018>>>>>>>            Get Text_Extent of ghoSuggestionList sTxt to iX
85019>>>>>>>            Move (Low(iX) max iMax) to iMax
85020>>>>>>>            Move (Hi(iX)) to iY
85021>>>>>>>        Loop
85022>>>>>>>>
85022>>>>>>>        Move (iMax + 20) to imax
85023>>>>>>>        Get pbFullWidth to bFullWidth
85024>>>>>>>        If bFullWidth Begin
85026>>>>>>>            Move (iMax max (Low(GuiSize(Self)))) to iMax
85027>>>>>>>        End
85027>>>>>>>>
85027>>>>>>>        If (iLines) Begin
85029>>>>>>>            Set GuiSize of ghoSuggestionList to (iY*(iLines)+8) iMax
85030>>>>>>>            Send SelectRow of ghoSuggestionList 0 // go to first line
85031>>>>>>>        End
85031>>>>>>>>
85031>>>>>>>        Else Begin
85032>>>>>>>            Set GuiSize of ghoSuggestionList to (Hi(GuiSize(Self))) (low(GuiSize(Self)))
85033>>>>>>>        End
85033>>>>>>>>
85033>>>>>>>    End_Procedure
85034>>>>>>>    
85034>>>>>>>    // show all suggestions
85034>>>>>>>    Procedure ShowSuggestions
85036>>>>>>>        tSuggestion[] aResults
85036>>>>>>>        tSuggestion[] aResults
85037>>>>>>>        Integer i iLines
85037>>>>>>>        String sSearch
85037>>>>>>>        Get pSearchResults to aResults
85038>>>>>>>        Get Value to sSearch
85039>>>>>>>        Send Delete_Data of ghoSuggestionList
85040>>>>>>>        Move (SizeOfArray(aResults)) to iLines
85041>>>>>>>        For i from 0 to (iLines-1)
85047>>>>>>>>
85047>>>>>>>            Send ShowSuggestion aResults[i] sSearch
85048>>>>>>>            If ((iLines-1)<>i) Begin
85050>>>>>>>                Send AppendTextLn of ghoSuggestionList ""
85051>>>>>>>            End
85051>>>>>>>>
85051>>>>>>>        Loop
85052>>>>>>>>
85052>>>>>>>        Send AdjustSuggestionListSize iLines
85053>>>>>>>    End_Procedure
85054>>>>>>>    
85054>>>>>>>    Procedure FindSuggestions
85056>>>>>>>        String sSearch
85056>>>>>>>        tSuggestion[] aResults
85056>>>>>>>        tSuggestion[] aResults
85057>>>>>>>        String[] aParams
85058>>>>>>>        Get Value to sSearch
85059>>>>>>>        Send OnFindSuggestions sSearch (&aResults)
85060>>>>>>>        Set pSearchResults to aResults
85061>>>>>>>        // if an error was raised, the suggestion list will be gone
85061>>>>>>>        If (ghoSuggestionList) Begin
85063>>>>>>>            Send ShowSuggestions
85064>>>>>>>        End
85064>>>>>>>>
85064>>>>>>>    End_Procedure
85065>>>>>>>    
85065>>>>>>>    Procedure SelectSuggestion
85067>>>>>>>        String sSearch
85067>>>>>>>        tSuggestion[] aData
85067>>>>>>>        tSuggestion[] aData
85068>>>>>>>        Integer iSelRow
85068>>>>>>>        If ghoSuggestionList Begin
85070>>>>>>>            Get SelectedRow of ghoSuggestionList to iSelRow
85071>>>>>>>            Get Value to sSearch
85072>>>>>>>            Get pSearchResults to aData
85073>>>>>>>            Send DeActivateSuggestionList
85074>>>>>>>            Send CancelEditIfGrid
85075>>>>>>>            If (iSelRow>=0 and SizeOfArray(aData)>iSelRow) Begin
85077>>>>>>>                Send OnSelectSuggestion sSearch aData[iSelRow]
85078>>>>>>>            End
85078>>>>>>>>
85078>>>>>>>        End
85078>>>>>>>>
85078>>>>>>>        Else Begin
85079>>>>>>>            Send Default_Action
85080>>>>>>>        End
85080>>>>>>>>
85080>>>>>>>    End_Procedure
85081>>>>>>>    
85081>>>>>>>    Procedure CancelEditIfGrid
85083>>>>>>>        // do nothing with forms, remember
85083>>>>>>>        // to replace or augment with grid to
85083>>>>>>>        // cancel the edit control
85083>>>>>>>    End_Procedure
85084>>>>>>>    
85084>>>>>>>    
85084>>>>>>>    Function ParentForSuggestion Returns Handle
85086>>>>>>>        Handle hoMain hoMainPanel
85086>>>>>>>        
85086>>>>>>>        // we must have an application object and a main panel object
85086>>>>>>>        If ghoApplication Begin
85088>>>>>>>            Get phoMainPanel of ghoApplication to hoMainPanel
85089>>>>>>>        End
85089>>>>>>>>
85089>>>>>>>        If (hoMainPanel=0 or Self<=Desktop) Begin
85091>>>>>>>            Function_Return 0
85092>>>>>>>        End
85092>>>>>>>>
85092>>>>>>>        
85092>>>>>>>        Move Self to hoMain
85093>>>>>>>        Repeat
85093>>>>>>>>
85093>>>>>>>            Get Parent of hoMain to hoMain
85094>>>>>>>        Until (hoMain=Desktop or Block_Mouse_State(hoMain) or hoMainPanel=hoMain)
85096>>>>>>>        
85096>>>>>>>        Function_Return (If(hoMain>Desktop,hoMain,0))
85097>>>>>>>        
85097>>>>>>>    End_Function
85098>>>>>>>    
85098>>>>>>>    Procedure ActivateSuggestionList
85100>>>>>>>        Handle hoView hcSuggest
85100>>>>>>>        Get ParentForSuggestion to hoView
85101>>>>>>>        If hoView Begin
85103>>>>>>>            Get phcSuggestionListClass to hcSuggest
85104>>>>>>>            Get CreateNamed of hoView hcSuggest "oSuggestList" to ghoSuggestionList
85105>>>>>>>            Send InitList of ghoSuggestionList Self
85106>>>>>>>            Set Focus_Mode of ghoSuggestionList to Focusable
85107>>>>>>>            Set phoOwner of ghoSuggestionList to Self
85108>>>>>>>            Send Add_Focus of ghoSuggestionList hoView
85109>>>>>>>        End
85109>>>>>>>>
85109>>>>>>>    End_Procedure
85110>>>>>>>    
85110>>>>>>>    Procedure DeActivateSuggestionList
85112>>>>>>>        If ghoSuggestionList Begin
85114>>>>>>>            Send DeactivateList of ghoSuggestionList
85115>>>>>>>        End
85115>>>>>>>>
85115>>>>>>>    End_Procedure
85116>>>>>>>    
85116>>>>>>>    // augment to kill suggest list if focus is not moving to it
85116>>>>>>>    // customized for grid
85116>>>>>>>    Procedure OnKillFocus
85118>>>>>>>        // note focus has already changed here
85118>>>>>>>        If (ghoSuggestionList) Begin
85120>>>>>>>            If (Focus(Self)<>ghoSuggestionList) Begin
85122>>>>>>>                Send DeActivateSuggestionList
85123>>>>>>>                Forward Send OnKillFocus
85125>>>>>>>            End
85125>>>>>>>>
85125>>>>>>>            Else Begin
85126>>>>>>>                // giving focus to the suggestion list here
85126>>>>>>>            End
85126>>>>>>>>
85126>>>>>>>        End
85126>>>>>>>>
85126>>>>>>>        Else Begin
85127>>>>>>>            Forward Send OnKillFocus
85129>>>>>>>        End
85129>>>>>>>>
85129>>>>>>>    End_Procedure
85130>>>>>>>    
85130>>>>>>>    Procedure Up
85132>>>>>>>        If (Focus(Desktop) = Self and ghoSuggestionList) Begin
85134>>>>>>>            Send ScrollUp of ghoSuggestionList
85135>>>>>>>        End
85135>>>>>>>>
85135>>>>>>>    End_Procedure
85136>>>>>>>    
85136>>>>>>>    Procedure Down
85138>>>>>>>        If (Focus(Desktop) = Self and ghoSuggestionList) Begin
85140>>>>>>>            Send ScrollDown of ghoSuggestionList
85141>>>>>>>        End
85141>>>>>>>>
85141>>>>>>>    End_Procedure
85142>>>>>>>    
85142>>>>>>>    
85142>>>>>>>    Procedure Key Integer iKey
85144>>>>>>>        Integer iEndTicks
85144>>>>>>>        
85144>>>>>>>        If (Focus(Desktop) <> Self) Begin
85146>>>>>>>            Forward Send Key iKey
85148>>>>>>>            Procedure_Return
85149>>>>>>>        End
85149>>>>>>>>
85149>>>>>>>        
85149>>>>>>>        Send DeActivateSuggestionList
85150>>>>>>>        Move (GetTickCount()) to iEndTicks
85151>>>>>>>        // record the time of key press
85151>>>>>>>        If (piTimeOutTicks(Self) = 0) Begin
85153>>>>>>>            
85153>>>>>>>            If (ghoSuggestionTimer=0) Begin
85155>>>>>>>                Send CreateSuggestionTimer
85156>>>>>>>            End
85156>>>>>>>>
85156>>>>>>>            
85156>>>>>>>            Set pbEnabled of ghoSuggestionTimer to True
85157>>>>>>>            Set phoTimerOwner of ghoSuggestionTimer to Self
85158>>>>>>>        End
85158>>>>>>>>
85158>>>>>>>        Set piTimeOutTicks to iEndTicks
85159>>>>>>>        
85159>>>>>>>        Forward Send Key iKey
85161>>>>>>>    End_Procedure
85162>>>>>>>    
85162>>>>>>>    Procedure CreateSuggestionTimer
85164>>>>>>>        Handle hoMainPanel
85164>>>>>>>        // we must have an application object and a main panel object
85164>>>>>>>        If ghoApplication Begin
85166>>>>>>>            Get phoMainPanel of ghoApplication to hoMainPanel
85167>>>>>>>        End
85167>>>>>>>>
85167>>>>>>>        If (hoMainPanel=0) Begin
85169>>>>>>>            Error DFERR_PROGRAM "Auto-suggest requires an application object and a main panel object"
85170>>>>>>>>
85170>>>>>>>            Procedure_Return
85171>>>>>>>        End
85171>>>>>>>>
85171>>>>>>>        Get CreateNamed of hoMainPanel (RefClass(cSuggestionTimer)) "oSuggestionTimer" to ghoSuggestionTimer
85172>>>>>>>    End_Procedure
85173>>>>>>>    
85173>>>>>>>    // sent by Auto Suggest Timer. Invoke suggestion list as needed
85173>>>>>>>    Procedure OnSuggestionTimer
85175>>>>>>>        Boolean bDoIt
85175>>>>>>>        Integer iEndTicks iStartTicks iTicks iTimeOut iChanged
85175>>>>>>>        String sValue
85175>>>>>>>        
85175>>>>>>>        If (Focus(Desktop) <> Self) Begin
85177>>>>>>>            // focus out of whack. Stop the timer
85177>>>>>>>            Set pbEnabled of ghoSuggestionTimer to False
85178>>>>>>>            Send DeActivateSuggestionList
85179>>>>>>>            Procedure_Return
85180>>>>>>>        End
85180>>>>>>>>
85180>>>>>>>        
85180>>>>>>>        Get piTimeOutTicks to iStartTicks
85181>>>>>>>        If (iStartTicks <> 0) Begin
85183>>>>>>>            Move (GetTickCount()) to iEndTicks
85184>>>>>>>            Move (iEndTicks - iStartTicks) to iTicks
85185>>>>>>>            // If tick count rolled over
85185>>>>>>>            If (iTicks < 0) Begin
85187>>>>>>>                Move (-iTicks) to iTicks
85188>>>>>>>            End
85188>>>>>>>>
85188>>>>>>>        End
85188>>>>>>>>
85188>>>>>>>        Get piPopupTimeout to iTimeOut
85189>>>>>>>        If (iTicks >= iTimeOut) Begin
85191>>>>>>>            // If time delay has been met, launch autocomplete
85191>>>>>>>            Set pbEnabled  of ghoSuggestionTimer to False
85192>>>>>>>            Get Value to sValue
85193>>>>>>>            Get Item_Changed_State 0 to iChanged
85194>>>>>>>            Get ShouldSuggestion sValue iChanged to bDoIt
85195>>>>>>>            If bDoIt Begin
85197>>>>>>>                Send ActivateSuggestionList
85198>>>>>>>                Send FindSuggestions
85199>>>>>>>                Set Visible_State of ghoSuggestionList to True
85200>>>>>>>            End
85200>>>>>>>>
85200>>>>>>>            Set piTimeOutTicks to 0
85201>>>>>>>        End
85201>>>>>>>>
85201>>>>>>>    End_Procedure
85202>>>>>>>    
85202>>>>>>>End_Class
85203>>>>>>>
85203>>>>>>>
85203>>>>>
85203>>>>>Class DbSuggestionForm is a dbForm
85204>>>>>    
85204>>>>>    Import_Class_Protocol cSuggestionControl_mixin
85205>>>>>    Import_Class_Protocol cSuggestion_mixin
85206>>>>>    
85206>>>>>    Procedure Construct_Object
85208>>>>>        Forward Send Construct_Object
85210>>>>>        Send Define_cSuggestionControl_mixin
85211>>>>>        Send Define_cSuggestion_mixin    
85212>>>>>    End_Procedure
85213>>>>>    
85213>>>>>End_Class
85214>>>>>
85214>>>Use cDbCJGridColumnSuggestion.pkg
Including file: cDbCJGridColumnSuggestion.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cDbCJGridColumnSuggestion.pkg)
85214>>>>>Use WinSuggestion.pkg
85214>>>>>Use cDbCJGridColumn.pkg
85214>>>>>Use cDbCJGridColumnEdit.pkg
85214>>>>>
85214>>>>>// This is the edit control that gets embedded in cDbCJGridColumnSuggestion object.
85214>>>>>
85214>>>>>Class cDbCJGridColumnSuggestionEdit is a cDbCJGridColumnEdit
85215>>>>>    
85215>>>>>    Import_Class_Protocol cSuggestionControl_mixin
85216>>>>>    
85216>>>>>    Procedure Construct_Object
85218>>>>>        Forward Send Construct_Object
85220>>>>>        Send Define_cSuggestionControl_mixin
85221>>>>>    End_Procedure
85222>>>>>    
85222>>>>>    // Called when closing a suggestion form. With grids we must also make sure that the
85222>>>>>    // edit is canceled.
85222>>>>>    Procedure CancelEditIfGrid
85224>>>>>        Send CancelEdit
85225>>>>>    End_Procedure
85226>>>>>    
85226>>>>>End_Class
85227>>>>>
85227>>>>>// A cDbCJGridColumnSuggestion would be dropped inside of cDbCJGrid.
85227>>>>>
85227>>>>>Class cDbCJGridColumnSuggestion is a cDbCJGridColumn
85228>>>>>    
85228>>>>>    Import_Class_Protocol cSuggestion_mixin
85229>>>>>    
85229>>>>>    Procedure Construct_Object
85231>>>>>        Forward Send Construct_Object
85233>>>>>        
85233>>>>>        Send Define_cSuggestion_mixin
85234>>>>>        Set phcEditClass to (RefClass(cDbCJGridColumnSuggestionEdit))
85235>>>>>    End_Procedure
85236>>>>>    
85236>>>>>End_Class
85237>>>
85237>>>Use cCustomerDataDictionary.dd
85237>>>Use cVendorDataDictionary.dd
85237>>>
85237>>>Use dfTabDlg.pkg
85237>>>
85237>>>
85237>>>Deferred_View Activate_oDemoSuggestionForm for ;Object oDemoSuggestionForm is a dbView
85262>>>    
85262>>>    Set Border_Style to Border_Thick
85263>>>    Set Size to 227 300
85264>>>    Set Location to 2 2
85265>>>    Set Label to "Suggestion Forms and Grids"
85266>>>    
85266>>>    Object oSuggestionsTP is a dbTabDialogView
85268>>>        Set Size to 208 284
85269>>>        Set Location to 10 7
85270>>>        
85270>>>        Object oVendorDataDictionary is a cVendorDataDictionary
85272>>>        End_Object
85273>>>        
85273>>>        Object oCustomerDataDictionary is a cCustomerDataDictionary
85275>>>            Procedure Field_defaults
85278>>>                Forward Send Field_Defaults
85280>>>                Set Field_Changed_Value   Field Customer.State to ""
85281>>>            End_Procedure
85282>>>        End_Object
85283>>>        
85283>>>        Set Main_DD to oCustomerDataDictionary
85284>>>        Set Server to oCustomerDataDictionary
85285>>>        
85285>>>        Object oSuggestionForms is a dbTabView
85287>>>            Set Label to 'dbSuggestionForm'
85288>>>            
85288>>>            Object oLabel1 is a TextBox
85290>>>                Set Auto_Size_State to False
85291>>>                Set Size to 10 237
85292>>>                Set Location to 17 16
85293>>>                Set Label to "Data bound, incremental, starting at character 1"
85294>>>                Set FontWeight to fw_Bold
85295>>>            End_Object
85296>>>            Object oSuggestionForm2 is a dbSuggestionForm
85298>>>                Set Location to 28 74
85299>>>                Entry_Item Customer.Customer_Number
85300>>>                Set Size to 12 45
85301>>>                Set Label to "Customer Num:"
85302>>>                Set piStartAtChar to 1
85303>>>            End_Object
85304>>>            Object oSuggestionForm1 is a dbSuggestionForm
85306>>>                Set Location to 42 74
85307>>>                Entry_Item Customer.Name
85308>>>                Set Size to 12 146
85309>>>                Set Label to "Customer Name:"
85310>>>                Set piStartAtChar to 1
85311>>>            End_Object
85312>>>            Object oLabel3 is a TextBox
85314>>>                Set Auto_Size_State to False
85315>>>                Set Size to 9 211
85316>>>                Set Location to 77 17
85317>>>                Set Label to "Validation Table, incremental, starting at character 1"
85318>>>                Set FontWeight to fw_Bold
85319>>>            End_Object
85320>>>            Object oSuggestionForm4 is a dbSuggestionForm
85322>>>                Set Location to 89 74
85323>>>                Entry_Item Customer.State
85324>>>                Set Size to 12 50
85325>>>                Set Label to "Customer State:"
85326>>>                Set peSuggestionMode to smValidationTable
85327>>>                Set piStartAtChar to 1
85328>>>            End_Object
85329>>>            Object oLabel2 is a TextBox
85331>>>                Set Auto_Size_State to False
85332>>>                Set Size to 10 199
85333>>>                Set Location to 120 16
85334>>>                Set Label to "Data bound, full text, starting at character 2"
85335>>>                Set FontWeight to fw_Bold
85336>>>            End_Object
85337>>>            
85337>>>            Object oSuggestionForm3 is a dbSuggestionForm
85339>>>                Set Location to 137 74
85340>>>                Entry_Item Vendor.Name
85341>>>                Set Server to oVendorDataDictionary
85342>>>                Set Size to 12 100
85343>>>                Set pbFullText to True
85344>>>                Set Label to "Vendor name:"
85345>>>            End_Object
85346>>>            
85346>>>            Object oLabel3 is a TextBox
85348>>>                Set Auto_Size_State to False
85349>>>                Set Size to 10 199
85350>>>                Set Location to 158 16
85351>>>                Set Label to "Custom Suggestion List"
85352>>>                Set FontWeight to fw_Bold
85353>>>            End_Object
85354>>>            
85354>>>            // this shows how to create you own custom suggestion list
85354>>>            Object oSuggestionForm5 is a dbSuggestionForm
85356>>>                Set Location to 175 74
85357>>>                Set Label to "Custom Id:"
85358>>>                Set Size to 12 100
85359>>>                Set peSuggestionMode to smCustom
85360>>>                Set piStartAtChar to 1
85361>>>                
85361>>>                // even though we handle searching manually in OnFindSuggestions, pbFullText
85361>>>                // is still used to determine the display and bolding of matched text. Setting
85361>>>                // this true tells it we are matching anywhere within the string.
85361>>>                // Since this is a custom list, it is the developer's job to make sure that
85361>>>                // OnFindSuggestions follows these rules as well.
85361>>>                Set pbFullText to True
85362>>>                
85362>>>                // augment to create an arbitrary list of Ids to be used for our search
85362>>>                Property String[] pCustomIds
85364>>>                
85364>>>                // augment to create a list of Ids
85364>>>                Procedure Activating
85367>>>                    String[] sIds
85368>>>                    Forward Send Activating
85370>>>                    Move "JSON" to sIds[0]
85371>>>                    Move "XML" to sIds[1]
85372>>>                    Move "SQL" to sIds[2]
85373>>>                    Move "SQLExpress" to sIds[3]
85374>>>                    Move "SQLServer" to sIds[4]
85375>>>                    Move "DF" to sIds[5]
85376>>>                    Move "XQuery" to sIds[6]
85377>>>                    Move "JScript" to sIds[7]
85378>>>                    Move "Java" to sIds[8]
85379>>>                    Move "UTF-8" to sIds[9]
85380>>>                    Move "UTF-16" to sIds[10]
85381>>>                    Set pCustomIds to (SortArray(sIds,Desktop,RefFunc(DFSTRICMP)))
85382>>>                End_Procedure
85383>>>                
85383>>>                // custom code to find all matches for the search
85383>>>                // You can write whatever code you want here to find matched items
85383>>>                Procedure OnFindSuggestions String sSearch tSuggestion[] ByRef aSuggestions
85386>>>                    String[] sIds
85387>>>                    Integer i iLen iIds iCount
85387>>>                    Move (Lowercase(sSearch)) to sSearch
85388>>>                    Move (Length(sSearch)) to iLen
85389>>>                    Get pCustomIds to sIds
85390>>>                    Move (SizeOfArray(sIds)-1) to iIds
85391>>>                    For i from 0 to iIds
85397>>>>
85397>>>                        If (Lowercase(sIds[i]) contains sSearch) Begin
85399>>>                            Move sIds[i] to aSuggestions[iCount].sRowId
85400>>>                            Move sIds[i] to aSuggestions[iCount].aValues[0]
85401>>>                            Increment iCount
85402>>>                        End
85402>>>>
85402>>>                    Loop
85403>>>>
85403>>>                End_Procedure
85404>>>                
85404>>>                Procedure OnSelectSuggestion String sSearch tSuggestion Suggestion
85407>>>                    Set Value to Suggestion.sRowId
85408>>>                    Set Item_Changed_State to True
85409>>>                End_Procedure
85410>>>                
85410>>>                
85410>>>            End_Object
85411>>>        End_Object
85412>>>        
85412>>>        Object oSuggestionGrid is a dbTabView
85414>>>            
85414>>>            Set Label to "cDbCJGridColumnSuggestion"
85415>>>            
85415>>>            Object oCustomerDataDictionary is a cCustomerDataDictionary
85417>>>            End_Object
85418>>>            
85418>>>            Set Main_DD to oCustomerDataDictionary
85419>>>            Set Server to oCustomerDataDictionary
85420>>>            
85420>>>            Object oDbCJGrid1 is a cDbCJGrid
85422>>>                Set Size to 177 268
85423>>>                Set Location to 7 7
85424>>>                Set Ordering to 1
85425>>>                Set Verify_Save_msg to (RefFunc(Save_Confirmation))
85426>>>                
85426>>>                Object oCustomer_Customer_Number is a cDbCJGridColumnSuggestion
85428>>>                    Entry_Item Customer.Customer_Number
85429>>>                    Set piWidth to 73
85430>>>                    Set psCaption to "Number"
85431>>>                    Set piStartAtChar to 1
85432>>>                End_Object
85433>>>                
85433>>>                // normally you would not use a suggestion list with a grid's main
85433>>>                // file. It would be more useful when selecting a parent.
85433>>>                Object oCustomer_Name is a cDbCJGridColumnSuggestion
85435>>>                    Entry_Item Customer.Name
85436>>>                    Set piWidth to 358
85437>>>                    Set psCaption to "Customer Name"
85438>>>                    Set pbFullText to True
85439>>>                    Set piStartAtChar to 1
85440>>>                End_Object
85441>>>                
85441>>>                Object oCustomer_State is a cDbCJGridColumnSuggestion
85443>>>                    Entry_Item Customer.State
85444>>>                    Set piWidth to 105
85445>>>                    Set psCaption to "State"
85446>>>                    Set peSuggestionMode to smValidationTable
85447>>>                    Set piStartAtChar to 1
85448>>>                End_Object
85449>>>            End_Object
85450>>>            
85450>>>        End_Object
85451>>>        
85451>>>    End_Object
85452>>>    
85452>>>    
85452>>>Cd_End_Object
85454>>>>
85454>>>
85454>        Use DemoButtonTest.vw
Including file: DemoButtonTest.vw    (C:\test\BuildTools\Order Entry\AppSrc\DemoButtonTest.vw)
85454>>>Use Windows.pkg
85454>>>Use DFClient.pkg
85454>>>Use cImageList32.pkg
85454>>>Use cSplitButton.pkg
Including file: cSplitButton.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cSplitButton.pkg)
85454>>>>>// This requires version 6 of common controls (vista or windows server 2008). If used with
85454>>>>>// older versions you will just get a regular button with no split part.
85454>>>>>
85454>>>>>Use Windows.pkg
85454>>>>>
85454>>>>>Class cSplitButton is a Button
85455>>>>>    
85455>>>>>    Procedure Page Integer iPageObject
85457>>>>>        Integer iStyle
85457>>>>>        Boolean bSupported
85457>>>>>        Get IsExControlSupported to bSupported
85458>>>>>        If (iPageObject=1  and bSupported) Begin
85460>>>>>            Get Form_Style iStyle to iStyle
85461>>>>>            Move (iStyle ior BS_SPLITBUTTON) to iStyle
85462>>>>>            Set Form_Style 0 to iStyle
85463>>>>>        End
85463>>>>>>
85463>>>>>        Forward Send Page iPageObject
85465>>>>>    End_Procedure
85466>>>>>    
85466>>>>>    Procedure Notify Longptr wParam Longptr lParam
85468>>>>>        tWinNmHdr Hdr
85468>>>>>        tWinNmHdr Hdr
85468>>>>>        Integer iVoid
85468>>>>>        Move (MemCopy(AddressOf(Hdr),lParam,SizeOfType(tWinNmHdr))) to iVoid
85469>>>>>        If (Hdr.code=BCN_DROPDOWN) Begin
85471>>>>>            Send OnDropDown
85472>>>>>        End
85472>>>>>>
85472>>>>>        Else Begin
85473>>>>>            Forward Send Notify wParam lParam
85475>>>>>        End
85475>>>>>>
85475>>>>>    End_Procedure
85476>>>>>    
85476>>>>>End_Class
85477>>>>>
85477>>>>>
85477>>>Use cCommandLinkButton.pkg
Including file: cCommandLinkButton.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cCommandLinkButton.pkg)
85477>>>>>// This requires version 6 of common controls (vista or windows server 2008). If used with
85477>>>>>// older versions you will just get a regular great big button.
85477>>>>>
85477>>>>>Use Windows.pkg
85477>>>>>Use CharTranslate.pkg
85477>>>>>
85477>>>>>Class cCommandLinkButton is a Button
85478>>>>>    
85478>>>>>    Procedure Construct_Object
85480>>>>>        Forward Send Construct_Object
85482>>>>>        Property String psPrivateNote
85483>>>>>    End_Procedure
85484>>>>>    
85484>>>>>    Procedure Set psNote String sNote
85486>>>>>        Boolean bSupported
85486>>>>>        Set psPrivateNote to sNote
85487>>>>>        Get IsExControlSupported to bSupported
85488>>>>>        If bSupported Begin
85490>>>>>            Send SetWinNote
85491>>>>>        End
85491>>>>>>
85491>>>>>    End_Procedure
85492>>>>>    
85492>>>>>    Procedure SetWinNote
85494>>>>>        String sNote
85494>>>>>        Handle hWnd
85494>>>>>        Integer i
85494>>>>>        Address aVar
85494>>>>>        Get Form_Window_Handle 0 to hWnd
85495>>>>>        If hWnd Begin
85497>>>>>            Get psNote to sNote
85498>>>>>            Move (OemToUtf16Buffer(AddressOf(sNote),Length(sNote))) to aVar
85499>>>>>            Move (SendMessage(hwnd, BCM_SETNOTE, 0, aVar)) to i
85500>>>>>            Move (Free(aVar)) to i
85501>>>>>        End
85501>>>>>>
85501>>>>>    End_Procedure
85502>>>>>    
85502>>>>>    
85502>>>>>    Function psNote Returns String
85504>>>>>        Function_Return (psPrivateNote(Self))
85505>>>>>    End_Function
85506>>>>>    
85506>>>>>    
85506>>>>>    Procedure Page Integer iState
85508>>>>>        Integer i hWnd
85508>>>>>        Boolean bSupported
85508>>>>>        Get IsExControlSupported to bSupported
85509>>>>>        If (iState=1 and bSupported) Begin
85511>>>>>            Get form_style i to i
85512>>>>>            Set Form_Style 0 to (i ior (BS_COMMANDLINK + BS_FLAT))
85513>>>>>            Forward Send Page iState
85515>>>>>            Send SetWinNote
85516>>>>>        End
85516>>>>>>
85516>>>>>        Else Begin
85517>>>>>            Forward Send Page iState
85519>>>>>        End
85519>>>>>>
85519>>>>>    End_Procedure
85520>>>>>    
85520>>>>>End_Class
85521>>>Use cCJStandardMenuItemClasses.pkg
85521>>>
85521>>>
85521>>>Deferred_View Activate_oButtonTest for ;Object oButtonTest is a dbView
85546>>>    
85546>>>    Set Border_Style to Border_Thick
85547>>>    Set Size to 251 300
85548>>>    Set Location to 2 3
85549>>>    Set Label to "Button Samples"
85550>>>    
85550>>>    Object oTextBox1 is a TextBox
85552>>>        Set Size to 9 110
85553>>>        Set Location to 8 10
85554>>>        Set Label to 'Buttons that use Text and Images'
85555>>>    End_Object
85556>>>    
85556>>>    Object oTextButton is a Button
85558>>>        Set Location to 20 10
85559>>>        Set Label to 'Save'
85560>>>        
85560>>>        Procedure OnClick
85563>>>        End_Procedure
85564>>>        
85564>>>    End_Object
85565>>>    
85565>>>    Object oTextAndImageButton is a Button
85567>>>        Set Location to 20 70
85568>>>        Set Label to 'Save'
85569>>>        Set psImage to "ActionSave.ico"
85570>>>        
85570>>>        Procedure OnClick
85573>>>        End_Procedure
85574>>>        
85574>>>    End_Object
85575>>>    
85575>>>    Object oImageButton is a Button
85577>>>        Set Size to 14 27
85578>>>        Set Location to 20 130
85579>>>        Set psImage to "ActionSave.ico"
85580>>>        Set peImageAlign to Button_ImageList_Align_Center
85581>>>        
85581>>>        Procedure OnClick
85584>>>        End_Procedure
85585>>>        
85585>>>    End_Object
85586>>>    
85586>>>    Object oTextAndImageTopButton is a Button
85588>>>        Set Size to 26 50
85589>>>        Set Location to 20 167
85590>>>        Set Label to 'Save'
85591>>>        Set psImage to "ActionSave.ico"
85592>>>        Set peImageAlign to Button_ImageList_Align_Top
85593>>>        Set piImageMarginTop to 10
85594>>>        
85594>>>        Procedure OnClick
85597>>>        End_Procedure
85598>>>        
85598>>>    End_Object
85599>>>    
85599>>>    Object oTextAndImageBottomButton is a Button
85601>>>        Set Size to 26 50
85602>>>        Set Location to 20 225
85603>>>        Set Label to 'Save'
85604>>>        Set psImage to "ActionSave.ico"
85605>>>        Set peImageAlign to Button_ImageList_Align_Bottom
85606>>>        Set piImageMarginBottom to 10
85607>>>        
85607>>>        Procedure OnClick
85610>>>        End_Procedure
85611>>>        
85611>>>    End_Object
85612>>>    
85612>>>    Object oTextAndImageBottomButtonNS16 is a Button
85614>>>        Set Size to 26 68
85615>>>        Set Location to 59 10
85616>>>        Set Label to "Non scaled (16)"
85617>>>        Set psImage to "all.ico"
85618>>>        Set peImageAlign to Button_ImageList_Align_Bottom
85619>>>        Set piImageMarginBottom to 10
85620>>>        Set pbAutoResizeIcons to False
85621>>>        
85621>>>        Procedure OnClick
85624>>>        End_Procedure
85625>>>        
85625>>>    End_Object
85626>>>    
85626>>>    Object oTextAndImageBottomButtonS is a Button
85628>>>        Set Size to 26 68
85629>>>        Set Location to 59 80
85630>>>        Set Label to "Scaled (16)"
85631>>>        Set psImage to "all.ico"
85632>>>        Set peImageAlign to Button_ImageList_Align_Bottom
85633>>>        Set piImageMarginBottom to 10
85634>>>        
85634>>>        Procedure OnClick
85637>>>        End_Procedure
85638>>>        
85638>>>    End_Object
85639>>>    
85639>>>    Object oTextAndImageBottomButton is a Button
85641>>>        Set Size to 26 68
85642>>>        Set Location to 59 150
85643>>>        Set Label to "Non scaled (24)"
85644>>>        Set psImage to "all.ico"
85645>>>        Set peImageAlign to Button_ImageList_Align_Bottom
85646>>>        Set piImageMarginBottom to 10
85647>>>        Set piImageSize to 24
85648>>>        Set pbAutoResizeIcons to False
85649>>>        
85649>>>        Procedure OnClick
85652>>>        End_Procedure
85653>>>        
85653>>>    End_Object
85654>>>    Object oTextAndImageBottomButton is a Button
85656>>>        Set Size to 26 68
85657>>>        Set Location to 59 220
85658>>>        Set Label to "Scaled (24)"
85659>>>        Set psImage to "all.ico"
85660>>>        Set peImageAlign to Button_ImageList_Align_Bottom
85661>>>        Set piImageMarginBottom to 10
85662>>>        Set piImageSize to 24
85663>>>        
85663>>>        Procedure OnClick
85666>>>        End_Procedure
85667>>>        
85667>>>    End_Object
85668>>>    
85668>>>    
85668>>>    Object oTextBox1 is a TextBox
85670>>>        Set Size to 9 104
85671>>>        Set Location to 89 10
85672>>>        Set Label to 'Buttons with drop down menus'
85673>>>    End_Object
85674>>>    
85674>>>    // this is a button with down arrow button on the right that invokes
85674>>>    // a context menu inside of OnClick
85674>>>    Object oDropDownButton is a Button
85676>>>        Set Size to 14 58
85677>>>        Set Location to 103 10
85678>>>        Set Label to "Select"
85679>>>        Set psImage to "Down16.bmp"
85680>>>        Set peImageAlign to Button_ImageList_Align_Right
85681>>>        
85681>>>        Procedure OnClick
85684>>>            // OnDropDown is defined to popup menu in phoButtonPopup
85684>>>            Send OnDropDown
85685>>>        End_Procedure
85686>>>        
85686>>>        Object oButtonMenu is a cCJContextMenu
85688>>>            
85688>>>            Object oMenuItem1 is a cCJMenuItem
85690>>>                Set psCaption to "Save"
85691>>>                Set psImage to "ActionSaveRecord.ico"
85692>>>                Procedure OnExecute Variant vCommandBarControl
85695>>>                End_Procedure
85696>>>            End_Object
85697>>>            
85697>>>            Object oMenuItem2 is a cCJMenuItem
85699>>>                Set psCaption to "Clear"
85700>>>                Set psImage to "ActionClear.ico"
85701>>>                Procedure OnExecute Variant vCommandBarControl
85704>>>                End_Procedure
85705>>>            End_Object
85706>>>            
85706>>>            Object oMenuItem3 is a cCJMenuItem
85708>>>                Set psCaption to "Delete"
85709>>>                Set psImage to "ActionDeleteRecord.ico"
85710>>>                Procedure OnExecute Variant vCommandBarControl
85713>>>                End_Procedure
85714>>>            End_Object
85715>>>            
85715>>>        End_Object
85716>>>        // Binds OnDropDown to this menu
85716>>>        Set phoButtonPopup to oButtonMenu
85717>>>        
85717>>>    End_Object
85718>>>    
85718>>>    // this is split button (Vista or greater required), where OnClick and
85718>>>    // OnDropDown are two events. OnDropDown automatically invokes phoButtonPopup
85718>>>    
85718>>>    Object oSplitButton is a cSplitButton
85720>>>        Set Size to 14 53
85721>>>        Set Location to 103 76
85722>>>        Set Label to 'Save'
85723>>>        Set psImage to "ActionSaveRecord.ico"
85724>>>        
85724>>>        Procedure OnClick
85727>>>        End_Procedure
85728>>>        
85728>>>        Object oButtonMenu is a cCJContextMenu
85730>>>            
85730>>>            Object oMenuItem1 is a cCJMenuItem
85732>>>                Set psCaption to "Set to Save"
85733>>>                Procedure OnExecute Variant vCommandBarControl
85736>>>                    Delegate Set label to "Save"
85738>>>                    Delegate Set psImage to "ActionSaveRecord.ico"
85740>>>                End_Procedure
85741>>>            End_Object
85742>>>            
85742>>>            Object oMenuItem2 is a cCJMenuItem
85744>>>                Set psCaption to "Set to Clear"
85745>>>                Procedure OnExecute Variant vCommandBarControl
85748>>>                    Delegate Set label  to "Clear"
85750>>>                    Delegate Set psImage to  "ActionClear.ico"
85752>>>                End_Procedure
85753>>>            End_Object
85754>>>            
85754>>>            Object oMenuItem3 is a cCJMenuItem
85756>>>                Set psCaption to "Set to Delete"
85757>>>                Procedure OnExecute Variant vCommandBarControl
85760>>>                    Delegate Set label  to "Delete"
85762>>>                    Delegate Set psImage to  "ActionDeleteRecord.ico"
85764>>>                End_Procedure
85765>>>            End_Object
85766>>>            
85766>>>            Object oMenuItem4 is a cCJMenuItem
85768>>>                Set psCaption to "Set to Select"
85769>>>                Procedure OnExecute Variant vCommandBarControl
85772>>>                    Delegate Set label  to "Select"
85774>>>                    Delegate Set psImage to  ""
85776>>>                End_Procedure
85777>>>            End_Object
85778>>>            
85778>>>        End_Object
85779>>>        
85779>>>        Set phoButtonPopup to oButtonMenu
85780>>>        
85780>>>    End_Object
85781>>>    
85781>>>    Object oTextBox2 is a TextBox
85783>>>        Set Size to 9 115
85784>>>        Set Location to 92 166
85785>>>        Set Label to "Button using an external image list"
85786>>>    End_Object
85787>>>    
85787>>>    // button have 6 image states. We will provide a different image
85787>>>    // for each of these states
85787>>>    Object oImageList is a cImageList32
85789>>>        Set piMaxImages to 6
85790>>>        Set piImageHeight to 16
85791>>>        Set piImageWidth to 16
85792>>>        Procedure OnCreate
85795>>>            Integer iIndex
85795>>>            // for buttons either create 1 image or 6
85795>>>            // if 6, they are normal, hot, pressed, disabled, defaulted, stylus-hot
85795>>>            Get AddImage "ClosFold.bmp" to iIndex
85796>>>            Get AddImage "OpenFold.bmp" to iIndex
85797>>>            Get AddImage "OpenFold.bmp" to iIndex
85798>>>            Get AddImage "ClosFold.bmp" to iIndex
85799>>>            Get AddImage "OpenFold.bmp" to iIndex
85800>>>            Get AddImage "ClosFold.bmp" to iIndex
85801>>>        End_Procedure
85802>>>    End_Object
85803>>>    
85803>>>    // this attaches to an external imageist with 6 images. Because this
85803>>>    // uses an external imagelist you will not see the image modeled in the Studio
85803>>>    Object oMultiImageButton is a Button
85805>>>        Set Location to 104 195
85806>>>        Set phoExternalButtonImageList to oImageList
85807>>>        Set peImageAlign to Button_ImageList_Align_Center
85808>>>        
85808>>>        Procedure OnClick
85811>>>        End_Procedure
85812>>>        
85812>>>    End_Object
85813>>>    
85813>>>    // CommandLinkButtons work with Vista or greater required
85813>>>    Object oCommandLinkButtonGroup is a Group
85815>>>        Set Size to 115 258
85816>>>        Set Location to 125 10
85817>>>        Set Label to "CommandLink Buttons"
85818>>>        
85818>>>        Object oCommandLinkStandard is a cCommandLinkButton
85820>>>            Set Location to 11 9
85821>>>            Set Size to 34 239
85822>>>            Set Label to 'CommandLink Choice 1'
85823>>>            Set psNote to "This is a normal command link button with the standard command link image"
85824>>>            
85824>>>            Procedure OnClick
85827>>>            End_Procedure
85828>>>            
85828>>>        End_Object
85829>>>        
85829>>>        Object oCommandLinkShield is a cCommandLinkButton
85831>>>            Set Location to 44 9
85832>>>            Set Size to 34 239
85833>>>            Set Label to 'CommandLink Choice 2'
85834>>>            Set psNote to "This is a command link button using the Windows elevated shield image"
85835>>>            Set pbShield to True
85836>>>            
85836>>>            Procedure OnClick
85839>>>            End_Procedure
85840>>>            
85840>>>        End_Object
85841>>>        
85841>>>        Object oCommandLinkCustom is a cCommandLinkButton
85843>>>            Set Location to 78 9
85844>>>            Set Size to 34 239
85845>>>            Set Label to 'CommandLink Choice 3'
85846>>>            Set psNote to "This is a command link with a custom image. This image just happens to be larger"
85847>>>            Set psImage to "DF32.bmp"
85848>>>            Set piImageSize to 48
85849>>>            
85849>>>            Procedure OnClick
85852>>>            End_Procedure
85853>>>            
85853>>>        End_Object
85854>>>        
85854>>>    End_Object
85855>>>    
85855>>>    Object oTextBox1 is a TextBox
85857>>>        Set Size to 9 110
85858>>>        Set Location to 46 10
85859>>>        Set Label to 'Buttons Using DPI Scaling'
85860>>>    End_Object
85861>>>    
85861>>>    
85861>>>    
85861>>>Cd_End_Object
85863>>>>
85863>>>
85863>        Use DemoCalendarControl.vw
Including file: DemoCalendarControl.vw    (C:\test\BuildTools\Order Entry\AppSrc\DemoCalendarControl.vw)
85863>>>Use Windows.pkg
85863>>>Use DFClient.pkg
85863>>>
85863>>>Use MonthCalendarPrompt.dg
85863>>>Use cTextEdit.pkg
85863>>>
85863>>>Activate_View Activate_oDemoCalendarControl for oDemoCalendarControl
85873>>>>
85873>>>Object oDemoCalendarControl is a dbView
85875>>>    
85875>>>    Set Border_Style to Border_Thick
85876>>>    Set Size to 148 196
85877>>>    Set Location to 2 2
85878>>>    Set Label to "Calendar Control Sample"
85879>>>    
85879>>>    // Simplest case example, just set the prompt_object
85879>>>    Object oDateFormTest is a Form
85881>>>        Set Location to 16 89
85882>>>        Set Size to 12 66
85883>>>        Set Label to "Date Select Test:"
85884>>>        
85884>>>        Set Prompt_Object to oMonthCalendarPrompt
85885>>>        Set Prompt_Button_Mode to PB_PromptOn
85886>>>        
85886>>>    End_Object
85887>>>    
85887>>>    Object oDateRangeGroup is a Group
85889>>>        
85889>>>        Set Label to "Selecting Date Range"
85890>>>        Set Size to 74 165
85891>>>        Set Location to 39 23
85892>>>        
85892>>>        Object oFromDate is a Form
85894>>>            Set Label to "From:"
85895>>>            Set Location to 29 66
85896>>>            Set Size to 12 66
85897>>>            Set Prompt_Button_Mode to PB_PromptOn
85898>>>            Set Prompt_Object to oMonthCalendarPrompt
85899>>>            
85899>>>            Procedure Prompt_Callback Integer hoPrompt
85902>>>                Send DateRangeCallback hoPrompt
85903>>>            End_Procedure
85904>>>        End_Object
85905>>>        
85905>>>        Object oToDate is a Form
85907>>>            Set Label to "To:"
85908>>>            Set Location to 49 66
85909>>>            Set Size to 12 66
85910>>>            Set Prompt_Button_Mode to PB_PromptOn
85911>>>            
85911>>>            Procedure Prompt
85914>>>                Send Popup to oMonthCalendarPrompt
85915>>>            End_Procedure
85916>>>            
85916>>>            Procedure Prompt_Callback Integer hoPrompt
85919>>>                Send DateRangeCallback hoPrompt
85920>>>            End_Procedure
85921>>>        End_Object
85922>>>        
85922>>>        Object oTextBox1 is a TextBox
85924>>>            Set Size to 10 154
85925>>>            Set Location to 11 3
85926>>>            Set Label to "(select initial date and drag the mouse to end date)"
85927>>>        End_Object
85928>>>        
85928>>>        
85928>>>        // Since these two date forms are using the same logic, we delegate to here
85928>>>        // and let the group handle the inititalization and update
85928>>>        
85928>>>        // this is the callback set in DateRangeCallback
85928>>>        Procedure DoDateUpdate Integer hoSel Date dDate1 Date dDate2
85931>>>            Set Value of oFromDate to dDate1
85932>>>            Set Value of oToDate to dDate2
85933>>>        End_Procedure
85934>>>        
85934>>>        // This is the first callback. Make this multi-select,
85934>>>        // no click select, show week numbers, don't show today stuff.
85934>>>        // also set the callback to call DoDateUpdate (which will delegate to here)
85934>>>        Procedure DateRangeCallback Integer hoPrompt
85937>>>            Date dDate1 dDate2
85937>>>            
85937>>>            Set pbMultiSelect of hoPrompt to True
85938>>>            Set peMouseSelectOk of hoPrompt to msoNone
85939>>>            Set phmPromptUpdateCallback of hoPrompt to (RefProc(DoDateUpdate))
85940>>>            
85940>>>            Set pbWeekNumbers of hoPrompt to True
85941>>>            Set pbNoToday of hoPrompt to True
85942>>>            Set pbNoTodayCircle of hoPrompt to True
85943>>>            
85943>>>            Get Value of oFromDate to dDate1
85944>>>            Get Value of oToDate to dDate2
85945>>>            Set pdSeedValue of hoPrompt to dDate1
85946>>>            Set pdSeedValue2 of hoPrompt to dDate2
85947>>>        End_Procedure
85948>>>    End_Object
85949>>>    
85949>>>    Object oDateTextBox is a TextBox
85951>>>        Set Size to 10 34
85952>>>        Set Location to 123 56
85953>>>        Set Label to '1/30/2016'
85954>>>        Procedure Activating
85957>>>            Set Label to (Date(CurrentDateTime()))
85958>>>            Forward Send Activating
85960>>>        End_Procedure
85961>>>    End_Object
85962>>>    
85962>>>    Object oButton1 is a Button
85964>>>        Set Location to 121 100
85965>>>        Set Label to 'Change'
85966>>>        
85966>>>        Procedure Prompt_Callback Integer hoPrompt
85969>>>            Date dDate
85969>>>            Get Value of oDateTextBox to dDate
85970>>>            Set peUpdateMode of hoPrompt to umPromptCustom
85971>>>            Set pdSeedValue of hoPrompt to dDate
85972>>>            Set phmPromptUpdateCallback of hoPrompt to (RefProc(DoDateUpdate))
85973>>>        End_Procedure
85974>>>        
85974>>>        Procedure DoDateUpdate Integer hoSel Date dDate1 Date dDate2
85977>>>            Set Value of oDateTextBox to dDate1
85978>>>        End_Procedure
85979>>>        
85979>>>        Procedure OnClick
85982>>>            Send Popup of oMonthCalendarPrompt
85983>>>        End_Procedure
85984>>>        
85984>>>    End_Object
85985>>>    
85985>>>End_Object
85986>>>
85986>        Use DemoParentCombos.vw
Including file: DemoParentCombos.vw    (C:\test\BuildTools\Order Entry\AppSrc\DemoParentCombos.vw)
85986>>>Use dfClient.pkg
85986>>>Use DataDict.pkg
85986>>>Use dfEntry.pkg
85986>>>Use dfSpnEnt.pkg
85986>>>Use dfCEntry.pkg
85986>>>Use Windows.pkg
85986>>>
85986>>>Use cVendorDataDictionary.dd
85986>>>Use cInventoryDataDictionary.dd
85986>>>Use cCustomerDataDictionary.dd
85986>>>Use cSalesPersonDataDictionary.dd
85986>>>Use cOrderHeaderDataDictionary.dd
85986>>>Use cOrderDetailDataDictionary.dd
85986>>>
85986>>>Use cDbCJGrid.pkg
85986>>>Use cCJGridColumnRowIndicator.pkg
85986>>>Use DbParentCombo.pkg
Including file: dbParentCombo.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\dbParentCombo.pkg)
85986>>>>>Use Dfcentry.pkg
85986>>>>>
85986>>>>>// Combo for parents.
85986>>>>>Class dbParentCombo is a dbComboForm
85987>>>>>    Procedure Construct_Object
85989>>>>>        Forward Send Construct_Object
85991>>>>>        
85991>>>>>        // Show a psEmptyItemDescription. If Entry_State is false, you probably
85991>>>>>        // want this false as well
85991>>>>>        Property Boolean pbAddEmptyItem True
85992>>>>>        Property String psEmptyItemDescription DD_BLANK_CODE_DESCRIPTION
85993>>>>>        
85993>>>>>        // if true, the list is refilled each time the combo takes the focus
85993>>>>>        // making it more dynamic. You can manually refill a list sending ComboRefill
85993>>>>>        Property Boolean pbRefillOnFocus False
85994>>>>>        
85994>>>>>        // object maintained. If it detects that the list does not contain a parent it
85994>>>>>        // will set this true to force a refill on the next focus
85994>>>>>        Property Boolean pbNeedsRefill False
85995>>>>>        
85995>>>>>        // make sure these properties are what we want
85995>>>>>        Set Code_Display_Mode to CB_Code_Display_Description
85996>>>>>        Set Undefined_Display_Mode to CB_ERR_UPDATE_WINDOW_VALUE // don't change
85997>>>>>        Set Undefined_Save_Mode    to CB_ERR_UPDATE_WINDOW_VALUE // don't change
85998>>>>>        
85998>>>>>        // in general this will work best with a non-editable combo
85998>>>>>        // but the other style works as well
85998>>>>>        Set Entry_State 0 to False
85999>>>>>        // its ok to change this - when default it displays in Combo_Index order
85999>>>>>        Set Combo_Sort_State to True
86000>>>>>    End_Procedure
86001>>>>>    
86001>>>>>    // augment to fill list when paged (instead of doing earlier)
86001>>>>>    Procedure Page_Object Boolean bPage
86003>>>>>        If bPage Begin
86005>>>>>            Send ComboRefill
86006>>>>>        End
86006>>>>>>
86006>>>>>        Forward Send Page_Object bPage
86008>>>>>    End_Procedure
86009>>>>>    
86009>>>>>    
86009>>>>>    // Augmentation to handle optional combo refill on set focus
86009>>>>>    Procedure Notify_Focus_Change Integer Fg
86011>>>>>        Boolean bReFillOnFocus bNeedsRefill
86011>>>>>        Forward Send Notify_Focus_Change Fg
86013>>>>>        If Fg Begin
86015>>>>>            Get pbNeedsRefill to bNeedsRefill
86016>>>>>            Get pbRefillOnFocus to bReFillOnFocus
86017>>>>>            If (bRefillOnFocus or bNeedsRefill) Begin
86019>>>>>                Send ComboRefill
86020>>>>>            End
86020>>>>>>
86020>>>>>        End
86020>>>>>>
86020>>>>>    End_Procedure
86021>>>>>    
86021>>>>>    // Refill combo list, while maintaining current value
86021>>>>>    Procedure ComboRefill
86023>>>>>        String sValue
86023>>>>>        Set Deferred_State to True
86024>>>>>        Get Value 0 to sValue
86025>>>>>        Send Combo_Fill_List
86026>>>>>        Set Deferred_State to False
86027>>>>>        Set Combo_data_object to (Combo_Data_Object(Self))
86028>>>>>        Set Local_Value 0 to sValue
86029>>>>>    End_Procedure
86030>>>>>    
86030>>>>>    // Augment to  init and fill the list with all parents.
86030>>>>>    Procedure Combo_Fill_List
86032>>>>>        Handle hoServer hoDD
86032>>>>>        Integer iFile iField iIndex
86032>>>>>        String sDescription sData
86032>>>>>        Boolean bAddEmptyItem
86032>>>>>        Boolean bOldRelate bNeedsRelate
86032>>>>>        RowID riID
86032>>>>>        
86032>>>>>        Get Server to hoServer
86033>>>>>        Get Data_File to iFile
86034>>>>>        Get Data_Field to iField
86035>>>>>        Get Combo_Index to iIndex
86036>>>>>        Get pbAddEmptyItem to bAddEmptyItem
86037>>>>>        Send Combo_Delete_Data
86038>>>>>        
86038>>>>>        If (hoServer and iFile) Begin
86040>>>>>            
86040>>>>>            Get Data_Set of hoServer iFile to hoDD
86041>>>>>            
86041>>>>>            If (hoDD) Begin
86043>>>>>                Set Relational_State to True
86044>>>>>                If (bAddEmptyItem) Begin
86046>>>>>                    Get psEmptyItemDescription to sDescription
86047>>>>>                    Send Combo_Add_Blank_Item sDescription
86048>>>>>                    Set Data_Only_State to True // this got cleared - we don't care about dummy item
86049>>>>>                End
86049>>>>>>
86049>>>>>                
86049>>>>>                //  Use the field its prefered index
86049>>>>>                If (iIndex <= 0) Begin
86051>>>>>                    Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
86054>>>>>                End
86054>>>>>>
86054>>>>>                
86054>>>>>                //  If the field is not indexed we use the table its primary index
86054>>>>>                If (iIndex <= 0) Begin
86056>>>>>                    Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
86059>>>>>                End
86059>>>>>>
86059>>>>>                
86059>>>>>                // optimize relates. Only do it if needed
86059>>>>>                Get No_Relate_State of hoDD to bOldRelate
86060>>>>>                Get DDOConstraintNeedsRelate of hoDD iIndex to bNeedsRelate
86061>>>>>                Set No_Relate_State of hoDD to (not(bNeedsRelate))
86062>>>>>                Send Request_Read of hoDD FIRST_RECORD iFile iIndex
86063>>>>>                While (Found)
86067>>>>>                    Send AddParentItemFromRecord
86068>>>>>                    Send Locate_Next of hoDD
86069>>>>>                Loop
86070>>>>>>
86070>>>>>                Set No_Relate_State of hoDD to bOldRelate
86071>>>>>            End
86071>>>>>>
86071>>>>>        End
86071>>>>>>
86071>>>>>        If (not(hoDD)) Begin
86073>>>>>            Error DFERR_PROGRAM "Invalid use of DbParentCombo"
86074>>>>>>
86074>>>>>        End
86074>>>>>>
86074>>>>>        Set pbNeedsRefill to False
86075>>>>>    End_Procedure
86076>>>>>    
86076>>>>>    Procedure AddParentItemFromRecord
86078>>>>>        Integer iFile iField iItems
86078>>>>>        String sData sDescription
86078>>>>>        RowID riID
86078>>>>>        
86078>>>>>        Get Data_File to iFile
86079>>>>>        Get Data_Field to iField
86080>>>>>        Move (GetRowID(iFile)) to riID
86081>>>>>        Get_Field_Value iFile iField to sData
86084>>>>>        Move (Trim(sData)) to sData
86085>>>>>        Move sData to sDescription
86086>>>>>        // user hook to customize the combo description
86086>>>>>        Send OnDefineDescription (&sDescription)
86087>>>>>        Get Combo_Item_Count to iItems
86088>>>>>        Send ComboFillItem iItems sData sDescription iFile riID
86089>>>>>        Increment iItems
86090>>>>>    End_Procedure
86091>>>>>    
86091>>>>>    // Hook to customize a combo item's description.
86091>>>>>    Procedure OnDefineDescription String ByRef sDescription
86093>>>>>    End_Procedure
86094>>>>>    
86094>>>>>    // augment to test that we found a match and if not add it to the list
86094>>>>>    Procedure Display_Description String DataVal
86096>>>>>        String sValue
86096>>>>>        Integer iItem
86096>>>>>        Move (Trim(DataVal)) to DataVal // must be trimmed for Combo_Item_Matching below
86097>>>>>        Get Data_to_Description DataVal to sValue
86098>>>>>        // Test that the combo item exists. We assume that a missing combo item means the list is out of date.
86098>>>>>        // If so, add the missing item and mark that we probably need to do a refill next chance we get.
86098>>>>>        If (DataVal<>"") Begin
86100>>>>>            Get Combo_Item_Matching sValue to iItem
86101>>>>>            If (iItem=-1) Begin
86103>>>>>                Send AddParentItemFromRecord
86104>>>>>                Set pbNeedsRefill to True
86105>>>>>                // now it should work
86105>>>>>                Get Data_to_Description DataVal to sValue
86106>>>>>            End
86106>>>>>>
86106>>>>>        End
86106>>>>>>
86106>>>>>        Set Value 0 to sValue
86107>>>>>    End_Procedure
86108>>>>>    
86108>>>>>    // cancel so the list is not built upon attach to DDO. Attach upon activation
86108>>>>>    Procedure combo_initialize_list
86110>>>>>    End_Procedure
86111>>>>>    
86111>>>>>    
86111>>>>>End_Class
86112>>>>>
86112>>>Use MonthCalendarPrompt.dg
86112>>>
86112>>>Activate_View Activate_oDemoParentCombos for oDemoParentCombos
86122>>>>
86122>>>Object oDemoParentCombos is a dbView
86124>>>    Set Border_Style to Border_Thick
86125>>>    Set Maximize_Icon to True
86126>>>    Set Label to "Parent Combo Demo"
86127>>>    Set Location to 2 3
86128>>>    Set Size to 178 383
86129>>>    Set piMinSize to 178 383
86130>>>    
86130>>>    
86130>>>    Object oVendorDataDictionary is a cVendorDataDictionary
86132>>>    End_Object
86133>>>    
86133>>>    Object oInventoryDataDictionary is a cInventoryDataDictionary
86135>>>        Set DDO_Server to oVendorDataDictionary
86136>>>    End_Object
86137>>>    
86137>>>    Object oCustomerDataDictionary is a cCustomerDataDictionary
86139>>>    End_Object
86140>>>    
86140>>>    Object oSalesPersonDataDictionary is a cSalesPersonDataDictionary
86142>>>    End_Object
86143>>>    
86143>>>    Object oOrderHeaderDataDictionary is a cOrderHeaderDataDictionary
86145>>>        Set DDO_Server to oCustomerDataDictionary
86146>>>        Set DDO_Server to oSalesPersonDataDictionary
86147>>>        
86147>>>        // this lets you save a new OrderHeader from within OrderDetail.
86147>>>        Set Allow_Foreign_New_Save_State to True
86148>>>        
86148>>>    End_Object
86149>>>    
86149>>>    Object oOrderDetailDataDictionary is a cOrderDetailDataDictionary
86151>>>        Set DDO_Server to oOrderHeaderDataDictionary
86152>>>        Set DDO_Server to oInventoryDataDictionary
86153>>>        Set Constrain_File to OrderHeader.File_Number
86154>>>    End_Object
86155>>>    
86155>>>    Set Main_DD to oOrderHeaderDataDictionary
86156>>>    Set Server to oOrderHeaderDataDictionary
86157>>>    
86157>>>    Object oDbContainer3d1 is a dbGroup
86159>>>        Set Size to 89 377
86160>>>        Set Location to 2 3
86161>>>        Set peAnchors to anTopLeftRight
86162>>>        
86162>>>        
86162>>>        Object oOrderHeader_Order_Number is a dbForm
86164>>>            Entry_Item OrderHeader.Order_Number
86165>>>            Set Label to "Order Number:"
86166>>>            Set Size to 12 42
86167>>>            Set Location to 14 62
86168>>>            Set peAnchors to anTopLeft
86169>>>            Set Label_Col_Offset to 2
86170>>>            Set Label_Justification_Mode to jMode_Right
86171>>>            
86171>>>        End_Object
86172>>>        
86172>>>        Object oOrderHeader_Customer_Number is a DbParentCombo
86174>>>            Entry_Item Customer.Customer_Number
86175>>>            Set Label to "Customer Number:"
86176>>>            Set Size to 13 42
86177>>>            Set Location to 14 201
86178>>>            Set peAnchors to anTopRight
86179>>>            Set Label_Col_Offset to 2
86180>>>            Set Label_Justification_Mode to jMode_Right
86181>>>            Set psEmptyItemDescription to "???"
86182>>>            // with numbers, not sorting may be preferred
86182>>>            Set Combo_Sort_State to False
86183>>>            // anytime this takes the focus, refill the combo. If the list is very
86183>>>            // large you may not want this. However, if the list is very large you
86183>>>            // may not want parent combos.
86183>>>            Set pbRefillOnFocus to True
86184>>>        End_Object
86185>>>        
86185>>>        Object oOrderHeader_Order_Date is a dbForm
86187>>>            Entry_Item OrderHeader.Order_Date
86188>>>            Set Label to "Order Date:"
86189>>>            Set Size to 12 67
86190>>>            Set Location to 14 299
86191>>>            Set peAnchors to anTopRight
86192>>>            Set Label_Col_Offset to 2
86193>>>            Set Label_Justification_Mode to jMode_Right
86194>>>            
86194>>>            Set Prompt_Object to oMonthCalendarPrompt
86195>>>            Set Prompt_Button_Mode to PB_PromptOn
86196>>>        End_Object
86197>>>        
86197>>>        Object oCustomer_Name is a dbForm
86199>>>            Entry_Item Customer.Name
86200>>>            Set Label to "Customer Name:"
86201>>>            Set Size to 12 180
86202>>>            Set Location to 28 62
86203>>>            Set peAnchors to anTopLeftRight
86204>>>            Set Label_Col_Offset to 2
86205>>>            Set Label_Justification_Mode to jMode_Right
86206>>>        End_Object
86207>>>        
86207>>>        Object oCustomer_Address is a dbForm
86209>>>            Entry_Item Customer.Address
86210>>>            Set Label to "Street Address:"
86211>>>            Set Size to 12 180
86212>>>            Set Location to 42 62
86213>>>            Set peAnchors to anTopLeftRight
86214>>>            Set Label_Col_Offset to 2
86215>>>            Set Label_Justification_Mode to jMode_Right
86216>>>        End_Object
86217>>>        
86217>>>        Object oCustomer_City is a dbForm
86219>>>            Entry_Item Customer.City
86220>>>            Set Label to "City/State/Zip:"
86221>>>            Set Size to 12 84
86222>>>            Set Location to 56 62
86223>>>            Set peAnchors to anTopLeftRight
86224>>>            Set Label_Col_Offset to 2
86225>>>            Set Label_Justification_Mode to jMode_Right
86226>>>        End_Object
86227>>>        
86227>>>        Object oCustomer_State is a dbForm
86229>>>            Entry_Item Customer.State
86230>>>            Set Size to 12 20
86231>>>            Set Location to 56 155
86232>>>            Set peAnchors to anTopRight
86233>>>        End_Object
86234>>>        
86234>>>        Object oCustomer_Zip is a dbForm
86236>>>            Entry_Item Customer.Zip
86237>>>            Set Size to 12 60
86238>>>            Set Location to 56 183
86239>>>            Set peAnchors to anTopRight
86240>>>        End_Object
86241>>>        
86241>>>        Object oOrderHeader_Ordered_By is a dbForm
86243>>>            Entry_Item OrderHeader.Ordered_By
86244>>>            Set Label to "Ordered By:"
86245>>>            Set Size to 12 67
86246>>>            Set Location to 42 299
86247>>>            Set peAnchors to anTopRight
86248>>>            Set Label_Col_Offset to 2
86249>>>            Set Label_Justification_Mode to jMode_Right
86250>>>        End_Object
86251>>>        
86251>>>        Object oOrderHeader_Salesperson_ID is a DbParentCombo
86253>>>            Entry_Item SalesPerson.Id
86254>>>            Set Label to "Sold by:"
86255>>>            Set Size to 12 90
86256>>>            Set Location to 56 276
86257>>>            Set peAnchors to anTopRight
86258>>>            Set Label_Col_Offset to 2
86259>>>            Set Label_Justification_Mode to jMode_Right
86260>>>            Set psEmptyItemDescription to "<none>"
86261>>>            
86261>>>            Procedure OnDefineDescription String ByRef sDescription
86264>>>                Move (trim(SalesPerson.ID) + " - " * SalesPerson.Name) to sDescription
86265>>>            End_Procedure
86266>>>        End_Object
86267>>>        
86267>>>        Object oOrderHeader_Terms is a dbComboForm
86269>>>            Entry_Item OrderHeader.Terms
86270>>>            Set Label to "Terms:"
86271>>>            Set Size to 12 85
86272>>>            Set Location to 70 62
86273>>>            Set peAnchors to anTopLeft
86274>>>            Set Form_Border to 0
86275>>>            Set Label_Col_Offset to 2
86276>>>            Set Label_Justification_Mode to jMode_Right
86277>>>            Set Entry_State to False
86278>>>            
86278>>>        End_Object
86279>>>        
86279>>>        Object oOrderHeader_Ship_Via is a dbComboForm
86281>>>            Entry_Item OrderHeader.Ship_Via
86282>>>            Set Label to "Ship Via:"
86283>>>            Set Size to 12 103
86284>>>            Set Location to 70 183
86285>>>            Set peAnchors to anTopRight
86286>>>            Set Form_Border to 0
86287>>>            Set Label_Col_Offset to 2
86288>>>            Set Label_Justification_Mode to jMode_Right
86289>>>            Set Entry_State to False
86290>>>            
86290>>>            
86290>>>        End_Object
86291>>>        
86291>>>    End_Object
86292>>>    
86292>>>    Object oOrderDetail_Grid is a cDbCJGrid
86294>>>        Set Server to oOrderDetailDataDictionary
86295>>>        Set Ordering to 1
86296>>>        Set Size to 63 377
86297>>>        Set Location to 94 3
86298>>>        Set peAnchors to anAll
86299>>>        Set pbAllowInsertRow to False
86300>>>        Set pbRestoreLayout to False
86301>>>        Set psLayoutSection to "OrderView_oOrderDetail_Grid2"
86302>>>        Set piLayoutBuild to 6
86303>>>        Set pbHeaderPrompts to True
86304>>>        
86304>>>        On_Key Key_F11 Send Request_InsertRow
86305>>>        
86305>>>        Object oMark is a cCJGridColumnRowIndicator
86307>>>        End_Object
86308>>>        
86308>>>        Object oInventory_Item_ID is a cDbCJGridColumn
86310>>>            Entry_Item Inventory.Item_ID
86311>>>            Set piWidth to 91
86312>>>            Set psCaption to "Item ID"
86313>>>            Set psImage to "ActionPrompt.ico"
86314>>>        End_Object
86315>>>        
86315>>>        Object oInventory_Description is a cDbCJGridColumn
86317>>>            Entry_Item Inventory.Description
86318>>>            Set piWidth to 213
86319>>>            Set psCaption to "Description"
86320>>>        End_Object
86321>>>        
86321>>>        Object oInventory_Unit_Price is a cDbCJGridColumn
86323>>>            Entry_Item Inventory.Unit_Price
86324>>>            Set piWidth to 53
86325>>>            Set psCaption to "Unit Price"
86326>>>        End_Object
86327>>>        
86327>>>        Object oOrderDetail_Qty_Ordered is a cDbCJGridColumn
86329>>>            Entry_Item OrderDetail.Qty_Ordered
86330>>>            Set piWidth to 50
86331>>>            Set psCaption to "Quantity"
86332>>>        End_Object
86333>>>        
86333>>>        Object oOrderDetail_Price is a cDbCJGridColumn
86335>>>            Entry_Item OrderDetail.Price
86336>>>            Set piWidth to 62
86337>>>            Set psCaption to "Price"
86338>>>        End_Object
86339>>>        
86339>>>        Object oOrderDetail_Extended_Price is a cDbCJGridColumn
86341>>>            Entry_Item OrderDetail.Extended_Price
86342>>>            Set piWidth to 81
86343>>>            Set psCaption to "Total"
86344>>>        End_Object
86345>>>        
86345>>>    End_Object
86346>>>    
86346>>>    Object oOrderHeader_Order_Total is a dbForm
86348>>>        Entry_Item OrderHeader.Order_Total
86349>>>        Set Label to "Order Total:"
86350>>>        Set Size to 12 60
86351>>>        Set Location to 160 307
86352>>>        Set peAnchors to anBottomRight
86353>>>        Set Label_Col_Offset to 3
86354>>>        Set Label_Justification_Mode to jMode_Right
86355>>>    End_Object
86356>>>    
86356>>>    Object oPrintBtn is a Button
86358>>>        Set Label to "Print Order"
86359>>>        Set Location to 160 3
86360>>>        Set peAnchors to anBottomLeft
86361>>>        Set psToolTip to "Print preview of current order"
86362>>>        
86362>>>        Procedure OnClick
86365>>>            Delegate Send PrintCurrentOrder // defined in view object
86367>>>        End_Procedure
86368>>>        
86368>>>    End_Object
86369>>>    
86369>>>    
86369>>>    // Change:   Create custom confirmation messages for save and delete
86369>>>    //           We must create the new functions and assign verify messages
86369>>>    //           to them.
86369>>>    Function Confirm_Delete_Order Returns Integer
86372>>>        Integer iRetVal
86372>>>        Get Confirm "Delete Entire Order?" to iRetVal
86373>>>        Function_Return iRetVal
86374>>>    End_Function
86375>>>    
86375>>>    // Only confirm on the saving of new records
86375>>>    Function Confirm_Save_Order Returns Integer
86378>>>        Integer iNoSave iSrvr
86378>>>        Boolean bOld
86378>>>        Get Server to iSrvr
86379>>>        Get HasRecord of iSrvr to bOld
86380>>>        If not bOld Begin
86382>>>            Get Confirm "Save this NEW order header?" to iNoSave
86383>>>        End
86383>>>>
86383>>>        Function_Return iNoSave
86384>>>    End_Function
86385>>>    
86385>>>    // Define alternate confirmation Messages
86385>>>    Set Verify_Save_MSG       to (RefFunc(Confirm_Save_Order))
86386>>>    Set Verify_Delete_MSG     to (RefFunc(Confirm_Delete_Order))
86387>>>    Set Auto_Clear_DEO_State  to False // don't clear Header on save
86388>>>    
86388>>>    
86388>>>    // print the current order. This message will be sent
86388>>>    // by the print button
86388>>>    Procedure PrintCurrentOrder
86391>>>        Integer hDD iNum
86391>>>        Get Server to hDD // this will be the OrderHeader DD
86392>>>        If (HasRecord(hDD)) Begin // only do this if record exists
86394>>>            Get Field_Current_Value of hDD Field OrderHeader.Order_Number to iNum
86395>>>//            Send PrintOrder of oOrder_Report iNum
86395>>>            Send Info_Box "This is just a stub and this invoice is not actually being printed" ("Print Order " + String(iNum))
86396>>>        End
86396>>>>
86396>>>    End_Procedure
86397>>>    
86397>>>    // refresh is sent to containers. We will use that to control the print button and only
86397>>>    // enable it when an order exists
86397>>>    Procedure Refresh Integer eMode
86400>>>        Boolean bRec
86400>>>        Handle hoServer
86400>>>        Get Server to hoServer
86401>>>        Get HasRecord of hoServer to bRec
86402>>>        Set Enabled_State of oPrintBtn to bRec
86403>>>    End_Procedure
86404>>>    
86404>>>End_Object
86405>>>
86405>        
86405>        // DataFlex Reports report views
86405>        Use DataFlexReports\SalesPerStatePerYear.rv
Including file: DataFlexReports\SalesPerStatePerYear.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\SalesPerStatePerYear.rv)
86405>>>Use Windows.pkg
86405>>>Use DFRptVw.pkg
86405>>>Use File_Dlg.Pkg
86405>>>
86405>>>Use cDRReport.pkg
86405>>>Use cDRPreview.pkg
86405>>>Use DRStatuspanel.dg
86405>>>
86405>>>// Use the data-dictionary to include the selectionlist and open the customer table
86405>>>Use cCustomerDataDictionary.dd
86405>>>
86405>>>// This example shows how to integrate a crosstab based report in the application. Displaying the grand total 
86405>>>// and/or a total column/row is controllable via the interface. The interface also allows sorting of the year 
86405>>>// columns ascending or descending. By selecting a credit limit or the customer's active state the results of 
86405>>>// the crosstab will be changed
86405>>>
86405>>>Deferred_View Activate_oSalesperStateperYearReportView for ;Object oSalesperStateperYearReportView is a ReportView
86430>>>    Set Label to "Sales per State per Year"
86431>>>    Set Icon to 'DR.Ico'
86432>>>
86432>>>    Object oCustomer_DD is a cCustomerDataDictionary
86434>>>    End_Object
86435>>>
86435>>>    Object oReport is a cDRReport
86437>>>        Set pbShowStatusPanel to True
86438>>>        Set phoStatusPanel to oDRStatusPanel
86439>>>        Set psReportName to "Sales per State per Year.dr"
86440>>>
86440>>>        Procedure OnCreate
86443>>>            Forward Send OnCreate
86445>>>            
86445>>>            Set piReportLanguage '' to LANG_NEUTRAL
86446>>>        End_Procedure
86447>>>
86447>>>        Procedure OnInitializeReport
86450>>>            Integer eOutputDeviceMode
86450>>>
86450>>>            Forward Send OnInitializeReport
86452>>>
86452>>>            // Convert from the ReportView Output_Device_Mode to peOutputDestination
86452>>>            Get Output_Device_Mode to eOutputDeviceMode
86453>>>            Set peOutputDestination to eOutputDeviceMode
86454>>>
86454>>>            Send SetFilters
86455>>>            Send SetSortFields
86456>>>            Send SetParameters
86457>>>            Send SetFunctions
86458>>>        End_Procedure
86459>>>
86459>>>        Procedure SetParameters
86462>>>            Boolean bChecked
86462>>>            String sReportId
86462>>>            Integer iParameter
86462>>>
86462>>>            Get Checked_State of oShowGrandTotalCheckBox to bChecked
86463>>>            Get psReportId to sReportId
86464>>>            Get ParameterIdByName sReportId "GrandTotal" to iParameter
86465>>>            Set psParameterValue sReportId iParameter to bChecked
86466>>>        End_Procedure
86467>>>
86467>>>        Procedure SetFilters
86470>>>            String sReportId
86470>>>            String sCustomerCreditLimit
86470>>>            String sCustomerStatus
86470>>>
86470>>>            Get psReportId to sReportId
86471>>>
86471>>>            Get Value of oCustomerCreditLimit to sCustomerCreditLimit
86472>>>            If (sCustomerCreditLimit <> "") Begin
86474>>>                Send AddFilter sReportId "{Customer.Credit_Limit}" C_drGreaterThanOrEqual sCustomerCreditLimit
86475>>>            End
86475>>>>
86475>>>
86475>>>            Get Value of oCustomerStatus to sCustomerStatus
86476>>>            If (Length (sCustomerStatus) > 0) Begin
86478>>>                Send AddFilter sReportId "{Customer.Status}" C_drEqual sCustomerStatus
86479>>>            End
86479>>>>
86479>>>        End_Procedure
86480>>>
86480>>>        Procedure SetSortFields
86483>>>            String sReportId sValue
86483>>>
86483>>>            Get psReportId to sReportId
86484>>>
86484>>>            Get SelectedOption of oYearSortingComboForm to sValue
86485>>>            Set psFunction sReportId "OrderByYearSorting" to ("Return" * sValue)
86486>>>        End_Procedure
86487>>>
86487>>>        Procedure SetFunctions
86490>>>            String sReportId sValue
86490>>>
86490>>>            Get psReportId to sReportId
86491>>>
86491>>>            Get SelectedOption of oTotalRowComboForm to sValue
86492>>>            Set psFunction sReportId "TotalsPerState" to ("Return" * sValue)
86493>>>
86493>>>            Get SelectedOption of oTotalColumnComboForm to sValue
86494>>>            Set psFunction sReportId "TotalsPerYear" to ("Return" * sValue)
86495>>>        End_Procedure
86496>>>    End_Object
86497>>>
86497>>>    Object oSelectionsGroup is a Group
86499>>>        Set Size to 44 156
86500>>>        Set Location to 5 5
86501>>>        Set Label to "Selections"
86502>>>        Set peAnchors to anTopLeftRight
86503>>>
86503>>>        Object oCustomerCreditLimit is a Form
86505>>>            Set Size to 12 42
86506>>>            Set Location to 11 60
86507>>>            Set Label_Justification_Mode to jMode_Right
86508>>>            Set Label_Col_Offset to 2
86509>>>            Set Label to "Credit Limit"
86510>>>            Set Status_Help to "Enter a selection value."
86511>>>            Set psToolTip to "Enter a Value for the Customer Credit Limit"
86512>>>            Set Numeric_Mask 0 to 6 2
86513>>>        End_Object
86514>>>
86514>>>        Object oCustomerStatus is a ComboForm
86516>>>            Set Size to 12 42
86517>>>            Set Location to 26 60
86518>>>            Set Label_Justification_Mode to JMode_Right
86519>>>            Set Label_Col_Offset to 2
86520>>>            Set Label to "Active"
86521>>>            Set Status_Help to "Active Inactive Status of customer"
86522>>>            Set psToolTip to "Select Customer Active Status"
86523>>>            Set Entry_State to False
86524>>>            Set Combo_Sort_State to False
86525>>>
86525>>>            Procedure Combo_Fill_List
86528>>>                Send Combo_Add_Item "" // The blank option is here to indicate all customers should be used
86529>>>                Send Combo_Add_Item "Y"
86530>>>                Send Combo_Add_Item "N"
86531>>>            End_Procedure
86532>>>        End_Object
86533>>>    End_Object
86534>>>
86534>>>    Object oOptionsGroup is a Group
86536>>>        Set Size to 67 156
86537>>>        Set Location to 51 5
86538>>>        Set Label to "Options"
86539>>>        Set peAnchors to anTopLeftRight
86540>>>
86540>>>        Object oShowGrandTotalCheckBox is a CheckBox
86542>>>            Set Size to 10 50
86543>>>            Set Location to 10 52
86544>>>            Set Label to "Show Grand Total"
86545>>>            Set psToolTip to "Show Grand Total"
86546>>>            Set Enabled_State to False
86547>>>        End_Object
86548>>>
86548>>>        Object oYearSortingComboForm is a ComboForm
86550>>>            Set Size to 12 100
86551>>>            Set Location to 22 52
86552>>>            Set Entry_State to False
86553>>>            Set Combo_Sort_State to False
86554>>>            Set Label to "Sort Years"
86555>>>            Set Label_Col_Offset to 2
86556>>>            Set Label_Justification_Mode to JMode_Right
86557>>>            Set psToolTip to "Sort the Year Columns Ascending or Descending"
86558>>>
86558>>>            Function SelectedOption Returns String
86561>>>                String sValue
86561>>>                Integer iItem
86561>>>
86561>>>                Get Value to sValue
86562>>>                Get Combo_Item_Matching sValue to iItem
86563>>>                Case Begin
86563>>>                    Case (iItem = 0)
86565>>>                        Function_Return "drAscending"
86566>>>                        Case Break
86567>>>                    Case (iItem = 1)
86570>>>                        Function_Return "drDescending"
86571>>>                        Case Break
86572>>>                Case End
86572>>>            End_Function
86573>>>
86573>>>            Procedure Combo_Fill_List
86576>>>                Send Combo_Add_Item "Ascending"
86577>>>                Send Combo_Add_Item "Descending"
86578>>>            End_Procedure
86579>>>        End_Object
86580>>>
86580>>>        Object oTotalRowComboForm is a ComboForm
86582>>>            Set Size to 12 100
86583>>>            Set Location to 36 52
86584>>>            Set Entry_State to False
86585>>>            Set Combo_Sort_State to False
86586>>>            Set Label to "Total Row"
86587>>>            Set Label_Col_Offset to 2
86588>>>            Set Label_Justification_Mode to JMode_Right
86589>>>            Set psToolTip to "Display a Total Row on the Top or on the Bottom or do not Display a Total Row"
86590>>>
86590>>>            Function SelectedOption Returns String
86593>>>                String sValue
86593>>>                Integer iItem
86593>>>
86593>>>                Get Value to sValue
86594>>>                Get Combo_Item_Matching sValue to iItem
86595>>>                Case Begin
86595>>>                    Case (iItem = 0)
86597>>>                        Function_Return "drNoTotalRow"
86598>>>                        Case Break
86599>>>                    Case (iItem = 1)
86602>>>                        Function_Return "drTotalOnTop"
86603>>>                        Case Break
86604>>>                    Case (iItem = 2)
86607>>>                        Function_Return "drTotalOnBottom"
86608>>>                        Case Break
86609>>>                Case End
86609>>>            End_Function
86610>>>
86610>>>            Procedure OnChange
86613>>>                String sTotalRowOption sTotalColumnOption
86613>>>                Boolean bEnabled
86613>>>
86613>>>                Get SelectedOption to sTotalRowOption
86614>>>                Get SelectedOption of oTotalColumnComboForm to sTotalColumnOption
86615>>>
86615>>>                Move (sTotalRowOption <> "drNoTotalRow" and sTotalColumnOption <> "drNoTotalColumn") to bEnabled
86616>>>                Set Enabled_State of oShowGrandTotalCheckBox to bEnabled
86617>>>                If (not (bEnabled)) Begin
86619>>>                    Set Checked_State of oShowGrandTotalCheckBox to False
86620>>>                End
86620>>>>
86620>>>            End_Procedure
86621>>>
86621>>>            Procedure Combo_Fill_List
86624>>>                Send Combo_Add_Item "No Total Row"
86625>>>                Send Combo_Add_Item "Total Row on the Top"
86626>>>                Send Combo_Add_Item "Total Row on the Bottom"
86627>>>            End_Procedure
86628>>>        End_Object
86629>>>
86629>>>        Object oTotalColumnComboForm is a ComboForm
86631>>>            Set Size to 12 100
86632>>>            Set Location to 50 52
86633>>>            Set Entry_State to False
86634>>>            Set Combo_Sort_State to False
86635>>>            Set Label to "Total Column"
86636>>>            Set Label_Col_Offset to 2
86637>>>            Set Label_Justification_Mode to JMode_Right
86638>>>            Set psToolTip to "Display a Total Column on the Left or on the Right or do not Display a Total Column"
86639>>>
86639>>>            Function SelectedOption Returns String
86642>>>                String sValue
86642>>>                Integer iItem
86642>>>
86642>>>                Get Value to sValue
86643>>>                Get Combo_Item_Matching sValue to iItem
86644>>>                Case Begin
86644>>>                    Case (iItem = 0)
86646>>>                        Function_Return "drNoTotalColumn"
86647>>>                        Case Break
86648>>>                    Case (iItem = 1)
86651>>>                        Function_Return "drTotalOnLeft"
86652>>>                        Case Break
86653>>>                    Case (iItem = 2)
86656>>>                        Function_Return "drTotalOnRight"
86657>>>                        Case Break
86658>>>                Case End
86658>>>            End_Function
86659>>>
86659>>>            Procedure OnChange
86662>>>                String sTotalRowOption sTotalColumnOption
86662>>>                Boolean bEnabled
86662>>>
86662>>>                Get SelectedOption of oTotalRowComboForm to sTotalRowOption
86663>>>                Get SelectedOption to sTotalColumnOption
86664>>>
86664>>>                Move (sTotalRowOption <> "drNoTotalRow" and sTotalColumnOption <> "drNoTotalColumn") to bEnabled
86665>>>                Set Enabled_State of oShowGrandTotalCheckBox to bEnabled
86666>>>                If (not (bEnabled)) Begin
86668>>>                    Set Checked_State of oShowGrandTotalCheckBox to False
86669>>>                End
86669>>>>
86669>>>            End_Procedure
86670>>>
86670>>>            Procedure Combo_Fill_List
86673>>>                Send Combo_Add_Item "No Total Column"
86674>>>                Send Combo_Add_Item "Total Column on the Left"
86675>>>                Send Combo_Add_Item "Total Column on the right"
86676>>>            End_Procedure
86677>>>        End_Object
86678>>>    End_Object
86679>>>
86679>>>
86679>>>    Object oDestinationGroup Is A RadioGroup
86681>>>        Set Label to "Output destination"
86682>>>        Set Location to 120 5
86683>>>        Set Size to 46 156
86684>>>        Set peAnchors to anTopLeftRight
86685>>>
86685>>>        Object oScreenRadio Is A Radio
86687>>>            Set Label to "Preview"
86688>>>            Set Size to 10 60
86689>>>            Set Location to 10 6
86690>>>            Set Status_Help to "Print the report to screen"
86691>>>        End_Object
86692>>>
86692>>>        Object oPrinterRadio Is A Radio
86694>>>            Set Label to "Printer"
86695>>>            Set Size to 10 60
86696>>>            Set Location to 22 6
86697>>>            Set Status_Help to "Prints the report to printer"
86698>>>        End_Object
86699>>>
86699>>>        Object oExportRadio Is A Radio
86701>>>            Set Label to "Export"
86702>>>            Set Size to 10 60
86703>>>            Set Location to 34 6
86704>>>            Set Status_Help to "Outputs the report to disk file (PDF, CSV, Image, HTML, Excel, RTF)"
86705>>>        End_Object
86706>>>
86706>>>        Procedure Notify_Select_State Integer iNewItem Integer iOldItem
86709>>>            Forward Send Notify_Select_State iNewItem iOldItem
86711>>>
86711>>>            Case Begin
86711>>>                Case (iNewItem = 0)
86713>>>                    Set Output_Device_Mode to PRINT_TO_WINDOW
86714>>>                    Case Break
86715>>>                Case (iNewItem = 1)
86718>>>                    Set Output_Device_Mode to PRINT_TO_PRINTER
86719>>>                    Case Break
86720>>>                Case (iNewItem = 2)
86723>>>                    Set Output_Device_Mode to PRINT_TO_FILE
86724>>>                    Case Break
86725>>>            Case End
86725>>>        End_Procedure
86726>>>    End_Object
86727>>>
86727>>>    Object oPrintButton Is A Button
86729>>>        Set Label to "&Print"
86730>>>        Set Status_Help to "Print the report"
86731>>>        Set Size to 14 50
86732>>>        Set Location to 168 57
86733>>>        Set Default_State to True
86734>>>        Set peAnchors to anBottomRight
86735>>>
86735>>>        Procedure OnClick
86738>>>            Send RunReport Of oReport
86739>>>        End_Procedure
86740>>>    End_Object
86741>>>
86741>>>    Object oCancelButton Is A Button
86743>>>        Set Label to "&Cancel"
86744>>>        Set Size to 14 50
86745>>>        Set Location to 168 111
86746>>>        Set Status_Help to "Cancel this Panel"
86747>>>        Set peAnchors to anBottomRight
86748>>>
86748>>>        // This procedure closes the report view.
86748>>>        Procedure OnClick
86751>>>            Send Request_Cancel
86752>>>        End_Procedure
86753>>>    End_Object
86754>>>
86754>>>    On_Key Key_Escape Send KeyAction of oCancelButton
86755>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancelButton
86756>>>    On_Key Key_Alt+Key_P Send KeyAction of oPrintButton
86757>>>
86757>>>    Set Location to 6 5
86758>>>    Set Size to 186 165
86759>>>Cd_End_Object
86761>>>>
86761>        Use DataFlexReports\CustomerLabels.rv
Including file: DataFlexReports\CustomerLabels.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\CustomerLabels.rv)
86761>>>Use Windows.pkg
86761>>>Use DFRptVw.pkg
86761>>>Use File_Dlg.Pkg
86761>>>Use Colr_dlg.pkg
Including file: Colr_dlg.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\Colr_dlg.pkg)
86761>>>>>Use VDFBase.pkg
86761>>>>>Use DLL.pkg
86761>>>>>Use RGB.pkg
86761>>>>>Use GlobalFunctionsProcedures.pkg
86761>>>>>
86761>>>>>
86761>>>>>External_Function ChooseColor 'ChooseColorA' COMDLG32.dll Pointer lpCC Returns DWord
86762>>>>>
86762>>>>>
86762>>>>>Class ColorDialog is a cObject
86763>>>>>    Procedure Construct_Object
86765>>>>>        Integer iLoop
86765>>>>>        Handle hoCustomColors
86765>>>>>        
86765>>>>>        Forward Send Construct_Object
86767>>>>>        
86767>>>>>        Property Boolean FullOpen_State        True
86768>>>>>        Property Boolean PreventFullOpen_State False
86769>>>>>        Property Boolean SelectedColor_State   True
86770>>>>>        Property Integer SelectedColor         0
86771>>>>>        
86771>>>>>        Property Handle phoCustomColors (Create(Self, U_Array)) // create an array to hold the custom colors
86772>>>>>        
86772>>>>>        // Set all custom colors to white...
86772>>>>>        Get phoCustomColors to hoCustomColors
86773>>>>>        For iLoop from 0 to 15
86779>>>>>>
86779>>>>>            Set Value of hoCustomColors iLoop to clWhite
86780>>>>>        Loop
86781>>>>>>
86781>>>>>        
86781>>>>>    End_Procedure
86782>>>>>    
86782>>>>>    Procedure Set Custom_Color Integer iItem Integer rgbColor
86784>>>>>        Set Value of (phoCustomColors(Self)) iItem to rgbColor
86785>>>>>    End_Procedure
86786>>>>>    
86786>>>>>    Function Custom_Color Integer iItem Returns Integer
86788>>>>>        Function_Return (Integer_Value(phoCustomColors(Self), iItem))
86789>>>>>    End_Function
86790>>>>>    
86790>>>>>    Procedure AssignCustomColors Handle hoSourceColorDialog
86792>>>>>        // Copies the custom colors from another ColorDialog instance
86792>>>>>        Integer iColor
86792>>>>>        
86792>>>>>        For iColor from 0 to 15
86798>>>>>>
86798>>>>>            Set Custom_Color iColor to (Value(hoSourceColorDialog, iColor))
86799>>>>>        Loop
86800>>>>>>
86800>>>>>    End_Procedure
86801>>>>>    
86801>>>>>    Function Value Integer iItem Returns String
86803>>>>>        // Provides support for the AssignCustomColors procedure, which requires
86803>>>>>        // that a "Get Value" interface is supported
86803>>>>>        Function_Return (Custom_Color(Self, iItem))
86804>>>>>    End_Function
86805>>>>>    
86805>>>>>    Function OwnerHandle Returns Handle
86807>>>>>        Handle hWnd
86807>>>>>        Handle hoObj
86807>>>>>        Get Focus of desktop to hoObj // start with the focus
86808>>>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
86809>>>>>        Function_Return hWnd
86810>>>>>    End_Function
86811>>>>>    
86811>>>>>    Function Show_Dialog Returns Boolean
86813>>>>>        //Shows the dialog. Returns True if the OK button was clicked.
86813>>>>>        Handle  hContainer hoCustomColors
86813>>>>>        Boolean bSelected bFullOpen bNoOpen bSelColor
86813>>>>>        Integer rgbColor iFlags iLoop
86813>>>>>        String sCC sColors
86813>>>>>        tWinChooseColor ChseColor
86813>>>>>        tWinChooseColor ChseColor
86813>>>>>        
86813>>>>>        Get OwnerHandle to hContainer
86814>>>>>        
86814>>>>>        Get phoCustomColors to hoCustomColors
86815>>>>>        
86815>>>>>        Move '' to sColors
86816>>>>>        For iLoop from 0 to 15
86822>>>>>>
86822>>>>>            Get Value of hoCustomColors iLoop to rgbColor
86823>>>>>            Move (sColors + DWORDToBytes(rgbColor)) to sColors
86824>>>>>        Loop
86825>>>>>>
86825>>>>>        
86825>>>>>        Get FullOpen_State        to bFullOpen
86826>>>>>        Get PreventFullOpen_State to bNoOpen
86827>>>>>        Get SelectedColor_State   to bSelColor
86828>>>>>        Get SelectedColor         to rgbColor
86829>>>>>        
86829>>>>>        Move 0 to iFlags
86830>>>>>        If bFullOpen ;            Move (iFlags +CC_FULLOPEN)        to iFlags
86833>>>>>        If bNoOpen ;            Move (iFlags +CC_PREVENTFULLOPEN) to iFlags
86836>>>>>        If bSelColor ;            Move (iFlags +CC_RGBINIT)         to iFlags
86839>>>>>        
86839>>>>>        Move (SizeOfType(tWinChooseColor))     to ChseColor.lStructSize
86840>>>>>        Move hContainer           to ChseColor.hWndOWner
86841>>>>>        Move rgbColor             to ChseColor.rgbResult
86842>>>>>        Move (AddressOf(sColors)) to ChseColor.lpCustColors
86843>>>>>        Move iFlags               to ChseColor.flags
86844>>>>>        
86844>>>>>        Move (ChooseColor(AddressOf(ChseColor))) to bSelected
86845>>>>>        
86845>>>>>        If bSelected Begin
86847>>>>>            For iLoop from 0 to 15
86853>>>>>>
86853>>>>>                Move (DeRefDw(AddressOf(sColors), iLoop *4)) to rgbColor
86854>>>>>                Set Value of hoCustomColors iLoop to rgbColor
86855>>>>>            Loop
86856>>>>>>
86856>>>>>            Move ChseColor.rgbResult to rgbColor
86857>>>>>            Set SelectedColor to rgbColor
86858>>>>>        End
86858>>>>>>
86858>>>>>        Function_Return bSelected
86859>>>>>    End_Function
86860>>>>>    
86860>>>>>End_Class
86861>>>>>
86861>>>
86861>>>Use cDRReport.pkg
86861>>>Use cDRPreview.pkg
86861>>>Use DRStatuspanel.dg
86861>>>
86861>>>// Use the data-dictionary to include the selectionlist and open the customer table
86861>>>Use cCustomerDataDictionary.dd
86861>>>
86861>>>// This example can print labels. Labels are different kind of report than standard reports as there might be more
86861>>>// addresses on one row (more labels across). Label reports also have no page header/footer, report header/footer, 
86861>>>// only a details section.
86861>>>
86861>>>// The report view allows users to 
86861>>>// - select on customer state or customer status
86861>>>// - suppress or use a box around the label
86861>>>// - pick a gradient start color for the label
86861>>>// - change the sort order
86861>>>
86861>>>Deferred_View Activate_oCustomerLabelsReportView for ;Object oCustomerLabelsReportView is a ReportView
86886>>>    Set Label to "Customer Labels"
86887>>>    Set Icon to "DR.ico"
86888>>>
86888>>>    Object oReport is a cDRReport
86890>>>        Set pbShowStatusPanel to True
86891>>>        Set phoStatusPanel to oDRStatusPanel
86892>>>        Set psReportName to "Customer Labels.dr"
86893>>>
86893>>>        Procedure OnCreate                          
86896>>>            Forward Send OnCreate
86898>>>            
86898>>>            Set piReportLanguage '' to LANG_NEUTRAL
86899>>>        End_Procedure
86900>>>        
86900>>>        Procedure OnInitializeReport
86903>>>            Integer eOutputDeviceMode
86903>>>
86903>>>            Forward Send OnInitializeReport
86905>>>
86905>>>            // Convert from the ReportView Output_Device_Mode to peOutputDestination
86905>>>            Get Output_Device_Mode to eOutputDeviceMode
86906>>>            Set peOutputDestination to eOutputDeviceMode
86907>>>
86907>>>            Send SetFunctions
86908>>>            Send SetFilters
86909>>>            Send SetSortFields
86910>>>            Send SetParameters
86911>>>        End_Procedure
86912>>>
86912>>>        Procedure SetFunctions
86915>>>            String sColor sReportId
86915>>>
86915>>>            Get Value of oFillColorForm to sColor
86916>>>            Get psReportId to sReportId
86917>>>
86917>>>            // Use a function instead of a parameter to make use of the RGB function inside DataFlex Reports and passing
86917>>>            // the values in the form instead of calculate them to a RGB color
86917>>>            Set psFunction sReportId "BoxGradientColor" to ("Return rgb(" + sColor + ")")
86918>>>        End_Procedure
86919>>>
86919>>>        // In this routine we find the code that sets the parameter values. The values
86919>>>        // for the parameters can be retrieved from an input control or from own coding.
86919>>>        Procedure SetParameters
86922>>>            String sReportId
86922>>>            Integer iParameter
86922>>>            Boolean bSuppresssBox
86922>>>
86922>>>            Get Checked_State of oSuppresssBoxParameterCheckbox to bSuppresssBox
86923>>>            Get psReportId to sReportId
86924>>>            Get ParameterIdByName sReportId "SuppresssBox" to iParameter
86925>>>            Set psParameterValue sReportId iParameter to bSuppresssBox
86926>>>        End_Procedure
86927>>>
86927>>>        Procedure SetFilters
86930>>>            String sReportId sCustomerState sCustomerStatus
86930>>>
86930>>>            Get psReportId to sReportId
86931>>>
86931>>>            Get Value of oCustomerState to sCustomerState
86932>>>            If (Length (sCustomerState) > 0) Begin
86934>>>                Send AddFilter sReportId "{Customer.State}" C_drEqual sCustomerState
86935>>>            End
86935>>>>
86935>>>
86935>>>            Get Value of oCustomerStatus to sCustomerStatus
86936>>>            If (Length (sCustomerStatus) > 0) Begin
86938>>>                Send AddFilter sReportId "{Customer.Status}" C_drEqual sCustomerStatus
86939>>>            End
86939>>>>
86939>>>        End_Procedure
86940>>>
86940>>>        Procedure SetSortFields
86943>>>            String sReportId sSortField
86943>>>            Integer iSortDirection
86943>>>
86943>>>            Get psReportId to sReportId
86944>>>
86944>>>            Send RemoveAllRecordSortFields sReportId
86945>>>            Get SortField of oSortOrderGroup to sSortField
86946>>>            Get SortDirection of oSortOrderGroup to iSortDirection
86947>>>            Send AddRecordSortField sReportId sSortField iSortDirection
86948>>>        End_Procedure
86949>>>    End_Object
86950>>>
86950>>>    Object oSelectionsGroup is a Group
86952>>>        Set Size to 50 135
86953>>>        Set Location to 5 5
86954>>>        Set Label to "Selections"
86955>>>        Set peAnchors to anTopLeftRight
86956>>>
86956>>>        Object oCustomerState is a ComboForm
86958>>>            Set Size to 12 89
86959>>>            Set Location to 17 30
86960>>>            Set piMaxSize to 14
86961>>>            Set piMinSize to 4
86962>>>            Set Label_Justification_Mode to JMode_Right
86963>>>            Set Label_Col_Offset to 2
86964>>>            Set Label to "State"
86965>>>            Set Status_Help to "Two letter state ID."
86966>>>            Set psToolTip to "Select State"
86967>>>
86967>>>            // This procedure is called for each value in the validation table, we simply add the supplied
86967>>>            // value to the combo list.
86967>>>            Procedure AddItem Integer iItem String sData String sDesc Integer iFile Integer iRec
86970>>>                Send Combo_Add_Item sData
86971>>>            End_Procedure
86972>>>
86972>>>            // This procedure is called when the combo list is to be filled. We use Request_Fill_From_List
86972>>>            // to instruct the validation table to send AddItem for each value in the validation table.
86972>>>            Procedure Combo_Fill_List
86975>>>                Send Request_Fill_From_List of Customer_State_VT Self (Refproc (AddItem))
86976>>>            End_Procedure
86977>>>        End_Object
86978>>>
86978>>>        Object oCustomerStatus is a ComboForm
86980>>>            Set Size to 12 34
86981>>>            Set Location to 31 30
86982>>>            Set piMaxSize to 7
86983>>>            Set piMinSize to 2
86984>>>            Set Label_Justification_Mode to JMode_Right
86985>>>            Set Label_Col_Offset to 2
86986>>>            Set Label to "Active"
86987>>>            Set Status_Help to "Active Inactive Status of customer"
86988>>>            Set psToolTip to "Select Customer Active Status"
86989>>>            Set Allow_Blank_State to True
86990>>>
86990>>>            Procedure Combo_Fill_List
86993>>>                Send Combo_Add_Item ""
86994>>>                Send Combo_Add_Item "Y"
86995>>>                Send Combo_Add_Item "N"
86996>>>            End_Procedure
86997>>>
86997>>>            Set Entry_State to False
86998>>>            Set Combo_Sort_State to True
86999>>>        End_Object
87000>>>    End_Object
87001>>>
87001>>>    Object oOptionsGroup is a Group
87003>>>        Set Size to 41 135
87004>>>        Set Location to 57 5
87005>>>        Set Label to "Options"
87006>>>        Set peAnchors to anTopLeftRight
87007>>>
87007>>>        Object oSuppresssBoxParameterCheckbox is a Checkbox
87009>>>            Set Size to 13 76
87010>>>            Set Location to 11 30
87011>>>            Set Label to "Suppresss Box"
87012>>>            Set psToolTip to "Suppress the Box Around the Label"
87013>>>            Set Status_Help to "Suppress the Box Around the Label"
87014>>>
87014>>>            Procedure OnChange
87017>>>                Boolean bSelected
87017>>>
87017>>>                Forward Send OnChange
87019>>>
87019>>>                Get Select_State to bSelected
87020>>>                Set Enabled_State of oFillColorForm to (not (bSelected))
87021>>>            End_Procedure
87022>>>        End_Object
87023>>>
87023>>>        Object oFillColorForm is a Form
87025>>>            Set Size to 12 100
87026>>>            Set Location to 23 30
87027>>>            Set Label_Col_Offset to 2
87028>>>            Set Label to "Color"
87029>>>            Set Label_Justification_Mode to JMode_Right
87030>>>            Set psToolTip to "Select a Gradient Color For the Label Background"
87031>>>            Set Prompt_Button_Mode to PB_PromptOn
87032>>>            Set Entry_State to False
87033>>>
87033>>>            Procedure Activating
87036>>>                Forward Send Activating
87038>>>
87038>>>                Set Value to "230,242,255"
87039>>>                Set Color to (RGB (230, 242, 255))
87040>>>            End_Procedure
87041>>>
87041>>>            Procedure Prompt
87044>>>                Integer rgbColor
87044>>>
87044>>>                Get SelectColor of oColorDialog to rgbColor
87045>>>                Set Color to rgbColor
87046>>>                Set Value to (SFormat ("%1,%2,%3", R_From_RGB (rgbColor), G_From_RGB (rgbColor), B_From_RGB (rgbColor)))
87047>>>            End_Procedure
87048>>>        End_Object
87049>>>    End_Object
87050>>>
87050>>>    Object oSortOrderGroup is a Group
87052>>>        Set Location to 100 5
87053>>>        Set Size to 37 135
87054>>>        Set Label to "Order By"
87055>>>        Set peAnchors to anTopLeftRight
87056>>>
87056>>>        Function SortField Returns String
87059>>>            String sFieldName
87059>>>            String[] sSortColumns
87060>>>            Integer iItem
87060>>>
87060>>>            Get Value Of oSortOnCombo To sFieldName
87061>>>            Get Combo_Item_Matching of oSortOnCombo sFieldName to iItem
87062>>>            Get psSortColumns of oSortOnCombo To sSortColumns
87063>>>
87063>>>            Function_Return sSortColumns[iItem]
87064>>>        End_Function
87065>>>
87065>>>        Function SortDirection Returns Integer
87068>>>            Boolean bChecked
87068>>>
87068>>>            Get Checked_State Of oSortDescending to bChecked
87069>>>            If (bChecked) Begin
87071>>>                Function_Return C_DRDescending
87072>>>            End
87072>>>>
87072>>>            Else Begin
87073>>>                Function_Return C_DRAscending
87074>>>            End
87074>>>>
87074>>>        End_Function
87075>>>
87075>>>        Object oSortOnCombo is a ComboForm
87077>>>            Set Location to 11 5
87078>>>            Set Size to 12 126
87079>>>            Set Combo_Sort_State to False
87080>>>            Set Entry_State 0 to False
87081>>>
87081>>>            Property String[] psSortColumns
87083>>>
87083>>>            Procedure Combo_Fill_List
87086>>>                String[] sSortColumns
87087>>>
87087>>>                Send Combo_Add_Item "Name"
87088>>>                Move "{Customer.Name}" to sSortColumns[0]
87089>>>
87089>>>                Send Combo_Add_Item "Zip"
87090>>>                Move "{Customer.Zip}" to sSortColumns[1]
87091>>>
87091>>>                Send Combo_Add_Item "State"
87092>>>                Move "{Customer.State}" to sSortColumns[2]
87093>>>
87093>>>                Send Combo_Add_Item "City"
87094>>>                Move "{Customer.City}" to sSortColumns[3]
87095>>>
87095>>>                Set psSortColumns to sSortColumns
87096>>>            End_Procedure
87097>>>        End_Object
87098>>>
87098>>>        Object oSortDescending is a Checkbox
87100>>>            Set Location to 25 5
87101>>>            Set Label to "Descending"
87102>>>        End_Object
87103>>>    End_Object
87104>>>
87104>>>    Object oDestinationGroup Is A RadioGroup
87106>>>        Set Label to "Output destination"
87107>>>        Set Location to 139 5
87108>>>        Set Size to 46 135
87109>>>        Set peAnchors to anTopLeftRight
87110>>>
87110>>>        Object oScreenRadio Is A Radio
87112>>>            Set Label to "Preview"
87113>>>            Set Size to 10 60
87114>>>            Set Location to 10 6
87115>>>            Set Status_Help to "Print the report to screen"
87116>>>        End_Object
87117>>>
87117>>>        Object oPrinterRadio Is A Radio
87119>>>            Set Label to "Printer"
87120>>>            Set Size to 10 60
87121>>>            Set Location to 22 6
87122>>>            Set Status_Help to "Prints the report to printer"
87123>>>        End_Object
87124>>>
87124>>>        Object oExportRadio Is A Radio
87126>>>            Set Label to "Export"
87127>>>            Set Size to 10 60
87128>>>            Set Location to 34 6
87129>>>            Set Status_Help to "Outputs the report to disk file (PDF, CSV, Image, HTML, Excel, RTF)"
87130>>>        End_Object
87131>>>
87131>>>        Procedure Notify_Select_State Integer iNewItem Integer iOldItem
87134>>>            Forward Send Notify_Select_State iNewItem iOldItem
87136>>>
87136>>>            Case Begin
87136>>>                Case (iNewItem = 0)
87138>>>                    Set Output_Device_Mode to PRINT_TO_WINDOW
87139>>>                    Case Break
87140>>>                Case (iNewItem = 1)
87143>>>                    Set Output_Device_Mode to PRINT_TO_PRINTER
87144>>>                    Case Break
87145>>>                Case (iNewItem = 2)
87148>>>                    Set Output_Device_Mode to PRINT_TO_FILE
87149>>>                    Case Break
87150>>>            Case End
87150>>>        End_Procedure
87151>>>    End_Object
87152>>>
87152>>>    Object oPrintButton Is A Button
87154>>>        Set Label to "&Print"
87155>>>        Set Status_Help to "Print the report"
87156>>>        Set Size to 14 50
87157>>>        Set Location to 187 29
87158>>>        Set Default_State to True
87159>>>        Set peAnchors to anBottomRight
87160>>>
87160>>>        Procedure OnClick
87163>>>            Send RunReport of oReport
87164>>>        End_Procedure
87165>>>    End_Object
87166>>>
87166>>>    Object oCancelButton Is A Button
87168>>>        Set Label to "&Cancel"
87169>>>        Set Size to 14 50
87170>>>        Set Location to 187 90
87171>>>        Set Status_Help to "Cancel this Panel"
87172>>>        Set peAnchors to anBottomRight
87173>>>
87173>>>        // This procedure closes the report view.
87173>>>        Procedure OnClick
87176>>>            Send Request_Cancel
87177>>>        End_Procedure
87178>>>    End_Object
87179>>>
87179>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancelButton
87180>>>    On_Key Key_Alt+Key_P Send KeyAction of oPrintButton
87181>>>
87181>>>    Set Location to 6 6
87182>>>    Set Size to 205 144
87183>>>
87183>>>    Object oColorDialog is a ColorDialog
87185>>>        Function SelectColor Returns Integer
87188>>>            Integer iRgbColor
87188>>>            Boolean bColorSelected
87188>>>
87188>>>            Get Show_Dialog to bColorSelected
87189>>>            If (bColorSelected) Begin
87191>>>                Get SelectedColor to iRgbColor
87192>>>            End
87192>>>>
87192>>>
87192>>>            Function_Return iRgbColor
87193>>>        End_Function
87194>>>    End_Object
87195>>>Cd_End_Object
87197>>>>
87197>        Use DataFlexReports\CustomerList.rv
Including file: DataFlexReports\CustomerList.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\CustomerList.rv)
87197>>>Use Windows.pkg
87197>>>Use DFRptVw.pkg
87197>>>Use Colr_dlg.pkg
87197>>>
87197>>>Use cDRReport.pkg
87197>>>Use cDRDesktopPreview.pkg
87197>>>Use DRStatuspanel.dg
87197>>>
87197>>>// Use the data-dictionary to include the selectionlist and open the customer table
87197>>>Use cCustomerDataDictionary.dd
87197>>>
87197>>>// This example produces a simple customer list. The report used (customerList.dr) is used for this view and for the drilldown
87197>>>// example view. In this view all drilldown capabilties of the report are disabled and all customers - within the selection range -
87197>>>// set by the operator are shown. The output panel used is a desktopview which means the Windows taskbar button now can switch
87197>>>// Between the order entry main panel and the report output.
87197>>>
87197>>>// Report sorting is different than in most other reports. Sorting is done via grouping and the selected "sort field" is used
87197>>>// to dynamically change the function that tells how to group.
87197>>>
87197>>>// The view contains a couple more nifty features such as:
87197>>>// - Settting the copies to 2
87197>>>// - Use a different canvas color
87197>>>// - How to use report parameters to hide fields and move/resize fields.
87197>>>
87197>>>// Note that the report definition of "customer list.dr" is different from the report definition of "CustomerList.dr" in
87197>>>// the weborder/webordermobile examples.
87197>>>
87197>>>Deferred_View Activate_oCustomerListReportView for ;Object oCustomerListReportView is a ReportView
87222>>>    Set Label to "List of Customers"
87223>>>    Set Icon to 'DR.Ico'
87224>>>
87224>>>    Object oReport is a cDRReport
87226>>>        Set pbShowStatusPanel to True
87227>>>        Set phoStatusPanel to oDRStatusPanel
87228>>>        Set pePreviewStyle to C_DRPREVIEW_DESKTOPVIEW
87229>>>        Set psReportName to "Customer List.DR"
87230>>>
87230>>>        Procedure OnInitializeReport
87233>>>            Integer eOutputDeviceMode
87233>>>
87233>>>            Forward Send OnInitializeReport
87235>>>
87235>>>            // Convert from the ReportView Output_Device_Mode to peOutputDestination
87235>>>            Get Output_Device_Mode to eOutputDeviceMode
87236>>>            Set peOutputDestination to eOutputDeviceMode
87237>>>
87237>>>            Send SetFilters
87238>>>            Send SetSortFields
87239>>>            Send SetHideOptions
87240>>>            Send SetDrillDown
87241>>>        End_Procedure
87242>>>
87242>>>        Procedure SetSortFields
87245>>>            String sReportId sSortField
87245>>>
87245>>>            Get psReportId to sReportId
87246>>>
87246>>>            Get SortField of oSortOrderGroup to sSortField
87247>>>            Set psFunction sReportId "GroupDataOn" to ("return" * sSortField)
87248>>>        End_Procedure
87249>>>
87249>>>        Procedure OnCreate
87252>>>            Forward Send OnCreate
87254>>>
87254>>>            Set piReportLanguage '' to LANG_NEUTRAL
87255>>>        End_Procedure
87256>>>
87256>>>        // Drilldown is a feature that is used in DrillDownCustomerList.rv and needs to be
87256>>>        // disabled in this report.
87256>>>        Procedure SetDrillDown
87259>>>            String sReportId
87259>>>            Integer iParameter
87259>>>
87259>>>            Get psReportId to sReportId
87260>>>            Get ParameterIdByName sReportId "DrillDown" to iParameter
87261>>>            Set psParameterValue sReportId iParameter to False
87262>>>        End_Procedure
87263>>>
87263>>>        // By hiding the phone number the report will show the fax number
87263>>>        // By hiding the phone and fax number the report will move the location of the e-mail object and resizes the object too
87263>>>        Procedure SetHideOptions
87266>>>            String sReportId
87266>>>            Integer eHideOption iParameter
87266>>>
87266>>>            Get psReportId to sReportId
87267>>>            Get HideOption of oHideOptionsCombo to eHideOption
87268>>>            Case Begin
87268>>>                Case (eHideOption = 0)
87270>>>                    Get ParameterIdByName sReportId "HidingPhone" to iParameter
87271>>>                    Set psParameterValue sReportId iParameter to True
87272>>>                    Get ParameterIdByName sReportId "HidingFax" to iParameter
87273>>>                    Set psParameterValue sReportId iParameter to False
87274>>>                    Case Break
87275>>>                Case (eHideOption = 1)
87278>>>                    Get ParameterIdByName sReportId "HidingPhone" to iParameter
87279>>>                    Set psParameterValue sReportId iParameter to False
87280>>>                    Get ParameterIdByName sReportId "HidingFax" to iParameter
87281>>>                    Set psParameterValue sReportId iParameter to True
87282>>>                    Case Break
87283>>>                Case (eHideOption = 2)
87286>>>                    Get ParameterIdByName sReportId "HidingPhone" to iParameter
87287>>>                    Set psParameterValue sReportId iParameter to True
87288>>>                    Get ParameterIdByName sReportId "HidingFax" to iParameter
87289>>>                    Set psParameterValue sReportId iParameter to True
87290>>>                    Case Break
87291>>>            Case End
87291>>>        End_Procedure
87292>>>
87292>>>        Procedure OnDisplayReport
87295>>>            Integer rgbColor
87295>>>
87295>>>            Forward Send OnDisplayReport
87297>>>
87297>>>            // Get the color selected by the user for the canvas
87297>>>            Get Color of oCanvasColorForm to rgbColor
87298>>>            Set piPreviewCanvasColor to rgbColor
87299>>>        End_Procedure
87300>>>
87300>>>        Procedure OnPrintReport Handle  ByRef hPrintDlg
87303>>>            Handle hoPrintDialog
87303>>>            PRINTPAGERANGE[] PageRanges
87303>>>            PRINTPAGERANGE[] PageRanges
87304>>>
87304>>>            Forward Send OnPrintReport (&hPrintDlg)
87306>>>
87306>>>            // Each cDRReport has a print dialog child object, access to the child object
87306>>>            // goes via the phoPrintDialog property
87306>>>            Get phoPrintDialog to hoPrintDialog
87307>>>
87307>>>            // Set the number of copies to 2. Note that while we set this, the default printer might
87307>>>            // not support setting copies and may ignore the value. For example; Microsoft XPS Document writer ignores
87307>>>            // the setting. To find out what your printer support or not download the device capabilities tool
87307>>>            // from www.dataacces.eu. The URL when writing this note was: https://www.dataaccess.eu/resources/downloads/download-category/download-subcategory-842?dagapsg=70
87307>>>            Set piCopies of hoPrintDialog to 2
87308>>>
87308>>>            // This allows a user to change the pages to be printed
87308>>>            Move 1 to PageRanges[0].nFromPage
87309>>>            Get ReportPageCount to PageRanges[0].nToPage
87310>>>            Set pPageRanges of hoPrintDialog to PageRanges
87311>>>            Set piFlags of hoPrintDialog to (PD_USEDEVMODECOPIES ior PD_DISABLEPRINTTOFILE ior PD_PAGENUMS ior PD_SELECTION)
87312>>>        End_Procedure
87313>>>
87313>>>        Procedure SetFilters
87316>>>            String sReportId
87316>>>            String sFilterValue
87316>>>            Integer[] iCustomerCustomerNumbers
87317>>>            String sCustomerState sColumnName
87317>>>
87317>>>            Get psReportId to sReportId
87318>>>
87318>>>            Get Value of oFromCustomerCustomerNumber to iCustomerCustomerNumbers[0]
87319>>>            Get Value of oToCustomerCustomerNumber to iCustomerCustomerNumbers[1]
87320>>>
87320>>>            // If the start number is higher than the ending number reverse the values
87320>>>            If (iCustomerCustomerNumbers[0] > iCustomerCustomerNumbers[1]) Begin
87322>>>                Move (ReverseArray (iCustomerCustomerNumbers)) to iCustomerCustomerNumbers
87323>>>            End
87323>>>>
87323>>>            If (iCustomerCustomerNumbers[0] <> 0) Begin
87325>>>                // The next line shows the use of the function ReportTableColumnName to create the column name
87325>>>                // the report instead of passing a fixed constant. Note that passing a constant is quicker.
87325>>>                Get ReportTableColumnName sReportId File_Field Customer.Customer_Number to sColumnName
87326>>>                Send AddFilter sReportId sColumnName C_DRGreaterThanOrEqual iCustomerCustomerNumbers[0]
87327>>>            End
87327>>>>
87327>>>            If (iCustomerCustomerNumbers[1] <> 0) Begin
87329>>>                Send AddFilter sReportId "{Customer.Customer_Number}" C_DRLessThanOrEqual iCustomerCustomerNumbers[1]
87330>>>            End
87330>>>>
87330>>>
87330>>>            Get Value of oCustomerState to sCustomerState
87331>>>            Move (Trim (sCustomerState)) to sCustomerState
87332>>>            If (sCustomerState <> "") Begin
87334>>>                Send AddFilter sReportId "{Customer.State}" C_DREqual sCustomerState
87335>>>            End
87335>>>>
87335>>>
87335>>>            // Collect the filterinformation and pass the information to the function named 'Filters' in the
87335>>>            // report. The filter conditions are printed at the end of the report
87335>>>            Get FilterInformation sReportId to sFilterValue
87336>>>            If (sFilterValue <> '') Begin
87338>>>                Set psFunction sReportId 'Filters' to ('return' * sFilterValue)
87339>>>            End
87339>>>>
87339>>>        End_Procedure
87340>>>    End_Object
87341>>>
87341>>>    Object oCustomerCustomerNumberGroup Is A Group
87343>>>        Set Label to "Customer Number"
87344>>>        Set Location to 5 5
87345>>>
87345>>>        Object oFromCustomerCustomerNumber Is A Form
87347>>>            Set Size to 13 79
87348>>>            Set Location to 10 66
87349>>>            Set Label_Justification_Mode to jMode_Right
87350>>>            Set Label_Col_Offset to 2
87351>>>            Set Label to "From:"
87352>>>            Set Status_Help to "First customer number in selection range."
87353>>>            Set Numeric_Mask 0 to 6 0
87354>>>            Set Prompt_Button_Mode to pb_PromptOn
87355>>>            Set Prompt_Object to Customer_sl
87356>>>
87356>>>            Procedure CopyPromptValue Handle hoPrompt
87359>>>                RowID[] riCustomer
87360>>>                Boolean bFound
87360>>>
87360>>>                Get SelectedRowIds of hoPrompt to riCustomer
87361>>>                Move (FindByRowID (Customer.File_Number, riCustomer[0])) to bFound
87362>>>                Set Value to Customer.Customer_Number
87363>>>            End_Procedure
87364>>>
87364>>>            // This procedure is called if peUpdateMode is not equal to umPromptNonInvoking, we use the
87364>>>            // SelectBestColumn function to retrieve the column for the passed file and field number. After retrieving
87364>>>            // the column we setup the list.
87364>>>            // NOTE: Make sure the selected column in the prompt object matches the data type of this form object
87364>>>            Procedure Prompt_CallBack Integer hoPrompt
87367>>>                Integer iColumn
87367>>>                Handle hoColumn
87367>>>                Boolean bIsVisible
87367>>>
87367>>>                Get SelectBestColumn Of hoPrompt File_Field Customer.Customer_Number to iColumn
87368>>>                If (iColumn <> -1) Begin
87370>>>                    Get ColumnObject of hoPrompt iColumn to hoColumn
87371>>>                    Get pbVisible of hoColumn to bIsVisible
87372>>>                    If (not (bIsVisible)) Begin
87374>>>                        Set piInitialColumn of hoPrompt to -2
87375>>>                    End
87375>>>>
87375>>>                    Set piUpdateColumn of hoPrompt to iColumn
87376>>>                    Set peUpdateMode of hoPrompt to umPromptValue
87377>>>                End
87377>>>>
87377>>>                Else Begin
87378>>>                    Set phmPromptUpdateCallback of hoPrompt to CopyPromptValue
87379>>>                    Set peUpdateMode of hoPrompt to -1
87380>>>                End
87380>>>>
87380>>>            End_Procedure
87381>>>        End_Object
87382>>>
87382>>>        Object oToCustomerCustomerNumber Is A Form
87384>>>            Set Size to 13 79
87385>>>            Set Location to 25 66
87386>>>            Set Label_Justification_Mode to jMode_Right
87387>>>            Set Label_Col_Offset to 2
87388>>>            Set Label to "To:"
87389>>>            Set Status_Help to "Last customer number in selection range."
87390>>>            Set Numeric_Mask 0 to 6 0
87391>>>            Set Prompt_Button_Mode to pb_PromptOn
87392>>>            Set Prompt_Object to Customer_sl
87393>>>
87393>>>            Procedure CopyPromptValue Handle hoPrompt
87396>>>                RowID[] riCustomer
87397>>>                Boolean bFound
87397>>>
87397>>>                Get SelectedRowIds of hoPrompt to riCustomer
87398>>>                Move (FindByRowID (Customer.File_Number, riCustomer[0])) to bFound
87399>>>                Set Value to Customer.Customer_Number
87400>>>            End_Procedure
87401>>>
87401>>>            // This procedure is called if peUpdateMode is not equal to umPromptNonInvoking, we use the
87401>>>            // SelectBestColumn function to retrieve the column for the passed file and field number. After retrieving
87401>>>            // the column we setup the list.
87401>>>            // NOTE: Make sure the selected column in the prompt object matches the data type of this form object
87401>>>            Procedure Prompt_CallBack Integer hoPrompt
87404>>>                Integer iColumn
87404>>>                Handle hoColumn
87404>>>                Boolean bIsVisible
87404>>>
87404>>>                Get SelectBestColumn Of hoPrompt File_Field Customer.Customer_Number to iColumn
87405>>>                If (iColumn <> -1) Begin
87407>>>                    Get ColumnObject of hoPrompt iColumn to hoColumn
87408>>>                    Get pbVisible of hoColumn to bIsVisible
87409>>>                    If (not (bIsVisible)) Begin
87411>>>                        Set piInitialColumn of hoPrompt to -2
87412>>>                    End
87412>>>>
87412>>>                    Set piUpdateColumn of hoPrompt to iColumn
87413>>>                    Set peUpdateMode of hoPrompt to umPromptValue
87414>>>                End
87414>>>>
87414>>>                Else Begin
87415>>>                    Set phmPromptUpdateCallback of hoPrompt to CopyPromptValue
87416>>>                    Set peUpdateMode of hoPrompt to -1
87417>>>                End
87417>>>>
87417>>>            End_Procedure
87418>>>        End_Object
87419>>>
87419>>>        Set Size to 45 150
87420>>>    End_Object
87421>>>
87421>>>    Object oCustomerStateGroup Is A Group
87423>>>        Set Label to "State"
87424>>>        Set Location to 52 5
87425>>>
87425>>>        Object oCustomerState is a ComboForm
87427>>>            Set Size to 12 79
87428>>>            Set Location to 11 66
87429>>>            Set Label_Justification_Mode to jMode_Right
87430>>>            Set Label_Col_Offset to 2
87431>>>            Set Label to "State:"
87432>>>            Set Status_Help to "Select the State to Filter on"
87433>>>            Set Form_Margin to 2
87434>>>
87434>>>            // This procedure is called for each value in the validation table, we simply add the supplied
87434>>>            // value to the combo list.
87434>>>            Procedure AddItem Integer iItem String sData String sDesc Integer iFile Integer iRec
87437>>>                Send Combo_Add_Item sData
87438>>>            End_Procedure
87439>>>
87439>>>            // This procedure is called when the combo list is to be filled. We use Request_Fill_From_List
87439>>>            // to instruct the validation table to send AddItem for each value in the validation table.
87439>>>            Procedure Combo_Fill_List
87442>>>                Send Request_Fill_From_List to Customer_State_VT Self (Refproc (AddItem))
87443>>>            End_Procedure
87444>>>        End_Object
87445>>>
87445>>>        Set Size to 27 150
87446>>>    End_Object
87447>>>
87447>>>    Object oSortOrderGroup is a Group
87449>>>        Set Location to 81 5
87450>>>        Set Size to 28 150
87451>>>        Set Label to "Order By"
87452>>>
87452>>>        Function SortField Returns String
87455>>>            String sFieldName
87455>>>            String[] sSortColumns
87456>>>            Integer iItem
87456>>>
87456>>>            Get Value of oSortOnCombo to sFieldName
87457>>>            Get Combo_Item_Matching of oSortOnCombo sFieldName to iItem
87458>>>            Get psSortColumns of oSortOnCombo to sSortColumns
87459>>>            
87459>>>            Function_Return sSortColumns[iItem]
87460>>>        End_Function
87461>>>
87461>>>        Object oSortOnCombo is a ComboForm
87463>>>            Set Location to 11 5
87464>>>            Set Size to 12 140
87465>>>            // Combo_Sort_State should not be set to true. If set it breaks the connection between the displayed name and the sort field
87465>>>            Set Combo_Sort_State to False
87466>>>            Set Entry_State to False
87467>>>
87467>>>            Property String[] psSortColumns
87469>>>
87469>>>            // Display a set with friendly names and store the DataFlex Reports column reference in a property
87469>>>            Procedure Combo_Fill_List
87472>>>                String[] sSortColumns
87473>>>
87473>>>                Send Combo_Add_Item "Customer_Number"
87474>>>                Move "{Customer.Customer_Number}" to sSortColumns[0]
87475>>>
87475>>>                Send Combo_Add_Item "Name"
87476>>>                Move "{Customer.Name}" to sSortColumns[1]
87477>>>
87477>>>                Set psSortColumns to sSortColumns
87478>>>            End_Procedure
87479>>>        End_Object
87480>>>    End_Object
87481>>>
87481>>>    Object oDestinationGroup Is A RadioGroup
87483>>>        Set Label to "Output destination"
87484>>>        Set Location to 111 5
87485>>>        Set Size to 46 77
87486>>>
87486>>>        Object oScreenRadio Is A Radio
87488>>>            Set Label to "Preview"
87489>>>            Set Size to 10 60
87490>>>            Set Location to 10 6
87491>>>            Set Status_Help to "Print the report to screen"
87492>>>        End_Object
87493>>>
87493>>>        Object oPrinterRadio Is A Radio
87495>>>            Set Label to "Printer"
87496>>>            Set Size to 10 60
87497>>>            Set Location to 22 6
87498>>>            Set Status_Help to "Prints the report to printer"
87499>>>        End_Object
87500>>>
87500>>>        Object oExportRadio Is A Radio
87502>>>            Set Label to "Export"
87503>>>            Set Size to 10 60
87504>>>            Set Location to 34 6
87505>>>            Set Status_Help to "Outputs the report to disk file (PDF, CSV, Image, HTML, Excel)"
87506>>>        End_Object
87507>>>
87507>>>        Procedure Notify_Select_State Integer iNewItem Integer iOldItem
87510>>>            Forward Send Notify_Select_State iNewItem iOldItem
87512>>>
87512>>>            Case Begin
87512>>>                Case (iNewItem = 0)
87514>>>                    Set Output_Device_Mode to PRINT_TO_WINDOW
87515>>>                    Case Break
87516>>>                Case (iNewItem = 1)
87519>>>                    Set Output_Device_Mode to PRINT_TO_PRINTER
87520>>>                    Case Break
87521>>>                Case (iNewItem = 2)
87524>>>                    Set Output_Device_Mode to PRINT_TO_FILE
87525>>>                    Case Break
87526>>>            Case End
87526>>>        End_Procedure
87527>>>    End_Object
87528>>>
87528>>>    Object oHideOptionsCombo is a ComboForm
87530>>>        Set Location to 117 90
87531>>>        Set Size to 12 58
87532>>>        Set Combo_Sort_State to False
87533>>>        Set Entry_State to False
87534>>>        Set peAnchors to anTopLeftRight
87535>>>        Set Label to "Hide"
87536>>>        Set Label_Justification_Mode to JMode_Top
87537>>>        Set Label_Col_Offset to 0
87538>>>        Set piMaxSize to 12 100
87539>>>        Set piMinSize to 12 50
87540>>>
87540>>>        Procedure Combo_Fill_List
87543>>>            Send Combo_Add_Item "Hide Phone"
87544>>>            Send Combo_Add_Item "Hide Fax"
87545>>>            Send Combo_Add_Item "Hide Phone & Fax"
87546>>>        End_Procedure
87547>>>
87547>>>        Function HideOption Returns Integer
87550>>>            String sValue
87550>>>            Integer eOption
87550>>>
87550>>>            Get Value to sValue
87551>>>            Get Combo_Item_Matching sValue to eOption
87552>>>
87552>>>            Function_Return eOption
87553>>>        End_Function
87554>>>    End_Object
87555>>>
87555>>>    Object oColorDialog is a ColorDialog
87557>>>    End_Object
87558>>>
87558>>>    Object oCanvasColorForm is a Form
87560>>>        Set Size to 12 58
87561>>>        Set Location to 141 90
87562>>>        Set Prompt_Button_Mode to PB_PromptOn
87563>>>        Set Entry_State to False
87564>>>        // For the DA Orange Color set the property to: (Rgb (230,71,18))
87564>>>        Set Color to clLtGray
87565>>>        Set Label to "Canvas Color"
87566>>>        Set Label_Justification_Mode to JMode_Top
87567>>>        Set Label_Col_Offset to 0
87568>>>        Set peAnchors to anTopLeftRight
87569>>>        Set piMaxSize to 12 100
87570>>>        Set piMinSize to 12 50
87571>>>
87571>>>        Procedure Prompt
87574>>>            Boolean bSelected
87574>>>            Integer rgbColor
87574>>>
87574>>>            Get Show_Dialog of oColorDialog to bSelected
87575>>>            If (bSelected) Begin
87577>>>                Get SelectedColor of oColorDialog to rgbColor
87578>>>                Set Color to rgbColor
87579>>>            End
87579>>>>
87579>>>        End_Procedure
87580>>>    End_Object
87581>>>
87581>>>    Object oPrintButton Is A Button
87583>>>        Set Label to "&Print"
87584>>>        Set Status_Help to "Print the report"
87585>>>        Set Size to 14 50
87586>>>        Set Location to 159 50
87587>>>        Set Default_State to True
87588>>>        Set peAnchors to anBottomRight
87589>>>
87589>>>        Procedure OnClick
87592>>>            Handle hoPrintDialog
87592>>>
87592>>>            Get phoPrintDialog of oReport to hoPrintDialog
87593>>>            Set piFlags of hoPrintDialog to PD_USEDEVMODECOPIES
87594>>>
87594>>>            Send RunReport of oReport
87595>>>        End_Procedure
87596>>>    End_Object
87597>>>
87597>>>    Object oCancelButton Is A Button
87599>>>        Set Label to "&Cancel"
87600>>>        Set Size to 14 50
87601>>>        Set Location to 159 105
87602>>>        Set Status_Help to "Cancel this Panel"
87603>>>        Set peAnchors to anBottomRight
87604>>>
87604>>>        // This procedure closes the report view.
87604>>>        Procedure OnClick
87607>>>            Send Request_Cancel
87608>>>        End_Procedure
87609>>>    End_Object
87610>>>
87610>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancelButton
87611>>>    On_Key Key_Escape Send KeyAction of oCancelButton
87612>>>    On_Key Key_Alt+Key_P Send KeyAction of oPrintButton
87613>>>
87613>>>    Set Location to 6 6
87614>>>    Set Size to 176 160
87615>>>Cd_End_Object
87617>>>>
87617>        Use DataFlexReports\DrillDownCustomerList.rv
Including file: DataFlexReports\DrillDownCustomerList.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\DrillDownCustomerList.rv)
87617>>>Use Windows.pkg
87617>>>Use DFRptVw.pkg
87617>>>Use File_Dlg.Pkg
87617>>>Use DfTabDlg.pkg
87617>>>Use cTextEdit.pkg
87617>>>Use cDRReport.pkg
87617>>>Use DRExportOptions.dg
87617>>>Use DRStatuspanel.dg
87617>>>Use cDRCommandBarSystem.pkg
87617>>>Use cDRMenuItem.pkg
87617>>>Use cDRZoomMenuItem.pkg
87617>>>Use cDRCurrentPageMenuItem.pkg
87617>>>Use cDRExportMenuItem.pkg
87617>>>Use cDRPrintMenuItem.pkg
87617>>>Use cDRFirstPageMenuItem.pkg
87617>>>Use cDRPreviousPageMenuItem.pkg
87617>>>Use cDRNextPageMenuItem.pkg
87617>>>Use cDRLastPageMenuItem.pkg
87617>>>Use cDRRefreshMenuItem.pkg
87617>>>Use DRStatuspanel.dg
87617>>>
87617>>>Use cCustomerDataDictionary.dd
87617>>>Use cCJCommandBarSystem.pkg
87617>>>
87617>>>// This is a complex example. When the view starts the customerlist produced by customer list.dr will be executed 
87617>>>// and the results are shown in a tab-page named "All". Since the "DrillDown" parameter of the report is set to 1 
87617>>>// the report shows the customer number, city and state values underlined to indicate the user can click on these 
87617>>>// values. When the user clicks on "customer number" a new tab-page is opened and a report named "customer orders.dr" 
87617>>>// will be executed filtering on the the clicked user. When the user clicks on "city" or "state" a new tab-page is 
87617>>>// opened filtering on the state or city value.
87617>>>
87617>>>// The example also shows how one can create and remove tab-pages on the fly and how one can create a floating
87617>>>// menu on the tab button of the tab-page, enabling the option when it is not tab 1.
87617>>>
87617>>>// The reports used are:
87617>>>// Customer List.dr
87617>>>// Customer Orders.dr
87617>>>
87617>>>// Customer list.dr can be used for this drilldown example but also for the list of customers view. The results of 
87617>>>// the report are different based on the parameter drilldown. There are different columns shown and the drill down 
87617>>>// usage hides the customer without orders
87617>>>
87617>>>Deferred_View Activate_oCustomerListDrillDownReportView for ;Object oCustomerListDrillDownReportView is a ReportView
87642>>>    Set Label to "CustomerList (Drill-Down)"
87643>>>    Set Output_Device_Mode to PRINT_TO_WINDOW
87644>>>    Set Border_Style to Border_Thick
87645>>>
87645>>>    Property Handle phoReport
87647>>>
87647>>>    Object oDRTabDialog is a dbTabDialog
87649>>>        Set Location to 5 5
87650>>>        Set Rotate_Mode to RM_Rotate
87651>>>        Set peAnchors to anAll
87652>>>
87652>>>        Object oTabFloatingMenu is a cCJContextMenu
87654>>>            Property Integer piTab
87656>>>            
87656>>>            Object oCloseMenuItem is a cCJMenuItem
87658>>>                Set psCaption to "Close"
87659>>>                Set psTooltip to "Close"
87660>>>                Set psImage to "ActionDelete.ico"
87661>>>                
87661>>>                Procedure OnExecute Variant vCommandBarControl
87664>>>                    Integer iTab
87664>>>                    
87664>>>                    Get piTab to iTab
87665>>>                    Send Delete_Tab_Item iTab
87666>>>                End_Procedure
87667>>>                
87667>>>                // Do not allow the first tab page to be closed
87667>>>                Function IsEnabled Returns Boolean
87670>>>                    Integer iTab
87670>>>                    
87670>>>                    Get piTab to iTab
87671>>>                    
87671>>>                    Function_Return (iTab > 0) 
87672>>>                End_Function
87673>>>            End_Object
87674>>>        End_Object
87675>>>        
87675>>>        Procedure Mouse_Down2 Integer iWindowNumber Integer iPosition
87678>>>            If (iWindowNumber > 0) Begin
87680>>>                Set piTab of oTabFloatingMenu to (iWindowNumber - 1)
87681>>>                Send Popup of oTabFloatingMenu
87682>>>            End
87682>>>>
87682>>>        End_Procedure
87683>>>
87683>>>        Object oResultsTabPage is a dbTabPage
87685>>>            Set Label to "All"
87686>>>
87686>>>            Object oCommandBars is a cDRCommandBarSystem
87688>>>                Object oDRToolBar is a cCJToolbar
87690>>>                    Set pbCloseable to False
87691>>>                    Set pbEnableDocking to False
87692>>>                    Set pbGripper to False
87693>>>                    Set peStretched to stStretch
87694>>>                    Set pbDockNextTo to False
87695>>>
87695>>>                    Object oFirstPage is a cDRFirstPageMenuItem
87697>>>                    End_Object
87698>>>
87698>>>                    Object oPreviousPage is a cDRPreviousPageMenuItem
87700>>>                    End_Object
87701>>>
87701>>>                    Object oCurrentPage is a cDRCurrentPageMenuItem
87703>>>                        Set peControlType to xtpControlEdit
87704>>>                    End_Object
87705>>>
87705>>>                    Object oNextPage is a cDRNextPageMenuItem
87707>>>                    End_Object
87708>>>
87708>>>                    Object oLastPage is a cDRLastPageMenuItem
87710>>>                    End_Object
87711>>>
87711>>>                    Object oRefresh is a cDRRefreshMenuItem
87713>>>                    End_Object
87714>>>
87714>>>                    Object oPrint is a cDRPrintMenuItem
87716>>>                        Set pbVisible to False
87717>>>                    End_Object
87718>>>
87718>>>                    Object oZoom is a cDRZoomMenuItem
87720>>>                    End_Object
87721>>>
87721>>>                    Object oExport is a cDRExportMenuItem
87723>>>                        Set phoExportOptionsDialog to (oDRExportOptionsDialog)
87724>>>                        Set pbVisible to False
87725>>>                    End_Object
87726>>>
87726>>>                    Object oHideCustomersWithoutOrdersMenuItem is a cCJMenuItem
87728>>>                        Set peControlType to xtpControlCheckBox
87729>>>                        Set psCaption to "Hide Customers"
87730>>>                        Set psToolTip to "Hide Customers Without Orders"
87731>>>                        
87731>>>                        // Is sent from the report to set the checkbox to the right initial value
87731>>>                        Procedure InitControl Boolean bHide
87734>>>                            Handle hoCheckbox
87734>>>                            
87734>>>                            Get CreateFirstProxyControl to hoCheckbox
87735>>>                            If (hoCheckbox <> 0) Begin
87737>>>                                Set ComChecked of hoCheckbox to bHide
87738>>>                                Send Destroy of hoCheckbox
87739>>>                            End
87739>>>>
87739>>>                        End_Procedure
87740>>>
87740>>>                        // When the user clicks the checkbox:
87740>>>                        // - Set the checked state to the opposite of what it is
87740>>>                        // - Pass this value to the report and refresh it to represent the change
87740>>>                        Procedure OnExecute Variant vCommandBarControl
87743>>>                            Handle hMessage hoClient hoCheckbox
87743>>>                            Boolean bChecked
87743>>>
87743>>>                            Get CreateProxyControl vCommandBarControl to hoCheckbox
87744>>>                            Get ComChecked of hoCheckbox to bChecked
87745>>>                            Move (not (bChecked)) to bChecked
87746>>>                            Set ComChecked of hoCheckbox to bChecked
87747>>>                            Send ChangeCustomerHiding of oReport bChecked
87748>>>                            Send Destroy of hoCheckbox
87749>>>                        End_Procedure
87750>>>                    End_Object
87751>>>                End_Object
87752>>>            End_Object
87753>>>
87753>>>            Object oReport is a cDRReport
87755>>>                Set pePreviewStyle to C_DRPREVIEW_EMBEDDED
87756>>>                Set phoReport to Self
87757>>>                Set Location to 21 5
87758>>>                Set Size to 250 485
87759>>>                Set peAnchors to anAll
87760>>>                Set pbShowStatusPanel to True
87761>>>                Set phoStatusPanel to oDRStatusPanel
87762>>>                Set psReportName to "Customer List.DR"
87763>>>
87763>>>                Procedure OnPageChanged Integer iPage
87766>>>                    Set psText of (oCurrentPage (oDRToolBar (oCommandBars))) to (String (iPage))
87767>>>                End_Procedure
87768>>>
87768>>>                Procedure OnZoomChanged Integer iFactor
87771>>>                    Set psText of (oZoom (oDRToolBar (oCommandBars))) to (String (iFactor) + "%")
87772>>>                End_Procedure
87773>>>
87773>>>                // Run the report immediately after the control has been created
87773>>>                Procedure OnCreate
87776>>>                    Forward Send OnCreate
87778>>>
87778>>>                    Send RunReport
87779>>>                End_Procedure
87780>>>                
87780>>>                // Will be send by the checkbox in the tool-bar to hide or un-hide the customers
87780>>>                Procedure ChangeCustomerHiding Boolean bHide
87783>>>                    String sReportId
87783>>>                    Integer iParameter
87783>>>                    
87783>>>                    Get psReportId to sReportId
87784>>>                    Get ParameterIdByName sReportId "HideCustomersWithoutOrders" to iParameter
87785>>>                    Set psParameterValue sReportId iParameter to bHide
87786>>>                    
87786>>>                    Send RefreshReport
87787>>>                End_Procedure
87788>>>
87788>>>                Procedure OnInitializeReport
87791>>>                    String sReportId
87791>>>                    Integer iParameter
87791>>>                    Boolean bHide
87791>>>
87791>>>                    Forward Send OnInitializeReport
87793>>>
87793>>>                    Get psReportId to sReportId
87794>>>                    
87794>>>                    // Setup this report for a drilldown operation
87794>>>                    Get ParameterIdByName sReportId "DrillDown" to iParameter
87795>>>                    Set psParameterValue sReportId iParameter to True
87796>>>
87796>>>                    // Make sure the report does initially does not show customers without orders.
87796>>>                    // Show the choice in the toolbar
87796>>>                    Get ParameterIdByName sReportId "HideCustomersWithoutOrders" to iParameter
87797>>>                    Set psParameterValue sReportId iParameter to True
87798>>>                    Get psParameterValue sReportId iParameter to bHide
87799>>>                    Send InitControl of (oHideCustomersWithoutOrdersMenuItem (oDRToolBar (oCommandBars))) bHide
87800>>>                End_Procedure
87801>>>
87801>>>                Procedure OnReportPreviewClick C_DRHitTests iPos Integer iSectionId String sObject String sValue
87804>>>                    Forward Send OnReportPreviewClick iPos iSectionId sObject sValue
87806>>>
87806>>>                    Case Begin
87806>>>                        Case (iSectionId = 31)
87808>>>                            Case Begin
87808>>>                                Case (sObject = "Customer.Customer_Number")
87810>>>                                    Send DrillDownToCustomer sValue
87811>>>                                    Case Break
87812>>>                                Case (sObject = "Customer.City")
87815>>>                                    Send CreateNewCustomerReport sObject sValue
87816>>>                                    Case Break
87817>>>                                Case (sObject = "Customer.State")
87820>>>                                    Send CreateNewCustomerReport sObject sValue
87821>>>                                    Case Break
87822>>>                            Case End
87822>>>                            Case Break
87823>>>                    Case End
87823>>>                End_Procedure
87824>>>            End_Object
87825>>>        End_Object
87826>>>
87826>>>        Procedure CloseTabPage
87829>>>            Integer iTab
87829>>>
87829>>>            Get Current_Tab to iTab
87830>>>            If (iTab > 0) Begin
87832>>>                Send Delete_Tab_Item iTab
87833>>>            End
87833>>>>
87833>>>        End_Procedure
87834>>>
87834>>>        Function AppendReportTabPage String sTabLabel Handle ByRef hoReport Returns Handle
87837>>>            Handle hoTabPage hoButton
87837>>>            Integer iCurrentTab iTabPageSize iTabItem iTabPageWidth iTabPageHeight
87837>>>
87837>>>            Get Current_Tab to iCurrentTab
87838>>>            Get Tab_Page_Id iCurrentTab to hoTabPage
87839>>>            Get Size of hoTabPage to iTabPageSize
87840>>>            Move (Hi (iTabPageSize)) to iTabPageHeight
87841>>>            Move (Low (iTabPageSize)) to iTabPageWidth
87842>>>
87842>>>            Get Create (RefClass (dbTabPage)) to hoTabPage
87843>>>            Set Label of hoTabPage to sTabLabel
87844>>>            Send Auto_Page hoTabPage
87845>>>
87845>>>            Get Create of hoTabPage (RefClass (cDRReport)) to hoReport
87846>>>            Set peAnchors of hoReport to anAll
87847>>>            Set pePreviewStyle of hoReport to C_DRPREVIEW_EMBEDDED
87848>>>
87848>>>            Get Create of hoTabPage (RefClass (Button)) to hoButton
87849>>>            Set peAnchors of hoButton to anBottomRight
87850>>>            Set Label of hoButton to "Close"
87851>>>            Set Message of hoButton 0 to (RefProc (CloseTabPage))
87852>>>
87852>>>            Set Location of hoReport to 5 5
87853>>>            Set Size of hoReport to (iTabPageHeight - 30) (iTabPageWidth - 10)
87854>>>            Set Location of hoButton to (iTabPageHeight - 20) (iTabPageWidth - 55)
87855>>>
87855>>>            Get Tab_Button_Item of hoTabPage to iTabItem
87856>>>            Send Request_Switch_To_Tab iTabItem 3
87857>>>
87857>>>            Move hoTabPage to Self
87858>>>            On_Key Key_Escape Send CloseTabPage
87859>>>
87859>>>            Function_Return hoTabPage
87860>>>        End_Function
87861>>>
87861>>>        Procedure CreateNewCustomerReport String sObject String sValue
87864>>>            Handle hoTabPage hoReport
87864>>>            String sReportId
87864>>>            Integer iParameter
87864>>>
87864>>>            Get AppendReportTabPage sValue (&hoReport) to hoTabPage
87865>>>            Set Tab_ToolTip_Value of hoTabPage to ("Customers in" * sValue)
87866>>>
87866>>>            // Load and show the report
87866>>>            Set psReportName of hoReport to "Customer List.DR"
87867>>>            Get OpenReport of hoReport to sReportId
87868>>>            If (sReportId <> "") Begin
87870>>>                Set piReportLanguage of hoReport '' to LANG_NEUTRAL
87871>>>                Get ParameterIdByName of hoReport sReportId "DrillDown" to iParameter
87872>>>                Set psParameterValue of hoReport sReportId iParameter to False
87873>>>                Get ParameterIdByName of hoReport sReportId "HideCustomersWithoutOrders" to iParameter
87874>>>                Set psParameterValue of hoReport sReportId iParameter to 1
87875>>>                Send AddFilter of hoReport sReportId ("{" - sObject - '}') C_DREqual sValue
87876>>>                Send DisplayReport of hoReport
87877>>>            End
87877>>>>
87877>>>        End_Procedure
87878>>>
87878>>>        Procedure DrillDownToCustomer Integer iCustomerNumber
87881>>>            Handle hoTabPage hoReport
87881>>>            String sReportId sName
87881>>>            Integer iParameter
87881>>>
87881>>>            Clear Customer
87882>>>            Move iCustomerNumber to Customer.Customer_Number
87883>>>            Find Eq Customer by 1
87884>>>>
87884>>>            Move (Trim (Customer.Name)) to sName
87885>>>
87885>>>            Get AppendReportTabPage (sName * "Orders") (&hoReport) to hoTabPage
87886>>>            Set Tab_ToolTip_Value of hoTabPage to ("Orders for:" * sName)
87887>>>
87887>>>            // Load and show the report
87887>>>            Set psReportName of hoReport to "Customer Orders.DR"
87888>>>            Get OpenReport of hoReport to sReportId
87889>>>            If (sReportId <> "") Begin
87891>>>                Set piReportLanguage of hoReport '' to LANG_NEUTRAL
87892>>>                Get ParameterIdByName of hoReport sReportId "CustomerName" to iParameter
87893>>>                Set psParameterValue of hoReport sReportId iParameter to sName
87894>>>                Send AddFilter of hoReport sReportId "{Orderheader.Customer_Number}" C_DREqual iCustomerNumber
87895>>>                Send DisplayReport of hoReport
87896>>>            End
87896>>>>
87896>>>        End_Procedure
87897>>>
87897>>>        Set Size to 290 500
87898>>>    End_Object
87899>>>
87899>>>    Set Location to 6 6
87900>>>    Set Size to 300 511
87901>>>    Set piMinSize to 300 350
87902>>>Cd_End_Object
87904>>>>
87904>        Use DataFlexReports\InventoryReportView.rv
Including file: DataFlexReports\InventoryReportView.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\InventoryReportView.rv)
87904>>>Use Windows.pkg
87904>>>Use DFClient.pkg
87904>>>Use cDRReport.pkg
87904>>>Use cDRPreview.pkg
87904>>>
87904>>>Use cInventoryDataDictionary.dd
87904>>>
87904>>>// Include these views first as we need their access method and object name
87904>>>Use Inventory.vw
87904>>>Use Vendor.vw
87904>>>
87904>>>// This example shows how you can subclass the predefined MDI preview container and use it in dynamic way. This means
87904>>>// each time the report needs to run it uses its own view and the results can be visually compared. Alternatively to
87904>>>// this one can subclass the preview container class and simply assign the class handle to the phcPreviewer property
87904>>>// of a cDRReport object.
87904>>>
87904>>>// The report itself is defined to be used in a view with a OnReportPreviewClick event. The font of the item id and 
87904>>>// the vendor part id in the details section are underlined to indicate a click can be done there. The details
87904>>>// section id equals the vendor id value. The code below makes it possible to open either the inventory or the
87904>>>// vendor view and find a row in the view.
87904>>>
87904>>>Class cInventoryDRReport is a cDRReport
87905>>>    Procedure OnReportPreviewClick C_DRHitTests iPos Integer iSectionId String sObject String sValue
87907>>>        Handle hoServer
87907>>>        
87907>>>        // The only section in the report with a section id is the details section. Its ID is the vendor id value
87907>>>        If (iSectionId > 0) Begin
87909>>>            Case Begin
87909>>>                Case (sObject = 'Inventory.Item_ID')
87911>>>                    Send Activate_oInventoryView
87912>>>                    Get Server of oInventoryView to hoServer
87913>>>                    Send Clear of hoServer
87914>>>                    Set Field_Current_Value of hoServer Field Inventory.Item_ID to sValue
87915>>>                    Send File_Field_AutoFind of hoServer File_Field Inventory.Item_ID Eq
87916>>>                    Case Break
87917>>>                Case (sObject = 'Inventory.Vendor_Part_ID')
87920>>>                    Send Activate_oVendorView
87921>>>                    Get Server of oVendorView to hoServer
87922>>>                    Send Clear of hoServer
87923>>>                    Set Field_Current_Value of hoServer Field Vendor.ID to iSectionId
87924>>>                    Send File_Field_AutoFind of hoServer File_Field Vendor.ID Eq
87925>>>                    Case Break
87926>>>            Case End
87926>>>        End
87926>>>>
87926>>>    End_Procedure
87927>>>End_Class
87928>>>
87928>>>Class cInventoryReportResultsView is a cDRPreview
87929>>>    Procedure Construct_Object
87931>>>        Forward Send Construct_Object
87933>>>
87933>>>        Object oDRReport is a cInventoryDRReport
87935>>>            Delegate Set phoReport to Self
87937>>>            Set psReportName to "InventoryOverview.dr"
87938>>>            Set pePreviewStyle to C_DRPREVIEW_EMBEDDED
87939>>>        End_Object
87940>>>    End_Procedure
87941>>>
87941>>>    Procedure RunReport Number[] nUnitPrices
87943>>>        String sReportId
87943>>>        Integer iParameterId
87943>>>
87943>>>        Get OpenReport of oDRReport to sReportId
87944>>>        If (sReportId <> "") Begin
87946>>>            Set piReportLanguage of oDRReport '' to LANG_NEUTRAL
87947>>>            Send RemoveAllFilters of oDRReport sReportId
87948>>>            Set Label to (SFormat ("Inventory prices from %1 to %2", nUnitPrices[0], nUnitPrices[1]))
87949>>>            Send AddFilter of oDRReport sReportId "{Inventory.Unit_Price}" C_drGreaterThanOrEqual nUnitPrices[0]
87950>>>            Send AddFilter of oDRReport sReportId "{Inventory.Unit_Price}" C_drLessThanOrEqual nUnitPrices[1]
87951>>>            Get ParameterIdByName of oDRReport sReportId "ShowHyperlinkSimulation" to iParameterId
87952>>>            Set psParameterValue of oDRReport sReportId iParameterId to 1
87953>>>            Send DisplayReport of oDRReport
87954>>>        End
87954>>>>
87954>>>    End_Procedure
87955>>>End_Class
87956>>>
87956>>>Deferred_View Activate_oInventoryReportView for ;Object oInventoryReportView is a ReportView
87981>>>    Set Size to 59 166
87982>>>    Set Location to 2 2
87983>>>    Set Label to "Inventory Report"
87984>>>    Set Icon to 'DR.Ico'
87985>>>
87985>>>    // Holds the handles of the dynamically created views
87985>>>    Property Handle[] phoResultViews
87987>>>
87987>>>    Object oInventory_DD is a cInventoryDataDictionary
87989>>>    End_Object
87990>>>
87990>>>    Object oUnitPriceGroup is a Group
87992>>>        Set Size to 33 155
87993>>>        Set Location to 5 5
87994>>>        Set Label to 'Unit Price'
87995>>>
87995>>>        // During activation of the group find out what the minimum and maximum price of the articles
87995>>>        // are. Shouldn't be used when the inventory table has thousands of articles
87995>>>        Procedure Activating
87998>>>            Number nMaxUnitPrice nMinUnitPrice
87998>>>            
87998>>>            Forward Send Activating
88000>>>
88000>>>            // Init the variables so that MAX and MIN below can do their work
88000>>>            Move 999999 to nMinUnitPrice
88001>>>            Move 0 to nMaxUnitPrice
88002>>>
88002>>>            Send Request_Read of oInventory_DD FIRST_RECORD Inventory.File_Number 1
88003>>>            While (Found)
88007>>>                Move (Inventory.Unit_Price max nMaxUnitPrice) to nMaxUnitPrice
88008>>>                Move (Inventory.Unit_Price min nMinUnitPrice) to nMinUnitPrice
88009>>>                Send Locate_Next of oInventory_DD
88010>>>            Loop
88011>>>>
88011>>>
88011>>>            Set Value of oFromUnitPriceForm to nMinUnitPrice
88012>>>            Set Value of oToUnitPriceForm to nMaxUnitPrice
88013>>>        End_Procedure
88014>>>
88014>>>        Object oFromUnitPriceForm is a Form
88016>>>            Set Size to 13 50
88017>>>            Set Location to 11 29
88018>>>            Set Form_Datatype to Mask_Numeric_Window
88019>>>            Set Numeric_Mask 0 to 6 2
88020>>>            Set Label to "From:"
88021>>>            Set Label_Col_Offset to 2
88022>>>            Set Label_Justification_Mode to JMode_Right
88023>>>        End_Object
88024>>>
88024>>>        Object oToUnitPriceForm is a Form
88026>>>            Set Size to 13 50
88027>>>            Set Location to 11 97
88028>>>            Set Form_Datatype to Mask_Numeric_Window
88029>>>            Set Numeric_Mask 0 to 6 2
88030>>>            Set Label to "To:"
88031>>>            Set Label_Col_Offset to 2
88032>>>            Set Label_Justification_Mode to JMode_Right
88033>>>        End_Object
88034>>>    End_Object
88035>>>
88035>>>    Object oRunReportButton is a Button
88037>>>        Set Location to 40 110
88038>>>        Set Label to 'Run Report'
88039>>>        Set peAnchors to anBottomRight
88040>>>
88040>>>        // On each execution create a new preview window with report object.
88040>>>        Procedure OnClick
88043>>>            Handle hoClient hoResultsView
88043>>>            Handle[] hoResultViews
88044>>>            Number[2] nUnitPrices
88045>>>
88045>>>            Get phoResultViews to hoResultViews
88046>>>
88046>>>            Get Client_Id to hoClient
88047>>>            Get Create of hoClient (RefClass (cInventoryReportResultsView)) to hoResultsView
88048>>>            Move hoResultsView to hoResultViews[SizeOfArray (hoResultViews)]
88049>>>            Set phoResultViews to hoResultViews
88050>>>
88050>>>            Get Value of oFromUnitPriceForm to nUnitPrices[0]
88051>>>            Get Value of oToUnitPriceForm to nUnitPrices[1]
88052>>>            Send Activate_View of hoResultsView
88053>>>            Send RunReport of hoResultsView nUnitPrices
88054>>>        End_Procedure
88055>>>    End_Object
88056>>>
88056>>>    // Cleanup the list of dynamically created result views.
88056>>>    Procedure Close_Panel
88059>>>        Handle[] hoResultViews
88060>>>        Integer iElements iElement
88060>>>
88060>>>        Get phoResultViews to hoResultViews
88061>>>        Move (SizeOfArray (hoResultViews) - 1) to iElements
88062>>>        For iElement from 0 to iElements
88068>>>>
88068>>>            Send Close_Panel of hoResultViews[iElement]
88069>>>            Send Destroy of hoResultViews[iElement]
88070>>>        Loop
88071>>>>
88071>>>        Move (ResizeArray (hoResultViews, 0)) to hoResultViews
88072>>>        Set phoResultViews to hoResultViews
88073>>>
88073>>>        Forward Send Close_Panel
88075>>>    End_Procedure
88076>>>
88076>>>    On_Key Key_Escape Send Close_Panel
88077>>>Cd_End_Object
88079>>>>
88079>        Use DataFlexReports\TableUsage.rv
Including file: DataFlexReports\TableUsage.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\TableUsage.rv)
88079>>>Use Windows.pkg
88079>>>Use DFRptVw.pkg
88079>>>Use cDRReport.pkg
88079>>>Use DRExportOptions.dg
88079>>>Use DRStatuspanel.dg
88079>>>Use cDRCommandBarSystem.pkg
88079>>>Use cDRMenuItem.pkg
88079>>>Use cDRZoomMenuItem.pkg
88079>>>Use cDRCurrentPageMenuItem.pkg
88079>>>Use cDRExportMenuItem.pkg
88079>>>Use cDRPrintMenuItem.pkg
88079>>>Use cDRFirstPageMenuItem.pkg
88079>>>Use cDRPreviousPageMenuItem.pkg
88079>>>Use cDRNextPageMenuItem.pkg
88079>>>Use cDRLastPageMenuItem.pkg
88079>>>Use cDRRefreshMenuItem.pkg
88079>>>
88079>>>// This is an example that shows how RDS (Runtime Data Source) can be used to make a report that cannot be produced
88079>>>// directly as the data does not come from a database; the data displayed by the report comes from the filelist and
88079>>>// from the tables in the workspace.
88079>>>
88079>>>// As an extra; when the table use information is collected for the report it is exported as JSON data to disk so 
88079>>>// that the collected data can be used as test data for the report from the DataFlex Reports Studio
88079>>>
88079>>>Deferred_View Activate_oTableUsageReportView for ;Object oTableUsageReportView is a ReportView
88104>>>    Set Location to 6 6
88105>>>    Set Size to 317 511
88106>>>    Set Label to "Table Usage"
88107>>>    Set Output_Device_Mode to PRINT_TO_WINDOW
88108>>>    Set Border_Style to Border_Thick
88109>>>    Set Icon to "DR.Ico"
88110>>>
88110>>>    Property Handle phoReport
88112>>>
88112>>>    Object oCommandBars is a cDRCommandBarSystem
88114>>>        Object oDRToolBar is a cCJToolbar
88116>>>            Set pbCloseable to False
88117>>>            Set pbEnableDocking to False
88118>>>            Set pbGripper to False
88119>>>            Set peStretched to stStretch
88120>>>            Set pbDockNextTo to False
88121>>>
88121>>>            Object oFirstPage is a cDRFirstPageMenuItem
88123>>>            End_Object
88124>>>
88124>>>            Object oPreviousPage is a cDRPreviousPageMenuItem
88126>>>            End_Object
88127>>>
88127>>>            Object oCurrentPage is a cDRCurrentPageMenuItem
88129>>>                Set peControlType to xtpControlEdit
88130>>>            End_Object
88131>>>
88131>>>            Object oNextPage is a cDRNextPageMenuItem
88133>>>            End_Object
88134>>>
88134>>>            Object oLastPage is a cDRLastPageMenuItem
88136>>>            End_Object
88137>>>
88137>>>            Object oRefresh is a cDRRefreshMenuItem
88139>>>            End_Object
88140>>>
88140>>>            Object oPrint is a cDRPrintMenuItem
88142>>>            End_Object
88143>>>
88143>>>            Object oZoom is a cDRZoomMenuItem
88145>>>            End_Object
88146>>>
88146>>>            Object oExport is a cDRExportMenuItem
88148>>>                Set phoExportOptionsDialog to (oDRExportOptionsDialog)
88149>>>            End_Object
88150>>>        End_Object
88151>>>    End_Object
88152>>>
88152>>>    Object oReport is a cDRReport
88154>>>        Set pePreviewStyle to C_DRPREVIEW_EMBEDDED
88155>>>        Set phoReport to Self
88156>>>        Set Location to 21 5
88157>>>        Set Size to 290 498
88158>>>        Set peAnchors to anAll
88159>>>        Set pbShowStatusPanel to True
88160>>>        Set phoStatusPanel to oDRStatusPanel
88161>>>        Set psReportName to "Table Usage.dr"
88162>>>
88162>>>        Procedure OnPageChanged Integer iPage
88165>>>            Set psText of (oCurrentPage (oDRToolBar (oCommandBars))) to (String (iPage))
88166>>>        End_Procedure
88167>>>
88167>>>        Procedure OnZoomChanged Integer iFactor
88170>>>            Set psText of (oZoom (oDRToolBar (oCommandBars))) to (String (iFactor) + "%")
88171>>>        End_Procedure
88172>>>
88172>>>        Procedure OnInitializeReport
88175>>>            String sReportId
88175>>>            Integer eOutputDeviceMode
88175>>>
88175>>>            Forward Send OnInitializeReport
88177>>>
88177>>>            // Convert from the ReportView Output_Device_Mode to peOutputDestination
88177>>>            Get Output_Device_Mode to eOutputDeviceMode
88178>>>            Set peOutputDestination to eOutputDeviceMode
88179>>>
88179>>>            Get psReportId to sReportId
88180>>>
88180>>>            Send LoadRDSData sReportId -1 0
88181>>>        End_Procedure
88182>>>
88182>>>        // This method will be called once for the main report and once per sub-report
88182>>>        // at each level of sub-reports.
88182>>>        // The iSibling parameter contains the N-th sub-report at the same level. If the
88182>>>        // value equals to -1 it means the main report.
88182>>>        // The iLevel parameter contains the depth of sub-report nestings. For a sub-report
88182>>>        // in a main report the value will be 1 and a sub-report of a sub-report makes it 2.
88182>>>        Procedure LoadRDSData String sReportId Integer iSibling Integer iLevel
88185>>>            Variant[][] vData
88186>>>            Integer iElements iElement iSubReports iSubReport iChannel
88186>>>            tDRTableName[] ReportTableNames
88186>>>            tDRTableName[] ReportTableNames
88187>>>            String sSubReportId sFolder sFileName
88187>>>            UChar[] ucTableData
88188>>>
88188>>>            Get RDSTableNames sReportId to ReportTableNames
88189>>>            Move (SizeOfArray (ReportTableNames)) to iElements
88190>>>            If (iElements > 0) Begin
88192>>>                Decrement iElements
88193>>>                For iElement from 0 to iElements
88199>>>>
88199>>>                    Get AddRDSData ReportTableNames[iElement].sTableName iSibling iLevel to vData
88200>>>                    Send TableData sReportId ReportTableNames[iElement].iTable vData
88201>>>                    Get ConvertTableDataToJsonSampleData vData to ucTableData
88202>>>                    If (SizeOfArray (ucTableData) > 0) Begin
88204>>>                        Move (Seq_New_Channel ()) to iChannel
88205>>>                        If (iChannel >= 0) Begin
88207>>>                            Get ReportsCacheFolder to sFolder
88208>>>                            Move (sFolder - ReportTableNames[iElement].sTableName - '.json') to sFileName
88209>>>                            Direct_Output channel iChannel sFileName
88211>>>                            Write channel iChannel ucTableData
88213>>>                            Close_Output channel iChannel
88215>>>                            Send Seq_Release_Channel iChannel
88216>>>                        End
88216>>>>
88216>>>                    End
88216>>>>
88216>>>                Loop
88217>>>>
88217>>>            End
88217>>>>
88217>>>
88217>>>            Get SubReportCount sReportId to iSubReports
88218>>>            If (iSubReports > 0) Begin
88220>>>                Decrement iSubReports
88221>>>                For iSubReport from 0 to iSubReports
88227>>>>
88227>>>                    Get SubReportId sReportId iSubReport to sSubReportId
88228>>>                    Send LoadRDSData sSubReportId iSubReport (iLevel + 1)
88229>>>                Loop
88230>>>>
88230>>>            End
88230>>>>
88230>>>        End_Procedure
88231>>>        
88231>>>        // Note: The Runtime DataSource row will be rejected if:
88231>>>        // 1: The number of elements in the 2nd dimension does not match with the row layout
88231>>>        // 2: The data-type of any element in the 2nd dimension does not match, cannot be
88231>>>        //    converted to the data-type defined in the row layout. For example: A zero date
88231>>>        //    in a date or datetime column is invalid!
88231>>>        Function AddRDSData String sTableName Integer iSibling Integer iLevel Returns Variant[][]
88234>>>            Variant[][] vData
88235>>>            Integer iRow
88235>>>            Handle hTable
88235>>>            Boolean bOpenedBefore bOpened
88235>>>
88235>>>            Move 0 to iRow
88236>>>            
88236>>>            Case Begin
88236>>>                Case (iSibling = -1 and iLevel = 0 and sTableName = "DataUse")
88238>>>                    Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
88241>>>                    While (hTable > 0)
88245>>>                        Get_Attribute DF_FILE_OPENED of hTable to bOpened
88248>>>                        Move bOpened to bOpenedBefore
88249>>>                        If (not (bOpened)) Begin
88251>>>                            Open hTable
88253>>>                            Get_Attribute DF_FILE_OPENED of hTable to bOpened
88256>>>                        End
88256>>>>
88256>>>                        If (bOpened) Begin
88258>>>                            Move hTable to vData[iRow][0]
88259>>>                            Get_Attribute DF_FILE_LOGICAL_NAME of hTable to vData[iRow][1]
88262>>>                            Get_Attribute DF_FILE_RECORDS_USED of hTable to vData[iRow][2]
88265>>>                            If (not (bOpenedBefore)) Begin
88267>>>                                Close hTable
88268>>>                            End
88268>>>>
88268>>>                            Increment iRow
88269>>>                        End
88269>>>>
88269>>>                        Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
88272>>>                    Loop
88273>>>>
88273>>>                    Case Break
88274>>>            Case End
88274>>>
88274>>>            Function_Return vData
88275>>>        End_Function
88276>>>    End_Object
88277>>>    
88277>>>    Procedure OnEnterArea Handle hoFrom
88280>>>        Forward Send OnEnterArea
88282>>>        
88282>>>        Send RunReport of oReport
88283>>>    End_Procedure
88284>>>
88284>>>    On_Key Key_Escape Send Close_Panel
88285>>>Cd_End_Object
88287>>>>
88287>        Use DataFlexReports\ReportInfo.vw
Including file: DataFlexReports\ReportInfo.vw    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\ReportInfo.vw)
88287>>>Use Windows.pkg
88287>>>Use DFClient.pkg
88287>>>Use File_dlg.pkg
88287>>>Use Dftreevw.pkg
88287>>>Use cDRReport.pkg
88287>>>
88287>>>Deferred_View Activate_oReportInfoView for ;Object oReportInfoView is a dbView
88312>>>    Set Border_Style to Border_Thick
88313>>>    Set Size to 200 350
88314>>>    Set Location to 4 3
88315>>>    Set Label to "Report Info"
88316>>>    Set piMaxSize to 400 500
88317>>>    Set piMinSize to 200 350
88318>>>
88318>>>    Object oReportFileNameForm is a Form
88320>>>        Set Size to 13 242
88321>>>        Set Location to 5 50
88322>>>        Set Prompt_Button_Mode to PB_PromptOn
88323>>>        Set Label_Col_Offset to 2
88324>>>        Set Label to "Filename:"
88325>>>        Set Label_Justification_Mode to JMode_Right
88326>>>        Set psToolTip to "Report File Name"
88327>>>        Set peAnchors to anTopLeftRight
88328>>>
88328>>>        Procedure Prompt
88331>>>            Boolean bSelected
88331>>>            String sFileName
88331>>>
88331>>>            Get Show_Dialog of oReportSelectorDialog to bSelected
88332>>>            If (bSelected) Begin
88334>>>                Get File_Name of oReportSelectorDialog to sFileName
88335>>>                Set Value to sFileName
88336>>>            End
88336>>>>
88336>>>        End_Procedure
88337>>>    End_Object
88338>>>
88338>>>    Object oReportSelectorDialog is a OpenDialog
88340>>>        Set Filter_String to "DataFlex Reports|*.dr|All Files|*.*"
88341>>>        Set Dialog_Caption to "Select a DataFlex Reports Report"
88342>>>    End_Object
88343>>>
88343>>>    Object oResults is a TreeView
88345>>>        Set Size to 174 334
88346>>>        Set Location to 20 9
88347>>>        Set peAnchors to anAll
88348>>>
88348>>>        Procedure OnCreateTree
88351>>>            Handle hVoid
88351>>>
88351>>>            Get AddTreeItem 'Select a Report for Information' 0 0 0 0 to hVoid
88352>>>        End_Procedure
88353>>>    End_Object
88354>>>
88354>>>    Object oReport is a cDRReport
88356>>>        Procedure ShowInfo
88359>>>            String sFileName sReportId
88359>>>            Handle hReportItem
88359>>>
88359>>>            Get Value of oReportFileNameForm to sFileName
88360>>>            If (sFileName <> "") Begin
88362>>>                Set psReportName to sFileName
88363>>>                Get OpenReport to sReportId
88364>>>                If (sReportId <> "") Begin
88366>>>                    Send ClearAll of oResults
88367>>>                    Get AddTreeItem of oResults sFileName 0 0 0 0 to hReportItem
88368>>>                    Send ShowReportInfo sReportId hReportItem
88369>>>                    Send DoExpandItem of oResults hReportItem
88370>>>                    Send CloseReport sReportId
88371>>>                End
88371>>>>
88371>>>            End
88371>>>>
88371>>>        End_Procedure
88372>>>
88372>>>        Procedure ShowReportInfo String sReportId Handle hReportItem
88375>>>            Handle hVoid
88375>>>
88375>>>            Get AddTreeItem of oResults ('Report ID:' * sReportId) hReportItem 0 0 0 to hVoid
88376>>>
88376>>>            Send ShowDatabases sReportId hReportItem
88377>>>            Send ShowFunctions sReportId hReportItem
88378>>>            Send ShowParameters sReportId hReportItem
88379>>>            Send ShowSelections sReportId hReportItem
88380>>>            Send ShowRecordSorts sReportId hReportItem
88381>>>            Send ShowSubReports sReportId hReportItem
88382>>>            Send ShowPaperInfo sReportId hReportItem
88383>>>        End_Procedure
88384>>>
88384>>>        Procedure ShowPaperInfo String sReportId Handle hReportItem
88387>>>            Integer ePaperOrientation ePaperSize iMargin
88387>>>            Handle hPaperItem hVoid
88387>>>            String sValue
88387>>>            
88387>>>            Get AddTreeItem of oResults 'Paper' hReportItem 0 0 0 to hPaperItem
88388>>>
88388>>>            Get PaperOrientation sReportId to ePaperOrientation
88389>>>            Case Begin
88389>>>                Case (ePaperOrientation = DMORIENT_PORTRAIT)
88391>>>                    Get AddTreeItem of oResults 'Paper Orientation: Portrait' hPaperItem ePaperOrientation 0 0 to hVoid
88392>>>                    Case Break
88393>>>                Case (ePaperOrientation = DMORIENT_LANDSCAPE)
88396>>>                    Get AddTreeItem of oResults 'Paper Orientation: Landscape' hPaperItem ePaperOrientation 0 0 to hVoid
88397>>>                    Case Break
88398>>>            Case End
88398>>>
88398>>>            Get piPaperMarginTop sReportId to iMargin
88399>>>            Get AddTreeItem of oResults ('Top Margin:' * String (iMargin)) hPaperItem iMargin 0 0 to hVoid
88400>>>            Get piPaperMarginBottom sReportId to iMargin
88401>>>            Get AddTreeItem of oResults ('Bottom Margin:' * String (iMargin)) hPaperItem iMargin 0 0 to hVoid
88402>>>            Get piPaperMarginLeft sReportId to iMargin
88403>>>            Get AddTreeItem of oResults ('Left Margin:' * String (iMargin)) hPaperItem iMargin 0 0 to hVoid
88404>>>            Get piPaperMarginRight sReportId to iMargin
88405>>>            Get AddTreeItem of oResults ('Right Margin:' * String (iMargin)) hPaperItem iMargin 0 0 to hVoid
88406>>>
88406>>>            Get PaperSize sReportId to ePaperSize
88407>>>            Case Begin
88407>>>                Case (ePaperSize = DMPAPER_LETTER)
88409>>>                    Move 'Letter 8 1/2 x 11 in' to sValue
88410>>>                    Case Break
88411>>>                Case (ePaperSize = DMPAPER_LETTERSMALL)
88414>>>                    Move 'Letter Small 8 1/2 x 11 in' to sValue
88415>>>                    Case Break
88416>>>                Case (ePaperSize = DMPAPER_TABLOID)
88419>>>                    Move 'Tabloid 11 x 17 in' to sValue
88420>>>                    Case Break
88421>>>                Case (ePaperSize = DMPAPER_LEDGER)
88424>>>                    Move 'Ledger 17 x 11 in' to sValue
88425>>>                    Case Break
88426>>>                Case (ePaperSize = DMPAPER_LEGAL)
88429>>>                    Move 'Legal 8 1/2 x 14 in' to sValue
88430>>>                    Case Break
88431>>>                Case (ePaperSize = DMPAPER_STATEMENT)
88434>>>                    Move 'Statement 5 1/2 x 8 1/2 in' to sValue
88435>>>                    Case Break
88436>>>                Case (ePaperSize = DMPAPER_EXECUTIVE)
88439>>>                    Move 'Executive 7 1/4 x 10 1/2 in' to sValue
88440>>>                    Case Break
88441>>>                Case (ePaperSize = DMPAPER_A3)
88444>>>                    Move 'A3 297 x 420 mm' to sValue
88445>>>                    Case Break
88446>>>                Case (ePaperSize = DMPAPER_A4)
88449>>>                    Move 'A4 210 x 297 mm' to sValue
88450>>>                    Case Break
88451>>>                Case (ePaperSize = DMPAPER_A4SMALL)
88454>>>                    Move 'A4 Small 210 x 297 mm' to sValue
88455>>>                    Case Break
88456>>>                Case (ePaperSize = DMPAPER_A5)
88459>>>                    Move 'A5 148 x 210 mm' to sValue
88460>>>                    Case Break
88461>>>                Case (ePaperSize = DMPAPER_B4)
88464>>>                    Move 'B4 (JIS) 250 x 354' to sValue
88465>>>                    Case Break
88466>>>                Case (ePaperSize = DMPAPER_B5)
88469>>>                    Move 'B5 (JIS) 182 x 257 mm' to sValue
88470>>>                    Case Break
88471>>>                Case (ePaperSize = DMPAPER_FOLIO)
88474>>>                    Move 'Folio 8 1/2 x 13 in' to sValue
88475>>>                    Case Break
88476>>>                Case (ePaperSize = DMPAPER_QUARTO)
88479>>>                    Move 'Quarto 215 x 275 mm' to sValue
88480>>>                    Case Break
88481>>>                Case (ePaperSize = DMPAPER_10X14)
88484>>>                    Move '10x14 in' to sValue
88485>>>                    Case Break
88486>>>                Case (ePaperSize = DMPAPER_11X17)
88489>>>                    Move '11x17 in' to sValue
88490>>>                    Case Break
88491>>>                Case (ePaperSize = DMPAPER_NOTE)
88494>>>                    Move 'Note 8 1/2 x 11 in' to sValue
88495>>>                    Case Break
88496>>>                Case (ePaperSize = DMPAPER_ENV_9)
88499>>>                    Move 'Envelope #9 3 7/8 x 8 7/8' to sValue
88500>>>                    Case Break
88501>>>                Case (ePaperSize = DMPAPER_ENV_10)
88504>>>                    Move 'Envelope #10 4 1/8 x 9 1/2' to sValue
88505>>>                    Case Break
88506>>>                Case (ePaperSize = DMPAPER_ENV_11)
88509>>>                    Move 'Envelope #11 4 1/2 x 10 3/8' to sValue
88510>>>                    Case Break
88511>>>                Case (ePaperSize = DMPAPER_ENV_12)
88514>>>                    Move 'Envelope #12 4 \276 x 11' to sValue
88515>>>                    Case Break
88516>>>                Case (ePaperSize = DMPAPER_ENV_14)
88519>>>                    Move 'Envelope #14 5 x 11 1/2' to sValue
88520>>>                    Case Break
88521>>>                Case (ePaperSize = DMPAPER_CSHEET)
88524>>>                    Move 'C size sheet' to sValue
88525>>>                    Case Break
88526>>>                Case (ePaperSize = DMPAPER_DSHEET)
88529>>>                    Move 'D size sheet' to sValue
88530>>>                    Case Break
88531>>>                Case (ePaperSize = DMPAPER_ESHEET)
88534>>>                    Move 'E size sheet' to sValue
88535>>>                    Case Break
88536>>>                Case (ePaperSize = DMPAPER_ENV_DL)
88539>>>                    Move 'Envelope DL 110 x 220mm' to sValue
88540>>>                    Case Break
88541>>>                Case (ePaperSize = DMPAPER_ENV_C5)
88544>>>                    Move 'Envelope C5 162 x 229 mm' to sValue
88545>>>                    Case Break
88546>>>                Case (ePaperSize = DMPAPER_ENV_C3)
88549>>>                    Move 'Envelope C3  324 x 458 mm' to sValue
88550>>>                    Case Break
88551>>>                Case (ePaperSize = DMPAPER_ENV_C4)
88554>>>                    Move 'Envelope C4  229 x 324 mm' to sValue
88555>>>                    Case Break
88556>>>                Case (ePaperSize = DMPAPER_ENV_C6)
88559>>>                    Move 'Envelope C6  114 x 162 mm' to sValue
88560>>>                    Case Break
88561>>>                Case (ePaperSize = DMPAPER_ENV_C65)
88564>>>                    Move 'Envelope C65 114 x 229 mm' to sValue
88565>>>                    Case Break
88566>>>                Case (ePaperSize = DMPAPER_ENV_B4)
88569>>>                    Move 'Envelope B4  250 x 353 mm' to sValue
88570>>>                    Case Break
88571>>>                Case (ePaperSize = DMPAPER_ENV_B5)
88574>>>                    Move 'Envelope B5  176 x 250 mm' to sValue
88575>>>                    Case Break
88576>>>                Case (ePaperSize = DMPAPER_ENV_B6)
88579>>>                    Move 'Envelope B6  176 x 125 mm' to sValue
88580>>>                    Case Break
88581>>>                Case (ePaperSize = DMPAPER_ENV_ITALY)
88584>>>                    Move 'Envelope 110 x 230 mm' to sValue
88585>>>                    Case Break
88586>>>                Case (ePaperSize = DMPAPER_ENV_MONARCH)
88589>>>                    Move 'Envelope Monarch 3.875 x 7.5 in' to sValue
88590>>>                    Case Break
88591>>>                Case (ePaperSize = DMPAPER_ENV_PERSONAL)
88594>>>                    Move '6 3/4 Envelope 3 5/8 x 6 1/2 in' to sValue
88595>>>                    Case Break
88596>>>                Case (ePaperSize = DMPAPER_FANFOLD_US)
88599>>>                    Move 'US Std Fanfold 14 7/8 x 11 in' to sValue
88600>>>                    Case Break
88601>>>                Case (ePaperSize = DMPAPER_FANFOLD_STD_GERMAN)
88604>>>                    Move 'German Std Fanfold 8 1/2 x 12 in' to sValue
88605>>>                    Case Break
88606>>>                Case (ePaperSize = DMPAPER_FANFOLD_LGL_GERMAN)
88609>>>                    Move 'German Legal Fanfold 8 1/2 x 13 in' to sValue
88610>>>                    Case Break
88611>>>                Case (ePaperSize = DMPAPER_ISO_B4)
88614>>>                    Move 'B4 (ISO) 250 x 353 mm' to sValue
88615>>>                    Case Break
88616>>>                Case (ePaperSize = DMPAPER_JAPANESE_POSTCARD)
88619>>>                    Move 'Japanese Postcard 100 x 148 mm' to sValue
88620>>>                    Case Break
88621>>>                Case (ePaperSize = DMPAPER_9X11)
88624>>>                    Move '9 x 11 in' to sValue
88625>>>                    Case Break
88626>>>                Case (ePaperSize = DMPAPER_10X11)
88629>>>                    Move '10 x 11 in' to sValue
88630>>>                    Case Break
88631>>>                Case (ePaperSize = DMPAPER_15X11)
88634>>>                    Move '15 x 11 in' to sValue
88635>>>                    Case Break
88636>>>                Case (ePaperSize = DMPAPER_ENV_INVITE)
88639>>>                    Move 'Envelope Invite 220 x 220 mm' to sValue
88640>>>                    Case Break
88641>>>                Case (ePaperSize = DMPAPER_RESERVED_48)
88644>>>                Case (ePaperSize = DMPAPER_RESERVED_49)
88647>>>                    Move 'RESERVED--DO not Use' to sValue
88648>>>                    Case Break
88649>>>                Case (ePaperSize = DMPAPER_LETTER_EXTRA)
88652>>>                    Move 'Letter Extra 9 \275 x 12 in' to sValue
88653>>>                    Case Break
88654>>>                Case (ePaperSize = DMPAPER_LEGAL_EXTRA)
88657>>>                    Move 'Legal Extra 9 \275 x 15 in' to sValue
88658>>>                    Case Break
88659>>>                Case (ePaperSize = DMPAPER_TABLOID_EXTRA)
88662>>>                    Move 'Tabloid Extra 11.69 x 18 in' to sValue
88663>>>                    Case Break
88664>>>                Case (ePaperSize = DMPAPER_A4_EXTRA)
88667>>>                    Move 'A4 Extra 9.27 x 12.69 in' to sValue
88668>>>                    Case Break
88669>>>                Case (ePaperSize = DMPAPER_LETTER_TRANSVERSE)
88672>>>                    Move 'Letter Transverse 8 \275 x 11 in' to sValue
88673>>>                    Case Break
88674>>>                Case (ePaperSize = DMPAPER_A4_TRANSVERSE)
88677>>>                    Move 'A4 Transverse 210 x 297 mm' to sValue
88678>>>                    Case Break
88679>>>                Case (ePaperSize = DMPAPER_LETTER_EXTRA_TRANSVERSE)
88682>>>                    Move 'Letter Extra Transverse 9\275 x 12 in' to sValue
88683>>>                    Case Break
88684>>>                Case (ePaperSize = DMPAPER_A_PLUS)
88687>>>                    Move 'SuperA/SuperA/A4 227 x 356 mm' to sValue
88688>>>                    Case Break
88689>>>                Case (ePaperSize = DMPAPER_B_PLUS)
88692>>>                    Move 'SuperB/SuperB/A3 305 x 487 mm' to sValue
88693>>>                    Case Break
88694>>>                Case (ePaperSize = DMPAPER_LETTER_PLUS)
88697>>>                    Move 'Letter Plus 8.5 x 12.69 in' to sValue
88698>>>                    Case Break
88699>>>                Case (ePaperSize = DMPAPER_A4_PLUS)
88702>>>                    Move 'A4 Plus 210 x 330 mm' to sValue
88703>>>                    Case Break
88704>>>                Case (ePaperSize = DMPAPER_A5_TRANSVERSE)
88707>>>                    Move 'A5 Transverse 148 x 210 mm' to sValue
88708>>>                    Case Break
88709>>>                Case (ePaperSize = DMPAPER_B5_TRANSVERSE)
88712>>>                    Move 'B5 (JIS) Transverse 182 x 257 mm' to sValue
88713>>>                    Case Break
88714>>>                Case (ePaperSize = DMPAPER_A3_EXTRA)
88717>>>                    Move 'A3 Extra 322 x 445 mm' to sValue
88718>>>                    Case Break
88719>>>                Case (ePaperSize = DMPAPER_A5_EXTRA)
88722>>>                    Move 'A5 Extra 174 x 235 mm' to sValue
88723>>>                    Case Break
88724>>>                Case (ePaperSize = DMPAPER_B5_EXTRA)
88727>>>                    Move 'B5 (ISO) Extra 201 x 276 mm' to sValue
88728>>>                    Case Break
88729>>>                Case (ePaperSize = DMPAPER_A2)
88732>>>                    Move 'A2 420 x 594 mm' to sValue
88733>>>                    Case Break
88734>>>                Case (ePaperSize = DMPAPER_A3_TRANSVERSE)
88737>>>                    Move 'A3 Transverse 297 x 420 mm' to sValue
88738>>>                    Case Break
88739>>>                Case (ePaperSize = DMPAPER_A3_EXTRA_TRANSVERSE)
88742>>>                    Move 'A3 Extra Transverse 322 x 445 mm' to sValue
88743>>>                    Case Break
88744>>>                Case (ePaperSize = DMPAPER_DBL_JAPANESE_POSTCARD)
88747>>>                    Move 'Japanese Double Postcard 200 x 148 mm' to sValue
88748>>>                    Case Break
88749>>>                Case (ePaperSize = DMPAPER_A6)
88752>>>                    Move 'A6 105 x 148 mm' to sValue
88753>>>                    Case Break
88754>>>                Case (ePaperSize = DMPAPER_JENV_KAKU2)
88757>>>                    Move 'Japanese Envelope Kaku #2' to sValue
88758>>>                    Case Break
88759>>>                Case (ePaperSize = DMPAPER_JENV_KAKU3)
88762>>>                    Move 'Japanese Envelope Kaku #3' to sValue
88763>>>                    Case Break
88764>>>                Case (ePaperSize = DMPAPER_JENV_CHOU3)
88767>>>                    Move 'Japanese Envelope Chou #3' to sValue
88768>>>                    Case Break
88769>>>                Case (ePaperSize = DMPAPER_JENV_CHOU4)
88772>>>                    Move 'Japanese Envelope Chou #4' to sValue
88773>>>                    Case Break
88774>>>                Case (ePaperSize = DMPAPER_LETTER_ROTATED)
88777>>>                    Move 'Letter Rotated 11 x 8 1/2 11 in' to sValue
88778>>>                    Case Break
88779>>>                Case (ePaperSize = DMPAPER_A3_ROTATED)
88782>>>                    Move 'A3 Rotated 420 x 297 mm' to sValue
88783>>>                    Case Break
88784>>>                Case (ePaperSize = DMPAPER_A4_ROTATED)
88787>>>                    Move 'A4 Rotated 297 x 210 mm' to sValue
88788>>>                    Case Break
88789>>>                Case (ePaperSize = DMPAPER_A5_ROTATED)
88792>>>                    Move 'A5 Rotated 210 x 148 mm' to sValue
88793>>>                    Case Break
88794>>>                Case (ePaperSize = DMPAPER_B4_JIS_ROTATED)
88797>>>                    Move 'B4 (JIS) Rotated 364 x 257 mm' to sValue
88798>>>                    Case Break
88799>>>                Case (ePaperSize = DMPAPER_B5_JIS_ROTATED)
88802>>>                    Move 'B5 (JIS) Rotated 257 x 182 mm' to sValue
88803>>>                    Case Break
88804>>>                Case (ePaperSize = DMPAPER_JAPANESE_POSTCARD_ROTATED)
88807>>>                    Move 'Japanese Postcard Rotated 148 x 100 mm' to sValue
88808>>>                    Case Break
88809>>>                Case (ePaperSize = DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED)
88812>>>                    Move 'Double Japanese Postcard Rotated 148 x 200 mm' to sValue
88813>>>                    Case Break
88814>>>                Case (ePaperSize = DMPAPER_A6_ROTATED)
88817>>>                    Move 'A6 Rotated 148 x 105 mm' to sValue
88818>>>                    Case Break
88819>>>                Case (ePaperSize = DMPAPER_JENV_KAKU2_ROTATED)
88822>>>                    Move 'Japanese Envelope Kaku #2 Rotated' to sValue
88823>>>                    Case Break
88824>>>                Case (ePaperSize = DMPAPER_JENV_KAKU3_ROTATED)
88827>>>                    Move 'Japanese Envelope Kaku #3 Rotated' to sValue
88828>>>                    Case Break
88829>>>                Case (ePaperSize = DMPAPER_JENV_CHOU3_ROTATED)
88832>>>                    Move 'Japanese Envelope Chou #3 Rotated' to sValue
88833>>>                    Case Break
88834>>>                Case (ePaperSize = DMPAPER_JENV_CHOU4_ROTATED)
88837>>>                    Move 'Japanese Envelope Chou #4 Rotated' to sValue
88838>>>                    Case Break
88839>>>                Case (ePaperSize = DMPAPER_B6_JIS)
88842>>>                    Move 'B6 (JIS) 128 x 182 mm' to sValue
88843>>>                    Case Break
88844>>>                Case (ePaperSize = DMPAPER_B6_JIS_ROTATED)
88847>>>                    Move 'B6 (JIS) Rotated 182 x 128 mm' to sValue
88848>>>                    Case Break
88849>>>                Case (ePaperSize = DMPAPER_12X11)
88852>>>                    Move '12 x 11 in' to sValue
88853>>>                    Case Break
88854>>>                Case (ePaperSize = DMPAPER_JENV_YOU4)
88857>>>                    Move 'Japanese Envelope You #4' to sValue
88858>>>                    Case Break
88859>>>                Case (ePaperSize = DMPAPER_JENV_YOU4_ROTATED)
88862>>>                    Move 'Japanese Envelope You #4 Rotated' to sValue
88863>>>                    Case Break
88864>>>                Case (ePaperSize = DMPAPER_P16K)
88867>>>                    Move 'PRC 16K 146 x 215 mm' to sValue
88868>>>                    Case Break
88869>>>                Case (ePaperSize = DMPAPER_P32K)
88872>>>                    Move 'PRC 32K 97 x 151 mm' to sValue
88873>>>                    Case Break
88874>>>                Case (ePaperSize = DMPAPER_P32KBIG)
88877>>>                    Move 'PRC 32K(Big) 97 x 151 mm' to sValue
88878>>>                    Case Break
88879>>>                Case (ePaperSize = DMPAPER_PENV_1)
88882>>>                    Move 'PRC Envelope #1 102 x 165 mm' to sValue
88883>>>                    Case Break
88884>>>                Case (ePaperSize = DMPAPER_PENV_2)
88887>>>                    Move 'PRC Envelope #2 102 x 176 mm' to sValue
88888>>>                    Case Break
88889>>>                Case (ePaperSize = DMPAPER_PENV_3)
88892>>>                    Move 'PRC Envelope #3 125 x 176 mm' to sValue
88893>>>                    Case Break
88894>>>                Case (ePaperSize = DMPAPER_PENV_4)
88897>>>                    Move 'PRC Envelope #4 110 x 208 mm' to sValue
88898>>>                    Case Break
88899>>>                Case (ePaperSize = DMPAPER_PENV_5)
88902>>>                    Move 'PRC Envelope #5 110 x 220 mm' to sValue
88903>>>                    Case Break
88904>>>                Case (ePaperSize = DMPAPER_PENV_6)
88907>>>                    Move 'PRC Envelope #6 120 x 230 mm' to sValue
88908>>>                    Case Break
88909>>>                Case (ePaperSize = DMPAPER_PENV_7)
88912>>>                    Move 'PRC Envelope #7 160 x 230 mm' to sValue
88913>>>                    Case Break
88914>>>                Case (ePaperSize = DMPAPER_PENV_8)
88917>>>                    Move 'PRC Envelope #8 120 x 309 mm' to sValue
88918>>>                    Case Break
88919>>>                Case (ePaperSize = DMPAPER_PENV_9)
88922>>>                    Move 'PRC Envelope #9 229 x 324 mm' to sValue
88923>>>                    Case Break
88924>>>                Case (ePaperSize = DMPAPER_PENV_10)
88927>>>                    Move 'PRC Envelope #10 324 x 458 mm' to sValue
88928>>>                    Case Break
88929>>>                Case (ePaperSize = DMPAPER_P16K_ROTATED)
88932>>>                    Move 'PRC 16K Rotated' to sValue
88933>>>                    Case Break
88934>>>                Case (ePaperSize = DMPAPER_P32K_ROTATED)
88937>>>                    Move 'PRC 32K Rotated' to sValue
88938>>>                    Case Break
88939>>>                Case (ePaperSize = DMPAPER_P32KBIG_ROTATED)
88942>>>                    Move 'PRC 32K(Big) Rotated' to sValue
88943>>>                    Case Break
88944>>>                Case (ePaperSize = DMPAPER_PENV_1_ROTATED)
88947>>>                    Move 'PRC Envelope #1 Rotated 165 x 102 mm' to sValue
88948>>>                    Case Break
88949>>>                Case (ePaperSize = DMPAPER_PENV_2_ROTATED)
88952>>>                    Move 'PRC Envelope #2 Rotated 176 x 102 mm' to sValue
88953>>>                    Case Break
88954>>>                Case (ePaperSize = DMPAPER_PENV_3_ROTATED)
88957>>>                    Move 'PRC Envelope #3 Rotated 176 x 125 mm' to sValue
88958>>>                    Case Break
88959>>>                Case (ePaperSize = DMPAPER_PENV_4_ROTATED)
88962>>>                    Move 'PRC Envelope #4 Rotated 208 x 110 mm' to sValue
88963>>>                    Case Break
88964>>>                Case (ePaperSize = DMPAPER_PENV_5_ROTATED)
88967>>>                    Move 'PRC Envelope #5 Rotated 220 x 110 mm' to sValue
88968>>>                    Case Break
88969>>>                Case (ePaperSize = DMPAPER_PENV_6_ROTATED)
88972>>>                    Move 'PRC Envelope #6 Rotated 230 x 120 mm' to sValue
88973>>>                    Case Break
88974>>>                Case (ePaperSize = DMPAPER_PENV_7_ROTATED)
88977>>>                    Move 'PRC Envelope #7 Rotated 230 x 160 mm' to sValue
88978>>>                    Case Break
88979>>>                Case (ePaperSize = DMPAPER_PENV_8_ROTATED)
88982>>>                    Move 'PRC Envelope #8 Rotated 309 x 120 mm' to sValue
88983>>>                    Case Break
88984>>>                Case (ePaperSize = DMPAPER_PENV_9_ROTATED)
88987>>>                    Move 'PRC Envelope #9 Rotated 324 x 229 mm' to sValue
88988>>>                    Case Break
88989>>>                Case (ePaperSize = DMPAPER_PENV_10_ROTATED)
88992>>>                    Move 'PRC Envelope #10 Rotated 458 x 324 mm' to sValue
88993>>>                    Case Break
88994>>>                Case (ePaperSize = DMPAPER_USER)
88997>>>                    Move 'User Defined' to sValue
88998>>>                    Case Break
88999>>>            Case End
88999>>>
88999>>>            Get AddTreeItem of oResults ('Paper Size:' * sValue * '(' - String (ePaperSize) - ')') hPaperItem ePaperSize 0 0 to hVoid
89000>>>        End_Procedure
89001>>>
89001>>>        Procedure ShowRecordSorts String sReportId Handle hReportItem
89004>>>            Integer iSortFields iSortField eSortOrder
89004>>>            Handle hRecordSortsItem hVoid
89004>>>            String sValue
89004>>>
89004>>>            Get RecordSortCount sReportId to iSortFields
89005>>>            If (iSortFields > 0) Begin
89007>>>                Get AddTreeItem of oResults ('Record Sorts (' - String (iSortFields) - ')') hReportItem 0 0 0 to hRecordSortsItem
89008>>>                Decrement iSortFields
89009>>>                For iSortField from 0 to iSortFields
89015>>>>
89015>>>                    Get psRecordSortField sReportId iSortField to sValue
89016>>>                    Get peRecordSortOrder sReportId iSortField to eSortOrder
89017>>>                    If (eSortOrder = C_drAscending) Begin
89019>>>                        Get AddTreeItem of oResults ('Field:' * sValue * '(Ascending)') hRecordSortsItem iSortField 0 0 to hVoid
89020>>>                    End
89020>>>>
89020>>>                    Else Begin
89021>>>                        Get AddTreeItem of oResults ('Field:' * sValue * '(Descending)') hRecordSortsItem iSortField 0 0 to hVoid
89022>>>                    End
89022>>>>
89022>>>                Loop
89023>>>>
89023>>>            End
89023>>>>
89023>>>        End_Procedure
89024>>>
89024>>>        Function DatabaseTypeString Integer eDatabaseType Returns String
89027>>>            String sTypeName
89027>>>
89027>>>            Case Begin
89027>>>                Case (Low (eDatabaseType) = C_drDF)
89029>>>                    Move "DataFlex" to sTypeName
89030>>>                    Case Break
89031>>>                Case (Low (eDatabaseType) = C_drODBC)
89034>>>                    Case Begin
89034>>>                        Case (Hi (eDatabaseType) = C_drStandard)
89036>>>                            Move "ODBC" to sTypeName
89037>>>                            Case Break
89038>>>                        Case (Hi (eDatabaseType) = C_drSP)
89041>>>                            Move "ODBC - Stored Procedure" to sTypeName
89042>>>                            Case Break
89043>>>                        Case (Hi (eDatabaseType) = C_drSQL)
89046>>>                            Move "ODBC - SQL Statement" to sTypeName
89047>>>                            Case Break
89048>>>                    Case End
89048>>>                    Case Break
89049>>>                Case (Low (eDatabaseType) = C_drRDS)
89052>>>                    Move "Runtime Data Source" to sTypeName
89053>>>                    Case Break
89054>>>                Case (Low (eDatabaseType) = C_drSQLite)
89057>>>                    Case Begin
89057>>>                        Case (Hi (eDatabaseType) = C_drStandard)
89059>>>                            Move "SQLite" to sTypeName
89060>>>                            Case Break
89061>>>                        Case (Hi (eDatabaseType) = C_drSQL)
89064>>>                            Move "SQLite - SQL Statement" to sTypeName
89065>>>                            Case Break
89066>>>                    Case End
89066>>>                    Case Break
89067>>>            Case End
89067>>>
89067>>>            Function_Return sTypeName
89068>>>        End_Function
89069>>>
89069>>>        Procedure ShowDatabases String sReportId Handle hReportItem
89072>>>            String sValue
89072>>>            Handle hDatabaseItem hVoid
89072>>>            Integer eDatabaseType
89072>>>
89072>>>            // There is only one database per report
89072>>>            Get psDatabaseName sReportId to sValue
89073>>>            If (sValue <> '') Begin
89075>>>                Get AddTreeItem of oResults 'Databases (1)' hReportItem 0 0 0 to hDatabaseItem
89076>>>                Get AddTreeItem of oResults ('Name:' * sValue) hDatabaseItem 0 0 0 to hVoid
89077>>>                Get psDatabaseConnection sReportId to sValue
89078>>>                If (sValue <> '') Begin
89080>>>                    Get AddTreeItem of oResults ('Connection:' * sValue) hDatabaseItem 0 0 0 to hVoid
89081>>>                End
89081>>>>
89081>>>                Get DatabaseType sReportId to eDatabaseType
89082>>>                Get DatabaseTypeString eDatabaseType to sValue
89083>>>                Get AddTreeItem of oResults ('Type:' * sValue) hDatabaseItem 0 0 0 to hVoid
89084>>>
89084>>>                Send ShowTables sReportId hDatabaseItem
89085>>>            End
89085>>>>
89085>>>        End_Procedure
89086>>>
89086>>>        Function FilterOperatorString Integer eFilterOperator Returns String
89089>>>            String sResult
89089>>>
89089>>>            Case Begin
89089>>>                Case (eFilterOperator = C_drNone)
89091>>>                    Move "None" to sResult
89092>>>                    Case Break
89093>>>                Case (eFilterOperator = C_drEqual)
89096>>>                    Move "Equal" to sResult
89097>>>                    Case Break
89098>>>                Case (eFilterOperator = C_drNotEqual)
89101>>>                    Move "Not Equal" to sResult
89102>>>                    Case Break
89103>>>                Case (eFilterOperator = C_drGreaterThan)
89106>>>                    Move "Greater Than" to sResult
89107>>>                    Case Break
89108>>>                Case (eFilterOperator = C_drGreaterThanOrEqual)
89111>>>                    Move "Greater Than or Equal" to sResult
89112>>>                    Case Break
89113>>>                Case (eFilterOperator = C_drLessThan)
89116>>>                    Move "Less Than" to sResult
89117>>>                    Case Break
89118>>>                Case (eFilterOperator = C_drLessThanOrEqual)
89121>>>                    Move "Less Than or Equal" to sResult
89122>>>                    Case Break
89123>>>            Case End
89123>>>
89123>>>            Function_Return sResult
89124>>>        End_Function
89125>>>
89125>>>        Procedure ShowSelections String sReportId Handle hReportItem
89128>>>            String sValue
89128>>>            Handle hVoid hFiltersItem
89128>>>            Integer iFilters iFilter eFilterOperator
89128>>>
89128>>>            Get psFilterFunction sReportId to sValue
89129>>>            If (sValue <> '') Begin
89131>>>                Get AddTreeItem of oResults ('Filter Function:' * sValue) hReportItem 0 0 0 to hVoid
89132>>>            End
89132>>>>
89132>>>
89132>>>            Get FilterCount sReportId to iFilters
89133>>>            If (iFilters > 0) Begin
89135>>>                Get AddTreeItem of oResults ('Filters (' - String (iFilters) - ')') hReportItem 0 0 0 to hFiltersItem
89136>>>                Decrement iFilters
89137>>>                For iFilter from 0 to iFilters
89143>>>>
89143>>>                    Get psFilterField sReportId iFilter to sValue
89144>>>                    Get AddTreeItem of oResults ('Field:' - sValue) hFiltersItem 0 0 0 to hVoid
89145>>>                    Get peFilterOperator sReportId iFilter to eFilterOperator
89146>>>                    Get FilterOperatorString eFilterOperator to sValue
89147>>>                    Get AddTreeItem of oResults ('Operator:' - sValue * '(' - String (eFilterOperator) - ')') hFiltersItem 0 0 0 to hVoid
89148>>>                    Get psFilterValue sReportId iFilter to sValue
89149>>>                    Get AddTreeItem of oResults ('Value:' - sValue) hFiltersItem 0 0 0 to hVoid
89150>>>                Loop
89151>>>>
89151>>>            End
89151>>>>
89151>>>        End_Procedure
89152>>>
89152>>>        Procedure ShowSubReports String sReportId Handle hReportItem
89155>>>            Integer iSubReports
89155>>>            Handle hSubReportsItem
89155>>>
89155>>>            Get SubReportCount sReportId to iSubReports
89156>>>            If (iSubReports > 0) Begin
89158>>>                Get AddTreeItem of oResults ('SubReports (' - String (iSubReports) - ')') hReportItem iSubReports 0 0 to hSubReportsItem
89159>>>                Send ShowSubReportInfo sReportId iSubReports hSubReportsItem
89160>>>            End
89160>>>>
89160>>>        End_Procedure
89161>>>
89161>>>        Procedure ShowSubReportInfo String sReportId Integer iSubReports Handle hSubReportsItem
89164>>>            Integer iSubReport
89164>>>            String sSubReportId sReportName
89164>>>            Handle hSubReportItem hVoid
89164>>>
89164>>>            Decrement iSubReports
89165>>>            For iSubReport from 0 to iSubReports
89171>>>>
89171>>>                Get SubReportId sReportId iSubReport to sSubReportId
89172>>>                Get ComReportName sSubReportId to sReportName
89173>>>                Get AddTreeItem of oResults sReportName hSubReportsItem iSubReport 0 0 to hSubReportItem
89174>>>                Send ShowReportInfo sSubReportId hSubReportItem
89175>>>            Loop
89176>>>>
89176>>>        End_Procedure
89177>>>
89177>>>        Procedure ShowParameters String sReportId Handle hReportItem
89180>>>            Integer iParameters
89180>>>            Handle hParametersItem
89180>>>
89180>>>            Get ParameterCount sReportId to iParameters
89181>>>            If (iParameters > 0) Begin
89183>>>                Get AddTreeItem of oResults ('Parameters (' - String (iParameters) - ')') hReportItem iParameters 0 0 to hParametersItem
89184>>>                Send ShowParametersInfo sReportId iParameters hParametersItem
89185>>>            End
89185>>>>
89185>>>        End_Procedure
89186>>>
89186>>>        Procedure ShowParametersInfo String sReportId Integer iParameters Handle hParametersItem
89189>>>            Integer iParameter
89189>>>            String sParameterValue sType
89189>>>            Handle hParameterItem hVoid
89189>>>            tDRParameter ParameterDetails
89189>>>            tDRParameter ParameterDetails
89189>>>
89189>>>            Decrement iParameters
89190>>>            For iParameter from 0 to iParameters
89196>>>>
89196>>>                Get ParameterInfo sReportId iParameter to ParameterDetails
89197>>>                Get AddTreeItem of oResults (String (iParameter) - ':' * ParameterDetails.sName) hParametersItem iParameter 0 0 to hParameterItem
89198>>>                Get psParameterValue sReportId iParameter to sParameterValue
89199>>>                Get AddTreeItem of oResults ('Value:' * sParameterValue) hParameterItem iParameter 0 0 to hVoid
89200>>>                Get BuildReturnTypeString ParameterDetails.iType to sType
89201>>>                Get AddTreeItem of oResults ('Type:' * sType * '(' - String (ParameterDetails.iType) - ')') hParameterItem iParameter 0 0 to hVoid
89202>>>                Get AddTreeItem of oResults ('Length:' * String (ParameterDetails.iLength)) hParameterItem iParameter 0 0 to hVoid
89203>>>                Get AddTreeItem of oResults ('Precision:' * String (ParameterDetails.iPrecision)) hParameterItem iParameter 0 0 to hVoid
89204>>>            Loop
89205>>>>
89205>>>        End_Procedure
89206>>>
89206>>>        Procedure ShowFunctions String sReportId Handle hReportItem
89209>>>            Integer iFunctions
89209>>>            Handle hFunctionsItem
89209>>>
89209>>>            Get FunctionCount sReportId to iFunctions
89210>>>            If (iFunctions > 0) Begin
89212>>>                Get AddTreeItem of oResults ('Functions (' - String (iFunctions) - ')') hReportItem iFunctions 0 0 to hFunctionsItem
89213>>>                Send ShowFunctionsInfo sReportId iFunctions hFunctionsItem
89214>>>            End
89214>>>>
89214>>>        End_Procedure
89215>>>
89215>>>        Function BuildReturnTypeString Integer eType Returns String
89218>>>            String sResult
89218>>>
89218>>>            Case Begin
89218>>>                Case (eType = SQL_CHAR)
89220>>>                    Move 'char' to sResult
89221>>>                    Case Break
89222>>>                Case (eType = SQL_NUMERIC)
89225>>>                    Move 'number' to sResult
89226>>>                    Case Break
89227>>>                Case (eType = SQL_INTEGER)
89230>>>                    Move 'integer' to sResult
89231>>>                    Case Break
89232>>>                Case (eType = SQL_DOUBLE)
89235>>>                    Move 'double' to sResult
89236>>>                    Case Break
89237>>>                Case (eType = SQL_DATETIME)
89240>>>                    Move 'datetime' to sResult
89241>>>                    Case Break
89242>>>                Case Else
89242>>>                    Move 'unknown' to sResult
89243>>>                    Case Break
89244>>>            Case End
89244>>>
89244>>>            Function_Return sResult
89245>>>        End_Function
89246>>>
89246>>>        Procedure ShowFunctionsInfo String sReportId Integer iFunctions Handle hFunctionsItem
89249>>>            Integer iFunction iLength eType
89249>>>            String sFunctionName sType sFunctionBody
89249>>>            Handle hFunctionItem hVoid
89249>>>
89249>>>            Decrement iFunctions
89250>>>            For iFunction from 0 to iFunctions
89256>>>>
89256>>>                Get psFunctionName sReportId iFunction to sFunctionName
89257>>>                If (sFunctionName = '') Begin
89259>>>                    Move 'Built-in Function' to sFunctionName
89260>>>                End
89260>>>>
89260>>>                Get AddTreeItem of oResults (String (iFunction) - ':' * sFunctionName) hFunctionsItem iFunction 0 0 to hFunctionItem
89261>>>                Get FunctionLength sFunctionName iFunction to iLength
89262>>>                Get AddTreeItem of oResults ('Length:' * String (iLength)) hFunctionItem iLength 0 0 to hVoid
89263>>>                Get FunctionType sFunctionName iFunction to eType
89264>>>                Get BuildReturnTypeString eType to sType
89265>>>                Get AddTreeItem of oResults ('Type:' * sType * '(' - String (eType) - ')') hFunctionItem eType 0 0 to hVoid
89266>>>                Get ComFunction sReportId iFunction to sFunctionBody
89267>>>                Get AddTreeItem of oResults ('Value:' * sFunctionBody) hFunctionItem eType 0 0 to hVoid
89268>>>            Loop
89269>>>>
89269>>>        End_Procedure
89270>>>
89270>>>        Procedure ShowTables String sReportId Handle hReportItem
89273>>>            Integer iTables
89273>>>            Handle hTablesItem
89273>>>
89273>>>            Get TableCount sReportId to iTables
89274>>>            If (iTables > 0) Begin
89276>>>                Get AddTreeItem of oResults ('Tables (' - String (iTables) - ')') hReportItem iTables 0 0 to hTablesItem
89277>>>                Send ShowTablesInfo sReportId iTables hTablesItem
89278>>>            End
89278>>>>
89278>>>        End_Procedure
89279>>>
89279>>>        Procedure ShowTablesInfo String sReportId Integer iTables Handle hTablesItem
89282>>>            Integer iTable
89282>>>            String sTableName
89282>>>            Handle hTableItem
89282>>>
89282>>>            Decrement iTables
89283>>>            For iTable from 0 to iTables
89289>>>>
89289>>>                Get psTableName of oReport sReportId iTable to sTableName
89290>>>                Get AddTreeItem of oResults sTableName hTablesItem iTable 0 0 to hTableItem
89291>>>                Send ShowColumns sReportId iTable hTableItem
89292>>>            Loop
89293>>>>
89293>>>        End_Procedure
89294>>>
89294>>>        Procedure ShowColumns String sReportId Integer iTable Handle hTableItem
89297>>>            Integer iColumns
89297>>>            Handle hColumnsItem
89297>>>
89297>>>            Get TableColumnCount sReportId iTable to iColumns
89298>>>            Get AddTreeItem of oResults ('Columns (' - String (iColumns) - ')') hTableItem iTable 0 0 to hColumnsItem
89299>>>            Send ShowColumnsInfo sReportId iTable iColumns hColumnsItem
89300>>>        End_Procedure
89301>>>
89301>>>        Procedure ShowColumnsInfo String sReportId Integer iTable Integer iColumns Handle hColumnsItem
89304>>>            Integer iColumn
89304>>>            Handle hColumnItem
89304>>>
89304>>>            Decrement iColumns
89305>>>            For iColumn from 0 to iColumns
89311>>>>
89311>>>                Get AddTreeItem of oResults ('Column (' - String (iColumn) - ')') hColumnsItem iColumn 0 0 to hColumnItem
89312>>>                Send ShowColumnName sReportId iTable iColumn hColumnItem
89313>>>                Send ShowColumnType sReportId iTable iColumn hColumnItem
89314>>>                Send ShowColumnLength sReportId iTable iColumn hColumnItem
89315>>>                Send ShowColumnPrecision sReportId iTable iColumn hColumnItem
89316>>>                Send ShowColumnIndex sReportId iTable iColumn hColumnItem
89317>>>            Loop
89318>>>>
89318>>>        End_Procedure
89319>>>
89319>>>        Procedure ShowColumnName String sReportId Integer iTable Integer iColumn Handle hColumnItem
89322>>>            String sColumnName
89322>>>            Handle hVoid
89322>>>
89322>>>            Get TableColumnName sReportId iTable iColumn to sColumnName
89323>>>            Get AddTreeItem of oResults ("Name:" * sColumnName) hColumnItem iColumn 0 0 to hVoid
89324>>>        End_Procedure
89325>>>
89325>>>        Procedure ShowColumnType String sReportId Integer iTable Integer iColumn Handle hColumnItem
89328>>>            Integer eType
89328>>>            String sLabel
89328>>>            Handle hVoid
89328>>>
89328>>>            Get TableColumnType sReportId iTable iColumn to eType
89329>>>            Move 'Type:' to sLabel
89330>>>            Case Begin
89330>>>                Case (eType = SQL_INTEGER)
89332>>>                    Move (sLabel * "(Integer)") to sLabel
89333>>>                    Case Break
89334>>>                Case (eType = SQL_BIGINT)
89337>>>                    Move (sLabel * "(BIG Integer)") to sLabel
89338>>>                    Case Break
89339>>>                Case (eType = SQL_TINYINT)
89342>>>                    Move (sLabel * "(Tiny Integer)") to sLabel
89343>>>                    Case Break
89344>>>                Case (eType = SQL_SMALLINT)
89347>>>                    Move (sLabel * "(Small Integer)") to sLabel
89348>>>                    Case Break
89349>>>                Case (eType = SQL_DATETIME)
89352>>>                    Move (sLabel * "(DateTime)") to sLabel
89353>>>                    Case Break
89354>>>                Case (eType = SQL_TIME)
89357>>>                Case (eType = SQL_TYPE_TIME)
89360>>>                    Move (sLabel * "(Time)") to sLabel
89361>>>                    Break
89362>>>                Case (eType = SQL_TYPE_TIMESTAMP)
89365>>>                    Move (sLabel * "(TimeStamp)") to sLabel
89366>>>                    Case Break
89367>>>                Case (eType = SQL_TYPE_DATE)
89370>>>                    Move (sLabel * "(Date)") to sLabel
89371>>>                    Case Break
89372>>>                Case (eType = SQL_NUMERIC)
89375>>>                    Move (sLabel * "(Numeric)") to sLabel
89376>>>                    Case Break
89377>>>                Case (eType = SQL_DECIMAL)
89380>>>                    Move (sLabel * "(Decimal)") to sLabel
89381>>>                    Case Break
89382>>>                Case (eType = SQL_DOUBLE)
89385>>>                    Move (sLabel * "(Double)") to sLabel
89386>>>                    Case Break
89387>>>                Case (eType = SQL_FLOAT)
89390>>>                    Move (sLabel * "(Float)") to sLabel
89391>>>                    Case Break
89392>>>                Case (eType = SQL_REAL)
89395>>>                    Move (sLabel * "(Real)") to sLabel
89396>>>                    Case Break
89397>>>                Case (eType = SQL_CHAR)
89400>>>                    Move (sLabel * "(String)") to sLabel
89401>>>                    Case Break
89402>>>                Case (eType = SQL_VARCHAR)
89405>>>                    Move (sLabel * "(Variable Length String)") to sLabel
89406>>>                    Case Break
89407>>>                Case (eType = SQL_LONGVARCHAR)
89410>>>                    Move (sLabel * "(Long Variable Length String)") to sLabel
89411>>>                    Case Break
89412>>>                Case (eType = SQL_BINARY)
89415>>>                    Move (sLabel * "(Binary)") to sLabel
89416>>>                    Case Break
89417>>>                Case (eType = SQL_VARBINARY)
89420>>>                    Move (sLabel * "(Variable Length Binary)") to sLabel
89421>>>                    Case Break
89422>>>                Case (eType = SQL_LONGVARBINARY)
89425>>>                    Move (sLabel * "(Long Variable Length Binary)") to sLabel
89426>>>                    Case Break
89427>>>                Case (eType = SQL_BIT)
89430>>>                    Move (sLabel * "(Bit)") to sLabel
89431>>>                    Case Break
89432>>>                Case (eType = SQL_GUID)
89435>>>                    Move (sLabel * "(GUID)") to sLabel
89436>>>                    Case Break
89437>>>                Case (eType = SQL_UNKNOWN_TYPE)
89440>>>                    Move (sLabel * "(Unknown)") to sLabel
89441>>>                    Case Break
89442>>>            Case End
89442>>>
89442>>>            Get AddTreeItem of oResults sLabel hColumnItem iColumn 0 0 to hVoid
89443>>>        End_Procedure
89444>>>
89444>>>        Procedure ShowColumnLength String sReportId Integer iTable Integer iColumn Handle hColumnItem
89447>>>            Integer iLength
89447>>>            Handle hVoid
89447>>>
89447>>>            Get TableColumnLength sReportId iTable iColumn to iLength
89448>>>            Get AddTreeItem of oResults ("Length:" * String (iLength)) hColumnItem iColumn 0 0 to hVoid
89449>>>        End_Procedure
89450>>>
89450>>>        Procedure ShowColumnPrecision String sReportId Integer iTable Integer iColumn Handle hColumnItem
89453>>>            Integer iPrecision
89453>>>            Handle hVoid
89453>>>
89453>>>            Get TableColumnPrecision sReportId iTable iColumn to iPrecision
89454>>>            Get AddTreeItem of oResults ("Precision:" * String (iPrecision)) hColumnItem iColumn 0 0 to hVoid
89455>>>        End_Procedure
89456>>>
89456>>>        Procedure ShowColumnIndex String sReportId Integer iTable Integer iColumn Handle hColumnItem
89459>>>            Integer iIndex
89459>>>            Handle hVoid
89459>>>
89459>>>            Get TableColumnIndex sReportId iTable iColumn to iIndex
89460>>>            Get AddTreeItem of oResults ("Index:" * String (iIndex)) hColumnItem iColumn 0 0 to hVoid
89461>>>        End_Procedure
89462>>>    End_Object
89463>>>
89463>>>    Object oShowInfoButton is a Button
89465>>>        Set Location to 5 294
89466>>>        Set Label to 'Show Info'
89467>>>        Set peAnchors to anTopRight
89468>>>
89468>>>        Procedure OnClick
89471>>>            Send ShowInfo of oReport
89472>>>        End_Procedure
89473>>>    End_Object
89474>>>Cd_End_Object
89476>>>>
89476>        Use DataFlexReports\DataOverviewReport.rv
Including file: DataFlexReports\DataOverviewReport.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\DataOverviewReport.rv)
89476>>>Use Windows.pkg
89476>>>Use DFRptVw.pkg
89476>>>Use File_Dlg.Pkg
89476>>>Use cTextEdit.pkg
89476>>>Use cDRReport.pkg
89476>>>Use cDRPreview.pkg
89476>>>Use DRStatuspanel.dg
89476>>>
89476>>>Use cVendorDataDictionary.dd
89476>>>Use cCustomerDataDictionary.dd
89476>>>Use cSalesPersonDataDictionary.dd
89476>>>Use cOrderHeaderDataDictionary.dd
89476>>>Use dfTreeVw.pkg
89476>>>
89476>>>// This example runs a report with five RDS based sub-reports. The integration code shows how to fill the RDS tables in 5
89476>>>// different sub-reports, how to query the names of the sub-reports, the record sort field and how to change this on the
89476>>>// dynamically. For this the print button does not do a runreport but only an output report as runreport would close the
89476>>>// report and thus dropping the optional changed sort order in one or more of the sub-reports.
89476>>>
89476>>>Deferred_View Activate_oDataOverviewReportView for ;Object oDataOverviewReportView is a ReportView
89501>>>    Object oSalesPerson_DD is a cSalesPersonDataDictionary
89503>>>    End_Object
89504>>>
89504>>>    Object oCustomer_DD is a cCustomerDataDictionary
89506>>>    End_Object
89507>>>
89507>>>    Object oOrderHeader_DD is a cOrderHeaderDataDictionary
89509>>>        Set DDO_Server to oSalesPerson_DD
89510>>>        Set DDO_Server to oCustomer_DD
89511>>>    End_Object
89512>>>
89512>>>    Object oVendor_DD is a cVendorDataDictionary
89514>>>    End_Object
89515>>>
89515>>>    Set Main_DD to oVendor_DD
89516>>>    Set Server to oVendor_DD
89517>>>
89517>>>    Set Label to "Data Overview"
89518>>>    Set Border_Style to Border_Thick
89519>>>
89519>>>    Object oReport is a cDRReport
89521>>>        Set pbShowStatusPanel to True
89522>>>        Set phoStatusPanel to oDRStatusPanel
89523>>>        Set psReportName to "Data Overview.dr"
89524>>>
89524>>>        Procedure OnCreate
89527>>>            Forward Send OnCreate
89529>>>
89529>>>            Set piReportLanguage '' to LANG_DEFAULT
89530>>>        End_Procedure
89531>>>
89531>>>        Procedure OnInitializeReport
89534>>>            String sReportId
89534>>>            Integer eOutputDeviceMode
89534>>>
89534>>>            Forward Send OnInitializeReport
89536>>>
89536>>>            // Convert from the ReportView Output_Device_Mode to peOutputDestination
89536>>>            Get Output_Device_Mode to eOutputDeviceMode
89537>>>            Set peOutputDestination to eOutputDeviceMode
89538>>>
89538>>>            Get psReportId to sReportId
89539>>>            Send LoadRDSData sReportId -1 0
89540>>>        End_Procedure
89541>>>
89541>>>        // This method will be called once for the main report and once per sub-report at each level of sub-reports.
89541>>>        // The iSibling parameter contains the N-th sub-report at the same level. If the value equals to -1 it means the main report.
89541>>>        // The iLevel parameter contains the depth of sub-report nestings. For a sub-report
89541>>>        // in a main report the value will be 1 and a sub-report of a sub-report makes it 2.
89541>>>        Procedure LoadRDSData String sReportId Integer iSibling Integer iLevel
89544>>>            Variant[][] vData
89545>>>            Integer iElements iElement iSubReports iSubReport
89545>>>            tDRTableName[] ReportTableNames
89545>>>            tDRTableName[] ReportTableNames
89546>>>            String sSubReportId
89546>>>
89546>>>            Get RDSTableNames sReportId to ReportTableNames
89547>>>            Move (SizeOfArray (ReportTableNames)) to iElements
89548>>>            If (iElements > 0) Begin
89550>>>                Decrement iElements
89551>>>                For iElement from 0 to iElements
89557>>>>
89557>>>                    Get AddRDSData ReportTableNames[iElement].sTableName iSibling iLevel to vData
89558>>>                    Send TableData sReportId ReportTableNames[iElement].iTable vData
89559>>>                Loop
89560>>>>
89560>>>            End
89560>>>>
89560>>>
89560>>>            Get SubReportCount sReportId to iSubReports
89561>>>            If (iSubReports > 0) Begin
89563>>>                Decrement iSubReports
89564>>>                For iSubReport from 0 to iSubReports
89570>>>>
89570>>>                    Get SubReportId sReportId iSubReport to sSubReportId
89571>>>                    Send LoadRDSData sSubReportId iSubReport (iLevel + 1)
89572>>>                Loop
89573>>>>
89573>>>            End
89573>>>>
89573>>>        End_Procedure
89574>>>
89574>>>        // Note: The Runtime DataSource row will be rejected if:
89574>>>        // 1: The number of elements in the 2nd dimension does not match with the row layout
89574>>>        // 2: The data-type of any element in the 2nd dimension does not match, cannot be
89574>>>        //    converted to the data-type defined in the row layout. For example: A zero date
89574>>>        Function AddRDSData String sTableName Integer iSibling Integer iLevel Returns Variant[][]
89577>>>            Variant[][] vData
89578>>>            Variant[][] vValidationTableData
89579>>>            Integer iRow iElements iElement
89579>>>            Handle hoValidationTable
89579>>>
89579>>>            Move 0 to iRow
89580>>>
89580>>>            Case Begin
89580>>>                Case (iSibling = 0 and iLevel = 1 and sTableName = "Address")
89582>>>                    // First add the vendors
89582>>>                    Send Clear of oVendor_DD
89583>>>                    Send Request_Read of oVendor_DD FIRST_RECORD Vendor.File_Number 1
89584>>>                    While (Found)
89588>>>                        Move (Trim (Vendor.Name)) to vData[iRow][0] // Name: Name, Length: 100, Datatype: String
89589>>>                        Move (Trim (Vendor.Address)) to vData[iRow][1] // Name: Address, Length: 100, Datatype: String
89590>>>                        Move (Trim (Vendor.Zip) * Trim (Vendor.City)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String
89591>>>                        Move (Trim (Vendor.State)) to vData[iRow][3] // Name: State, Length: 100, Datatype: String
89592>>>                        Move (Trim (Vendor.Phone_Number)) to vData[iRow][4] // Name: Phone, Length: 100, Datatype: String
89593>>>                        Move 'V' to vData[iRow][5] // Name: Type, Length: 1, Datatype: String
89594>>>                        Increment iRow
89595>>>
89595>>>                        Send Locate_Next of oVendor_DD
89596>>>                    Loop
89597>>>>
89597>>>                    // Then add the customers
89597>>>                    Send Clear of oCustomer_DD
89598>>>                    Send Request_Read of oCustomer_DD FIRST_RECORD Customer.File_Number 1
89599>>>                    While (Found)
89603>>>                        Move (Trim (Customer.Name)) to vData[iRow][0] // Name: Name, Length: 100, Datatype: String
89604>>>                        Move (Trim (Customer.Address)) to vData[iRow][1] // Name: Address, Length: 100, Datatype: String
89605>>>                        Move (Trim (Customer.Zip) * Trim (Customer.City)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String
89606>>>                        Move (Trim (Customer.State)) to vData[iRow][3] // Name: State, Length: 100, Datatype: String
89607>>>                        Move (Trim (Customer.Phone_Number)) to vData[iRow][4] // Name: Phone, Length: 100, Datatype: String
89608>>>                        Move 'C' to vData[iRow][5] // Name: Type, Length: 1, Datatype: String
89609>>>                        Increment iRow
89610>>>
89610>>>                        Send Locate_Next of oCustomer_DD
89611>>>                    Loop
89612>>>>
89612>>>                    Case Break
89613>>>                Case (iSibling = 1 and iLevel = 1 and sTableName = "ShippingMethod")
89616>>>                    Get Field_Table_Object of oOrderheader_DD Field OrderHeader.Ship_Via to hoValidationTable
89617>>>                    // Needs to enumerate and use a temporary array as the TableData function returns a two
89617>>>                    // dimensional array instead of a jagged array
89617>>>                    Get TableData of hoValidationTable to vValidationTableData
89618>>>                    Move (SizeOfArray (vValidationTableData) - 1) to iElements
89619>>>                    For iElement from 0 to iElements
89625>>>>
89625>>>                        Move vValidationTableData[iElement][0] to vData[iElement][0]
89626>>>                        Move vValidationTableData[iElement][1] to vData[iElement][1]
89627>>>                    Loop
89628>>>>
89628>>>                    Case Break
89629>>>                Case (iSibling = 2 and iLevel = 1 and sTableName = "SalesPerson")
89632>>>                    Send Clear of oSalesPerson_DD
89633>>>                    Send Request_Read of oSalesPerson_DD FIRST_RECORD SalesPerson.File_Number 1
89634>>>                    While (Found)
89638>>>                        Move (Trim (SalesPerson.ID)) to vData[iRow][0]
89639>>>                        Move (Trim (SalesPerson.Name)) to vData[iRow][1]
89640>>>                        Increment iRow
89641>>>                        Send Locate_Next of oSalesPerson_DD
89642>>>                    Loop
89643>>>>
89643>>>                    Case Break
89644>>>                Case (iSibling = 3 and iLevel = 1 and sTableName = "PaymentOption")
89647>>>                    Get Field_Table_Object of oOrderheader_DD Field OrderHeader.Terms to hoValidationTable
89648>>>                    // Needs to enumerate and use a temporary array as the TableData function returns a two
89648>>>                    // dimensional array instead of a jagged array
89648>>>                    Get TableData of hoValidationTable to vValidationTableData
89649>>>                    Move (SizeOfArray (vValidationTableData) - 1) to iElements
89650>>>                    For iElement from 0 to iElements
89656>>>>
89656>>>                        Move vValidationTableData[iElement][0] to vData[iElement][0]
89657>>>                        Move vValidationTableData[iElement][1] to vData[iElement][1]
89658>>>                    Loop
89659>>>>
89659>>>                    Case Break
89660>>>                Case (iSibling = 4 and iLevel = 1 and sTableName = "Sales")
89663>>>                    // There is a maximum of 12 months possible, so init the array
89663>>>                    Move (ResizeArray (vData, 12)) to vData
89664>>>                    // Initialize the array
89664>>>                    For iRow from 0 to 11
89670>>>>
89670>>>                        Move (iRow + 1) to vData[iRow][0]
89671>>>                        Move 0 to vData[iRow][1]
89672>>>                    Loop
89673>>>>
89673>>>                    Send Clear of oOrderHeader_DD
89674>>>                    Send Request_Read of oOrderHeader_DD FIRST_RECORD OrderHeader.File_Number 3
89675>>>                    While (Found)
89679>>>                        Move (DateGetMonth (OrderHeader.Order_Date)) to iRow
89680>>>                        Move (Cast (vData[iRow-1][1], Number) + OrderHeader.Order_Total) to vData[iRow-1][1]
89681>>>                        Send Locate_Next of oOrderHeader_DD
89682>>>                    Loop
89683>>>>
89683>>>                    Case Break
89684>>>            Case End
89684>>>
89684>>>            Function_Return vData
89685>>>        End_Function
89686>>>    End_Object
89687>>>
89687>>>    Object oDestinationGroup Is A RadioGroup
89689>>>        Set Label to "Output destination"
89690>>>        Set Location to 4 5
89691>>>        Set Size to 46 77
89692>>>
89692>>>        Object oScreenRadio Is A Radio
89694>>>            Set Label to "Preview"
89695>>>            Set Size to 10 60
89696>>>            Set Location to 10 6
89697>>>            Set Status_Help to "Print the report to screen"
89698>>>        End_Object
89699>>>
89699>>>        Object oPrinterRadio Is A Radio
89701>>>            Set Label to "Printer"
89702>>>            Set Size to 10 60
89703>>>            Set Location to 22 6
89704>>>            Set Status_Help to "Prints the report to printer"
89705>>>        End_Object
89706>>>
89706>>>        Object oExportRadio Is A Radio
89708>>>            Set Label to "Export"
89709>>>            Set Size to 10 60
89710>>>            Set Location to 34 6
89711>>>            Set Status_Help to "Outputs the report to disk file (PDF, CSV, Image, HTML, Excel, RTF)"
89712>>>        End_Object
89713>>>
89713>>>        Procedure Notify_Select_State Integer iNewItem Integer iOldItem
89716>>>            Forward Send Notify_Select_State iNewItem iOldItem
89718>>>
89718>>>            Case Begin
89718>>>                Case (iNewItem = 0)
89720>>>                    Set Output_Device_Mode to PRINT_TO_WINDOW
89721>>>                    Case Break
89722>>>                Case (iNewItem = 1)
89725>>>                    Set Output_Device_Mode to PRINT_TO_PRINTER
89726>>>                    Case Break
89727>>>                Case (iNewItem = 2)
89730>>>                    Set Output_Device_Mode to PRINT_TO_FILE
89731>>>                    Case Break
89732>>>            Case End
89732>>>        End_Procedure
89733>>>    End_Object
89734>>>
89734>>>    Object oSortOrderGroup is a Group
89736>>>        Set Size to 46 143
89737>>>        Set Location to 4 87
89738>>>        Set Label to "Sort Order"
89739>>>        Set peAnchors to anAll
89740>>>
89740>>>        Object oSubReportsTreeView is a TreeView
89742>>>            Set Size to 31 131
89743>>>            Set Location to 11 5
89744>>>            Set peAnchors to anAll
89745>>>            Set pbEnableCheckboxes to True
89746>>>
89746>>>            // Find the highest ranking in the sibling items of the passed column item
89746>>>            Function SortFieldRank Handle hColumnItem Returns Integer
89749>>>                Handle hSubReportItem hChildItem
89749>>>                Integer iItemData iRank
89749>>>
89749>>>                Move -1 to iRank
89750>>>                Get ParentItem hColumnItem to hSubReportItem
89751>>>                Get ChildItem hSubReportItem to hChildItem
89752>>>                While (hChildItem <> 0)
89756>>>                    Get ItemData hChildItem to iItemData
89757>>>                    Move (iItemData max iRank) to iRank
89758>>>                    Get NextSiblingItem hChildItem to hChildItem
89759>>>                Loop
89760>>>>
89760>>>
89760>>>                Function_Return iRank
89761>>>            End_Function
89762>>>
89762>>>            // Renumber items ranked higher than the item that got deselected
89762>>>            Procedure RenumberRank Handle hColumnItem Integer iRank
89765>>>                Handle hSubReportItem hChildItem
89765>>>                Integer iItemData
89765>>>
89765>>>                Get ParentItem hColumnItem to hSubReportItem
89766>>>                Get ChildItem hSubReportItem to hChildItem
89767>>>                While (hChildItem <> 0)
89771>>>                    Get ItemData hChildItem to iItemData
89772>>>                    If (iItemData > -1 and iItemData > iRank) Begin
89774>>>                        Set ItemData hChildItem to (iItemData - 1)
89775>>>                    End
89775>>>>
89775>>>                    Get NextSiblingItem hChildItem to hChildItem
89776>>>                Loop
89777>>>>
89777>>>                Set ItemData hColumnItem to -1
89778>>>            End_Procedure
89779>>>
89779>>>            // Renumber the sort field order when the user deselects the checkbox of a column or
89779>>>            // assign the next order for the sort fields.
89779>>>            Procedure OnCheckStateChange Handle hColumnItem
89782>>>                Boolean bChecked
89782>>>                Integer iItemData iRank
89782>>>
89782>>>                Get ItemChecked hColumnItem to bChecked
89783>>>                Get SortFieldRank hColumnItem to iRank
89784>>>                If (bChecked) Begin
89786>>>                    Set ItemData hColumnItem to (iRank + 1)
89787>>>                End
89787>>>>
89787>>>                Else Begin
89788>>>                    Get ItemData hColumnItem to iItemData
89789>>>                    If (iItemData < iRank) Begin
89791>>>                        Send RenumberRank hColumnItem iItemData
89792>>>                    End
89792>>>>
89792>>>                    Else Begin
89793>>>                        Set ItemData hColumnItem to -1
89794>>>                    End
89794>>>>
89794>>>                End
89794>>>>
89794>>>            End_Procedure
89795>>>
89795>>>            // Loop through all high level (the sub-report name) items. Per item remove the existing sort fields
89795>>>            // and collect the checked columns in the selected order to create a record field. The name of the
89795>>>            // column is stored in the treeview item label but needs to be passed as {tablename.columnname} to the
89795>>>            // report engine. For this construct the sort field from the tablename of the first table of the sub-report
89795>>>            // and remember that in this example all sub-reports have only one table.
89795>>>            Procedure ChangeReportSortFields String sReportId
89798>>>                Handle hSubReportItem hColumnItem
89798>>>                Integer iSubReport iHighest iRank iItemData
89798>>>                String sSubReportId sTableName sColumnName sSortField
89798>>>                Boolean bChecked
89798>>>
89798>>>                Get RootItem to hSubReportItem
89799>>>                While (hSubReportItem <> 0)
89803>>>                    Get ItemData hSubReportItem to iSubReport
89804>>>                    Get SubReportId of oReport sReportId iSubReport to sSubReportId
89805>>>                    Get psTableName of oReport sSubReportId 0 to sTableName
89806>>>                    Send RemoveAllRecordSortFields of oReport sSubReportId
89807>>>                    Get ChildItem hSubReportItem to hColumnItem
89808>>>                    Get SortFieldRank hColumnItem to iHighest
89809>>>                    If (iHighest > -1) Begin
89811>>>                        For iRank from 0 to iHighest
89817>>>>
89817>>>                            Get ChildItem hSubReportItem to hColumnItem
89818>>>                            While (hColumnItem <> 0)
89822>>>                                Get ItemChecked hColumnItem to bChecked
89823>>>                                If (bChecked) Begin
89825>>>                                    Get ItemData hColumnItem to iItemData
89826>>>                                    If (iItemData = iRank) Begin
89828>>>                                        Get ItemLabel hColumnItem to sColumnName
89829>>>                                        Move ("{" + sTableName + '.' + sColumnName + "}") to sSortField
89830>>>                                        Send AddRecordSortField of oReport sSubReportId sSortField C_drAscending
89831>>>                                    End
89831>>>>
89831>>>                                End
89831>>>>
89831>>>                                Get NextSiblingItem hColumnItem to hColumnItem
89832>>>                            Loop
89833>>>>
89833>>>                        Loop
89834>>>>
89834>>>                    End
89834>>>>
89834>>>
89834>>>                    Get NextSiblingItem hSubReportItem to hSubReportItem
89835>>>                Loop
89836>>>>
89836>>>            End_Procedure
89837>>>
89837>>>            // Open the report, enumerate all sub-report and list their names in the treeview. Then for each
89837>>>            // sub-report enumerate the columns for the first table (all these sub-reports only have one database table)
89837>>>            // Get the record sort fields (if present) and take the column name out of this as the format is
89837>>>            // {tablename.columnname}. If the table column is the same as one of the record sort fields mark the item
89837>>>            // as checked by setting the checkbox state and store the N-th sortfield in the itemdata of the tree item.
89837>>>            Procedure OnCreateTree
89840>>>                String sReportId sSubReportId sReportName sTableName sSortField sColumnName
89840>>>                String[] sSortFields
89841>>>                Integer iSubReports iSubReport iRecordSortFields iRecordSortField
89841>>>                Integer iColumns iColumn iElement
89841>>>                Handle hSubReportItem hColumnItem
89841>>>
89841>>>                Get OpenReport of oReport to sReportId
89842>>>                If (sReportId <> "") Begin
89844>>>                    Get SubReportCount of oReport sReportId to iSubReports
89845>>>                    Decrement iSubReports
89846>>>                    For iSubReport from 0 to iSubReports
89852>>>>
89852>>>                        Get SubReportId of oReport sReportId iSubReport to sSubReportId
89853>>>                        Get ComReportName of oReport sSubReportId to sReportName
89854>>>                        Get AddTreeItem sReportName 0 iSubReport 0 0 to hSubReportItem
89855>>>                        Get TableColumnCount of oReport sSubReportId 0 to iColumns
89856>>>                        Set ItemCheckBox hSubReportItem to False
89857>>>
89857>>>                        Get psTableName of oReport sSubReportId 0 to sTableName
89858>>>
89858>>>                        Get RecordSortCount of oReport sSubReportId to iRecordSortFields
89859>>>                        Move (ResizeArray (sSortFields, iRecordSortFields, '')) to sSortFields
89860>>>                        Decrement iRecordSortFields
89861>>>                        For iRecordSortField from 0 to iRecordSortFields
89867>>>>
89867>>>                            Get psRecordSortField of oReport sSubReportId iRecordSortField to sSortField
89868>>>                            // Only use sort fields that are database columns
89868>>>                            If (Left (sSortField, 1) = '{' and Right (sSortField, 1) = '}') Begin
89870>>>                                Move (Mid (sSortField, Length (sSortField) - 2, 2)) to sSortField
89871>>>                                Move (Replace (sTableName, sSortField, '')) to sSortField
89872>>>                                If (Left (sSortField, 1) = '.') Begin
89874>>>                                    Move (Right (sSortField, Length (sSortField) - 1)) to sSortField
89875>>>                                End
89875>>>>
89875>>>                                Move sSortField to sSortFields[iRecordSortField]
89876>>>                            End
89876>>>>
89876>>>                        Loop
89877>>>>
89877>>>
89877>>>                        Decrement iColumns
89878>>>                        For iColumn from 0 to iColumns
89884>>>>
89884>>>                            Get TableColumnName of oReport sSubReportId 0 iColumn to sColumnName
89885>>>                            Get AddTreeItem sColumnName hSubReportItem -1 0 0 to hColumnItem
89886>>>                            Set ItemCheckBox hColumnItem to True
89887>>>                            Move (SearchArray (sColumnName, sSortFields)) to iElement
89888>>>                            If (iElement <> -1) Begin
89890>>>                                Set ItemChecked hColumnItem to True
89891>>>                                Set ItemData hColumnItem to iElement
89892>>>                            End
89892>>>>
89892>>>                        Loop
89893>>>>
89893>>>                    Loop
89894>>>>
89894>>>                    Send CloseReport of oReport sReportId
89895>>>                End
89895>>>>
89895>>>            End_Procedure
89896>>>        End_Object
89897>>>    End_Object
89898>>>
89898>>>    Object oPrintButton Is A Button
89900>>>        Set Label to "&Print"
89901>>>        Set Status_Help to "Print the report"
89902>>>        Set Size to 14 50
89903>>>        Set Location to 52 127
89904>>>        Set Default_State to True
89905>>>        Set peAnchors to anBottomRight
89906>>>
89906>>>        // Run the report but instead of sending runreport the code opens the report, collects
89906>>>        // the sort order that could be changed by the user and output the report to screen, printer
89906>>>        // or export format
89906>>>        Procedure OnClick
89909>>>            String sReportId
89909>>>
89909>>>            Get OpenReport of oReport to sReportId
89910>>>            If (sReportId <> '') Begin
89912>>>                Send ChangeReportSortFields of oSubReportsTreeView sReportId
89913>>>                Send OutputReport of oReport
89914>>>            End
89914>>>>
89914>>>        End_Procedure
89915>>>    End_Object
89916>>>
89916>>>    Object oCancelButton Is A Button
89918>>>        Set Label to "&Cancel"
89919>>>        Set Size to 14 50
89920>>>        Set Location to 52 182
89921>>>        Set Status_Help to "Cancel this Panel"
89922>>>        Set peAnchors to anBottomRight
89923>>>
89923>>>        // This procedure closes the report view.
89923>>>        Procedure OnClick
89926>>>            Send Request_Cancel
89927>>>        End_Procedure
89928>>>    End_Object
89929>>>
89929>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancelButton
89930>>>    On_Key Key_Alt+Key_P Send KeyAction of oPrintButton
89931>>>
89931>>>    Set Location to 6 6
89932>>>    Set Size to 69 236
89933>>>Cd_End_Object
89935>>>>
89935>        Use DataFlexReports\MyPicturesGallery.rv
Including file: DataFlexReports\MyPicturesGallery.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\MyPicturesGallery.rv)
89935>>>Use Windows.pkg
89935>>>Use DFRptVw.pkg
89935>>>Use File_Dlg.Pkg
89935>>>Use cTextEdit.pkg
89935>>>Use cImageList32.pkg
89935>>>
89935>>>Use cDRReport.pkg
89935>>>Use cDRPreview.pkg
89935>>>Use DRStatuspanel.dg
89935>>>Use DRExportOptions.dg
89935>>>
89935>>>Use DataFlexReports\FileDateTime.pkg
Including file: DataFlexReports\FileDateTime.pkg    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\FileDateTime.pkg)
89935>>>>>Use tWinStructs.pkg
89935>>>>>
89935>>>>>// Value                      Meaning
89935>>>>>//
89935>>>>>// FILE_ATTRIBUTE_ARCHIVE     The file or directory is an archive file or directory.
89935>>>>>//                            Applications use this flag to mark files for backup or removal.
89935>>>>>// FILE_ATTRIBUTE_COMPRESSED  The file or directory is compressed. For a file, this means
89935>>>>>//                            that all of the data in the file is compressed. For a
89935>>>>>//                            directory, this means that compression is the default for
89935>>>>>//                            newly created files and subdirectories.
89935>>>>>// FILE_ATTRIBUTE_DIRECTORY   The "file or directory" is a directory.
89935>>>>>// FILE_ATTRIBUTE_HIDDEN      The file or directory is hidden. It is not included in an
89935>>>>>//                            ordinary directory listing.
89935>>>>>// FILE_ATTRIBUTE_NORMAL      The file or directory has no other attributes set. This
89935>>>>>//                            attribute is valid only if used alone.
89935>>>>>// FILE_ATTRIBUTE_READONLY    The file or directory is read-only. Applications can read
89935>>>>>//                            the file but cannot write to it or delete it. In the case
89935>>>>>//                            of a directory, applications cannot delete it.
89935>>>>>// FILE_ATTRIBUTE_SYSTEM      The file or directory is part of, or is used exclusively by,
89935>>>>>//                            the operating system.
89935>>>>>
89935>>>>>Define FILE_ATTRIBUTE_READONLY   for |CI$00000001
89935>>>>>Define FILE_ATTRIBUTE_HIDDEN     for |CI$00000002
89935>>>>>Define FILE_ATTRIBUTE_SYSTEM     for |CI$00000004
89935>>>>>Define FILE_ATTRIBUTE_DIRECTORY  for |CI$00000010
89935>>>>>Define FILE_ATTRIBUTE_ARCHIVE    for |CI$00000020
89935>>>>>Define FILE_ATTRIBUTE_NORMAL     for |CI$00000080
89935>>>>>Define FILE_ATTRIBUTE_TEMPORARY  for |CI$00000100
89935>>>>>Define FILE_ATTRIBUTE_COMPRESSED for |CI$00000800
89935>>>>>
89935>>>>>Define INVALID_HANDLE_VALUE for |CI-1
89935>>>>>Define INVALID_FILE_SIZE    for |CI$FFFFFFFF
89935>>>>>Define ERROR_NO_MORE_FILES  for |CI18
89935>>>>>
89935>>>>>Define Max_Path for |CI260
89935>>>>>Define MinChar  for |CI$80
89935>>>>>Define MaxChar  for |CI$7F
89935>>>>>Define MinShort for |CI$8000
89935>>>>>Define MaxShort for |CI$7FFF
89935>>>>>Define MinLong  for |CI$80000000
89935>>>>>Define MaxLong  for |CI$7FFFFFFF
89935>>>>>Define MaxByte  for |CI$FF
89935>>>>>Define MaxWord  for |CI$FFFF
89935>>>>>Define MaxDword for |CI$FFFFFFFF
89935>>>>>
89935>>>>>// This function formats the time in a picture-string passed
89935>>>>>//
89935>>>>>// Picture  Meaning
89935>>>>>//
89935>>>>>//    h     Hours with no leading zero for single-digit hours; 12-hour clock
89935>>>>>//    hh    Hours with leading zero for single-digit hours; 12-hour clock
89935>>>>>//    H     Hours with no leading zero for single-digit hours; 24-hour clock
89935>>>>>//    HH    Hours with leading zero for single-digit hours; 24-hour clock
89935>>>>>//    m     Minutes with no leading zero for single-digit minutes
89935>>>>>//    mm    Minutes with leading zero for single-digit minutes
89935>>>>>//    s     Seconds with no leading zero for single-digit seconds
89935>>>>>//    ss    Seconds with leading zero for single-digit seconds
89935>>>>>//    t     One character time marker string, such as A or P
89935>>>>>//    tt    Multicharacter time marker string, such as AM or PM
89935>>>>>//
89935>>>>>// For example, to get the time string
89935>>>>>//    "11:29:40 PM"
89935>>>>>// use the following picture string:
89935>>>>>//    "hh':'mm':'ss tt"
89935>>>>>External_Function GetTimeFormat "GetTimeFormatA" Kernel32.Dll ;    DWord LCID DWord dwFlags Address lpsSystemTime Address lpFormat Address lpTimeStr Integer cchTime Returns Integer
89936>>>>>
89936>>>>>// This function returns the time for the computer. It is the time of the clock shown in the taskbar of windows
89936>>>>>External_Function GetLocalTime "GetLocalTime" Kernel32.Dll ;    Address lpsSystemTime Returns Integer
89937>>>>>
89937>>>>>// This function returns the time in GreenWhich currently based on the local time and the timezone information
89937>>>>>External_Function GetSystemTime "GetSystemTime" Kernel32.Dll ;    Address lpsSystemTime Returns Integer
89938>>>>>
89938>>>>>// This function formats the date in a picture-string passed
89938>>>>>//
89938>>>>>// Picture  Meaning
89938>>>>>//
89938>>>>>//    d     Day of month as digits with no leading zero for single-digit days.
89938>>>>>//    dd    Day of month as digits with leading zero for single-digit days.
89938>>>>>//    ddd   Day of week as a three-letter abbreviation. The function uses the LOCALE_SABBREVDAYNAME value
89938>>>>>//          associated with the specified locale.
89938>>>>>//    dddd  Day of week as its full name. The function uses the LOCALE_SDAYNAME value associated with the
89938>>>>>//          specified locale.
89938>>>>>//    M     Month as digits with no leading zero for single-digit months.
89938>>>>>//    MM    Month as digits with leading zero for single-digit months.
89938>>>>>//    MMM   Month as a three-letter abbreviation. The function uses the LOCALE_SABBREVMONTHNAME value
89938>>>>>//          associated with the specified locale.
89938>>>>>//    MMMM  Month as its full name. The function uses the LOCALE_SMONTHNAME value associated with the
89938>>>>>//          specified locale.
89938>>>>>//    y     Year as last two digits, but with no leading zero for years less than 10.
89938>>>>>//    yy    Year as last two digits, but with leading zero for years less than 10.
89938>>>>>//    yyyy  Year represented by full four digits.
89938>>>>>//    gg    Period/era string. The function uses the CAL_SERASTRING value associated with the specified
89938>>>>>//          locale. This element is ignored if the date to be formatted does not have an associated era
89938>>>>>//          or period string.
89938>>>>>// For example, to get the date string
89938>>>>>//    "Wed, Aug 31 94"
89938>>>>>// use the following picture string:
89938>>>>>//    "ddd',' MMM dd yy"
89938>>>>>External_Function GetDateFormat "GetDateFormatA" Kernel32.Dll ;    DWord LCID DWord dwFlags Address lpsSystemTime Address lpFormat Address lpDateStr Integer cchDate Returns Integer
89939>>>>>
89939>>>>>Define LOCALE_NOUSEROVERRIDE   for |CI$80000000 // do not use user overrides
89939>>>>>Define TIME_NOMINUTESORSECONDS for |CI$00000001 // do not use minutes or seconds
89939>>>>>Define TIME_NOSECONDS          for |CI$00000002 // do not use seconds
89939>>>>>Define TIME_NOTIMEMARKER       for |CI$00000004 // do not use time marker
89939>>>>>Define TIME_FORCE24HOURFORMAT  for |CI$00000008 // always use 24 hour format
89939>>>>>
89939>>>>>//
89939>>>>>//  Date Flags for GetDateFormatW.
89939>>>>>//
89939>>>>>Define DATE_SHORTDATE        for |CI$00000001  // use short date picture
89939>>>>>Define DATE_LONGDATE         for |CI$00000002  // use long date picture
89939>>>>>Define DATE_USE_ALT_CALENDAR for |CI$00000004  // use alternate calendar (if any)
89939>>>>>
89939>>>>>Struct tSystemTime
89939>>>>>    UShort wYear
89939>>>>>    UShort wMonth
89939>>>>>    UShort wDayOfWeek
89939>>>>>    UShort wDay
89939>>>>>    UShort wHour
89939>>>>>    UShort wMinute
89939>>>>>    UShort wSecond
89939>>>>>    UShort wMilliseconds
89939>>>>>End_Struct
89939>>>>>
89939>>>>>Struct tFileDateTime
89939>>>>>    String sFileName
89939>>>>>    DateTime dtCreated
89939>>>>>    DateTime dtLastAccessed
89939>>>>>    DateTime dtLastWrite
89939>>>>>    UInteger iAttributes
89939>>>>>End_Struct
89939>>>>>
89939>>>>>// lpFileTime     :pointer to file time to convert
89939>>>>>// lpSystemTime   :pointer to structure to receive system time
89939>>>>>External_Function FileTimeToSystemTime "FileTimeToSystemTime" Kernel32.Dll ;    Address lpFileTime Address lpSystemTime Returns Integer
89940>>>>>
89940>>>>>External_Function FileTimeToLocalFileTime "FileTimeToLocalFileTime" Kernel32.Dll ;    Address lpFileTime Address lpSystemTime Returns Integer
89941>>>>>
89941>>>>>// lpFileName      :address of name of file to search for
89941>>>>>// lpFindFileData  :address of returned information
89941>>>>>External_Function FindFirstFile "FindFirstFileA" Kernel32.Dll ;   Address lpFileName Address lpFindFileData Returns Handle
89942>>>>>
89942>>>>>// hFindFile       :handle of search
89942>>>>>// lpFindFileData  :address of structure for data on found file
89942>>>>>External_Function FindNextFile "FindNextFileA" Kernel32.Dll ;   Handle hFindFile Address lpFindFileData Returns Integer
89943>>>>>
89943>>>>>// hFindFile       :file search handle
89943>>>>>External_Function FindClose "FindClose" Kernel32.Dll ;   Handle hFindFile Returns Integer
89944>>>>>
89944>>>>>Function ConvertDateTimeToSystemDateTime Global UInteger dwLowDateTime UInteger dwHighDateTime Returns DateTime
89946>>>>>    String sFormattedTime sFormattedDate
89946>>>>>    Integer iSuccess iDataLength
89946>>>>>    tSystemTime SystemTime
89946>>>>>    tSystemTime SystemTime
89946>>>>>    tWinFileTime FileTime
89946>>>>>    tWinFileTime FileTime
89946>>>>>    DateTime dtResult
89946>>>>>
89946>>>>>    Move dwLowDateTime to FileTime.dwLowDateTime
89947>>>>>    Move dwHighDateTime to FileTime.dwHighDateTime
89948>>>>>
89948>>>>>    Move (FileTimeToSystemTime (AddressOf (FileTime), AddressOf (SystemTime))) to iSuccess
89949>>>>>    If (iSuccess <> 0) Begin
89951>>>>>        Move (Repeat (Character (0), 255)) to sFormattedTime
89952>>>>>        Move (GetTimeFormat (Locale_User_Default, 0, AddressOf (SystemTime), 0, AddressOf (sFormattedTime), 255)) to iDataLength
89953>>>>>
89953>>>>>        Move (Repeat (Character (0), 255)) to sFormattedDate
89954>>>>>        Move (GetDateFormat (Locale_User_Default, 0, AddressOf (SystemTime), 0, AddressOf (sFormattedDate), 255)) to iDataLength
89955>>>>>
89955>>>>>        Move (Cstring (sFormattedDate) * Cstring (sFormattedTime)) to dtResult
89956>>>>>    End
89956>>>>>>
89956>>>>>
89956>>>>>    Function_Return dtResult
89957>>>>>End_Function
89958>>>>>
89958>>>>>Function FileDateTime Global String sFilePath Returns tFileDateTime[]
89960>>>>>    Handle hFindFile
89960>>>>>    Integer iVoid iRetval iFile
89960>>>>>    DateTime dtFileTime
89960>>>>>    tWin32_Find_Data Win32_Find_Data
89960>>>>>    tWin32_Find_Data Win32_Find_Data
89960>>>>>    tFileDateTime[] FileDateTime
89960>>>>>    tFileDateTime[] FileDateTime
89961>>>>>
89961>>>>>    Move (FindFirstFile (AddressOf (sFilePath), AddressOf (Win32_Find_Data))) to hFindFile
89962>>>>>    If (hFindFile <> INVALID_HANDLE_VALUE) Begin
89964>>>>>        Repeat
89964>>>>>>
89964>>>>>            Move (AddressOf (Win32_Find_Data.cFileName)) to FileDateTime[iFile].sFileName
89965>>>>>            Move Win32_Find_Data.dwFileAttributes to FileDateTime[iFile].iAttributes
89966>>>>>            Move (ConvertDateTimeToSystemDateTime (Win32_Find_Data.ftCreationTime.dwLowDateTime, Win32_Find_Data.ftCreationTime.dwHighDateTime)) to FileDateTime[iFile].dtLastWrite
89967>>>>>            Move (ConvertDateTimeToSystemDateTime (Win32_Find_Data.ftLastAccessTime.dwLowDateTime, Win32_Find_Data.ftLastAccessTime.dwHighDateTime)) to FileDateTime[iFile].dtLastAccessed
89968>>>>>            Move (ConvertDateTimeToSystemDateTime (Win32_Find_Data.ftLastWriteTime.dwLowDateTime, Win32_Find_Data.ftLastWriteTime.dwHighDateTime)) to FileDateTime[iFile].dtLastWrite
89969>>>>>
89969>>>>>            Increment iFile
89970>>>>>
89970>>>>>            Move (FindNextFile (hFindFile, AddressOf (Win32_Find_Data))) to iRetval
89971>>>>>            // If iRetval = false the function call fails but GetLastError fails to tell me if
89971>>>>>            // this was because we do not find any files anymore.
89971>>>>>        Until (not (iRetval))
89973>>>>>
89973>>>>>        Move (FindClose (hFindFile)) to iVoid
89974>>>>>    End
89974>>>>>>
89974>>>>>
89974>>>>>    Function_Return FileDateTime
89975>>>>>End_Function
89976>>>Use DataFlexReports\WindowsFolders.pkg
Including file: DataFlexReports\WindowsFolders.pkg    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\WindowsFolders.pkg)
89976>>>>>Use VdfBase.pkg
89976>>>>>
89976>>>>>Define CSIDL_DESKTOP                    for |CI$0000
89976>>>>>Define CSIDL_INTERNET                   for |CI$0001
89976>>>>>Define CSIDL_PROGRAMS                   for |CI$0002
89976>>>>>Define CSIDL_CONTROLS                   for |CI$0003
89976>>>>>Define CSIDL_PRINTERS                   for |CI$0004
89976>>>>>Define CSIDL_PERSONAL                   for |CI$0005 // Version 6.
89976>>>>>Define CSIDL_FAVORITES                  for |CI$0006
89976>>>>>Define CSIDL_STARTUP                    for |CI$0007
89976>>>>>Define CSIDL_RECENT                     for |CI$0008
89976>>>>>Define CSIDL_SENDTO                     for |CI$0009
89976>>>>>Define CSIDL_BITBUCKET                  for |CI$000A
89976>>>>>Define CSIDL_STARTMENU                  for |CI$000B
89976>>>>>Define CSIDL_MYDOCUMENTS                for |CI$000C
89976>>>>>Define CSIDL_MYMUSIC                    for |CI$000D
89976>>>>>Define CSIDL_MYVIDEO                    for |CI$000E // Version 6.
89976>>>>>Define CSIDL_DESKTOPDIRECTORY           for |CI$0010
89976>>>>>Define CSIDL_DRIVES                     for |CI$0011
89976>>>>>Define CSIDL_NETWORK                    for |CI$0012
89976>>>>>Define CSIDL_NETHOOD                    for |CI$0013
89976>>>>>Define CSIDL_FONTS                      for |CI$0014
89976>>>>>Define CSIDL_TEMPLATES                  for |CI$0015
89976>>>>>Define CSIDL_COMMON_STARTMENU           for |CI$0016
89976>>>>>Define CSIDL_COMMON_PROGRAMS            for |CI$0017
89976>>>>>Define CSIDL_COMMON_STARTUP             for |CI$0018
89976>>>>>Define CSIDL_COMMON_DESKTOPDIRECTORY    for |CI$0019
89976>>>>>Define CSIDL_COMMON_FAVORITES           for |CI$001F
89976>>>>>Define CSIDL_APPDATA                    for |CI$001A // Version 4.7
89976>>>>>Define CSIDL_PRINTHOOD                  for |CI$001B
89976>>>>>Define CSIDL_LOCAL_APPDATA              for |CI$001C // Version 5.
89976>>>>>Define CSIDL_ALTSTARTUP                 for |CI$001D
89976>>>>>Define CSIDL_COMMON_ALTSTARTUP          for |CI$001E
89976>>>>>Define CSIDL_INTERNET_CACHE             for |CI$0020 // Version 4.7
89976>>>>>Define CSIDL_COOKIES                    for |CI$0021
89976>>>>>Define CSIDL_HISTORY                    for |CI$0022
89976>>>>>Define CSIDL_COMMON_APPDATA             for |CI$0023 // Version 5.
89976>>>>>Define CSIDL_WINDOWS                    for |CI$0024 // Version 5.
89976>>>>>Define CSIDL_SYSTEM                     for |CI$0025 // Version 5.
89976>>>>>Define CSIDL_PROGRAM_FILES              for |CI$0026 // Version 5.
89976>>>>>Define CSIDL_MYPICTURES                 for |CI$0027 // Version 5.
89976>>>>>Define CSIDL_PROFILE                    for |CI$0028 // Version 5.
89976>>>>>Define CSIDL_SYSTEMX86                  for |CI$0029
89976>>>>>Define CSIDL_PROGRAM_FILESX86           for |CI$002A
89976>>>>>Define CSIDL_PROGRAM_FILES_COMMON       for |CI$002B // Version 5.
89976>>>>>Define CSIDL_PROGRAM_FILES_COMMONX86    for |CI$002C
89976>>>>>Define CSIDL_COMMON_TEMPLATES           for |CI$002D
89976>>>>>Define CSIDL_COMMON_DOCUMENTS           for |CI$002E
89976>>>>>Define CSIDL_COMMON_ADMINTOOLS          for |CI$002F // Version 5.
89976>>>>>Define CSIDL_ADMINTOOLS                 for |CI$0030 // Version 5.
89976>>>>>Define CSIDL_CONNECTIONS                for |CI$0031
89976>>>>>Define CSIDL_COMMON_MUSIC               for |CI$0035 // Version 6.
89976>>>>>Define CSIDL_COMMON_PICTURES            for |CI$0036 // Version 6.
89976>>>>>Define CSIDL_COMMON_VIDEO               for |CI$0037 // Version 6.
89976>>>>>Define CSIDL_RESOURCES                  for |CI$0038
89976>>>>>Define CSIDL_RESOURCES_LOCALIZED        for |CI$0039
89976>>>>>Define CSIDL_COMMON_OEM_LINKS           for |CI$003A
89976>>>>>Define CSIDL_CDBURN_AREA                for |CI$003B // Version 6.
89976>>>>>Define CSIDL_COMPUTERSNEARME            for |CI$003D
89976>>>>>
89976>>>>>Define SHGFP_TYPE_CURRENT for 0
89976>>>>>Define SHGFP_TYPE_DEFAULT for 1
89976>>>>>
89976>>>>>Define S_OK          for |CI$0
89976>>>>>Define S_FALSE       for |CI$1
89976>>>>>Define E_NOTIMPL     for |CI$80004001
89976>>>>>Define E_NOINTERFACE for |CI$80004002
89976>>>>>Define E_ABORT       for |CI$80004004
89976>>>>>Define E_FAIL        for |CI$80004005 // Unicode only
89976>>>>>Define E_INVALIDARG  for |CI$80070057
89976>>>>>
89976>>>>>External_Function SHGetFolderPath "SHGetFolderPathA" shell32.dll Handle hWnd Integer iFolder Handle hToken DWord dwFlags Address lpszPath Returns Integer
89977>>>>>    
89977>>>>>Function WindowsFolderPath Global Integer iFolderID Boolean bCurrentPath Returns String
89979>>>>>    String sPath
89979>>>>>    Integer iRetval
89979>>>>>    
89979>>>>>    Move (Repeat (Character (0), MAX_PATH)) to sPath
89980>>>>>    
89980>>>>>    If (bCurrentPath) Begin
89982>>>>>        Move (SHGetFolderPath (0, iFolderId, 0, SHGFP_TYPE_CURRENT, AddressOf (sPath))) to iRetval
89983>>>>>    End
89983>>>>>>
89983>>>>>    Else Begin
89984>>>>>        Move (SHGetFolderPath (0, iFolderId, 0, SHGFP_TYPE_DEFAULT, AddressOf (sPath))) to iRetval 
89985>>>>>    End
89985>>>>>>
89985>>>>>    
89985>>>>>    Case Begin
89985>>>>>        Case (iRetval = S_OK) 
89987>>>>>            Move (CString (sPath)) to sPath
89988>>>>>            Move (ToOEM (sPath)) to sPath
89989>>>>>            Function_Return sPath
89990>>>>>        Case (iRetval = E_INVALIDARG)
89993>>>>>            Error DFERR_PROGRAM "Invalid FolderID passed to the function"
89994>>>>>>
89994>>>>>            Function_Return ""
89995>>>>>        Case (iRetval = E_FAIL)
89998>>>>>            Error DFERR_PROGRAM "Invalid FolderID passed to the function"
89999>>>>>>
89999>>>>>            Function_Return ""
90000>>>>>        Case (iRetval = S_FALSE)
90003>>>>>            Error DFERR_PROGRAM "FolderID is correct but folder does not exist"
90004>>>>>>
90004>>>>>            Function_Return ""
90005>>>>>    Case End
90005>>>>>End_Function
90006>>>Use DataFlexReports\PathFindExtension.Pkg
Including file: DataFlexReports\PathFindExtension.Pkg    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\PathFindExtension.Pkg)
90006>>>>>// Defines interface to WinAPI function PathFindExtension.
90006>>>>>External_Function WinAPI_PathFindExtension "PathFindExtensionA" SHLWAPI.DLL Address lpszPath Returns Pointer
90007>>>>>
90007>>>>>//=============================================================================
90007>>>>>// Searches a path for a file extension.
90007>>>>>//
90007>>>>>// Returns the extension of the filename in the passed path
90007>>>>>//    Example:
90007>>>>>//       In: path to a file
90007>>>>>//       Out: extension of the file name
90007>>>>>//
90007>>>>>// Parameters:
90007>>>>>//      sPath - Path that contains the extension for which to search.
90007>>>>>//=============================================================================
90007>>>>>Function PathFindExtension Desktop String sPath Returns String
90009>>>>>    String sRetVal
90009>>>>>    Address pExtension pPath
90009>>>>>
90009>>>>>    Move (sPath - Character (0)) To sPath
90010>>>>>    Move (AddressOf (sPath)) to pPath
90011>>>>>    Move (WinAPI_PathFindExtension (pPath)) To pExtension
90012>>>>>    Move (pExtension - pPath) To pPath
90013>>>>>    Move (Right (sPath, Length (sPath) - pPath)) To sRetVal
90014>>>>>
90014>>>>>    Function_Return (Trim (CString (sRetVal)))
90015>>>>>End_Function
90016>>>Use cSplitterContainer.pkg
Including file: cSplitterContainer.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cSplitterContainer.pkg)
90016>>>>>Use Windows.Pkg
90016>>>>>Use cSplitterContainerMixin.pkg
Including file: cSplitterContainerMixin.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cSplitterContainerMixin.pkg)
90016>>>>>>>// contains mixin support for SplitterContainer and SplitterContainerChild classes. This is required
90016>>>>>>>// because we support the non-db (cSplitterContainer / cSplitterContainerChild) and the
90016>>>>>>>// db ( cDbSplitterContainer / cDbSplitterContainerChild) classes/
90016>>>>>>>
90016>>>>>>>Use Windows.Pkg
90016>>>>>>>Use cSplitter.pkg
Including file: cSplitter.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cSplitter.pkg)
90016>>>>>>>>>Use Windows.pkg
90016>>>>>>>>>
90016>>>>>>>>>Define R2_BLACK       for |CI1   //  0
90016>>>>>>>>>Define R2_NOTMERGEPEN for |CI2   // DPon
90016>>>>>>>>>Define R2_MASKNOTPEN  for |CI3   // DPna
90016>>>>>>>>>Define R2_NOTCOPYPEN  for |CI4   // PN
90016>>>>>>>>>Define R2_MASKPENNOT  for |CI5   // PDna
90016>>>>>>>>>Define R2_NOT         for |CI6   // Dn
90016>>>>>>>>>Define R2_XORPEN      for |CI7   // DPx
90016>>>>>>>>>Define R2_NOTMASKPEN  for |CI8   // DPan
90016>>>>>>>>>Define R2_MASKPEN     for |CI9   // DPa
90016>>>>>>>>>Define R2_NOTXORPEN   for |CI10  // DPxn
90016>>>>>>>>>Define R2_NOP         for |CI11  // D
90016>>>>>>>>>Define R2_MERGENOTPEN for |CI12  // DPno
90016>>>>>>>>>Define R2_COPYPEN     for |CI13  // P
90016>>>>>>>>>Define R2_MERGEPENNOT for |CI14  // PDno
90016>>>>>>>>>Define R2_MERGEPEN    for |CI15  // DPo
90016>>>>>>>>>Define R2_WHITE       for |CI16  //  1
90016>>>>>>>>>Define R2_LAST        for |CI16
90016>>>>>>>>>
90016>>>>>>>>>Class cAbstractSplitter is a DFBaseControl
90017>>>>>>>>>    
90017>>>>>>>>>    
90017>>>>>>>>>    Procedure Construct_Object
90019>>>>>>>>>        Forward Send Construct_Object
90021>>>>>>>>>        
90021>>>>>>>>>        Property Boolean pbSplitVertical False
90022>>>>>>>>>        Property Integer piMinLocation 20
90023>>>>>>>>>        Property Integer piMaxLocation 20
90024>>>>>>>>>        Property Integer piLastLocation 0
90025>>>>>>>>>        Property Integer piMinTrack
90026>>>>>>>>>        Property Integer piMaxTrack
90027>>>>>>>>>        
90027>>>>>>>>>        Set Color to clBtnFace
90028>>>>>>>>>        Set Skip_state to True              // this tells switch/switch back to not try to give this the focus
90029>>>>>>>>>        Set Focus_Mode to NonFocusable      // is paged as part of client activation but never gets the focus
90030>>>>>>>>>        
90030>>>>>>>>>        // class name and external messages must be defined in the sub-class
90030>>>>>>>>>    End_Procedure
90031>>>>>>>>>    
90031>>>>>>>>>    Procedure DrawDrag Integer iPos
90033>>>>>>>>>        Integer iLastY iLastX
90033>>>>>>>>>        Integer yScreen xScreen x y
90033>>>>>>>>>        Integer iVoid xy cx cy
90033>>>>>>>>>        Handle hDC hBrush hBrushOld hPen hPenOld hWnd
90033>>>>>>>>>        Pointer lpPoint
90033>>>>>>>>>        tWinPoint APoint
90033>>>>>>>>>        tWinPoint APoint
90033>>>>>>>>>        Boolean bVertical
90033>>>>>>>>>        
90033>>>>>>>>>        Get pbSplitVertical to bVertical
90034>>>>>>>>>        
90034>>>>>>>>>        Get GuiLocation to xy
90035>>>>>>>>>        Move (Hi(xy))  to APoint.y
90036>>>>>>>>>        Move (Low(xy)) to APoint.x
90037>>>>>>>>>        Move (AddressOf(APoint)) to lpPoint
90038>>>>>>>>>        Delegate Get Window_Handle to hWnd              // Get the parent container's window handle
90040>>>>>>>>>        Move (ClientToScreen(hWnd, lpPoint)) to iVoid
90041>>>>>>>>>        
90041>>>>>>>>>        If bVertical Begin
90043>>>>>>>>>            Move (Hi(GuiSize(Self))) to cy
90044>>>>>>>>>            Get piLastLocation to iLastX
90045>>>>>>>>>            Move iPos to x
90046>>>>>>>>>            Move APoint.y to y
90047>>>>>>>>>            Move APoint.x to xScreen
90048>>>>>>>>>            
90048>>>>>>>>>            Move (x + xScreen) to x
90049>>>>>>>>>        End
90049>>>>>>>>>>
90049>>>>>>>>>        Else Begin
90050>>>>>>>>>            Move (low(GuiSize(Self))) to cx
90051>>>>>>>>>            Get piLastLocation to iLastY
90052>>>>>>>>>            Move iPos to y
90053>>>>>>>>>            Move APoint.x to x
90054>>>>>>>>>            Move APoint.y to yScreen
90055>>>>>>>>>            
90055>>>>>>>>>            Move (y + yScreen) to y
90056>>>>>>>>>        End
90056>>>>>>>>>>
90056>>>>>>>>>        
90056>>>>>>>>>        Move (GetDC(0)) to hDC
90057>>>>>>>>>        
90057>>>>>>>>>        Move (CreatePen(PS_SOLID, 1, clGray)) to hPen
90058>>>>>>>>>        Move (GetStockObject(GRAY_BRUSH)) to hBrush
90059>>>>>>>>>        Move (SelectObject(hDC, hPen))  to hPenOld
90060>>>>>>>>>        Move (SelectObject(hDC, hBrush)) to hBrushOld
90061>>>>>>>>>        Move (SetROP2(hDC, R2_NOTXORPEN)) to iVoid
90062>>>>>>>>>        
90062>>>>>>>>>        If bVertical Begin
90064>>>>>>>>>            If (iLastX <> 65536) Begin
90066>>>>>>>>>                Move (Rectangle(hDC, iLastX, y+1, iLastX+4, y+cy)) to iVoid // erase last line
90067>>>>>>>>>            End
90067>>>>>>>>>>
90067>>>>>>>>>            Move (Rectangle(hDC, x, y+1, x+4, y+cy)) to iVoid
90068>>>>>>>>>        End
90068>>>>>>>>>>
90068>>>>>>>>>        Else Begin
90069>>>>>>>>>            If (iLastY <> 65536) Begin
90071>>>>>>>>>                Move (Rectangle(hDC, x+1, iLastY, x+cx, iLastY+4)) to iVoid // erase last line
90072>>>>>>>>>            End
90072>>>>>>>>>>
90072>>>>>>>>>            Move (Rectangle(hDC, x+1, y, x+cx, y+4)) to iVoid
90073>>>>>>>>>        End
90073>>>>>>>>>>
90073>>>>>>>>>        
90073>>>>>>>>>        Move (SelectObject(hDC, hPenOld)) to iVoid
90074>>>>>>>>>        Move (SelectObject(hDC, hBrushOld)) to iVoid
90075>>>>>>>>>        Move (DeleteObject(hPen)) to iVoid
90076>>>>>>>>>        Move (ReleaseDC(0, hDC)) to iVoid
90077>>>>>>>>>        
90077>>>>>>>>>        Set piLastLocation to (If(bVertical,x, y))
90078>>>>>>>>>    End_Procedure
90079>>>>>>>>>    
90079>>>>>>>>>    
90079>>>>>>>>>    Procedure WMSG_OnMouseDown Integer wParam Integer lParam
90081>>>>>>>>>        Integer y cxy cy cyParent
90081>>>>>>>>>        Integer x cx cxParent
90081>>>>>>>>>        Boolean bVertical
90081>>>>>>>>>        Integer iMin iMax
90081>>>>>>>>>        
90081>>>>>>>>>        Get pbSplitVertical to bVertical
90082>>>>>>>>>        Send Set_Mouse_Capture
90083>>>>>>>>>        
90083>>>>>>>>>        Get piMinLocation to iMin
90084>>>>>>>>>        Get piMaxLocation to iMax
90085>>>>>>>>>        
90085>>>>>>>>>        Get GuiLocation to cx
90086>>>>>>>>>        Delegate Get GuiSize to cxy
90088>>>>>>>>>        If bVertical Begin
90090>>>>>>>>>            Move (Low(lParam)) to x
90091>>>>>>>>>            Move (Low(cx)) to cx
90092>>>>>>>>>            Move (Low(cxy)) to cxParent
90093>>>>>>>>>        End
90093>>>>>>>>>>
90093>>>>>>>>>        Else Begin
90094>>>>>>>>>            Move (Hi(lParam)) to x
90095>>>>>>>>>            Move (Hi(cx)) to cx
90096>>>>>>>>>            Move (Hi(cxy)) to cxParent
90097>>>>>>>>>        End
90097>>>>>>>>>>
90097>>>>>>>>>        Move (Cast(x,Short)) to x
90098>>>>>>>>>        
90098>>>>>>>>>        // these are delta tracking positions from the current splitter location
90098>>>>>>>>>        Set piMinTrack to ( iMin -cx )
90099>>>>>>>>>        Set piMaxTrack to ( cxParent - iMax - cx )
90100>>>>>>>>>        
90100>>>>>>>>>        Set piLastLocation to 65536
90101>>>>>>>>>        Send DrawDrag x
90102>>>>>>>>>    End_Procedure
90103>>>>>>>>>    
90103>>>>>>>>>    Function AdjustTrackPos Integer iTrack Returns Integer
90105>>>>>>>>>        Boolean bVertical
90105>>>>>>>>>        Integer iSz iMax iMin
90105>>>>>>>>>        
90105>>>>>>>>>        Get pbSplitVertical to bVertical
90106>>>>>>>>>        Delegate Get GuiClientSize to iSz
90108>>>>>>>>>        If bVertical Begin
90110>>>>>>>>>            Move (Low(iSz)) to iSz
90111>>>>>>>>>        End
90111>>>>>>>>>>
90111>>>>>>>>>        Else Begin
90112>>>>>>>>>            Move (hi(iSz)) to iSz
90113>>>>>>>>>        End
90113>>>>>>>>>>
90113>>>>>>>>>        Move (Cast(iTrack,Short)) to iTrack
90114>>>>>>>>>        
90114>>>>>>>>>        Get piMinTrack to iMin
90115>>>>>>>>>        Get piMaxTrack to iMax
90116>>>>>>>>>        Move (iMin max iTrack) to iTrack
90117>>>>>>>>>        Move (iMax min iTrack) to iTrack
90118>>>>>>>>>        Function_Return iTrack
90119>>>>>>>>>    End_Function
90120>>>>>>>>>    
90120>>>>>>>>>    
90120>>>>>>>>>    // reposition and resize all the objects..
90120>>>>>>>>>    Procedure WMSG_OnMouseUp Integer wParam Integer lParam
90122>>>>>>>>>        Integer iTrack
90122>>>>>>>>>        Boolean bVertical
90122>>>>>>>>>        
90122>>>>>>>>>        Get pbSplitVertical to bVertical
90123>>>>>>>>>        
90123>>>>>>>>>        Send Release_Mouse_Capture
90124>>>>>>>>>        
90124>>>>>>>>>        If bVertical Begin
90126>>>>>>>>>            Move (Low(lParam)) to iTrack
90127>>>>>>>>>        End
90127>>>>>>>>>>
90127>>>>>>>>>        Else Begin
90128>>>>>>>>>            Move (Hi(lParam)) to iTrack
90129>>>>>>>>>        End
90129>>>>>>>>>>
90129>>>>>>>>>        Get AdjustTrackPos iTrack to iTrack
90130>>>>>>>>>        Set piLastLocation to 65536
90131>>>>>>>>>        Send DrawDrag iTrack
90132>>>>>>>>>        
90132>>>>>>>>>        Send MoveSplitter iTrack
90133>>>>>>>>>        
90133>>>>>>>>>    End_Procedure
90134>>>>>>>>>    
90134>>>>>>>>>    Procedure MoveSplitter Integer iTrack
90136>>>>>>>>>        // normally we just ask the parent to handle this for us.
90136>>>>>>>>>        Delegate Send MoveSplitter iTrack
90138>>>>>>>>>    End_Procedure
90139>>>>>>>>>    
90139>>>>>>>>>    Procedure WMSG_OnMouseMove Integer wParam Integer lParam
90141>>>>>>>>>        Integer iTrack
90141>>>>>>>>>        Boolean bVertical
90141>>>>>>>>>        
90141>>>>>>>>>        
90141>>>>>>>>>        If (wParam iand MK_LBUTTON) Begin
90143>>>>>>>>>            
90143>>>>>>>>>            Get pbSplitVertical to bVertical
90144>>>>>>>>>            
90144>>>>>>>>>            If bVertical Begin
90146>>>>>>>>>                Move (Low(lParam)) to iTrack
90147>>>>>>>>>            End
90147>>>>>>>>>>
90147>>>>>>>>>            Else Begin
90148>>>>>>>>>                Move (Hi(lParam)) to iTrack
90149>>>>>>>>>            End
90149>>>>>>>>>>
90149>>>>>>>>>            Get AdjustTrackPos iTrack to iTrack
90150>>>>>>>>>            Send DrawDrag iTrack
90151>>>>>>>>>        End
90151>>>>>>>>>>
90151>>>>>>>>>    End_Procedure
90152>>>>>>>>>    
90152>>>>>>>>>    
90152>>>>>>>>>    // Determines which cursor shape should be displayed.
90152>>>>>>>>>    Procedure SetCursor
90154>>>>>>>>>        Integer iVoid
90154>>>>>>>>>        Handle  hWnd hLib hCursor retval
90154>>>>>>>>>        String sCursor
90154>>>>>>>>>        Boolean bVertical
90154>>>>>>>>>        Get pbSplitVertical to bVertical
90155>>>>>>>>>        Get Window_Handle to hWnd
90156>>>>>>>>>        Move (LoadLibrary("ComCtl32.dll")) to hLib
90157>>>>>>>>>        Move (If(bVertical,"#107","#135")) to sCursor
90158>>>>>>>>>        Move (LoadCursor(hLib, addressof(sCursor))) to hCursor    // splitter cursor
90159>>>>>>>>>        Move (SetClassLongPtr(hWnd, GCL_HCURSOR, hCursor )) to retval
90160>>>>>>>>>        Move (FreeLibrary(hLib)) to iVoid
90161>>>>>>>>>    End_Procedure
90162>>>>>>>>>    
90162>>>>>>>>>    Procedure Page Integer iState
90164>>>>>>>>>        Forward Send Page iState
90166>>>>>>>>>        If (iState =1) ;            Send SetCursor
90169>>>>>>>>>    End_Procedure
90170>>>>>>>>>    
90170>>>>>>>>>End_Class
90171>>>>>>>>>
90171>>>>>>>>>// we need different external classes or horizontal and vertical because
90171>>>>>>>>>// we are changing a class property in SetCursor
90171>>>>>>>>>
90171>>>>>>>>>Class cVerticalSplitter is a cAbstractSplitter
90172>>>>>>>>>    Procedure Construct_Object
90174>>>>>>>>>        Forward Send Construct_Object
90176>>>>>>>>>        Set pbSplitVertical to True
90177>>>>>>>>>        
90177>>>>>>>>>        Set External_Class_Name "DFVerticalSplitter" to "Static"
90178>>>>>>>>>        
90178>>>>>>>>>        Set External_Message WM_LBUTTONDOWN to msg_WMSG_OnMouseDown
90179>>>>>>>>>        Set External_Message WM_LBUTTONUP   to msg_WMSG_OnMouseUp
90180>>>>>>>>>        Set External_Message WM_MOUSEMOVE   to msg_WMSG_OnMouseMove
90181>>>>>>>>>        Set Window_Style to SS_NOTIFY True
90182>>>>>>>>>    End_Procedure
90183>>>>>>>>>    
90183>>>>>>>>>End_Class
90184>>>>>>>>>
90184>>>>>>>>>Class cHorizontalSplitter is a cAbstractSplitter
90185>>>>>>>>>    Procedure Construct_Object
90187>>>>>>>>>        Forward Send Construct_Object
90189>>>>>>>>>        Set pbSplitVertical to False
90190>>>>>>>>>        
90190>>>>>>>>>        Set External_Class_Name "DFHorizontalSplitter" to "Static"
90191>>>>>>>>>        
90191>>>>>>>>>        Set External_Message WM_LBUTTONDOWN to msg_WMSG_OnMouseDown
90192>>>>>>>>>        Set External_Message WM_LBUTTONUP   to msg_WMSG_OnMouseUp
90193>>>>>>>>>        Set External_Message WM_MOUSEMOVE   to msg_WMSG_OnMouseMove
90194>>>>>>>>>        Set Window_Style to SS_NOTIFY True
90195>>>>>>>>>    End_Procedure
90196>>>>>>>>>    
90196>>>>>>>>>End_Class
90197>>>>>>>>>
90197>>>>>>>
90197>>>>>>>Enum_List
90197>>>>>>>    Define fpFixFirstPanel      // Top panel height remains fixed on resize
90197>>>>>>>    Define fpFixLastPanel   // Bottom panel height remains fixed on resize
90197>>>>>>>End_Enum_List
90197>>>>>>>
90197>>>>>>>Define C_SplitterWidth for 3
90197>>>>>>>
90197>>>>>>>
90197>>>>>>>Class cSplitterContainerMixin is a Mixin
90198>>>>>>>    
90198>>>>>>>    Procedure Define_cSplitterContainerMixin
90200>>>>>>>        
90200>>>>>>>        // Split vertical or horizontal
90200>>>>>>>        Property Boolean pbSplitVertical True
90201>>>>>>>        
90201>>>>>>>        // determines which panel's height remains fixed during parent resize events
90201>>>>>>>        Property Integer peFixedPanel fpFixFirstPanel
90202>>>>>>>        
90202>>>>>>>        Property Integer piSplitterColor clBtnFace
90203>>>>>>>        
90203>>>>>>>        // these are normally maintained by the class
90203>>>>>>>        Property Handle phoFirstPanel 0
90204>>>>>>>        Property Handle phoLastPanel 0
90205>>>>>>>        Property Handle phoSplitter 0
90206>>>>>>>        
90206>>>>>>>        Property Integer piPrivateSplitterLocation 0
90207>>>>>>>        Property Integer piPrivateMinSplitterLocation 20
90208>>>>>>>        Property Integer piPrivateMaxSplitterLocation 20
90209>>>>>>>        
90209>>>>>>>        Set Border_Style to Border_None
90210>>>>>>>        
90210>>>>>>>    End_Procedure
90211>>>>>>>    
90211>>>>>>>    Procedure Set piMinSplitterLocation Integer iLocation
90213>>>>>>>        Handle hoSplitter
90213>>>>>>>        Boolean bVert
90213>>>>>>>        Set piPrivateMinSplitterLocation to iLocation
90214>>>>>>>        // if splitter exists update the splitter with Gui Units
90214>>>>>>>        Get phoSplitter to hoSplitter
90215>>>>>>>        If hoSplitter Begin
90217>>>>>>>            Get pbSplitVertical to bVert
90218>>>>>>>            Get DialogToGui iLocation iLocation to iLocation
90219>>>>>>>            Set piMinLocation of hoSplitter to (If(bVert,Low(iLocation),Hi(iLocation)))
90220>>>>>>>        End
90220>>>>>>>>
90220>>>>>>>    End_Procedure
90221>>>>>>>    
90221>>>>>>>    Function piMinSplitterLocation Returns Integer
90223>>>>>>>        Integer iLocation
90223>>>>>>>        Get piPrivateMinSplitterLocation to iLocation
90224>>>>>>>        Function_Return iLocation
90225>>>>>>>    End_Function
90226>>>>>>>    
90226>>>>>>>    Procedure Set piMaxSplitterLocation Integer iLocation
90228>>>>>>>        Handle hoSplitter
90228>>>>>>>        Boolean bVert
90228>>>>>>>        Set piPrivateMaxSplitterLocation to iLocation
90229>>>>>>>        // if splitter exists update the splitter with Gui Units
90229>>>>>>>        Get phoSplitter to hoSplitter
90230>>>>>>>        If hoSplitter Begin
90232>>>>>>>            Get pbSplitVertical to bVert
90233>>>>>>>            Get DialogToGui iLocation iLocation to iLocation
90234>>>>>>>            Set piMaxLocation of hoSplitter to (If(bVert,Low(iLocation),Hi(iLocation)))
90235>>>>>>>        End
90235>>>>>>>>
90235>>>>>>>    End_Procedure
90236>>>>>>>    
90236>>>>>>>    Function piMaxSplitterLocation Returns Integer
90238>>>>>>>        Integer iLocation
90238>>>>>>>        Get piPrivateMaxSplitterLocation to iLocation
90239>>>>>>>        Function_Return iLocation
90240>>>>>>>    End_Function
90241>>>>>>>    
90241>>>>>>>    Procedure Set piGuiSplitterLocation Integer iPos
90243>>>>>>>        Handle hWnd
90243>>>>>>>        Get Window_Handle to hWnd
90244>>>>>>>        If hWnd Begin
90246>>>>>>>            Get SizeSplitterComponents iPos to iPos
90247>>>>>>>        End
90247>>>>>>>>
90247>>>>>>>        Set piPrivateSplitterLocation to iPos
90248>>>>>>>    End_Procedure
90249>>>>>>>    
90249>>>>>>>    Function piGuiSplitterLocation Returns Integer
90251>>>>>>>        Integer iPos
90251>>>>>>>        Get piPrivateSplitterLocation to iPos
90252>>>>>>>        Function_Return iPos
90253>>>>>>>    End_Function
90254>>>>>>>    
90254>>>>>>>    Procedure Set piSplitterLocation Integer iPos
90256>>>>>>>        Boolean bVert
90256>>>>>>>        Get pbSplitVertical to bVert
90257>>>>>>>        Get DialogToGui iPos iPos to iPos
90258>>>>>>>        Set piGuiSplitterLocation to (If(bVert, low(iPos), Hi(iPos)))
90259>>>>>>>    End_Procedure
90260>>>>>>>    
90260>>>>>>>    Function piSplitterLocation Returns Integer
90262>>>>>>>        Integer iPos
90262>>>>>>>        Boolean bVert
90262>>>>>>>        // we will get the gui units and convert to dialog
90262>>>>>>>        Get piPrivateSplitterLocation to iPos
90263>>>>>>>        Get pbSplitVertical to bVert
90264>>>>>>>        Get GuiToDialog iPos iPos to iPos
90265>>>>>>>        Function_Return (If(bVert, low(iPos), Hi(iPos)))
90266>>>>>>>    End_Function
90267>>>>>>>    
90267>>>>>>>    // create the appropriate splitter for the object. This could be augmented
90267>>>>>>>    // to return a different object class
90267>>>>>>>    Function CreateSplitter Returns Handle
90269>>>>>>>        Boolean bVertical
90269>>>>>>>        Handle hoSplitter
90269>>>>>>>        
90269>>>>>>>        Get pbSplitVertical to bVertical
90270>>>>>>>        
90270>>>>>>>        If bVertical Begin
90272>>>>>>>            Get Create U_cVerticalSplitter to hoSplitter
90273>>>>>>>        End
90273>>>>>>>>
90273>>>>>>>        Else Begin
90274>>>>>>>            Get Create U_cHorizontalSplitter to hoSplitter
90275>>>>>>>        End
90275>>>>>>>>
90275>>>>>>>        
90275>>>>>>>        Function_Return hoSplitter
90276>>>>>>>    End_Function
90277>>>>>>>    
90277>>>>>>>    // augmented to test that all components are bound properly and
90277>>>>>>>    // to set the initial sizes
90277>>>>>>>    Procedure Page Integer iPageObject
90279>>>>>>>        Handle hoSplitter hoFirst hoLast
90279>>>>>>>        Integer iColor iClientSize
90279>>>>>>>        Boolean bVertical
90279>>>>>>>        Integer iLoc
90279>>>>>>>        Integer iVal
90279>>>>>>>        
90279>>>>>>>        Forward Send Page iPageObject
90281>>>>>>>        
90281>>>>>>>        If iPageObject Begin
90283>>>>>>>            
90283>>>>>>>            // make the container the size of the parent clientarea
90283>>>>>>>            // We use GetContainerClientSize instead of GuiClientSize because
90283>>>>>>>            // GetContainerClientSize has a special augmentation in tab pages that
90283>>>>>>>            // makes anchors work properly with unpaged tab-pages
90283>>>>>>>            Delegate Get GetContainerClientSize to iClientSize
90285>>>>>>>            Set GuiSize to (Hi(iClientSize)) (Low(iClientSize))
90286>>>>>>>            Set GuiLocation to 0 0
90287>>>>>>>            Send Adjust_Logicals
90288>>>>>>>            
90288>>>>>>>            // destroy existing splitter and create a new one
90288>>>>>>>            Get phoSplitter to hoSplitter
90289>>>>>>>            If (hoSplitter) Begin
90291>>>>>>>                Send Destroy of hoSplitter
90292>>>>>>>            End
90292>>>>>>>>
90292>>>>>>>            Get CreateSplitter to hoSplitter
90293>>>>>>>            Set phoSplitter to hoSplitter
90294>>>>>>>            Get phoFirstPanel to hoFirst
90295>>>>>>>            Get phoLastPanel to hoLast
90296>>>>>>>            If (hoSplitter=0 or hoFirst=0 or hoLast=0) Begin
90298>>>>>>>                Error DFERR_OPERATOR "Splitter container is missing a child splitter or container component"
90299>>>>>>>>
90299>>>>>>>                Procedure_Return
90300>>>>>>>            End
90300>>>>>>>>
90300>>>>>>>            
90300>>>>>>>            // set various splitter propertues directly in splitter
90300>>>>>>>            Get piSplitterColor to iColor
90301>>>>>>>            Set Color of hoSplitter to iColor
90302>>>>>>>            Get pbSplitVertical to bVertical
90303>>>>>>>            Set pbSplitVertical of hoSplitter to bVertical
90304>>>>>>>            // Once phoSplitter is set, reseting these will update the splitter as needed
90304>>>>>>>            Get piMinSplitterLocation to iVal
90305>>>>>>>            Set piMinSplitterLocation to iVal
90306>>>>>>>            Get piMaxSplitterLocation to iVal
90307>>>>>>>            Set piMaxSplitterLocation to iVal
90308>>>>>>>            
90308>>>>>>>            // this will force a resize
90308>>>>>>>            Get piGuiSplitterLocation to iLoc
90309>>>>>>>            Set piGuiSplitterLocation to iLoc
90310>>>>>>>        End
90310>>>>>>>>
90310>>>>>>>        
90310>>>>>>>    End_Procedure
90311>>>>>>>    
90311>>>>>>>    // called everytime the parent is resized
90311>>>>>>>    Procedure DoApplyAnchors Integer Arg1 Integer Arg2
90313>>>>>>>        If (Window_Handle(Self)) Begin
90315>>>>>>>            Send ResizeSplitterContainer
90316>>>>>>>        End
90316>>>>>>>>
90316>>>>>>>    End_Procedure
90317>>>>>>>    
90317>>>>>>>    // parent has been resized. Adjust everything.
90317>>>>>>>    Procedure ResizeSplitterContainer
90319>>>>>>>        Integer iClientSize
90319>>>>>>>        Handle  hoFirstPanel hoLastPanel
90319>>>>>>>        Integer cxy cxClient cyClient
90319>>>>>>>        Boolean bVertical
90319>>>>>>>        Integer iFirstSize
90319>>>>>>>        Integer eFixedPanel
90319>>>>>>>        
90319>>>>>>>        // make the container the size of the parent clientarea
90319>>>>>>>        Delegate Get GuiClientSize to iClientSize
90321>>>>>>>        Move (Hi(iClientSize))  to cyClient
90322>>>>>>>        Move (Low(iClientSize)) to cxClient
90323>>>>>>>        Set GuiSize to cyClient cxClient
90324>>>>>>>        Set GuiLocation to 0 0
90325>>>>>>>        
90325>>>>>>>        // resize child objects by determining the size of the first child container
90325>>>>>>>        Get pbSplitVertical to bVertical
90326>>>>>>>        Get peFixedPanel to eFixedPanel
90327>>>>>>>        If (eFixedPanel = fpFixFirstPanel) Begin
90329>>>>>>>            // Resize the panels keeping the size of the first panel fixed
90329>>>>>>>            Get phoFirstPanel to hoFirstPanel
90330>>>>>>>            Get GuiSize of hoFirstPanel to cxy
90331>>>>>>>            If bVertical Begin
90333>>>>>>>                Move (Low(cxy)) to iFirstSize
90334>>>>>>>            End
90334>>>>>>>>
90334>>>>>>>            Else Begin
90335>>>>>>>                Move (Hi(cxy)) to iFirstSize
90336>>>>>>>            End
90336>>>>>>>>
90336>>>>>>>        End
90336>>>>>>>>
90336>>>>>>>        Else Begin
90337>>>>>>>            // Resize the panels keeping the size of the last panel fixed
90337>>>>>>>            Get pholastPanel to hoLastPanel
90338>>>>>>>            Get GuiSize of hoLastPanel to cxy
90339>>>>>>>            If bVertical Begin
90341>>>>>>>                Move (cxClient - low(cxy) - C_SplitterWidth) to iFirstSize
90342>>>>>>>            End
90342>>>>>>>>
90342>>>>>>>            Else Begin
90343>>>>>>>                Move (cyClient - Hi(cxy) - C_SplitterWidth) to iFirstSize
90344>>>>>>>            End
90344>>>>>>>>
90344>>>>>>>        End
90344>>>>>>>>
90344>>>>>>>        Set piGuiSplitterLocation to iFirstSize
90345>>>>>>>    End_Procedure
90346>>>>>>>    
90346>>>>>>>    // set size of all child objects passing the GUI size of the first child panel
90346>>>>>>>    Function SizeSplitterComponents Integer iFirstSize Returns Integer
90348>>>>>>>        Handle  hoFirstPanel hoLastPanel hoSplitter
90348>>>>>>>        Integer cyFirstPanel cyLastPanel
90348>>>>>>>        Integer cxFirstPanel cxLastPanel
90348>>>>>>>        Integer cxy cxClient cyClient
90348>>>>>>>        Integer iMin iMax
90348>>>>>>>        Boolean bVertical
90348>>>>>>>        
90348>>>>>>>        Get phoFirstPanel    to hoFirstPanel
90349>>>>>>>        Get phoLastPanel to hoLastPanel
90350>>>>>>>        Get phoSplitter    to hoSplitter
90351>>>>>>>        Get pbSplitVertical to bVertical
90352>>>>>>>        Get GuiClientSize to cxy
90353>>>>>>>        Move (Hi(cxy))  to cyClient
90354>>>>>>>        Move (Low(cxy)) to cxClient
90355>>>>>>>        
90355>>>>>>>        Get piMinSplitterLocation to iMin
90356>>>>>>>        Get piMaxSplitterLocation to iMax
90357>>>>>>>        Get DialogToGui iMin iMin to iMin
90358>>>>>>>        Move (If(bVertical,Low(iMin),Hi(iMin))) to iMin
90359>>>>>>>        Get DialogToGui iMax iMax to iMax
90360>>>>>>>        Move (If(bVertical,Low(iMax),Hi(iMax))) to iMax
90361>>>>>>>        
90361>>>>>>>        If (iFirstSize=0) Begin
90363>>>>>>>            Move (If(bVertical, cxClient, cyClient)/2) to iFirstSize
90364>>>>>>>        End
90364>>>>>>>>
90364>>>>>>>        
90364>>>>>>>        Move (iFirstSize max iMin) to iFirstSize
90365>>>>>>>        Move (iFirstSize min (If(bVertical, cxClient, cyClient) - iMax)) to iFirstSize
90366>>>>>>>        
90366>>>>>>>        If bVertical Begin
90368>>>>>>>            Move iFirstSize to cxFirstPanel
90369>>>>>>>            
90369>>>>>>>            // position the splitter
90369>>>>>>>            Set GuiLocation of hoSplitter to 0 cxFirstPanel
90370>>>>>>>            Set GuiSize     of hoSplitter to cyClient C_SplitterWidth
90371>>>>>>>            
90371>>>>>>>            // position the left panel
90371>>>>>>>            Set GuiLocation of hoFirstPanel to 0 0
90372>>>>>>>            Set GuiSize     of hoFirstPanel to  cyClient cxFirstPanel
90373>>>>>>>            
90373>>>>>>>            // position the right panel
90373>>>>>>>            Set GuiLocation of hoLastPanel to 0 (cxFirstPanel + C_SplitterWidth)
90374>>>>>>>            Set GuiSize     of hoLastPanel to cyClient (cxClient - cxFirstPanel - C_SplitterWidth)
90375>>>>>>>            Move cxFirstPanel to iFirstSize
90376>>>>>>>        End
90376>>>>>>>>
90376>>>>>>>        Else Begin
90377>>>>>>>            Move iFirstSize to cyFirstPanel
90378>>>>>>>            
90378>>>>>>>            // position the splitter
90378>>>>>>>            Set GuiLocation of hoSplitter to cyFirstPanel 0
90379>>>>>>>            Set GuiSize     of hoSplitter to C_SplitterWidth cxClient
90380>>>>>>>            
90380>>>>>>>            // position the top panel
90380>>>>>>>            Set GuiLocation of hoFirstPanel to 0 0
90381>>>>>>>            Set GuiSize     of hoFirstPanel to cyFirstPanel cxClient
90382>>>>>>>            
90382>>>>>>>            // position the bottom panel
90382>>>>>>>            Set GuiLocation of hoLastPanel to (cyFirstPanel + C_SplitterWidth) 0
90383>>>>>>>            Set GuiSize     of hoLastPanel to (cyClient - cyFirstPanel - C_SplitterWidth) cxClient
90384>>>>>>>            Move cyFirstPanel to iFirstSize
90385>>>>>>>        End
90385>>>>>>>>
90385>>>>>>>        
90385>>>>>>>        Function_Return iFirstSize
90386>>>>>>>    End_Function
90387>>>>>>>    
90387>>>>>>>    // move splitter by passed GUI units. Usually called by splitter control
90387>>>>>>>    Procedure MoveSplitter Integer iGuiTrack
90389>>>>>>>        Integer cxy
90389>>>>>>>        Integer iFirstSize
90389>>>>>>>        Handle hoFirstPanel
90389>>>>>>>        Boolean bVertical
90389>>>>>>>        
90389>>>>>>>        Get pbSplitVertical to bVertical
90390>>>>>>>        
90390>>>>>>>        Get phoFirstPanel to hoFirstPanel
90391>>>>>>>        Get GuiSize of hoFirstPanel to cxy
90392>>>>>>>        If bVertical Begin
90394>>>>>>>            Move (Low(cxy) + iGuiTrack) to iFirstSize
90395>>>>>>>        End
90395>>>>>>>>
90395>>>>>>>        Else Begin
90396>>>>>>>            Move (Hi(cxy) + iGuiTrack) to iFirstSize
90397>>>>>>>        End
90397>>>>>>>>
90397>>>>>>>        
90397>>>>>>>        Set piGuiSplitterLocation to iFirstSize
90398>>>>>>>    End_Procedure
90399>>>>>>>    
90399>>>>>>>End_Class
90400>>>>>>>
90400>>>>>>>
90400>>>>>>>Class cSplitterContainerChildMixin is a Mixin
90401>>>>>>>    
90401>>>>>>>    Procedure Define_cSplitterContainerChildMixin
90403>>>>>>>        Handle hoObj
90403>>>>>>>        
90403>>>>>>>        // by default we use object order to determine which is the first panel and
90403>>>>>>>        // which is the second panel. This class is only valid within a SplitterContainer and
90403>>>>>>>        // an error will be raised here if this is not the case
90403>>>>>>>        Delegate Get phoFirstPanel to hoObj
90405>>>>>>>        If (hoObj=0) Begin
90407>>>>>>>            Delegate Set phoFirstPanel to Self
90409>>>>>>>        End
90409>>>>>>>>
90409>>>>>>>        Else Begin
90410>>>>>>>            Delegate Set phoLastPanel to Self
90412>>>>>>>        End
90412>>>>>>>>
90412>>>>>>>    End_Procedure
90413>>>>>>>    
90413>>>>>>>End_Class
90414>>>>>
90414>>>>>
90414>>>>>
90414>>>>>Class cSplitterContainer is a Container3d
90415>>>>>    Import_Class_Protocol cSplitterContainerMixin
90416>>>>>    Procedure Construct_Object
90418>>>>>        Forward Send Construct_Object
90420>>>>>        Send Define_cSplitterContainerMixin
90421>>>>>    End_Procedure
90422>>>>>End_Class
90423>>>>>
90423>>>>>
90423>>>>>Class cSplitterContainerChild is a Container3d
90424>>>>>    Import_Class_Protocol cSplitterContainerChildMixin
90425>>>>>    Procedure Construct_Object
90427>>>>>        Forward Send Construct_Object
90429>>>>>        Send Define_cSplitterContainerChildMixin
90430>>>>>        Set Border_Style to Border_Normal
90431>>>>>    End_Procedure
90432>>>>>End_Class
90433>>>>>
90433>>>>>
90433>>>
90433>>>// This example report view shows the use of a treeview that gets populated with folders from your computer. If the
90433>>>// view was not started before the tree points to the my pictures folder. The last selected folder will be remembered.
90433>>>// Each folder is enumerated and the contents of image files gets placed in a RDS table. DataFlex Reports renders
90433>>>// the images.
90433>>>
90433>>>// Note: Do not use this component to view your RAW data images or folders with thousands of large images. You will
90433>>>// run into an out-of-memory error.
90433>>>
90433>>>Deferred_View Activate_oMyPicturesGalleryReportView for ;Object oMyPicturesGalleryReportView is a ReportView
90458>>>    Set Label to "My Pictures Gallery"
90459>>>    Set Border_Style to Border_Thick
90460>>>    Set Location to 6 6
90461>>>    Set Size to 395 711
90462>>>    Set piMinSize to 50 300
90463>>>
90463>>>    Object oSplitterContainer is a cSplitterContainer
90465>>>        Set piSplitterLocation to 123
90466>>>
90466>>>        Object oFoldersTreeSplitterContainerChild is a cSplitterContainerChild
90468>>>            Object oFoldersTreeContainer is a Container3d
90470>>>                Set Size to 395 125
90471>>>                Set peAnchors to anTopBottomLeft
90472>>>                Set Border_Style to Border_None
90473>>>        
90473>>>                Object oImageList is a cImageList32
90475>>>                    Procedure OnCreate
90478>>>                        Integer iImage
90478>>>        
90478>>>                        Get AddImage "Folder.Ico" to iImage
90479>>>                        Get AddImage "NetworkDrive.ico" to iImage
90480>>>                        Get AddImage "Harddisk.ico" to iImage
90481>>>                        Get AddImage "CDRom.ico" to iImage
90482>>>                    End_Procedure
90483>>>        
90483>>>                    Enum_List
90483>>>                        Define C_FOLDERBMP
90483>>>                        Define C_NETWORKDRIVEBMP
90483>>>                        Define C_HARRDISKBMP
90483>>>                        Define C_CDROMBMP
90483>>>                    End_Enum_List
90483>>>                End_Object
90484>>>        
90484>>>                Function CurrentFolder Returns String
90487>>>                    Handle hItem
90487>>>                    String sItemFullPath
90487>>>        
90487>>>                    Get CurrentTreeItem of oFoldersTreeView to hItem
90488>>>                    Get ItemFullPath of oFoldersTreeView hItem to sItemFullPath
90489>>>        
90489>>>                    Function_Return sItemFullPath
90490>>>                End_Function
90491>>>        
90491>>>                Object oFoldersTreeView is a TreeView
90493>>>                    Set Size to 385 113
90494>>>                    Set Location to 5 5
90495>>>                    Set TreeLinesState to False
90496>>>                    Set ImageListObject to oImageList
90497>>>                    Set peAnchors to anAll
90498>>>        
90498>>>                    Enum_List
90498>>>                        Define C_HARDDISKITEM for 1
90498>>>                        Define C_CDROMITEM
90498>>>                        Define C_NETWORKDRIVEITEM
90498>>>                        Define C_FOLDERITEM
90498>>>                    End_Enum_List
90498>>>        
90498>>>                    Function LocateTreeItem String[] ByRef sPaths Returns Handle
90501>>>                        Handle hItem
90501>>>                        Integer iPaths iPath
90501>>>        
90501>>>                        Get LocateRootItem (Lowercase (sPaths[0])) to hItem
90502>>>                        If (hItem > 0) Begin
90504>>>                            Move (SizeOfArray (sPaths)) to iPaths
90505>>>                            Decrement iPaths
90506>>>                            For iPath from 1 to iPaths
90512>>>>
90512>>>                                Get LocateItem (Lowercase (sPaths[iPath])) hItem to hItem
90513>>>                                If (hItem = 0) Begin
90515>>>                                    Function_Return 0
90516>>>                                End
90516>>>>
90516>>>                            Loop
90517>>>>
90517>>>                        End
90517>>>>
90517>>>        
90517>>>                        Function_Return hItem
90518>>>                    End_Function
90519>>>        
90519>>>                    Function LocateItem String sValue Handle hItem Returns Handle
90522>>>                        String sItemLabel
90522>>>        
90522>>>                        Get ChildItem hItem to hItem
90523>>>                        While (hItem > 0)
90527>>>                            Get ItemLabel hItem to sItemLabel
90528>>>                            If (Lowercase (sItemLabel) = sValue) Begin
90530>>>                                Send DoExpandItem hItem
90531>>>                                Function_Return hItem
90532>>>                            End
90532>>>>
90532>>>                            Get NextSiblingItem hItem to hItem
90533>>>                        Loop
90534>>>>
90534>>>        
90534>>>                        Function_Return 0
90535>>>                    End_Function
90536>>>        
90536>>>                    Function LocateRootItem String sDrive Returns Handle
90539>>>                        Handle hRootItem
90539>>>                        String sItemLabel
90539>>>        
90539>>>                        Get RootItem to hRootItem
90540>>>                        While (hRootItem > 0)
90544>>>                            Get ItemLabel hRootItem to sItemLabel
90545>>>                            If (Lowercase (sItemLabel) = sDrive) Begin
90547>>>                                Send DoExpandItem hRootItem
90548>>>                                Function_Return hRootItem
90549>>>                            End
90549>>>>
90549>>>                            Get NextSiblingItem hRootItem to hRootItem
90550>>>                        Loop
90551>>>>
90551>>>        
90551>>>                        Function_Return 0
90552>>>                    End_Function
90553>>>        
90553>>>                    Procedure LocateFolder String sCurrentFolder
90556>>>                        Integer iPos
90556>>>                        String sTreeLevelDelimeter
90556>>>                        String[] sPaths
90557>>>                        Handle hItem
90557>>>        
90557>>>                        Get TreeLevelDelimeter to sTreeLevelDelimeter
90558>>>                        While (sCurrentFolder <> "")
90562>>>                            Move (Pos (sTreeLevelDelimeter, sCurrentFolder)) to iPos
90563>>>                            If (iPos > 0) Begin
90565>>>                                Move (Left (sCurrentFolder, iPos - 1)) to sPaths[SizeOfArray (sPaths)]
90566>>>                                Move (Right (sCurrentFolder, Length (sCurrentFolder) - iPos)) to sCurrentFolder
90567>>>                            End
90567>>>>
90567>>>                            Else Begin
90568>>>                                Move sCurrentFolder to sPaths[SizeOfArray (sPaths)]
90569>>>                                Move "" to sCurrentFolder
90570>>>                            End
90570>>>>
90570>>>                        Loop
90571>>>>
90571>>>        
90571>>>                        Get LocateTreeItem (&sPaths) to hItem
90572>>>                        If (hItem > 0) Begin
90574>>>                            Set CurrentTreeItem to hItem
90575>>>                        End
90575>>>>
90575>>>                    End_Procedure
90576>>>        
90576>>>                    Object oFilesIdleManager is a cIdleHandler
90578>>>                        Set pbEnabled to False
90579>>>        
90579>>>                        Procedure OnIdle
90582>>>                            Handle hItem
90582>>>                            String sFolderPath
90582>>>                            Boolean bContainsFolders
90582>>>        
90582>>>                            Set pbEnabled to False
90583>>>        
90583>>>                            Delegate Get CurrentTreeItem to hItem
90585>>>        
90585>>>                            Get ItemFullPath hItem to sFolderPath
90586>>>                            Get ShowImagesReport of (oReportContainer (oReportSplitterContainerChild)) to bContainsFolders
90587>>>                            Set ItemChildCount hItem to bContainsFolders
90588>>>                        End_Procedure
90589>>>                    End_Object
90590>>>        
90590>>>                    Procedure OnCreateTree
90593>>>                        Handle hItem
90593>>>                        Integer iDrive iDriveStatus
90593>>>                        String sCurrentFolder
90593>>>        
90593>>>                        Get AddTreeItem (WindowsFolderPath (CSIDL_MYPICTURES, True)) 0 C_FOLDERITEM C_FOLDERBMP C_FOLDERBMP to hItem
90594>>>                        Set ItemChildCount hItem to 1
90595>>>        
90595>>>                        If (SysConf (SYSCONF_OS_MAJOR_REV) >= 6) Begin
90597>>>                            Get AddTreeItem (WindowsFolderPath (CSIDL_COMMON_PICTURES, True)) 0 C_FOLDERITEM C_FOLDERBMP C_FOLDERBMP to hItem
90598>>>                            Set ItemChildCount hItem to 1
90599>>>                        End
90599>>>>
90599>>>        
90599>>>                        For iDrive from 1 to 26
90605>>>>
90605>>>                            GetDskInfo iDrive iDriveStatus
90606>>>                            If (iDriveStatus > Drive_root_not_exist) Begin
90608>>>                                Case Begin
90608>>>                                    Case (iDriveStatus = Drive_fixed)
90610>>>                                        Get AddTreeItem (Character (iDrive + 64) + ":") 0 C_HARDDISKITEM C_HARRDISKBMP C_HARRDISKBMP to hItem
90611>>>                                        Case Break
90612>>>                                    Case (iDriveStatus = Drive_cdrom)
90615>>>                                        Get AddTreeItem (Character (iDrive + 64) + ":") 0 C_CDROMITEM C_CDROMBMP C_CDROMBMP to hItem
90616>>>                                        Case Break
90617>>>                                    Case (iDriveStatus = Drive_remote)
90620>>>                                        Get AddTreeItem (Character (iDrive + 64) + ":") 0 C_NETWORKDRIVEITEM C_NETWORKDRIVEBMP C_NETWORKDRIVEBMP to hItem
90621>>>                                        Case Break
90622>>>                                Case End
90622>>>                                Set ItemChildCount hItem to 1
90623>>>                            End
90623>>>>
90623>>>                        Loop
90624>>>>
90624>>>        
90624>>>                        Get ReadString of ghoApplication "Preferences" "CurrentFolder" "" to sCurrentFolder
90625>>>                        If (sCurrentFolder <> "") Begin
90627>>>                            Send LocateFolder sCurrentFolder
90628>>>                        End
90628>>>>
90628>>>                    End_Procedure
90629>>>                    
90629>>>                    Procedure Deactivating
90632>>>                        String sCurrentFolder
90632>>>                        
90632>>>                        Get CurrentFolder to sCurrentFolder
90633>>>                        Send WriteString of ghoApplication "Preferences" "CurrentFolder" sCurrentFolder
90634>>>                        
90634>>>                        Forward Send Deactivating
90636>>>                    End_Procedure
90637>>>        
90637>>>                    Procedure OnItemExpanding Handle hItem
90640>>>                        String sFolderPath
90640>>>        
90640>>>                        Get ItemFullPath hItem to sFolderPath
90641>>>                        Send ReadFolderData (sFolderPath - "\*.*") hItem
90642>>>                    End_Procedure
90643>>>        
90643>>>                    Procedure OnItemCollapsed Handle hItem
90646>>>                        Handle hChildItem
90646>>>        
90646>>>                        Repeat
90646>>>>
90646>>>                            Get ChildItem hItem to hChildItem
90647>>>                            If (hChildItem > 0) Begin
90649>>>                                Send DoDeleteItem hChildItem
90650>>>                            End
90650>>>>
90650>>>                        Until (hChildItem = 0)
90652>>>                    End_Procedure
90653>>>        
90653>>>                    Procedure OnItemChanged Handle hItem Handle hItemOld
90656>>>                        Integer iItemData
90656>>>                        String sFolderPath
90656>>>                        Handle hoStatusBar
90656>>>        
90656>>>                        Get ItemData hItem to iItemData
90657>>>                        If (iItemData = C_FOLDERITEM) Begin
90659>>>                            Set pbEnabled of oFilesIdleManager to True
90660>>>                        End
90660>>>>
90660>>>        
90660>>>                        Get StatusBar_Id to hoStatusBar
90661>>>                        If (hoStatusBar > 0) Begin
90663>>>                            Get ItemFullPath hItem to sFolderPath
90664>>>                            Set Status_Help of hoStatusBar to sFolderPath
90665>>>                        End
90665>>>>
90665>>>                    End_Procedure
90666>>>        
90666>>>                    Procedure ReadFolderData String sPath Handle hRootItem
90669>>>                        tFileDateTime[] FileInfo
90669>>>                        tFileDateTime[] FileInfo
90670>>>                        Integer iElements iElement
90670>>>                        Handle hItem
90670>>>                        Boolean bContainsFolders
90670>>>        
90670>>>                        Move (FileDateTime (ToAnsi (sPath))) to FileInfo
90671>>>                        Move (SizeOfArray (FileInfo)) to iElements
90672>>>                        Decrement iElements
90673>>>                        For iElement from 0 to iElements
90679>>>>
90679>>>                            If (IsFlagIn (FILE_ATTRIBUTE_DIRECTORY, FileInfo[iElement].iAttributes) and (not (IsFlagIn (FILE_ATTRIBUTE_HIDDEN, FileInfo[iElement].iAttributes)))) Begin
90681>>>                                If (FileInfo[iElement].sFileName <> "." and FileInfo[iElement].sFileName <> "..") Begin
90683>>>                                    Get AddTreeItem (ToOem (FileInfo[iElement].sFileName)) hRootItem C_FOLDERITEM 0 0 to hItem
90684>>>                                    Set ItemChildCount hItem to 1
90685>>>                                    Move True to bContainsFolders
90686>>>                                End
90686>>>>
90686>>>                            End
90686>>>>
90686>>>                        Loop
90687>>>>
90687>>>        
90687>>>                        If (not (bContainsFolders)) Begin
90689>>>                            Set ItemChildCount hRootItem to False
90690>>>                        End
90690>>>>
90690>>>                    End_Procedure
90691>>>                End_Object
90692>>>            End_Object
90693>>>        End_Object
90694>>>
90694>>>        Object oReportSplitterContainerChild is a cSplitterContainerChild
90696>>>            Object oReportContainer is a Container3d
90698>>>                Set Size to 380 575
90699>>>                Set Location to 5 5
90700>>>                Set peAnchors to anAll
90701>>>                Set Border_Style to Border_None
90702>>>                
90702>>>                Property Handle phoReport
90704>>>                Property Boolean pbContainsFolders
90706>>>                
90706>>>                Function ShowImagesReport Returns Boolean
90709>>>                    Boolean bContainsFolders
90709>>>                    
90709>>>                    Send RunReport of oImagesReport
90710>>>                    Get pbContainsFolders to bContainsFolders
90711>>>                    
90711>>>                    Function_Return bContainsFolders
90712>>>                End_Function
90713>>>        
90713>>>                Object oCommandBars is a cDRCommandBarSystem
90715>>>                    Object oDRToolBar is a cCJToolbar
90717>>>                        Set pbCloseable to False
90718>>>                        Set pbEnableDocking to False
90719>>>                        Set pbGripper to False
90720>>>                        Set peStretched to stStretch
90721>>>                        Set pbDockNextTo to False
90722>>>                
90722>>>                        Object oFirstPage is a cDRFirstPageMenuItem
90724>>>                        End_Object
90725>>>                
90725>>>                        Object oPreviousPage is a cDRPreviousPageMenuItem
90727>>>                        End_Object
90728>>>                
90728>>>                        Object oCurrentPage is a cDRCurrentPageMenuItem
90730>>>                            Set peControlType to xtpControlEdit
90731>>>                        End_Object
90732>>>                
90732>>>                        Object oNextPage is a cDRNextPageMenuItem
90734>>>                        End_Object
90735>>>                
90735>>>                        Object oLastPage is a cDRLastPageMenuItem
90737>>>                        End_Object
90738>>>                
90738>>>                        Object oRefresh is a cDRRefreshMenuItem
90740>>>                        End_Object
90741>>>                
90741>>>                        Object oPrint is a cDRPrintMenuItem
90743>>>                        End_Object
90744>>>                
90744>>>                        Object oZoom is a cDRZoomMenuItem
90746>>>                        End_Object
90747>>>                
90747>>>                        Object oExport is a cDRExportMenuItem
90749>>>                            Set phoExportOptionsDialog to (oDRExportOptionsDialog)
90750>>>                        End_Object
90751>>>                    End_Object
90752>>>        
90752>>>                    Procedure OnComResizeClient Integer iLeft Integer iTop Integer iRight Integer iBottom
90755>>>                        Forward Send OnComResizeClient iLeft iTop iRight iBottom
90757>>>                        
90757>>>                        Set GuiSize of oImagesReport to (iBottom - iTop) (iRight - iLeft)
90758>>>                        Set GuiLocation of oImagesReport to iTop iLeft
90759>>>                    End_Procedure
90760>>>                End_Object
90761>>>                
90761>>>                Object oImagesReport is a cDRReport
90763>>>                    Set Size to 371 583
90764>>>                    Set Location to 15 0
90765>>>                    Set pbShowStatusPanel to True
90766>>>                    Set phoStatusPanel to oDRStatusPanel
90767>>>                    Set psReportName to "My Pictures Gallery.dr"
90768>>>                    Set pePreviewStyle to C_DRPREVIEW_EMBEDDED
90769>>>                    Set phoReport to Self
90770>>>                    Set peAnchors to anAll
90771>>>                    
90771>>>                    Procedure OnZoomChanged Integer iFactor
90774>>>                        Set psText of (oZoom (oDRToolBar (oCommandBars))) to (String (iFactor) + "%")
90775>>>                    End_Procedure
90776>>>                    
90776>>>                    Procedure OnPageChanged Integer iPage
90779>>>                        Set psText of (oCurrentPage (oDRToolBar (oCommandBars))) to (String (iPage))
90780>>>                    End_Procedure
90781>>>        
90781>>>                    Function ReadImageToVariant String sFileName Variant ByRef vDataColumn Returns Boolean
90784>>>                        UChar[] ucFileData
90785>>>                        Address aFileData
90785>>>                        Integer iChannel iLength iResult iCurrentArgSize
90785>>>                        Boolean bOk
90785>>>                        
90785>>>                        Move (Seq_New_Channel ()) to iChannel
90786>>>                        If (iChannel >= DF_SEQ_CHANNEL_MIN and iChannel <= DF_SEQ_CHANNEL_MAX) Begin                
90788>>>                            Direct_Input channel iChannel ("BINARY:" - sFileName)
90790>>>                            If (not (SeqEof)) Begin
90792>>>                                Read_Block channel iChannel ucFileData -1
90794>>>                                Move (Base64Encode (AddressOf (ucFileData), SizeOfArray (ucFileData))) to aFileData
90795>>>                                Move (CStringLength (aFileData)) to iLength
90796>>>                                Move (ResizeArray (ucFileData, iLength, 0)) to ucFileData
90797>>>                                Move (Memcopy (AddressOf (ucFileData), aFileData, iLength)) to iResult
90798>>>                                Get_Argument_Size to iCurrentArgSize
90799>>>                                If (iLength > iCurrentArgSize) Begin
90801>>>                                    Increment iLength
90802>>>                                    Set_Argument_Size iLength
90803>>>>
90803>>>                                End
90803>>>>
90803>>>                                Move (UCharArrayToString (ucFileData, SizeOfArray (ucFileData))) to vDataColumn
90804>>>                                Move (Free (aFileData)) to iResult
90805>>>                                Move True to bOk
90806>>>                            End
90806>>>>
90806>>>                            Close_Input channel iChannel
90808>>>                            Send Seq_Release_Channel iChannel
90809>>>                        End
90809>>>>
90809>>>                        
90809>>>                        Function_Return bOk
90810>>>                    End_Function
90811>>>        
90811>>>                    Procedure OnInitializeReport
90814>>>                        String sFolder sExtensions sExtension sFileName
90814>>>                        Variant[][] vData
90815>>>                        Integer iRow iElements iElement iCurrentArgSize
90815>>>                        tFileDateTime[] FilesInfo
90815>>>                        tFileDateTime[] FilesInfo
90816>>>                        Boolean bContainsFolders bSuccess
90816>>>                        
90816>>>                        Get_Argument_Size to iCurrentArgSize
90817>>>                        
90817>>>                        Move 0 to iRow
90818>>>                        
90818>>>                        Get CurrentFolder of oFoldersTreeView to sFolder
90819>>>                        Move (FileDateTime (ToAnsi (sFolder) - "\*.*")) to FilesInfo
90820>>>                        Move (SizeOfArray (FilesInfo)) to iElements
90821>>>                        If (iElements > 0) Begin
90823>>>                            Get ReadString of ghoApplication "Preferences" "GraphicExtensions" ".bmp;.gif;.jpg;.tif;.png;.rle" to sExtensions
90824>>>                            Move (Lowercase (sExtensions)) to sExtensions
90825>>>                            Decrement iElements
90826>>>                            For iElement from 0 to iElements
90832>>>>
90832>>>                                If (not (IsFlagIn (FILE_ATTRIBUTE_DIRECTORY, FilesInfo[iElement].iAttributes))) Begin
90834>>>                                    If (not (IsFlagIn (FILE_ATTRIBUTE_HIDDEN, FilesInfo[iElement].iAttributes))) Begin
90836>>>                                        Get PathFindExtension FilesInfo[iElement].sFileName to sExtension
90837>>>                                        If (sExtensions contains Lowercase (sExtension)) Begin
90839>>>                                            Move (sFolder - '\' - FilesInfo[iElement].sFileName) to sFileName
90840>>>                                            Get ReadImageToVariant sFileName (&vData[iRow][1]) to bSuccess
90841>>>                                            If (bSuccess) Begin
90843>>>                                                Move FilesInfo[iElement].sFileName to vData[iRow][0]
90844>>>                                                Increment iRow
90845>>>                                            End
90845>>>>
90845>>>                                        End
90845>>>>
90845>>>                                    End
90845>>>>
90845>>>                                End
90845>>>>
90845>>>                                Else Begin
90846>>>                                    If (FilesInfo[iElement].sFileName <> "." and FilesInfo[iElement].sFileName <> "..") Begin
90848>>>                                        Move True to bContainsFolders
90849>>>                                    End
90849>>>>
90849>>>                                End
90849>>>>
90849>>>                            Loop
90850>>>>
90850>>>                        End
90850>>>>
90850>>>                        
90850>>>                        Set pbContainsFolders to bContainsFolders
90851>>>                        
90851>>>                        If (SizeOfArray (vData)) Begin
90853>>>                            Send TableData '' 0 vData
90854>>>                        End
90854>>>>
90854>>>                        
90854>>>                        Set_Argument_Size iCurrentArgSize
90855>>>>
90855>>>                    End_Procedure
90856>>>                End_Object
90857>>>            End_Object
90858>>>        End_Object
90859>>>    End_Object
90860>>>Cd_End_Object
90862>>>>
90862>        Use DataFlexReports\CustomerVendorRelationshipReport.rv
Including file: DataFlexReports\CustomerVendorRelationshipReport.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\CustomerVendorRelationshipReport.rv)
90862>>>Use Windows.pkg
90862>>>Use DFRptVw.pkg
90862>>>Use File_Dlg.Pkg
90862>>>Use cTextEdit.pkg
90862>>>
90862>>>Use cDRReport.pkg
90862>>>Use cDRPreview.pkg
90862>>>Use DRStatuspanel.dg
90862>>>
90862>>>Use cCustomerDataDictionary.dd
90862>>>
90862>>>// This example runs a report showing all customers that meet the selection criteria and then produces a list
90862>>>// of vendors that delivered products to the customer. For each vendor the report shows how much sales were
90862>>>// done with this vendor.
90862>>>
90862>>>// Special in this example is that two different reports can be started to produce the results.
90862>>>// - Customer Vendor Relationship via Groups.dr:
90862>>>//   -- Significantly faster than Customer Vendor Relationship via SubReport.dr
90862>>>//   -- Due to relationships unable to show customers that had no sales (are they customers?)
90862>>>// - Customer Vendor Relationship via SubReport.dr:
90862>>>//   -- Uses a sub-report to collect the sales information
90862>>>//   -- Slower than Customer Vendor Relationship via Groups.dr
90862>>>//   -- Shows all customers and in case of zero sales a textbox that there are zero sales
90862>>>
90862>>>// Because the report object can run two different reports the caption label of the preview window
90862>>>// will not be set to the report name but to a constant value (see Set psPreviewCaptionLabel)
90862>>>
90862>>>// A special feature is the sorting of customers and vendors. The sorting is not done at record level but at
90862>>>// group level
90862>>>
90862>>>Deferred_View Activate_oCustomerVendorRelationshipReportView for ;Object oCustomerVendorRelationshipReportView is a ReportView
90887>>>    Set Label to "Customer Vendor Relationship"
90888>>>
90888>>>    Object oCustomer_DD is a cCustomerDataDictionary
90890>>>    End_Object
90891>>>
90891>>>    Object oReport is a cDRReport
90893>>>        Set pbShowStatusPanel to True
90894>>>        Set phoStatusPanel to oDRStatusPanel
90895>>>        Set psPreviewCaptionLabel to "Customer Vendor Relationship"
90896>>>
90896>>>        Procedure OnCreate
90899>>>            Forward Send OnCreate
90901>>>
90901>>>            Set piReportLanguage '' to LANG_DEFAULT
90902>>>        End_Procedure
90903>>>
90903>>>        Procedure OnInitializeReport
90906>>>            String sReportId
90906>>>            Integer eOutputDeviceMode
90906>>>
90906>>>            Forward Send OnInitializeReport
90908>>>
90908>>>            // Convert from the ReportView Output_Device_Mode to peOutputDestination
90908>>>            Get Output_Device_Mode to eOutputDeviceMode
90909>>>            Set peOutputDestination to eOutputDeviceMode
90910>>>
90910>>>            Get psReportId to sReportId
90911>>>
90911>>>            Send SetFilters
90912>>>            Send SetSortFields
90913>>>        End_Procedure
90914>>>
90914>>>        Procedure SetFilters
90917>>>            String sReportId sValue
90917>>>
90917>>>            Get psReportId to sReportId
90918>>>
90918>>>            Get Value of oCustomerCustomerNumber to sValue
90919>>>            If (sValue <> "") Begin
90921>>>                Send AddFilter sReportId "{Customer.Customer_Number}" C_drEqual sValue
90922>>>            End
90922>>>>
90922>>>
90922>>>            Get Value of oCustomerState to sValue
90923>>>            If (sValue <> "") Begin
90925>>>                Send AddFilter sReportId "{Customer.State}" C_drEqual sValue
90926>>>            End
90926>>>>
90926>>>
90926>>>            Get Value of oCustomerCity to sValue
90927>>>            If (sValue <> "") Begin
90929>>>                Send AddFilter sReportId "{Customer.City}" C_drEqual sValue
90930>>>            End
90930>>>>
90930>>>
90930>>>            Get Value of oCustomerStatus to sValue
90931>>>            If (sValue <> "") Begin
90933>>>                Send AddFilter sReportId "{Customer.Status}" C_drEqual sValue
90934>>>            End
90934>>>>
90934>>>        End_Procedure
90935>>>
90935>>>        // Normally a report will be sorted on records and using the AddRecordSortField method but this
90935>>>        // report uses groups and the group sort order is created by the result of a function
90935>>>        Procedure SetSortFields
90938>>>            String sReportId sSortField sSubReportId
90938>>>            Boolean bCustomersWithoutSales
90938>>>
90938>>>            Get psReportId to sReportId
90939>>>
90939>>>            Get CustomersSortField of oSortOrderGroup to sSortField
90940>>>            Set psFunction sReportId "GroupCustomersBy" to ("return" * sSortField)
90941>>>
90941>>>            Get VendorsSortField of oSortOrderGroup to sSortField
90942>>>            Get Checked_State of oCustomersWithoutSalesCheckBox to bCustomersWithoutSales
90943>>>            If (bCustomersWithoutSales) Begin
90945>>>                Get SubReportIDByName sReportId "Vendors Selling to Customer Subreport" to sSubReportId
90946>>>                Set psFunction sSubReportId "GroupVendorsBy" to ("return" * sSortField)
90947>>>            End
90947>>>>
90947>>>            Else Begin
90948>>>                Set psFunction sReportId "GroupVendorsBy" to ("return" * sSortField)
90949>>>            End
90949>>>>
90949>>>        End_Procedure
90950>>>    End_Object
90951>>>
90951>>>    Object oCustomerCustomerNumber Is A Form
90953>>>        Set Size to 12 57
90954>>>        Set Location to 5 71
90955>>>        Set piMaxSize to 12 77
90956>>>        Set piMinSize to 12 22
90957>>>        Set Label_Justification_Mode to jMode_Right
90958>>>        Set Label_Col_Offset to 2
90959>>>        Set Label to "Customer Number"
90960>>>        Set Status_Help to "Customer Id Number."
90961>>>        Set psToolTip to "Select Customer_Number"
90962>>>        Set Numeric_Mask 0 to 11 0
90963>>>        Set Prompt_Button_Mode to pb_PromptOn
90964>>>        Set Prompt_Object to Customer_sl
90965>>>        Set Form_Mask to "Z"
90966>>>
90966>>>        Procedure CopyPromptValue Handle hoPrompt
90969>>>            RowID[] riCustomer
90970>>>            Boolean bFound
90970>>>
90970>>>            Get SelectedRowIds of hoPrompt to riCustomer
90971>>>            Move (FindByRowID (Customer.File_Number, riCustomer[0])) to bFound
90972>>>            Set Value to Customer.Customer_Number
90973>>>        End_Procedure
90974>>>
90974>>>        // This procedure is called if peUpdateMode is not equal to umPromptNonInvoking, we use the
90974>>>        // SelectBestColumn function to retrieve the column for the passed file and field number. After retrieving
90974>>>        // the column we setup the list.
90974>>>        // NOTE: Make sure the selected column in the prompt object matches the data type of this form object
90974>>>        Procedure Prompt_CallBack Integer hoPrompt
90977>>>            Integer iColumn
90977>>>            Handle hoColumn
90977>>>            Boolean bIsVisible
90977>>>
90977>>>            Get SelectBestColumn Of hoPrompt File_Field Customer.Customer_Number to iColumn
90978>>>            If (iColumn <> -1) Begin
90980>>>                Get ColumnObject of hoPrompt iColumn to hoColumn
90981>>>                Get pbVisible of hoColumn to bIsVisible
90982>>>                If (not (bIsVisible)) Begin
90984>>>                    Set piInitialColumn of hoPrompt to -2
90985>>>                End
90985>>>>
90985>>>                Set piUpdateColumn of hoPrompt to iColumn
90986>>>                Set peUpdateMode of hoPrompt to umPromptValue
90987>>>            End
90987>>>>
90987>>>            Else Begin
90988>>>                Set phmPromptUpdateCallback of hoPrompt to CopyPromptValue
90989>>>                Set peUpdateMode of hoPrompt to -1
90990>>>            End
90990>>>>
90990>>>        End_Procedure
90991>>>    End_Object
90992>>>
90992>>>    Object oCustomerState Is A ComboForm
90994>>>        Set Size to 12 39
90995>>>        Set Location to 19 71
90996>>>        Set piMaxSize to 12 14
90997>>>        Set piMinSize to 12 4
90998>>>        Set Label_Justification_Mode to jMode_Right
90999>>>        Set Label_Col_Offset to 2
91000>>>        Set Label to "State"
91001>>>        Set Status_Help to "Two letter state ID."
91002>>>        Set psToolTip to "Select State"
91003>>>        Set Form_Margin to 2
91004>>>        Set Entry_State to False
91005>>>
91005>>>        // This procedure is called for each value in the validation table, we simply add the supplied
91005>>>        // value to the combo list.
91005>>>        Procedure AddItem Integer iItem String sData String sDesc Integer iFile Integer iRec
91008>>>            Send Combo_Add_Item sData
91009>>>        End_Procedure
91010>>>
91010>>>        // This procedure is called when the combo list is to be filled. We use Request_Fill_From_List
91010>>>        // to instruct the validation table to send AddItem for each value in the validation table.
91010>>>        Procedure Combo_Fill_List
91013>>>            Send Combo_Add_Item ""
91014>>>            Send Request_Fill_From_List of Customer_State_VT Self (Refproc (AddItem))
91015>>>        End_Procedure
91016>>>    End_Object
91017>>>
91017>>>    Object oCustomerCity is a ComboForm
91019>>>        Set Size to 12 106
91020>>>        Set Location to 33 71
91021>>>        Set piMaxSize to 12 106
91022>>>        Set piMinSize to 12 28
91023>>>        Set Label_Justification_Mode to jMode_Right
91024>>>        Set Label_Col_Offset to 2
91025>>>        Set Label to "City"
91026>>>        Set Status_Help to "City Name."
91027>>>        Set psToolTip to "Select City"
91028>>>        Set Entry_State to False
91029>>>
91029>>>        Procedure Combo_Fill_List
91032>>>            String[] sCities
91033>>>            Integer iElements
91033>>>
91033>>>            Send Request_Read of oCustomer_DD FIRST_RECORD Customer.File_Number 1
91034>>>            While (Found)
91038>>>                If (SearchArray (Trim (Customer.City), sCities) = -1) Begin
91040>>>                    Move (Trim (Customer.City)) to sCities[SizeOfArray (sCities)]
91041>>>                End
91041>>>>
91041>>>                Send Locate_Next of oCustomer_DD
91042>>>            Loop
91043>>>>
91043>>>
91043>>>            Send Combo_Add_Item ""
91044>>>
91044>>>            Move (SizeOfArray (sCities)) to iElements
91045>>>            While (iElements > 0)
91049>>>                Decrement iElements
91050>>>                Send Combo_Add_Item sCities[iElements]
91051>>>            Loop
91052>>>>
91052>>>        End_Procedure
91053>>>    End_Object
91054>>>
91054>>>    Object oCustomerStatus Is A ComboForm
91056>>>        Set Size to 12 39
91057>>>        Set Location to 47 71
91058>>>        Set piMaxSize to 12 39
91059>>>        Set piMinSize to 12 2
91060>>>        Set Label_Justification_Mode to jMode_Right
91061>>>        Set Label_Col_Offset to 2
91062>>>        Set Label to "Active Status"
91063>>>        Set Status_Help to "Active Inactive Status of customer"
91064>>>        Set psToolTip to "Select Status"
91065>>>        Set Form_Margin to 1
91066>>>
91066>>>        Procedure Combo_Fill_List
91069>>>            Send Combo_Add_Item " "
91070>>>            Send Combo_Add_Item "Y"
91071>>>            Send Combo_Add_Item "N"
91072>>>
91072>>>            Set Value to "Y"
91073>>>        End_Procedure
91074>>>
91074>>>        Set Entry_State To False
91075>>>        Set Combo_Sort_State To True
91076>>>    End_Object
91077>>>
91077>>>    Object oSortOrderGroup is a Group
91079>>>        Set Location to 61 5
91080>>>        Set Size to 42 173
91081>>>        Set peAnchors to anTopLeftRight
91082>>>        Set Label to "Order By:"
91083>>>
91083>>>        Function CustomersSortField Returns String
91086>>>            String sFieldName
91086>>>            String[] sSortColumns
91087>>>            Integer iItem
91087>>>
91087>>>            Get Value of oCustomersSortOnCombo to sFieldName
91088>>>            Get Combo_Item_Matching of oCustomersSortOnCombo sFieldName to iItem
91089>>>            Get psSortColumns of oCustomersSortOnCombo to sSortColumns
91090>>>
91090>>>            Function_Return sSortColumns[iItem]
91091>>>        End_Function
91092>>>
91092>>>        Object oCustomersSortOnCombo is a ComboForm
91094>>>            Set Location to 11 41
91095>>>            Set Size to 12 125
91096>>>            Set Combo_Sort_State to False
91097>>>            Set Entry_State 0 to False
91098>>>            Set peAnchors to anTopLeftRight
91099>>>
91099>>>            Property String[] psSortColumns
91101>>>
91101>>>            Set Label to "Customer"
91102>>>            Set Label_Col_Offset to 2
91103>>>            Set Label_Justification_Mode to JMode_Right
91104>>>            Set piMaxSize to 12 200
91105>>>
91105>>>            Procedure Combo_Fill_List
91108>>>                String[] sSortColumns
91109>>>
91109>>>                Send Combo_Add_Item "Customer_Number"
91110>>>                Move "{Customer.Customer_Number}" to sSortColumns[0]
91111>>>
91111>>>                Send Combo_Add_Item "Name"
91112>>>                Move "{Customer.Name}" to sSortColumns[1]
91113>>>
91113>>>                Set psSortColumns to sSortColumns
91114>>>            End_Procedure
91115>>>        End_Object
91116>>>
91116>>>        Function VendorsSortField Returns String
91119>>>            String sFieldName
91119>>>            String[] sSortColumns
91120>>>            Integer iItem
91120>>>
91120>>>            Get Value of oVendorSortOnCombo to sFieldName
91121>>>            Get Combo_Item_Matching of oVendorSortOnCombo sFieldName to iItem
91122>>>            Get psSortColumns of oVendorSortOnCombo to sSortColumns
91123>>>
91123>>>            Function_Return sSortColumns[iItem]
91124>>>        End_Function
91125>>>
91125>>>        Object oVendorSortOnCombo is a ComboForm
91127>>>            Set Location to 25 41
91128>>>            Set Size to 12 125
91129>>>            Set Combo_Sort_State to False
91130>>>            Set Entry_State 0 to False
91131>>>            Set peAnchors to anTopLeftRight
91132>>>
91132>>>            Property String[] psSortColumns
91134>>>
91134>>>            Set Label to "Vendor"
91135>>>            Set Label_Col_Offset to 2
91136>>>            Set Label_Justification_Mode to JMode_Right
91137>>>            Set piMaxSize to 12 200
91138>>>
91138>>>            Procedure Combo_Fill_List
91141>>>                String[] sSortColumns
91142>>>
91142>>>                Send Combo_Add_Item "ID"
91143>>>                Move "{Vendor.ID}" to sSortColumns[0]
91144>>>
91144>>>                Send Combo_Add_Item "Name"
91145>>>                Move "{Vendor.Name}" to sSortColumns[1]
91146>>>
91146>>>                Set psSortColumns to sSortColumns
91147>>>            End_Procedure
91148>>>        End_Object
91149>>>    End_Object
91150>>>
91150>>>    Object oDestinationGroup Is A RadioGroup
91152>>>        Set Label to "Output destination"
91153>>>        Set Location to 105 5
91154>>>        Set Size to 46 77
91155>>>
91155>>>        Object oScreenRadio Is A Radio
91157>>>            Set Label to "Preview"
91158>>>            Set Size to 10 60
91159>>>            Set Location to 10 6
91160>>>            Set Status_Help to "Print the report to screen"
91161>>>        End_Object
91162>>>
91162>>>        Object oPrinterRadio Is A Radio
91164>>>            Set Label to "Printer"
91165>>>            Set Size to 10 60
91166>>>            Set Location to 22 6
91167>>>            Set Status_Help to "Prints the report to printer"
91168>>>        End_Object
91169>>>
91169>>>        Object oExportRadio Is A Radio
91171>>>            Set Label to "Export"
91172>>>            Set Size to 10 60
91173>>>            Set Location to 34 6
91174>>>            Set Status_Help to "Outputs the report to disk file (PDF, CSV, Image, HTML, Excel, RTF)"
91175>>>        End_Object
91176>>>
91176>>>        Procedure Notify_Select_State Integer iNewItem Integer iOldItem
91179>>>            Forward Send Notify_Select_State iNewItem iOldItem
91181>>>
91181>>>            Case Begin
91181>>>                Case (iNewItem = 0)
91183>>>                    Set Output_Device_Mode to PRINT_TO_WINDOW
91184>>>                    Case Break
91185>>>                Case (iNewItem = 1)
91188>>>                    Set Output_Device_Mode to PRINT_TO_PRINTER
91189>>>                    Case Break
91190>>>                Case (iNewItem = 2)
91193>>>                    Set Output_Device_Mode to PRINT_TO_FILE
91194>>>                    Case Break
91195>>>            Case End
91195>>>        End_Procedure
91196>>>    End_Object
91197>>>
91197>>>    Object oCustomersWithoutSalesCheckBox is a CheckBox
91199>>>        Set Size to 10 50
91200>>>        Set Location to 110 95
91201>>>        Set psToolTip to 'Include Customers Without Sales'
91202>>>        Set Label to "Without Sales"
91203>>>    End_Object
91204>>>
91204>>>    Object oPrintButton Is A Button
91206>>>        Set Label to "&Print"
91207>>>        Set Status_Help to "Print the report"
91208>>>        Set Size to 14 50
91209>>>        Set Location to 153 77
91210>>>        Set Default_State to True
91211>>>        Set peAnchors to anBottomRight
91212>>>
91212>>>        Procedure OnClick
91215>>>            Boolean bCustomersWithoutSales
91215>>>
91215>>>            Get Checked_State of oCustomersWithoutSalesCheckBox to bCustomersWithoutSales
91216>>>            If (bCustomersWithoutSales) Begin
91218>>>                Set psReportName of oReport to "Customer Vendor Relationship via SubReport.dr"
91219>>>            End
91219>>>>
91219>>>            Else Begin
91220>>>                Set psReportName of oReport to "Customer Vendor Relationship via Groups.dr"
91221>>>            End
91221>>>>
91221>>>
91221>>>            Send RunReport of oReport
91222>>>        End_Procedure
91223>>>    End_Object
91224>>>
91224>>>    Object oCancelButton Is A Button
91226>>>        Set Label to "&Cancel"
91227>>>        Set Size to 14 50
91228>>>        Set Location to 153 132
91229>>>        Set Status_Help to "Cancel this Panel"
91230>>>        Set peAnchors to anBottomRight
91231>>>
91231>>>        // This procedure closes the report view.
91231>>>        Procedure OnClick
91234>>>            Send Request_Cancel
91235>>>        End_Procedure
91236>>>    End_Object
91237>>>
91237>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancelButton
91238>>>    On_Key Key_Alt+Key_P Send KeyAction of oPrintButton
91239>>>
91239>>>    Set Location to 6 6
91240>>>    Set Size to 170 185
91241>>>Cd_End_Object
91243>>>>
91243>        Use DataFlexReports\OrderswithPagelayersReport.rv
Including file: DataFlexReports\OrderswithPagelayersReport.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\OrderswithPagelayersReport.rv)
91243>>>Use Windows.pkg
91243>>>Use DFRptVw.pkg
91243>>>Use File_Dlg.Pkg
91243>>>Use cTextEdit.pkg
91243>>>Use cDbScrollingContainer.pkg
Including file: cDbScrollingContainer.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cDbScrollingContainer.pkg)
91243>>>>>// Provides support for db aware scrolling containers.
91243>>>>>// Scrolling containers is provided by creating two objects,
91243>>>>>// a host (dbScrollingContainer) and a scrolling clientarea (dbScrollingClientArea)
91243>>>>>// The host has no public interface, you just drop the object. It should have only one child object
91243>>>>>// and that should be a scrolling client-area. If it is not, it is an error. It is also considered
91243>>>>>// an error to place a scrolling client area in any object other than a scrolling container.
91243>>>>>
91243>>>>>Use DFClient.pkg
91243>>>>>Use cScrollingContainerMixin.pkg
Including file: cScrollingContainerMixin.pkg    (C:\Program Files (x86)\DataFlex 19.1\Pkg\cScrollingContainerMixin.pkg)
91243>>>>>>>// Mixin classes for scrolling container support:
91243>>>>>>>// cScrollingContainerMixin & cScrollingClientAreaMixin
91243>>>>>>>// These are used by cSrollingContainer / cScrollingClientArea and
91243>>>>>>>// dbScrollingContainer / dbScrollingClientArea.
91243>>>>>>>// The scrolling container has no public interface, you just drop the object. It should have only one child object
91243>>>>>>>// and that should be a scrolling client-area. If it is not, it is an error. It is also considered
91243>>>>>>>// an error to place a scrolling client area in any object other than a scrolling container.
91243>>>>>>>
91243>>>>>>>Use Windows.pkg
91243>>>>>>>Use Winuser.pkg
91243>>>>>>>Use tWinStructs.pkg
91243>>>>>>>
91243>>>>>>>Register_Function pbTabbedWorkspaces Returns Boolean
91243>>>>>>>Register_Function pbCenterTabbedViews Returns Boolean
91243>>>>>>>// support for the scrolling client area mixin object.
91243>>>>>>>
91243>>>>>>>Class cScrollingClientAreaMixin is a Mixin
91244>>>>>>>    
91244>>>>>>>    Procedure Define_cScrollingClientAreaMixin
91246>>>>>>>        
91246>>>>>>>        Set pbSizeToClientArea to False // should already be set to this, but just in case.
91247>>>>>>>        Set Border_Style to Border_None
91248>>>>>>>        
91248>>>>>>>        Property Boolean pbAutoScroll True
91249>>>>>>>        Property Boolean pbAutoScrollFocus True
91250>>>>>>>        Property Integer piAutoScrollMarginX 5
91251>>>>>>>        Property Integer piAutoScrollMarginY 5
91252>>>>>>>        Property Integer piAutoScrollMinX 0
91253>>>>>>>        Property Integer piAutoScrollMinY 0
91254>>>>>>>        Property Boolean pbShowDisabledScrollBar False
91255>>>>>>>        
91255>>>>>>>        
91255>>>>>>>        Property Integer piLineScrollUnit  5 // minimum scrolling unit for line up/down and mouse wheel
91256>>>>>>>        Property Integer piMinimumHeight 0 // the minimum height that doesn't need scrolling
91257>>>>>>>        Property Integer piMinimumWidth 0 //(the minimum width that doesn't need scrolling
91258>>>>>>>        // keeps track of scrolling
91258>>>>>>>        Property Integer piCurrentVertScrolled 0
91259>>>>>>>        Property Integer piCurrentHorzScrolled 0
91260>>>>>>>        Property Integer piWheelDelta 0               // internal, accumulates mouse wheel clicks
91261>>>>>>>        Delegate Set phoScrollingClientArea to Self
91263>>>>>>>        
91263>>>>>>>        // set this true to make this a tabbed workspace view (design time)
91263>>>>>>>        Property Boolean pbTabWorkspaceView False
91264>>>>>>>        // set this false to stop auto-determination of pbTabWorkspaceView (design time)
91264>>>>>>>        Property Boolean pbAutoSetTabWorkspaceView True
91265>>>>>>>    End_Procedure
91266>>>>>>>    
91266>>>>>>>    // low level event sent from windows.
91266>>>>>>>    Procedure OnWmMouseWheel Integer wParam Integer lParam
91268>>>>>>>        Integer iWheelDelta iKeys iDelta iClicks
91268>>>>>>>        Move (low(abs(wParam))) to iKeys           // any keys down when pressed
91269>>>>>>>        Move (hi(abs(wParam))) to iDelta           // number of click units
91270>>>>>>>        If (wParam<0) Begin
91272>>>>>>>            Move (-iDelta) to iDelta     // can be up or down
91273>>>>>>>        End
91273>>>>>>>>
91273>>>>>>>        Get  piWheelDelta to iWheelDelta           // Current accumulated micro clicks
91274>>>>>>>        Move (iWheelDelta+iDelta) to iWheelDelta
91275>>>>>>>        // C_WHEELDATA is 120 as defined by MS as the delta to react to. Once click is usually 120
91275>>>>>>>        Move (iWheelDelta/C_WHEELDELTA) to iClicks // Number of clicks to react to
91276>>>>>>>        Set  piWheelDelta to (mod(iWheelDelta,C_WHEELDELTA)) // remainder unused microclicks
91277>>>>>>>        // If we have enough Clicks send OnMouseWheel
91277>>>>>>>        If (iClicks<>0) Begin
91279>>>>>>>            Send OnMouseWheel iClicks iKeys
91280>>>>>>>        End
91280>>>>>>>>
91280>>>>>>>        // tell windows that we've handled the event.
91280>>>>>>>        Set Windows_Override_State to True
91281>>>>>>>    End_Procedure
91282>>>>>>>    
91282>>>>>>>    
91282>>>>>>>    // should be sent by DF message OnWMMouseWheel , which is sent by WM_MOUSEWHEEL
91282>>>>>>>    Procedure OnMouseWheel Integer iClicks Integer iKey
91284>>>>>>>        Integer iLineScrollUnit
91284>>>>>>>        Get piLineScrollUnit to iLineScrollUnit
91285>>>>>>>        Send VScroll (-iClicks*iLineScrollUnit*2) // (If(iClicks>0,False,True)) (abs(iClicks))
91286>>>>>>>    End_Procedure
91287>>>>>>>    
91287>>>>>>>    // should be sent by WM_VSCROLL
91287>>>>>>>    Procedure SetVScrollbox Integer iType Integer iNewPos
91289>>>>>>>        Boolean bOk
91289>>>>>>>        tWinScrollInfo ScrollInfo
91289>>>>>>>        tWinScrollInfo ScrollInfo
91289>>>>>>>        Integer iLineScrollUnit
91289>>>>>>>        Get piLineScrollUnit to iLineScrollUnit
91290>>>>>>>        Get GetScrollBarInfo True (&ScrollInfo) to bOk
91291>>>>>>>        If bOk Begin
91293>>>>>>>            
91293>>>>>>>            Case Begin
91293>>>>>>>                Case (iType=SB_PAGEDOWN)
91295>>>>>>>                    Send VScroll ScrollInfo.nPage
91296>>>>>>>                    Case Break
91297>>>>>>>                
91297>>>>>>>                Case (iType=SB_PAGEUP)
91300>>>>>>>                    Send VScroll (-ScrollInfo.nPage)
91301>>>>>>>                    Case Break
91302>>>>>>>                
91302>>>>>>>                Case (iType=SB_LINEDOWN)
91305>>>>>>>                    Send VScroll iLineScrollUnit
91306>>>>>>>                    Case Break
91307>>>>>>>                
91307>>>>>>>                Case (iType=SB_LINEUP)
91310>>>>>>>                    Send VScroll (-iLineScrollUnit)
91311>>>>>>>                    Case Break
91312>>>>>>>                
91312>>>>>>>                Case (iType=SB_BOTTOM)
91315>>>>>>>                    Send VScroll (ScrollInfo.nMax-ScrollInfo.nPos)
91316>>>>>>>                    Case Break
91317>>>>>>>                
91317>>>>>>>                Case (iType=SB_Top)
91320>>>>>>>                    Send VScroll (-ScrollInfo.nPos)
91321>>>>>>>                    Case Break
91322>>>>>>>                
91322>>>>>>>                Case (iType=SB_THUMBPOSITION)
91325>>>>>>>                    Case Break
91326>>>>>>>                
91326>>>>>>>                Case (iType=SB_THUMBTRACK)
91329>>>>>>>                    Send VScroll (ScrollInfo.nTrackPos-ScrollInfo.nPos)
91330>>>>>>>                    Case Break
91331>>>>>>>            Case End
91331>>>>>>>        End
91331>>>>>>>>
91331>>>>>>>    End_Procedure
91332>>>>>>>    
91332>>>>>>>    // should be sent by WM_HSCROLL
91332>>>>>>>    Procedure SetHScrollbox Integer iType Integer iNewPos
91334>>>>>>>        Boolean bOk
91334>>>>>>>        tWinScrollInfo ScrollInfo
91334>>>>>>>        tWinScrollInfo ScrollInfo
91334>>>>>>>        Integer iLineScrollUnit
91334>>>>>>>        Get piLineScrollUnit to iLineScrollUnit
91335>>>>>>>        Get GetScrollBarInfo False (&ScrollInfo) to bOk
91336>>>>>>>        If bOk Begin
91338>>>>>>>            
91338>>>>>>>            Case Begin
91338>>>>>>>                Case (iType=SB_PAGEDOWN)
91340>>>>>>>                    Send hScroll ScrollInfo.nPage
91341>>>>>>>                    Case Break
91342>>>>>>>                
91342>>>>>>>                Case (iType=SB_PAGEUP)
91345>>>>>>>                    Send hScroll (-ScrollInfo.nPage)
91346>>>>>>>                    Case Break
91347>>>>>>>                
91347>>>>>>>                Case (iType=SB_LINEDOWN)
91350>>>>>>>                    Send hScroll iLineScrollUnit
91351>>>>>>>                    Case Break
91352>>>>>>>                
91352>>>>>>>                Case (iType=SB_LINEUP)
91355>>>>>>>                    Send hScroll (-iLineScrollUnit)
91356>>>>>>>                    Case Break
91357>>>>>>>                
91357>>>>>>>                Case (iType=SB_BOTTOM)
91360>>>>>>>                    Send hScroll (ScrollInfo.nMax-ScrollInfo.nPos)
91361>>>>>>>                    Case Break
91362>>>>>>>                
91362>>>>>>>                Case (iType=SB_Top)
91365>>>>>>>                    Send hScroll (-ScrollInfo.nPos)
91366>>>>>>>                    Case Break
91367>>>>>>>                
91367>>>>>>>                Case (iType=SB_THUMBPOSITION)
91370>>>>>>>                    Case Break
91371>>>>>>>                
91371>>>>>>>                Case (iType=SB_THUMBTRACK)
91374>>>>>>>                    Send hScroll (ScrollInfo.nTrackPos-ScrollInfo.nPos)
91375>>>>>>>                    Case Break
91376>>>>>>>            Case End
91376>>>>>>>        End
91376>>>>>>>>
91376>>>>>>>    End_Procedure
91377>>>>>>>    
91377>>>>>>>    
91377>>>>>>>    // this calls SetScrollInfo with proper info
91377>>>>>>>    Procedure SetScrollBarInfo Boolean bVert Integer iRangeMin Integer iRangeMax Integer iPageSize
91379>>>>>>>        tWinScrollInfo ScrollInfo
91379>>>>>>>        tWinScrollInfo ScrollInfo
91379>>>>>>>        Integer iVoid
91379>>>>>>>        Handle hWnd
91379>>>>>>>        Boolean bShow
91379>>>>>>>        
91379>>>>>>>        Delegate Get Window_Handle to hWnd
91381>>>>>>>        If (hWnd <> 0) Begin
91383>>>>>>>            Move (SizeOfType (tWinScrollInfo)) to ScrollInfo.cbSize
91384>>>>>>>            
91384>>>>>>>            Move (SIF_RANGE ior SIF_POS ior SIF_PAGE ) to ScrollInfo.fMask
91385>>>>>>>            Get pbShowDisabledScrollBar to bShow
91386>>>>>>>            If bShow Begin
91388>>>>>>>                Move (ScrollInfo.fMask ior SIF_DISABLENOSCROLL) to ScrollInfo.fMask
91389>>>>>>>            End
91389>>>>>>>>
91389>>>>>>>            Move iRangeMin to ScrollInfo.nMin
91390>>>>>>>            Move iRangeMax to ScrollInfo.nMax
91391>>>>>>>            Move iPageSize to ScrollInfo.nPage
91392>>>>>>>            Move 0 to ScrollInfo.nPos
91393>>>>>>>            Move (SetScrollInfo (hWnd, If(bVert,SB_VERT,SB_HORZ), AddressOf (ScrollInfo), True)) to iVoid
91394>>>>>>>            
91394>>>>>>>        End
91394>>>>>>>>
91394>>>>>>>    End_Procedure
91395>>>>>>>    
91395>>>>>>>    // this wraps GetScrollInfo
91395>>>>>>>    Function GetScrollBarInfo Boolean bVert tWinScrollInfo ByRef ScrollInfo Returns Boolean
91397>>>>>>>        Boolean bOk
91397>>>>>>>        Handle hWnd
91397>>>>>>>        
91397>>>>>>>        Delegate Get Window_Handle to hWnd
91399>>>>>>>        If (hWnd <> 0) Begin
91401>>>>>>>            Move (SizeOfType (tWinScrollInfo)) to ScrollInfo.cbSize
91402>>>>>>>            Move (SIF_ALL) to ScrollInfo.fMask
91403>>>>>>>            Move (GetScrollInfo (hWnd, If(bVert,SB_VERT,SB_HORZ), AddressOf (ScrollInfo))) to bOk
91404>>>>>>>        End
91404>>>>>>>>
91404>>>>>>>        Function_Return bOk
91405>>>>>>>    End_Function
91406>>>>>>>    
91406>>>>>>>    // this wraps SetScrollPos
91406>>>>>>>    Procedure SetScrollBarPosInfo Boolean bVert Integer iPos
91408>>>>>>>        Integer iVoid
91408>>>>>>>        Handle hWnd
91408>>>>>>>        
91408>>>>>>>        Delegate Get Window_Handle to hWnd
91410>>>>>>>        If (hWnd <> 0) Begin
91412>>>>>>>            Move (SetScrollPos(hWnd, If(bVert,SB_VERT,SB_HORZ), iPos, True)) to iVoid
91413>>>>>>>        End
91413>>>>>>>>
91413>>>>>>>    End_Procedure
91414>>>>>>>    
91414>>>>>>>    // scrolling containers don't do anhcors. However, this gets called every time the parent's
91414>>>>>>>    // guiSize changes. We can use that to scroll or resize the scrolling client as needed.
91414>>>>>>>    Procedure DoapplyAnchors Integer Arg1 Integer Arg2
91416>>>>>>>        Send ScrollClientArea
91417>>>>>>>    End_Procedure
91418>>>>>>>    
91418>>>>>>>    // augment to handle the scrolling area initialization.
91418>>>>>>>    Procedure Add_Focus Handle hoParent
91420>>>>>>>        Forward Send Add_Focus hoParent
91422>>>>>>>        // at this the scrolling container and client area should both be paged.
91422>>>>>>>        // child objects ae also paged with initial anchors applied
91422>>>>>>>        Send CalculateAutoScrollMinimums
91423>>>>>>>    End_Procedure
91424>>>>>>>    
91424>>>>>>>    Procedure Page Integer iPage
91426>>>>>>>        Forward Send Page iPage
91428>>>>>>>        If iPage Begin
91430>>>>>>>            // at this the scrolling container and client area should both be paged
91430>>>>>>>            // but the child controls are not paged. We don't want scrollbars when
91430>>>>>>>            // the child items are paged (else they may get anchored oddly)
91430>>>>>>>            // Prior to 19.0 these were set in Add_focus which meant that the child objects were
91430>>>>>>>            // already paged with scrollbars present. This would result in scrollbars appearing
91430>>>>>>>            // before they were really needed. This should be more accurate
91430>>>>>>>            Send SetScrollBarInfo True 0 0 0
91431>>>>>>>            Send SetScrollBarInfo False 0 0 0
91432>>>>>>>        End
91432>>>>>>>>
91432>>>>>>>    End_Procedure
91433>>>>>>>    
91433>>>>>>>    // determine scrolling minimums and set the client area as required.
91433>>>>>>>    
91433>>>>>>>    Procedure CalculateAutoScrollMinimums
91435>>>>>>>        Integer iMinX iMinY iSiz iLoc iMargin
91435>>>>>>>        Integer iAutoMinX iAutoMinY
91435>>>>>>>        Boolean bAutoScroll
91435>>>>>>>        Handle hoNext hoFirst
91435>>>>>>>        
91435>>>>>>>        Get pbAutoScroll to bAutoScroll
91436>>>>>>>        Get piAutoScrollMinX to iAutoMinX
91437>>>>>>>        Get piAutoScrollMinY to iAutoMinY
91438>>>>>>>        Get DialogToGui iAutoMinY iAutoMinX to iSiz
91439>>>>>>>        Move (Hi(iSiz)) to iAutoMinY
91440>>>>>>>        Move (Low(iSiz)) to iAutoMinX
91441>>>>>>>        Set piMinimumHeight to iAutoMinY
91442>>>>>>>        Set piMinimumWidth to iAutoMinX
91443>>>>>>>        
91443>>>>>>>        If (bAutoScroll and (iAutoMinX=0 or iAutoMinY=0)) Begin
91445>>>>>>>            
91445>>>>>>>            Get Next_Level to hoFirst
91446>>>>>>>            Move hoFirst to hoNext
91447>>>>>>>            If (hoFirst) Begin
91449>>>>>>>                Repeat
91449>>>>>>>>
91449>>>>>>>                    Get GuiWindowSize of hoNext to iSiz
91450>>>>>>>                    Get GuiLocation of hoNext to iLoc
91451>>>>>>>                    Move (Hi(iLoc)+Hi(iSiz) max iMinY) to iMinY
91452>>>>>>>                    Move (Low(iLoc)+Low(iSiz) max iMinX) to iMinx
91453>>>>>>>                    Get Next_Focus of hoNext to hoNext
91454>>>>>>>                Until (hoNext=0 or hoNext=hoFirst)
91456>>>>>>>                
91456>>>>>>>                If (iAutoMinY=0) Begin
91458>>>>>>>                    Get piAutoScrollMarginY to iMargin
91459>>>>>>>                    Set piMinimumHeight to (iMinY+iMargin)
91460>>>>>>>                End
91460>>>>>>>>
91460>>>>>>>                
91460>>>>>>>                If (iAutoMinX=0) Begin
91462>>>>>>>                    Get piAutoScrollMarginX to iMargin
91463>>>>>>>                    Set piMinimumWidth to (iMinX+iMargin)
91464>>>>>>>                    
91464>>>>>>>                End
91464>>>>>>>>
91464>>>>>>>            End
91464>>>>>>>>
91464>>>>>>>        End
91464>>>>>>>>
91464>>>>>>>        
91464>>>>>>>        // before setting the client area, unset all anchors so DoApplyAnchors will not do anything
91464>>>>>>>        Broadcast Set pbAnchorCreated to False
91466>>>>>>>        Send ScrollClientArea
91467>>>>>>>        // after the scroll set up, reinitialize all anchors.
91467>>>>>>>        Broadcast Send DoCreateAnchors
91469>>>>>>>    End_Procedure
91470>>>>>>>    
91470>>>>>>>    // Scroll the client area and adjust the client area size as needed. This does all the
91470>>>>>>>    // work of scrolling.
91470>>>>>>>    
91470>>>>>>>    Procedure ScrollClientArea
91472>>>>>>>        Integer iSiz
91472>>>>>>>        Integer iHeight iHCur iHCuriDelta iOrig iRange bOk
91472>>>>>>>        Integer iWidth iWCur iWDelta iWOrig
91472>>>>>>>        Integer iSzY iSzX iLocX iLocY
91472>>>>>>>        
91472>>>>>>>        Delegate Get GuiClientSize to iSiz
91474>>>>>>>        Move (Hi(iSiz)) to iHeight
91475>>>>>>>        Move (Low(iSiz)) to iWidth
91476>>>>>>>        
91476>>>>>>>        // Vertical scrolling
91476>>>>>>>        
91476>>>>>>>        Get piMinimumHeight to iOrig
91477>>>>>>>        Get piMinimumWidth to iWOrig
91478>>>>>>>        
91478>>>>>>>        If (iOrig<>0 or iWOrig<>0) Begin
91480>>>>>>>            
91480>>>>>>>            If (iOrig<>0) Begin
91482>>>>>>>                Get piCurrentVertScrolled to iHCur
91483>>>>>>>                // If the size got bigger and we've scrolled, we want to scroll up
91483>>>>>>>                If (iHCur<>0 and (iHCur+iHeight>iOrig)) Begin
91485>>>>>>>                    Move (iOrig-iHeight max 0) to iHCur
91486>>>>>>>                    Set piCurrentVertScrolled to iHCur
91487>>>>>>>                End
91487>>>>>>>>
91487>>>>>>>                If (iHCur<>0 or iOrig>iHeight) Begin
91489>>>>>>>                    Send SetScrollBarInfo True 0 iOrig (iHeight min iOrig)
91490>>>>>>>                    Send SetScrollBarPosInfo True iHCur
91491>>>>>>>                End
91491>>>>>>>>
91491>>>>>>>                Else Begin
91492>>>>>>>                    Send SetScrollBarInfo True 0 0 0 //iOrig (iHeight min iOrig)
91493>>>>>>>                End
91493>>>>>>>>
91493>>>>>>>            End
91493>>>>>>>>
91493>>>>>>>            
91493>>>>>>>            // Horiz scrolling
91493>>>>>>>            
91493>>>>>>>            Get piCurrentHorzScrolled to iWCur
91494>>>>>>>            // If the size got bigger and we've scrolled, we want to scroll left
91494>>>>>>>            If (iWCur<>0 and (iWCur+iWidth>iWOrig)) Begin
91496>>>>>>>                Move (iWOrig-iWidth max 0) to iWCur
91497>>>>>>>                Set piCurrentHorzScrolled to iWCur
91498>>>>>>>            End
91498>>>>>>>>
91498>>>>>>>            If (iWCur<>0 or iWOrig>iWidth) Begin
91500>>>>>>>                Send SetScrollBarInfo False 0 iWOrig (iWidth min iWOrig)
91501>>>>>>>                Send SetScrollBarPosInfo False iWCur
91502>>>>>>>            End
91502>>>>>>>>
91502>>>>>>>            Else Begin
91503>>>>>>>                Send SetScrollBarInfo False 0 0 0
91504>>>>>>>            End
91504>>>>>>>>
91504>>>>>>>        End
91504>>>>>>>>
91504>>>>>>>        
91504>>>>>>>        // this could change depending on scrollbars appearing or not
91504>>>>>>>        Delegate Get GuiClientSize to iSiz
91506>>>>>>>        
91506>>>>>>>        // size of container is the the minimum allowed size (if scrolling is needed)
91506>>>>>>>        // or it is the actual size of the container (if scrolling not needed and it is bigger)
91506>>>>>>>        // This is required to make anchors work sensibly
91506>>>>>>>        Move (hi(iSiz) max iOrig) to iSzY
91507>>>>>>>        Move (low(iSiz) max iWOrig) to iSzX
91508>>>>>>>        Move (-iHCur) to iLocY
91509>>>>>>>        Move (-iWCur) to iLocX
91510>>>>>>>        
91510>>>>>>>        // Allow chance to make modifications
91510>>>>>>>        Send AdjustSizesLocs (&iSzY) (&iSzX) (&iLocY) (&iLocX)
91511>>>>>>>        
91511>>>>>>>        Set GuiSize to iSzY iSzX
91512>>>>>>>        // if we've scrolled, we need to reposition the container
91512>>>>>>>        Set GuiLocation to iLocY iLocX
91513>>>>>>>    End_Procedure
91514>>>>>>>    
91514>>>>>>>    // note that scrolling never changes the size of the scrolling client.
91514>>>>>>>    // this way, it does not interfere with anchors.
91514>>>>>>>    
91514>>>>>>>    Procedure VScroll Integer iDelta
91516>>>>>>>        Integer iHeight iCur iOrig iSiz
91516>>>>>>>        Delegate Get GuiClientSize to iSiz
91518>>>>>>>        Move (hi(iSiz)) to iHeight
91519>>>>>>>        Get piCurrentVertScrolled to iCur
91520>>>>>>>        Get piMinimumHeight to iOrig
91521>>>>>>>        If (iOrig=0 or  Hi(iSiz)>=iOrig) Begin
91523>>>>>>>            Procedure_Return
91524>>>>>>>        End
91524>>>>>>>>
91524>>>>>>>        // make sure delta is within range
91524>>>>>>>        If (iDelta+iCur<0) Begin
91526>>>>>>>            Move (-iCur) to iDelta
91527>>>>>>>        End
91527>>>>>>>>
91527>>>>>>>        Else If (iDelta+iCur>iOrig - iHeight) Begin
91530>>>>>>>            Move (iOrig - iHeight - iCur) to iDelta
91531>>>>>>>        End
91531>>>>>>>>
91531>>>>>>>        If (iDelta=0) ;            Procedure_Return
91534>>>>>>>        
91534>>>>>>>        Move (iCur + iDelta) to iCur
91535>>>>>>>        Set piCurrentVertScrolled to iCur
91536>>>>>>>        Send SetScrollBarPosInfo True iCur
91537>>>>>>>        Get GuiLocation to iSiz
91538>>>>>>>        Set GuiLocation to (cast(hi(iSiz),Short)-iDelta) (cast(low(iSiz),Short))
91539>>>>>>>        Send ScrollClientArea
91540>>>>>>>    End_Procedure
91541>>>>>>>    
91541>>>>>>>    
91541>>>>>>>    Procedure HScroll Integer iDelta
91543>>>>>>>        Integer iHeight iCur iOrig iSiz
91543>>>>>>>        Delegate Get GuiClientSize to iSiz
91545>>>>>>>        Move (low(iSiz)) to iHeight
91546>>>>>>>        Get piCurrentHorzScrolled to iCur
91547>>>>>>>        Get piMinimumWidth to iOrig
91548>>>>>>>        If (iOrig=0 or  low(iSiz)>=iOrig) Begin
91550>>>>>>>            Procedure_Return
91551>>>>>>>        End
91551>>>>>>>>
91551>>>>>>>        If (iDelta+iCur<0) Begin
91553>>>>>>>            Move (-iCur) to iDelta
91554>>>>>>>        End
91554>>>>>>>>
91554>>>>>>>        Else If (iDelta+iCur>iOrig - iHeight) Begin
91557>>>>>>>            Move (iOrig - iHeight - iCur) to iDelta
91558>>>>>>>        End
91558>>>>>>>>
91558>>>>>>>        If (iDelta=0) ;            Procedure_Return
91561>>>>>>>        
91561>>>>>>>        Move (iCur + iDelta) to iCur
91562>>>>>>>        Set piCurrentHorzScrolled to iCur
91563>>>>>>>        Send SetScrollBarPosInfo False iCur
91564>>>>>>>        Get GuiLocation to iSiz
91565>>>>>>>        Set GuiLocation to (cast(hi(iSiz),Short)) (cast(low(iSiz),Short) -iDelta)
91566>>>>>>>        Send ScrollClientArea
91567>>>>>>>    End_Procedure
91568>>>>>>>    
91568>>>>>>>    // make sure client is a 0,0
91568>>>>>>>    Procedure ScrollHome
91570>>>>>>>        Send SetVScrollbox SB_TOP 0
91571>>>>>>>        Send SetHScrollbox SB_TOP 0
91572>>>>>>>    End_Procedure
91573>>>>>>>    
91573>>>>>>>    // get relative GUI location of this object to the parent one passed.
91573>>>>>>>    Procedure LocationRelativeTo Handle hoContainer Handle hoControl Integer ByRef iLocY Integer ByRef iLocX
91575>>>>>>>        Integer ivoid
91575>>>>>>>        tWinRect Rect0 Rect1
91575>>>>>>>        tWinRect Rect0 Rect1
91575>>>>>>>        Move (GetWindowRect(window_handle(hoContainer),addressof(Rect0))) to ivoid
91576>>>>>>>        Move (GetWindowRect(window_handle(hoControl),addressof(Rect1))) to ivoid
91577>>>>>>>        Move ((Rect1.top) - (Rect0.top)) to iLocY
91578>>>>>>>        Move ((rect1.left) - (rect0.left)) to iLocX
91579>>>>>>>    End_Procedure
91580>>>>>>>    
91580>>>>>>>    // This scrolls this object into visual range.
91580>>>>>>>    Procedure ScrollObjectInRange Handle hoControl
91582>>>>>>>        Handle hoScrollingContainer
91582>>>>>>>        Integer iCurrentVertScrolled iCurrentHorzScrolled
91582>>>>>>>        Integer iViewHeight iViewWidth
91582>>>>>>>        Integer iRelLocHeight iRelLocWidth
91582>>>>>>>        Integer iSize iControlHeight iControlWidth
91582>>>>>>>        Integer iScroll
91582>>>>>>>        Integer iMarginX iMarginY
91582>>>>>>>        Integer iScrollingContainerWindowSize iScrollingContainerClientSize
91582>>>>>>>        
91582>>>>>>>        Get piAutoScrollMarginX to iMarginX
91583>>>>>>>        Get piAutoScrollMarginY to iMarginY
91584>>>>>>>        
91584>>>>>>>        // the scrolling container
91584>>>>>>>        Move Self to hoScrollingContainer
91585>>>>>>>        // the amount the SC is currently scrolled
91585>>>>>>>        Get piCurrentVertScrolled of hoScrollingContainer to iCurrentVertScrolled
91586>>>>>>>        Get piCurrentHorzScrolled of hoScrollingContainer to iCurrentHorzScrolled
91587>>>>>>>        
91587>>>>>>>        // size of view's client area (this is the viewport area)
91587>>>>>>>        Get GuiClientSize of (Parent(hoScrollingContainer)) to iSize
91588>>>>>>>        Move (hi(iSize)) to iViewHeight
91589>>>>>>>        Move (low(iSize)) to iViewWidth
91590>>>>>>>        
91590>>>>>>>        // get this object's location relative to the scrolling container
91590>>>>>>>        Send LocationRelativeTo hoScrollingContainer hoControl (&iRelLocHeight) (&iRelLocWidth)
91591>>>>>>>        
91591>>>>>>>        // we expect that the client size is the window size but just in case
91591>>>>>>>        Get GuiWindowSize of hoScrollingContainer to iScrollingContainerWindowSize
91592>>>>>>>        Get GuiClientSize of hoScrollingContainer to iScrollingContainerClientSize
91593>>>>>>>        Move (iRelLocHeight - (Hi(iScrollingContainerWindowSize)-Hi(iScrollingContainerClientSize))) to iRelLocHeight
91594>>>>>>>        Move (iRelLocWidth - (Low(iScrollingContainerWindowSize)-Low(iScrollingContainerClientSize))) to iRelLocWidth
91595>>>>>>>        
91595>>>>>>>        // the outer size of the control object
91595>>>>>>>        Get GUIWindowSize of hoControl to iSize
91596>>>>>>>        Move (hi(iSize)) to iControlHeight
91597>>>>>>>        Move (low(iSize)) to iControlWidth
91598>>>>>>>        
91598>>>>>>>        // the general idea is to make the control fully visible but to scroll as little as possible.
91598>>>>>>>        
91598>>>>>>>        // Vertical Scroll
91598>>>>>>>        
91598>>>>>>>        // Vertical Scroll down
91598>>>>>>>        // if the bottom of the control plus a bottom margin does not fit make it fit at the bottom
91598>>>>>>>        If (iRelLocHeight + iControlHeight + iMarginY - iCurrentVertScrolled >iViewHeight) Begin
91600>>>>>>>            
91600>>>>>>>            // set scroll amount so that the bottom of the control is visible
91600>>>>>>>            Move (iRelLocHeight + iControlHeight + iMarginY - iCurrentVertScrolled - iViewHeight ) to iScroll
91601>>>>>>>            
91601>>>>>>>            // See if this amount, scrolls the top out of range. If so just scroll enough so that the
91601>>>>>>>            // top of the object appears at the bottom
91601>>>>>>>            If (iRelLocHeight - iCurrentVertScrolled < iScroll) Begin
91603>>>>>>>                Move (iRelLocHeight + iMarginY  - iCurrentVertScrolled - iViewHeight  ) to iScroll
91604>>>>>>>            End
91604>>>>>>>>
91604>>>>>>>            // if the scroll amnt is negative it's best to just keep it where it is.
91604>>>>>>>            If (iScroll>0) Begin
91606>>>>>>>                Send VScroll of hoScrollingContainer iScroll
91607>>>>>>>            End
91607>>>>>>>>
91607>>>>>>>        End
91607>>>>>>>>
91607>>>>>>>        // else vertical scroll up
91607>>>>>>>        // We scroll if the top of the object is not visible.
91607>>>>>>>        Else If (iRelLocHeight + iMarginY < iCurrentVertScrolled) Begin
91610>>>>>>>            // if we scroll we will scroll enough to see the top of the object.
91610>>>>>>>            Move (iRelLocHeight -iMarginY - iCurrentVertScrolled ) to iScroll
91611>>>>>>>            If (iScroll<0) Begin
91613>>>>>>>                Send VScroll of hoScrollingContainer (iScroll max (-iCurrentVertScrolled))
91614>>>>>>>            End
91614>>>>>>>>
91614>>>>>>>        End
91614>>>>>>>>
91614>>>>>>>        
91614>>>>>>>        // Horizonal Scroll
91614>>>>>>>        
91614>>>>>>>        // if the right side of the control does not fit, scroll it so it fits
91614>>>>>>>        If (iRelLocWidth + iControlWidth + iMarginX - iCurrentHorzScrolled >iViewWidth) Begin
91616>>>>>>>            Move (iRelLocWidth + iControlWidth + iMarginX - iCurrentHorzScrolled - iViewWidth ) to iScroll
91617>>>>>>>            If (iRelLocWidth - iCurrentHorzScrolled - iScroll<0) Begin
91619>>>>>>>                Move (iRelLocWidth  - iCurrentHorzScrolled - iMarginX ) to iScroll
91620>>>>>>>            End
91620>>>>>>>>
91620>>>>>>>            If (iScroll>0) Begin
91622>>>>>>>                Send HScroll of hoScrollingContainer iScroll
91623>>>>>>>            End
91623>>>>>>>>
91623>>>>>>>        End
91623>>>>>>>>
91623>>>>>>>        If (iRelLocWidth - iMarginX  - iCurrentHorzScrolled <0) Begin
91625>>>>>>>            // if this can fit by moving all the way to left, do so.
91625>>>>>>>            If (iRelLocWidth + iControlWidth + iMarginX <= iViewWidth) Begin
91627>>>>>>>                Move (-iCurrentHorzScrolled) to iScroll
91628>>>>>>>            End
91628>>>>>>>>
91628>>>>>>>            Else Begin
91629>>>>>>>                Move (iRelLocWidth - iCurrentHorzScrolled - iMarginX) to iScroll
91630>>>>>>>            End
91630>>>>>>>>
91630>>>>>>>            If (iScroll<0) Begin
91632>>>>>>>                Send HScroll of hoScrollingContainer (iScroll max (-iCurrentHorzScrolled))
91633>>>>>>>            End
91633>>>>>>>>
91633>>>>>>>        End
91633>>>>>>>>
91633>>>>>>>        
91633>>>>>>>        
91633>>>>>>>    End_Procedure
91634>>>>>>>    
91634>>>>>>>    // when we receive this message, we might need to scroll to bring the new focus in to view.
91634>>>>>>>    Procedure NotifyFocusSetInContainer Handle hoControl
91636>>>>>>>        Boolean bScrollOnFocus
91636>>>>>>>        Get pbAutoScrollFocus to bScrollOnFocus
91637>>>>>>>        If bScrollOnFocus Begin
91639>>>>>>>            Send ScrollObjectInRange hoControl
91640>>>>>>>        End
91640>>>>>>>>
91640>>>>>>>        Delegate Send NotifyFocusSetInContainer hoControl
91642>>>>>>>    End_Procedure
91643>>>>>>>    
91643>>>>>>>    
91643>>>>>>>    Function CenterTabWorkspaceView Returns Boolean
91645>>>>>>>        Boolean bCenter
91645>>>>>>>        Get pbCenterTabbedViews of ghoCommandBars to bCenter
91646>>>>>>>        Function_Return bCenter
91647>>>>>>>    End_Function
91648>>>>>>>    
91648>>>>>>>    Procedure AdjustSizesLocs Integer ByRef iHeight Integer ByRef iWidth Integer ByRef iLocY Integer ByRef iLocX
91650>>>>>>>        Boolean bTabWorkspaceView
91650>>>>>>>        Get pbTabWorkspaceView to bTabWorkspaceView
91651>>>>>>>        If bTabWorkspaceView Begin
91653>>>>>>>            Send AdjustTabWorkspaceView (&iHeight) (&iWidth) (&iLocY) (&iLocX)
91654>>>>>>>        End
91654>>>>>>>>
91654>>>>>>>    End_Procedure
91655>>>>>>>    
91655>>>>>>>    Function ParentView Returns Handle
91657>>>>>>>        Function_Return (Parent(Parent(Self)))
91658>>>>>>>    End_Function
91659>>>>>>>    
91659>>>>>>>    Procedure AdjustTabWorkspaceView Integer ByRef iHeight Integer ByRef iWidth Integer ByRef iLocY Integer ByRef iLocX
91661>>>>>>>        Integer iSize iMax iDiff
91661>>>>>>>        Handle hoView
91661>>>>>>>        Boolean bCenter bModal
91661>>>>>>>        Get ParentView to hoView
91662>>>>>>>        Get Block_Mouse_State of hoView to bModal
91663>>>>>>>        If not bModal Begin
91665>>>>>>>            Get CenterTabWorkspaceView to bCenter
91666>>>>>>>            Get GuiSize of hoView to iSize
91667>>>>>>>            Get piMaxSize of hoView to iMax
91668>>>>>>>            Get DialogToGui (Hi(iMax)) (Low(iMax)) to iMax
91669>>>>>>>            If (Low(iMax) and Low(iMax)<=Low(isize)) Begin
91671>>>>>>>                If bCenter Begin
91673>>>>>>>                    Move ((Low(iSize)-Low(iMax))/2) to iLocX
91674>>>>>>>                End
91674>>>>>>>>
91674>>>>>>>                Move (Low(iMax)) to iWidth
91675>>>>>>>            End
91675>>>>>>>>
91675>>>>>>>            If (Hi(iMax) and Hi(iMax)<=Hi(iSize)) Begin
91677>>>>>>>                If bCenter Begin
91679>>>>>>>                    Move ((Hi(iSize)-Hi(iMax))/2) to iLocY
91680>>>>>>>                    Move (iLocy min 25) to  iLocY
91681>>>>>>>                End
91681>>>>>>>>
91681>>>>>>>                Move (Hi(imax)) to iHeight
91682>>>>>>>            End
91682>>>>>>>>
91682>>>>>>>        End
91682>>>>>>>>
91682>>>>>>>    End_Procedure
91683>>>>>>>    
91683>>>>>>>    // Automatically determine if this is a scrolling tabbed workspace view
91683>>>>>>>    // If determines this by checking pbAutoSetTabWorkspaceView is set (it can be
91683>>>>>>>    // set to stop this), if we have a global commandbar object and we are using tabbed
91683>>>>>>>    // workspaces. We also make sure that the expected view object is a framework view class
91683>>>>>>>    // This should almost always yield the right answer.
91683>>>>>>>    // This is called by the scrolling container's end_constructor
91683>>>>>>>    Procedure AutoSetTabWorkspaceView
91685>>>>>>>        Boolean bTabView bIsView bAutoSetTabWorkspaceView
91685>>>>>>>        Handle hoParent
91685>>>>>>>        Integer iSize
91685>>>>>>>        Get pbAutoSetTabWorkspaceView to bAutoSetTabWorkspaceView
91686>>>>>>>        If (ghoCommandBars and bAutoSetTabWorkspaceView) Begin
91688>>>>>>>            Get pbTabbedWorkspaces of ghoCommandBars to bTabView
91689>>>>>>>            // not that pbTabbedWorkspaces is a designtime only property. You can not
91689>>>>>>>            // change this after the commandbar is paged.
91689>>>>>>>            If (bTabView) Begin
91691>>>>>>>                Get ParentView to hoParent
91692>>>>>>>                Get IsObjectOfClass of hoParent (RefClass(MdiDialog)) to bIsView
91693>>>>>>>                If (bIsView) Begin
91695>>>>>>>                    // set this as a tab workspace view
91695>>>>>>>                    Set pbTabWorkspaceView to True
91696>>>>>>>                    // when tab workspaces are enabled we always enable auto-scrolling
91696>>>>>>>                    // when tab workspaces are not enabled, pbScroll is whatever it is
91696>>>>>>>                    Set pbAutoScroll to True
91697>>>>>>>                    
91697>>>>>>>                End
91697>>>>>>>>
91697>>>>>>>            End
91697>>>>>>>>
91697>>>>>>>        End
91697>>>>>>>>
91697>>>>>>>    End_Procedure
91698>>>>>>>    
91698>>>>>>>End_Class
91699>>>>>>>
91699>>>>>>>// Container scrolling class support. Nothing in here is public
91699>>>>>>>Class cScrollingContainerMixin is a Mixin
91700>>>>>>>    
91700>>>>>>>    Procedure Define_cScrollingContainerMixin
91702>>>>>>>        Forward Set Border_Style to Border_None
91704>>>>>>>        Set pbSizeToClientArea to False // scrollbars and clientsize do not mix
91705>>>>>>>        Forward Set peAnchors to anAll
91707>>>>>>>        
91707>>>>>>>        // forcing scrollbars right away seems to make painting better
91707>>>>>>>        Set Window_Style WS_HSCROLL to True
91708>>>>>>>        Set Window_Style WS_VSCROLL to True
91709>>>>>>>        
91709>>>>>>>        Property Handle phoScrollingClientArea 0
91710>>>>>>>    End_Procedure
91711>>>>>>>    
91711>>>>>>>    // if anchors are changed, it will not work. We won't let that happen
91711>>>>>>>    Procedure Set peAnchors Integer eAnchors
91713>>>>>>>    End_Procedure
91714>>>>>>>    
91714>>>>>>>    // if a border style is set, it will not work. We won't let that happen
91714>>>>>>>    Procedure Set Border_Style Integer eStyle
91716>>>>>>>    End_Procedure
91717>>>>>>>    
91717>>>>>>>    // redirect scrollbar events and wheel events to the scrolling client area
91717>>>>>>>    Procedure OnWmMouseWheel Integer wParam Integer lParam
91719>>>>>>>        Handle hoClient
91719>>>>>>>        Get phoScrollingClientArea to hoClient
91720>>>>>>>        If hoClient Begin
91722>>>>>>>            Send OnMouseWheel of hoClient wParam lParam
91723>>>>>>>        End
91723>>>>>>>>
91723>>>>>>>    End_Procedure
91724>>>>>>>    
91724>>>>>>>    // should be sent by WM_VSCROLL
91724>>>>>>>    Procedure SetVScrollbox Integer iType Integer iNewPos
91726>>>>>>>        Handle hoClient
91726>>>>>>>        Get phoScrollingClientArea to hoClient
91727>>>>>>>        If hoClient Begin
91729>>>>>>>            Send SetVScrollbox of hoClient iType iNewPos
91730>>>>>>>        End
91730>>>>>>>>
91730>>>>>>>    End_Procedure
91731>>>>>>>    
91731>>>>>>>    // should be sent by WM_HSCROLL
91731>>>>>>>    Procedure SetHScrollbox Integer iType Integer iNewPos
91733>>>>>>>        Handle hoClient
91733>>>>>>>        Get phoScrollingClientArea to hoClient
91734>>>>>>>        If hoClient Begin
91736>>>>>>>            Send SetHScrollbox of hoClient iType iNewPos
91737>>>>>>>        End
91737>>>>>>>>
91737>>>>>>>    End_Procedure
91738>>>>>>>    
91738>>>>>>>    // augmented to adjust its size to the size of the parent client area.
91738>>>>>>>    // After this is set, anchors will handle any further resizing.
91738>>>>>>>    Procedure Page Integer iState
91740>>>>>>>        Integer iSiz iHeight iWidth
91740>>>>>>>        Integer iTop iBottom iLeft iRight iFontSize
91740>>>>>>>        Boolean bGroup
91740>>>>>>>        Handle hoClient
91740>>>>>>>        If (iState =1) Begin
91742>>>>>>>            Delegate Get Window_Style BS_GROUPBOX to bGroup
91744>>>>>>>            // We have special code to support groups because they
91744>>>>>>>            // draw a border inside of the client rectangle
91744>>>>>>>            If bGroup Begin
91746>>>>>>>                Get Physical_FontSize to iFontSize
91747>>>>>>>                Move (Hi(iFontSize)) to iTop
91748>>>>>>>                Move 2 to iLeft
91749>>>>>>>                Move 2 to iRight
91750>>>>>>>                Move 2 to iBottom
91751>>>>>>>            End
91751>>>>>>>>
91751>>>>>>>            // We use GetContainerClientSize instead of GuiClientSize because
91751>>>>>>>            // GetContainerClientSize has a special augmentation in tab pages that
91751>>>>>>>            // makes anchors work properly with unpaged tab-pages
91751>>>>>>>            Delegate Get GetContainerClientSize to iSiz
91753>>>>>>>            Set GuiSize to (Hi(iSiz)-(iTop+iBottom)) (Low(iSiz)-(iLeft+iRight))
91754>>>>>>>            Set GuiLocation to iTop iLeft
91755>>>>>>>            Send Adjust_Logicals
91756>>>>>>>        End
91756>>>>>>>>
91756>>>>>>>        Forward Send Page iState
91758>>>>>>>    End_Procedure
91759>>>>>>>    
91759>>>>>>>    Procedure End_Construct_Object
91761>>>>>>>        Handle hoClient
91761>>>>>>>        Forward Send End_Construct_Object
91763>>>>>>>        Get phoScrollingClientArea to hoClient
91764>>>>>>>        If (hoClient) Begin
91766>>>>>>>            Send AutoSetTabWorkspaceView of hoClient
91767>>>>>>>        End
91767>>>>>>>>
91767>>>>>>>    End_Procedure
91768>>>>>>>    
91768>>>>>>>End_Class
91769>>>>>
91769>>>>>Class cDbScrollingClientArea is a dbContainer3d
91770>>>>>    Import_Class_Protocol cScrollingClientAreaMixin
91771>>>>>    Procedure Construct_Object
91773>>>>>        Forward Send Construct_Object
91775>>>>>        Send Define_cScrollingClientAreaMixin
91776>>>>>    End_Procedure
91777>>>>>End_Class
91778>>>>>
91778>>>>>
91778>>>>>
91778>>>>>Class cDbScrollingContainer is a dbContainer3d
91779>>>>>    Import_Class_Protocol cScrollingContainerMixin
91780>>>>>    Procedure Construct_Object
91782>>>>>        Forward Send Construct_Object
91784>>>>>        Send Define_cScrollingContainerMixin
91785>>>>>    End_Procedure
91786>>>>>End_Class
91787>>>
91787>>>Use cDRReport.pkg
91787>>>Use cDRPreview.pkg
91787>>>Use DRStatuspanel.dg
91787>>>
91787>>>Use cOrderHeaderDataDictionary.dd
91787>>>Use cInventoryDataDictionary.dd
91787>>>
91787>>>// This example shows how to make use of page layers in a report. With a page layer you simulate pre-printed forms or skip
91787>>>// pre-printed forms and make customer based backgrounds. In this example you can choose between a Data Access page layer, an
91787>>>// ACME inc page layer and no page layer and with or without a "approved" stamp. To show more of what page layers can do the
91787>>>// user can select between the English and Dutch language.
91787>>>
91787>>>// The user must either select a customer or an order to be used. When selecting a customer the result will be N orders with
91787>>>// the page layer selection. When selecting an order the result will be 1 order only. When selecting a customer and an order
91787>>>// make sure they belong to eachother.
91787>>>
91787>>>// The user can choose the sort order of the detail lines in the report.
91787>>>Deferred_View Activate_oOrderswithPagelayersReportView for ;Object oOrderswithPagelayersReportView is a ReportView
91812>>>    Set Label to "Orders with Pagelayers"
91813>>>    Set Border_Style to Border_Thick
91814>>>
91814>>>    Object oInventory_DD is a cInventoryDataDictionary
91816>>>    End_Object
91817>>>
91817>>>    Object oOrderHeader_DD is a cOrderHeaderDataDictionary
91819>>>    End_Object
91820>>>
91820>>>    Object oReport is a cDRReport
91822>>>        Set pbShowStatusPanel to True
91823>>>        Set phoStatusPanel to oDRStatusPanel
91824>>>        Set psReportName to "Orders with Pagelayers.dr"
91825>>>
91825>>>        Procedure OnInitializeReport
91828>>>            Integer eOutputDeviceMode
91828>>>
91828>>>            Forward Send OnInitializeReport
91830>>>
91830>>>            // Convert from the ReportView Output_Device_Mode to peOutputDestination
91830>>>            Get Output_Device_Mode to eOutputDeviceMode
91831>>>            Set peOutputDestination to eOutputDeviceMode
91832>>>
91832>>>            Send SetFilters
91833>>>            Send SetSortFields
91834>>>            Send SetParameters
91835>>>        End_Procedure
91836>>>
91836>>>        // In this routine we find the code that sets the parameter values. The values
91836>>>        // for the parameters can be retrieved from an input control or from own coding.
91836>>>        Procedure SetParameters
91839>>>            String sReportId sValue
91839>>>            Integer iParameter
91839>>>
91839>>>            Get psReportId to sReportId
91840>>>
91840>>>            Get_File_Path "CodeMast.dat" to sValue
91841>>>            Move (ExtractFilePath (sValue)) to sValue
91842>>>            Get ParameterIdByName sReportId "CodeMastPath" to iParameter
91843>>>            Set psParameterValue sReportId iParameter to sValue
91844>>>
91844>>>            Get SelectedPageLayerColor of oPageLayerColorParameterForm to sValue
91845>>>            Get ParameterIdByName sReportId "PageLayerNum" to iParameter
91846>>>            Set psParameterValue sReportId iParameter to sValue
91847>>>
91847>>>            Get SelectedLanguage of oPageLayerLanguageParameterForm to sValue
91848>>>            Get ParameterIdByName sReportId "Language" to iParameter
91849>>>            Set psParameterValue sReportId iParameter to sValue
91850>>>
91850>>>            Case Begin
91850>>>                Case (sValue = 'NL')
91852>>>                    Set piReportLanguage '' to LANG_DUTCH
91853>>>                    Case Break
91854>>>                Case Else
91854>>>                    Set piReportLanguage '' to LANG_DEFAULT
91855>>>                    Case Break
91856>>>            Case End
91856>>>
91856>>>            Get SelectedPageLayerNum of oCorporateLogoNumParameterForm to sValue
91857>>>            Get ParameterIdByName sReportId "HidePageLayers" to iParameter
91858>>>            Set psParameterValue sReportId iParameter to (sValue = "3")
91859>>>            If (sValue <> "3") Begin
91861>>>                Get ParameterIdByName sReportId "CorporateLogoNum" to iParameter
91862>>>                Set psParameterValue sReportId iParameter to sValue
91863>>>            End
91863>>>>
91863>>>        End_Procedure
91864>>>
91864>>>        Procedure SetFilters
91867>>>            String sReportId
91867>>>            String sOrderHeaderOrderNumber
91867>>>            String sOrderHeaderCustomerNumber
91867>>>
91867>>>            Get psReportId to sReportId
91868>>>
91868>>>            // Remove all the defined filters from the report
91868>>>            Send RemoveAllFilters sReportId
91869>>>            
91869>>>            Get Value of oOrderHeaderOrderNumber to sOrderHeaderOrderNumber
91870>>>            If (sOrderHeaderOrderNumber <> "") Begin
91872>>>                Send AddFilter sReportId "{OrderHeader.Order_Number}" C_drEqual sOrderHeaderOrderNumber
91873>>>            End
91873>>>>
91873>>>
91873>>>            Get Value of oOrderHeaderCustomerNumber to sOrderHeaderCustomerNumber
91874>>>            If (sOrderHeaderCustomerNumber <> "") Begin
91876>>>                Send AddFilter sReportId "{OrderHeader.Customer_Number}" C_drEqual sOrderHeaderCustomerNumber
91877>>>            End
91877>>>>
91877>>>        End_Procedure
91878>>>
91878>>>        Procedure SetSortFields
91881>>>            String sReportId sSortField
91881>>>            
91881>>>            Get ReportOrdering of oSortOrderCombo to sSortField
91882>>>            Get psReportId to sReportId
91883>>>            Send RemoveAllRecordSortFields sReportId
91884>>>            Send AddRecordSortField sReportId sSortField C_drAscending
91885>>>        End_Procedure
91886>>>    End_Object
91887>>>
91887>>>    Object oParametersGroup Is A Group
91889>>>        Set Label to "Parameters"
91890>>>        Set Location to 5 5
91891>>>        Set Size to 55 182
91892>>>        Set peAnchors to anTopLeftRight
91893>>>
91893>>>        Object oPageLayerColorParameterForm is a ComboForm
91895>>>            Set Size to 12 111
91896>>>            Set Location to 10 66
91897>>>            Set Label_Justification_Mode to jMode_Left
91898>>>            Set Label_Col_Offset to 60
91899>>>            Set Label to "Color"
91900>>>            Set psToolTip to "Select a Schema"
91901>>>            Set Status_Help to 'Select a PageLayer Schema'
91902>>>            Set Entry_State to False
91903>>>            Set Combo_Sort_State to False
91904>>>            Set peAnchors to anTopLeftRight
91905>>>            Set piMaxSize to 12 200
91906>>>            
91906>>>            Function SelectedPageLayerColor Returns Integer
91909>>>                String sValue
91909>>>                Integer iItem
91909>>>                
91909>>>                Get Value to sValue
91910>>>                Get Combo_Item_Matching sValue to iItem
91911>>>                Increment iItem
91912>>>                
91912>>>                Function_Return iItem
91913>>>            End_Function
91914>>>            
91914>>>            Procedure Combo_Fill_List
91917>>>                Send Combo_Add_Item "Gray Approved"
91918>>>                Send Combo_Add_Item "Gray"
91919>>>            End_Procedure
91920>>>        End_Object
91921>>>
91921>>>        Object oPageLayerLanguageParameterForm is a ComboForm
91923>>>            Set Size to 12 111
91924>>>            Set Location to 24 66
91925>>>            Set Label_Justification_Mode to jMode_Left
91926>>>            Set Label_Col_Offset to 60
91927>>>            Set Label to "Language"
91928>>>            Set psToolTip to "Select a Language"
91929>>>            Set Status_Help to 'Select a Language'
91930>>>            Set Entry_State to False
91931>>>            Set Combo_Sort_State to False
91932>>>            Set peAnchors to anTopLeftRight
91933>>>            Set piMaxSize to 12 200
91934>>>            
91934>>>            Procedure Combo_Fill_List
91937>>>                Send Combo_Add_Item "English"
91938>>>                Send Combo_Add_Item "Dutch"
91939>>>            End_Procedure
91940>>>            
91940>>>            Function SelectedLanguage Returns String
91943>>>                String sValue
91943>>>                Integer iItem
91943>>>                
91943>>>                Get Value to sValue
91944>>>                Get Combo_Item_Matching sValue to iItem
91945>>>                Case Begin
91945>>>                    Case (iItem = 0)
91947>>>                        Move 'EN' to sValue
91948>>>                        Case Break
91949>>>                    Case (iItem = 1)
91952>>>                        Move 'NL' to sValue
91953>>>                        Case Break
91954>>>                Case End
91954>>>                
91954>>>                Function_Return sValue
91955>>>            End_Function
91956>>>        End_Object
91957>>>
91957>>>        Object oCorporateLogoNumParameterForm is a ComboForm
91959>>>            Set Size to 12 111
91960>>>            Set Location to 38 66
91961>>>            Set Label_Justification_Mode to jMode_Left
91962>>>            Set Label_Col_Offset to 60
91963>>>            Set Label to "Corporate Logo"
91964>>>            Set psToolTip to "Select Corporate Logo"
91965>>>            Set Status_Help to 'Select Corporate Logo'
91966>>>            Set Entry_State to False
91967>>>            Set Combo_Sort_State to False
91968>>>            Set peAnchors to anTopLeftRight
91969>>>            Set piMaxSize to 12 200
91970>>>            
91970>>>            Procedure OnChange
91973>>>                String sValue
91973>>>                Integer iItem
91973>>>                
91973>>>                Get Value to sValue
91974>>>                Get Combo_Item_Matching sValue to iItem
91975>>>                Set Enabled_State of oPageLayerColorParameterForm to (iItem <> 2)
91976>>>            End_Procedure
91977>>>            
91977>>>            Function SelectedPageLayerNum Returns Integer
91980>>>                String sValue
91980>>>                Integer iItem
91980>>>                
91980>>>                Get Value to sValue
91981>>>                Get Combo_Item_Matching sValue to iItem
91982>>>                
91982>>>                Function_Return (iItem + 1)
91983>>>            End_Function
91984>>>
91984>>>            Procedure Combo_Fill_List
91987>>>                Send Combo_Add_Item "Data Access Europe"
91988>>>                Send Combo_Add_Item "ACME Inc"
91989>>>                Send Combo_Add_Item "None (Use of Preprinted Sheets)"
91990>>>            End_Procedure
91991>>>        End_Object
91992>>>    End_Object
91993>>>
91993>>>    Object oOrderHeaderOrderNumber is a Form
91995>>>        Set Size to 12 44
91996>>>        Set Location to 62 70
91997>>>        Set piMaxSize to 12 77
91998>>>        Set piMinSize to 12 22
91999>>>        Set Label_Justification_Mode to jMode_Left
92000>>>        Set Label_Col_Offset to 64
92001>>>        Set Label to "Order Number"
92002>>>        Set Status_Help to "Order Number"
92003>>>        Set psToolTip to "Select Order Number"
92004>>>        Set Numeric_Mask 0 to 6 0
92005>>>        Set Prompt_Button_Mode to pb_PromptOn
92006>>>        Set Prompt_Object to OrderHeader_SL
92007>>>        
92007>>>        Procedure CopyPromptValue Handle hoPrompt
92010>>>            RowID[] riOrderHeader
92011>>>            Boolean bFound
92011>>>
92011>>>            Get SelectedRowIds of hoPrompt to riOrderHeader
92012>>>            Move (FindByRowID (OrderHeader.File_Number, riOrderHeader[0])) to bFound
92013>>>            Set Value to OrderHeader.Order_Number
92014>>>        End_Procedure
92015>>>
92015>>>        // This procedure is called if peUpdateMode is not equal to umPromptNonInvoking, we use the
92015>>>        // SelectBestColumn function to retrieve the column for the passed file and field number. After retrieving
92015>>>        // the column we setup the list.
92015>>>        Procedure Prompt_CallBack Integer hoPrompt
92018>>>            Integer iColumn
92018>>>            Handle hoColumn
92018>>>            Boolean bIsVisible
92018>>>
92018>>>            Get SelectBestColumn Of hoPrompt File_Field OrderHeader.Order_Number to iColumn
92019>>>            If (iColumn <> -1) Begin
92021>>>                Get ColumnObject of hoPrompt iColumn to hoColumn
92022>>>                Get pbVisible of hoColumn to bIsVisible
92023>>>                If (not (bIsVisible)) Begin
92025>>>                    Set piInitialColumn of hoPrompt to -2
92026>>>                End
92026>>>>
92026>>>                Set piUpdateColumn of hoPrompt to iColumn
92027>>>                Set peUpdateMode of hoPrompt to umPromptValue
92028>>>            End
92028>>>>
92028>>>            Else Begin
92029>>>                Set phmPromptUpdateCallback of hoPrompt to CopyPromptValue
92030>>>                Set peUpdateMode of hoPrompt to -1
92031>>>            End
92031>>>>
92031>>>        End_Procedure
92032>>>    End_Object
92033>>>
92033>>>    Object oOrderHeaderCustomerNumber Is A Form
92035>>>        Set Size to 12 44
92036>>>        Set Location to 76 70
92037>>>        Set piMaxSize to 12 77
92038>>>        Set piMinSize to 12 22
92039>>>        Set Label_Justification_Mode to jMode_Left
92040>>>        Set Label_Col_Offset to 64
92041>>>        Set Label to "Customer Number"
92042>>>        Set Status_Help to "Enter a selection value."
92043>>>        Set psToolTip to "Select Customer Number"
92044>>>        Set Numeric_Mask 0 to 6 0
92045>>>        Set Prompt_Button_Mode to pb_PromptOn
92046>>>        Set Prompt_Object to Customer_sl
92047>>>        
92047>>>        Procedure CopyPromptValue Handle hoPrompt
92050>>>            RowID[] riCustomer
92051>>>            Boolean bFound
92051>>>
92051>>>            Get SelectedRowIds of hoPrompt to riCustomer
92052>>>            Move (FindByRowID (Customer.File_Number, riCustomer[0])) to bFound
92053>>>            Set Value to Customer.Customer_Number
92054>>>        End_Procedure
92055>>>
92055>>>        // This procedure is called if peUpdateMode is not equal to umPromptNonInvoking, we use the
92055>>>        // SelectBestColumn function to retrieve the column for the passed file and field number. After retrieving
92055>>>        // the column we setup the list.
92055>>>        Procedure Prompt_CallBack Integer hoPrompt
92058>>>            Integer iColumn
92058>>>            Handle hoColumn
92058>>>            Boolean bIsVisible
92058>>>
92058>>>            Get SelectBestColumn of hoPrompt File_Field Customer.Customer_Number to iColumn
92059>>>            If (iColumn <> -1) Begin
92061>>>                Get ColumnObject of hoPrompt iColumn to hoColumn
92062>>>                Get pbVisible of hoColumn to bIsVisible
92063>>>                If (not (bIsVisible)) Begin
92065>>>                    Set piInitialColumn of hoPrompt to -2
92066>>>                End
92066>>>>
92066>>>                Set piUpdateColumn of hoPrompt to iColumn
92067>>>                Set peUpdateMode of hoPrompt to umPromptValue
92068>>>            End
92068>>>>
92068>>>            Else Begin
92069>>>                Set phmPromptUpdateCallback of hoPrompt to CopyPromptValue
92070>>>                Set peUpdateMode of hoPrompt to -1
92071>>>            End
92071>>>>
92071>>>        End_Procedure
92072>>>    End_Object
92073>>>
92073>>>    Object oSortOrderCombo is a ComboForm
92075>>>        Set Size to 12 111
92076>>>        Set Location to 90 70
92077>>>        Set Label_Justification_Mode to jMode_Left
92078>>>        Set Label_Col_Offset to 64
92079>>>        Set Label to "Order by"
92080>>>        Set psToolTip to "Select Sorting"
92081>>>        Set Status_Help to 'Select Sorting'
92082>>>        Set Entry_State to False
92083>>>        Set Combo_Sort_State to False
92084>>>        Set peAnchors to anTopLeftRight
92085>>>        Set piMaxSize to 12 200
92086>>>        
92086>>>        Function ReportOrdering Returns String
92089>>>            String sValue
92089>>>            Integer iItem
92089>>>            
92089>>>            Get Value to sValue
92090>>>            Get Combo_Item_Matching sValue to iItem
92091>>>            Case Begin
92091>>>                Case (iItem = 0)
92093>>>                    Move "{OrderDetail.Detail_Number}" to sValue
92094>>>                    Case Break
92095>>>                Case (iItem = 1)
92098>>>                    Move "{Inventory.Item_Id}" to sValue
92099>>>                    Case Break
92100>>>                Case (iItem = 2)
92103>>>                    Move "{Inventory.Description}" to sValue
92104>>>                    Case Break
92105>>>                Case (iItem = 3)
92108>>>                    Move "{OrderDetail.Qty_Ordered}" to sValue
92109>>>                    Case Break
92110>>>                Case (iItem = 4)
92113>>>                    Move "{OrderDetail.Extended_Price}" to sValue
92114>>>                    Case Break
92115>>>                Case (iItem = 5)
92118>>>                    Move "{OrderDetail.Price}" to sValue
92119>>>                    Case Break
92120>>>            Case End
92120>>>            
92120>>>            Function_Return sValue
92121>>>        End_Function
92122>>>        
92122>>>        Procedure Combo_Fill_List
92125>>>            Send Combo_Add_Item "Detail Number"
92126>>>            Send Combo_Add_Item "Inventory Item ID"
92127>>>            Send Combo_Add_Item "Inventory Description"
92128>>>            Send Combo_Add_Item "Quantity Ordered"
92129>>>            Send Combo_Add_Item "Extended Price"
92130>>>            Send Combo_Add_Item "Price"
92131>>>        End_Procedure
92132>>>    End_Object
92133>>>
92133>>>    Object oDestinationGroup Is A RadioGroup
92135>>>        Set Label to "Output destination"
92136>>>        Set Location to 104 5
92137>>>        Set Size to 46 77
92138>>>
92138>>>        Object oScreenRadio Is A Radio
92140>>>            Set Label to "Preview"
92141>>>            Set Size to 10 60
92142>>>            Set Location to 10 6
92143>>>            Set Status_Help to "Print the report to screen"
92144>>>        End_Object
92145>>>
92145>>>        Object oPrinterRadio Is A Radio
92147>>>            Set Label to "Printer"
92148>>>            Set Size to 10 60
92149>>>            Set Location to 22 6
92150>>>            Set Status_Help to "Prints the report to printer"
92151>>>        End_Object
92152>>>
92152>>>        Object oExportRadio Is A Radio
92154>>>            Set Label to "Export"
92155>>>            Set Size to 10 60
92156>>>            Set Location to 34 6
92157>>>            Set Status_Help to "Outputs the report to disk file (PDF, CSV, Image, HTML, Excel, RTF)"
92158>>>        End_Object
92159>>>
92159>>>        Procedure Notify_Select_State Integer iNewItem Integer iOldItem
92162>>>            Forward Send Notify_Select_State iNewItem iOldItem
92164>>>
92164>>>            Case Begin
92164>>>                Case (iNewItem = 0)
92166>>>                    Set Output_Device_Mode to PRINT_TO_WINDOW
92167>>>                    Case Break
92168>>>                Case (iNewItem = 1)
92171>>>                    Set Output_Device_Mode to PRINT_TO_PRINTER
92172>>>                    Case Break
92173>>>                Case (iNewItem = 2)
92176>>>                    Set Output_Device_Mode to PRINT_TO_FILE
92177>>>                    Case Break
92178>>>            Case End
92178>>>        End_Procedure
92179>>>    End_Object
92180>>>
92180>>>    Object oPrintButton Is A Button
92182>>>        Set Label to "&Print"
92183>>>        Set Status_Help to "Print the report"
92184>>>        Set Size to 14 50
92185>>>        Set Location to 152 84
92186>>>        Set Default_State to True
92187>>>        Set peAnchors to anBottomRight
92188>>>
92188>>>        Procedure OnClick
92191>>>            Send RunReport Of oReport
92192>>>        End_Procedure
92193>>>    End_Object
92194>>>
92194>>>    Object oCancelButton Is A Button
92196>>>        Set Label to "&Cancel"
92197>>>        Set Size to 14 50
92198>>>        Set Location to 152 139
92199>>>        Set Status_Help to "Cancel this Panel"
92200>>>        Set peAnchors to anBottomRight
92201>>>
92201>>>        // This procedure closes the report view.
92201>>>        Procedure OnClick
92204>>>            Send Request_Cancel
92205>>>        End_Procedure
92206>>>    End_Object
92207>>>
92207>>>    On_Key Key_Alt+Key_C Send KeyAction of oCancelButton
92208>>>    On_Key Key_Alt+Key_P Send KeyAction of oPrintButton
92209>>>
92209>>>    Set Location to 6 6
92210>>>    Set Size to 168 194
92211>>>    Set piMinSize to 168 159
92212>>>Cd_End_Object
92214>>>>
92214>        Use DataFlexReports\SalesPerSalesPersonPerUSAState.rv
Including file: DataFlexReports\SalesPerSalesPersonPerUSAState.rv    (C:\test\BuildTools\Order Entry\AppSrc\DataFlexReports\SalesPerSalesPersonPerUSAState.rv)
92214>>>Use Windows.pkg
92214>>>Use Dfrptvw.pkg
92214>>>
92214>>>Use cDRAPI.Pkg
92214>>>Use cDRReport.pkg
92214>>>Use cDRPreview.pkg
92214>>>
92214>>>Use cCustomerDataDictionary.dd
92214>>>
92214>>>// This example can use two different .DR reports. The report to use is controlled via the oWithPieChartCheckbox object.
92214>>>// Both reports are crosstab reports and have a lot in common but to show the chart the "with PieChart" report defines
92214>>>// a group section.
92214>>>
92214>>>// The comboforms control whether a total per row and/or total per column should be produced or not. If there is a total
92214>>>// the checkbox for grand totals can be selected.
92214>>>
92214>>>Deferred_View Activate_oSalesPerSalesPersonPerUSAStateReportView for ;Object oSalesPerSalesPersonPerUSAStateReportView is a ReportView
92239>>>    Set Size to 78 189
92240>>>    Set Label to "Sales per Salesperson per USA State"
92241>>>
92241>>>    Object oCustomer_DD is a cCustomerDataDictionary
92243>>>    End_Object
92244>>>
92244>>>    Object oReport is a cDRReport
92246>>>        Set psReportName to "Sales per Salesperson per USA state.dr"
92247>>>
92247>>>        Procedure OnInitializeReport
92250>>>            Set piReportLanguage '' to LANG_DEFAULT
92251>>>
92251>>>            Send SetFilters
92252>>>            Send SetParameters
92253>>>        End_Procedure
92254>>>
92254>>>        Procedure SetFilters
92257>>>            String sValue sReportId
92257>>>
92257>>>            Get ActiveCustomerStateSelection of oCustomerStatus to sValue
92258>>>            If (sValue <> "") Begin
92260>>>                Get psReportId to sReportId
92261>>>                Send AddFilter sReportId "{Customer.Status}" C_drEqual sValue
92262>>>            End
92262>>>>
92262>>>        End_Procedure
92263>>>
92263>>>        Procedure SetParameters
92266>>>            String sReportId sValue
92266>>>            Integer iParameter
92266>>>
92266>>>            Get psReportId to sReportId
92267>>>
92267>>>            Get TotalRowSelection of oTotalsPerStateForm to sValue
92268>>>            Set psFunction sReportId "TotalsPerState" to ("Return" * sValue)
92269>>>
92269>>>            Get TotalColumnSelection of oTotalsPerSalesPersonForm to sValue
92270>>>            Set psFunction sReportId "TotalsPerSalesPerson" to ("Return" * sValue)
92271>>>
92271>>>            Get Checked_State of oGrandTotalParameterCheckbox to sValue
92272>>>            Get ParameterIdByName sReportId "GrandTotal" to iParameter
92273>>>            Set psParameterValue sReportId iParameter to sValue
92274>>>        End_Procedure
92275>>>    End_Object
92276>>>
92276>>>    Object oTotalsPerStateForm is a ComboForm
92278>>>        Set Size to 12 100
92279>>>        Set Location to 5 85
92280>>>        Set Label_Col_Offset to 80
92281>>>        Set peAnchors to anTopLeftRight
92282>>>        Set piMaxSize to 5 150
92283>>>        Set Entry_State to False
92284>>>        Set Combo_Sort_State to False
92285>>>        Set Label to "Totals / State"
92286>>>        Set psToolTip to 'Add a total value over all sales persons per state'
92287>>>
92287>>>        Procedure Combo_Fill_List
92290>>>            Send Combo_Add_Item "No Total Row"
92291>>>            Send Combo_Add_Item "Total Row on the top"
92292>>>            Send Combo_Add_Item "Total Row on the bottom"
92293>>>        End_Procedure
92294>>>
92294>>>        Function TotalRowSelection Returns String
92297>>>            String sValue
92297>>>            Integer iItem
92297>>>
92297>>>            Get Value to sValue
92298>>>            Get Combo_Item_Matching sValue to iItem
92299>>>            Case Begin
92299>>>                Case (iItem = 0)
92301>>>                    Move "drNoTotalRow" to sValue
92302>>>                    Case Break
92303>>>                Case (iItem = 1)
92306>>>                    Move "drTotalOnTop" to sValue
92307>>>                    Case Break
92308>>>                Case (iItem = 2)
92311>>>                    Move "drTotalOnBottom" to sValue
92312>>>                    Case Break
92313>>>            Case End
92313>>>
92313>>>            Function_Return sValue
92314>>>        End_Function
92315>>>
92315>>>        Procedure OnChange String sNewValue String sOldValue
92318>>>            Send UpdateGrandTotalState of oGrandTotalParameterCheckbox
92319>>>        End_Procedure
92320>>>    End_Object
92321>>>
92321>>>    Object oTotalsPerSalesPersonForm is a ComboForm
92323>>>        Set Size to 12 100
92324>>>        Set Location to 19 85
92325>>>        Set Label_Col_Offset to 80
92326>>>        Set peAnchors to anTopLeftRight
92327>>>        Set piMaxSize to 5 150
92328>>>        Set Entry_State to False
92329>>>        Set Combo_Sort_State to False
92330>>>        Set Label to "Totals / Sales Person"
92331>>>        Set psToolTip to 'Add a total value over all states per sales person'
92332>>>
92332>>>        Procedure Combo_Fill_List
92335>>>            Send Combo_Add_Item "No Total Column"
92336>>>            Send Combo_Add_Item "Total Column on the Left"
92337>>>            Send Combo_Add_Item "Total Column on the right"
92338>>>        End_Procedure
92339>>>
92339>>>        Function TotalColumnSelection Returns String
92342>>>            String sValue
92342>>>            Integer iItem
92342>>>
92342>>>            Get Value to sValue
92343>>>            Get Combo_Item_Matching sValue to iItem
92344>>>            Case Begin
92344>>>                Case (iItem = 0)
92346>>>                    Move "drNoTotalColumn" to sValue
92347>>>                    Case Break
92348>>>                Case (iItem = 1)
92351>>>                    Move "drTotalOnLeft" to sValue
92352>>>                    Case Break
92353>>>                Case (iItem = 2)
92356>>>                    Move "drTotalOnRight" to sValue
92357>>>                    Case Break
92358>>>            Case End
92358>>>
92358>>>            Function_Return sValue
92359>>>        End_Function
92360>>>
92360>>>        Procedure OnChange String sNewValue String sOldValue
92363>>>            Send UpdateGrandTotalState of oGrandTotalParameterCheckbox
92364>>>        End_Procedure
92365>>>    End_Object
92366>>>
92366>>>    Object oGrandTotalParameterCheckbox is a CheckBox
92368>>>        Set Size to 10 50
92369>>>        Set Location to 33 85
92370>>>        Set Label to 'Grand Total'
92371>>>        Set psToolTip to 'A Grand Total is not displayed when the row/column Totals are not set'
92372>>>
92372>>>        Procedure Activating
92375>>>            Forward Send Activating
92377>>>
92377>>>            Send UpdateGrandTotalState
92378>>>        End_Procedure
92379>>>
92379>>>        Procedure UpdateGrandTotalState
92382>>>            String sTotalRow sTotalColumn
92382>>>            Boolean bEnabled
92382>>>
92382>>>            Get TotalRowSelection of oTotalsPerStateForm to sTotalRow
92383>>>            Get TotalColumnSelection of oTotalsPerSalesPersonForm to sTotalColumn
92384>>>
92384>>>            Move (sTotalRow <> "drNoTotalRow" and sTotalColumn <> "dtNoTotalColumn") to bEnabled
92385>>>            Set Enabled_State to bEnabled
92386>>>            If (not (bEnabled)) Begin
92388>>>                Set Checked_State to False
92389>>>            End
92389>>>>
92389>>>        End_Procedure
92390>>>    End_Object
92391>>>
92391>>>    Object oWithPieChartCheckbox is a CheckBox
92393>>>        Set Size to 10 50
92394>>>        Set Location to 45 85
92395>>>        Set Label to 'With Pie Chart'
92396>>>        Set psToolTip to 'Show a Pie Chart at the end of the Report'
92397>>>
92397>>>        Procedure OnChange
92400>>>            String sReportId
92400>>>            Boolean bChecked
92400>>>
92400>>>            Get psReportId of oReport to sReportId
92401>>>            If (sReportId <> '') Begin
92403>>>                Send ClosePreviewer of oReport
92404>>>                Send CloseReport of oReport sReportId
92405>>>            End
92405>>>>
92405>>>
92405>>>            Get Checked_State to bChecked
92406>>>            If (bChecked) Begin
92408>>>                Set psReportName of oReport to "Sales per Salesperson per USA state with Pie Chart.dr"
92409>>>            End
92409>>>>
92409>>>            Else Begin
92410>>>                Set psReportName of oReport to "Sales per Salesperson per USA state.dr"
92411>>>            End
92411>>>>
92411>>>        End_Procedure
92412>>>    End_Object
92413>>>
92413>>>    Object oCustomerStatus is a ComboForm
92415>>>        Set Size to 12 26
92416>>>        Set Location to 60 85
92417>>>        Set Label_Col_Offset to 80
92418>>>        Set peAnchors to anTopLeftRight
92419>>>        Set piMaxSize to 12 50
92420>>>        Set Entry_State to False
92421>>>        Set Combo_Sort_State to False
92422>>>        Set Label to "Customer Active Status"
92423>>>        Set psToolTip to 'Only active customers'
92424>>>
92424>>>        Procedure Combo_Fill_List
92427>>>            Send Combo_Add_Item " "
92428>>>            Send Combo_Add_Item "Yes"
92429>>>            Send Combo_Add_Item "No"
92430>>>        End_Procedure
92431>>>
92431>>>        Function ActiveCustomerStateSelection Returns String
92434>>>            String sValue
92434>>>
92434>>>            Get Value to sValue
92435>>>            Move (Left (sValue, 1)) to sValue
92436>>>
92436>>>            Function_Return sValue
92437>>>        End_Function
92438>>>
92438>>>        Procedure OnChange String sNewValue String sOldValue
92441>>>            Send UpdateGrandTotalState of oGrandTotalParameterCheckbox
92442>>>        End_Procedure
92443>>>    End_Object
92444>>>
92444>>>    Object oRunReportButton is a Button
92446>>>        Set Location to 60 135
92447>>>        Set Label to "Run Report"
92448>>>        Set peAnchors to anBottomRight
92449>>>
92449>>>        Procedure OnClick
92452>>>            Send RunReport of oReport
92453>>>        End_Procedure
92454>>>    End_Object
92455>>>Cd_End_Object
92457>>>>
92457>        
92457>        Procedure Activate_About
92460>            Send DoAbout "Order Entry Sample Application" "19.1.2.0" "Copyright (c) 2019 Data Access Corporation" "Data Access Worldwide" ""
92461>        End_Procedure
92462>        
92462>    End_Object
92463>    
92463>End_Object
92464>
92464>// open Order Entry view on application startup
92464>Send Activate_oOrderEntryView of (oClientArea(oMain))
92465>Start_UI
92466>
92466>
Summary
Memory Available: 2147483647
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 50414
Total Resources: 0
Total Commands : 92465
Total Windows  : 4
Total Pages    : 3
Static Data    : 603429
Message area   : 674929
Total Blocks   : 33236
