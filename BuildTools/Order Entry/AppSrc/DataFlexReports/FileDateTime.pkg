Use tWinStructs.pkg

// Value                      Meaning
//
// FILE_ATTRIBUTE_ARCHIVE     The file or directory is an archive file or directory.
//                            Applications use this flag to mark files for backup or removal.
// FILE_ATTRIBUTE_COMPRESSED  The file or directory is compressed. For a file, this means
//                            that all of the data in the file is compressed. For a
//                            directory, this means that compression is the default for
//                            newly created files and subdirectories.
// FILE_ATTRIBUTE_DIRECTORY   The "file or directory" is a directory.
// FILE_ATTRIBUTE_HIDDEN      The file or directory is hidden. It is not included in an
//                            ordinary directory listing.
// FILE_ATTRIBUTE_NORMAL      The file or directory has no other attributes set. This
//                            attribute is valid only if used alone.
// FILE_ATTRIBUTE_READONLY    The file or directory is read-only. Applications can read
//                            the file but cannot write to it or delete it. In the case
//                            of a directory, applications cannot delete it.
// FILE_ATTRIBUTE_SYSTEM      The file or directory is part of, or is used exclusively by,
//                            the operating system.

Define FILE_ATTRIBUTE_READONLY   for |CI$00000001
Define FILE_ATTRIBUTE_HIDDEN     for |CI$00000002
Define FILE_ATTRIBUTE_SYSTEM     for |CI$00000004
Define FILE_ATTRIBUTE_DIRECTORY  for |CI$00000010
Define FILE_ATTRIBUTE_ARCHIVE    for |CI$00000020
Define FILE_ATTRIBUTE_NORMAL     for |CI$00000080
Define FILE_ATTRIBUTE_TEMPORARY  for |CI$00000100
Define FILE_ATTRIBUTE_COMPRESSED for |CI$00000800

Define INVALID_HANDLE_VALUE for |CI-1
Define INVALID_FILE_SIZE    for |CI$FFFFFFFF
Define ERROR_NO_MORE_FILES  for |CI18

Define Max_Path for |CI260
Define MinChar  for |CI$80
Define MaxChar  for |CI$7F
Define MinShort for |CI$8000
Define MaxShort for |CI$7FFF
Define MinLong  for |CI$80000000
Define MaxLong  for |CI$7FFFFFFF
Define MaxByte  for |CI$FF
Define MaxWord  for |CI$FFFF
Define MaxDword for |CI$FFFFFFFF

// This function formats the time in a picture-string passed
//
// Picture  Meaning
//
//    h     Hours with no leading zero for single-digit hours; 12-hour clock
//    hh    Hours with leading zero for single-digit hours; 12-hour clock
//    H     Hours with no leading zero for single-digit hours; 24-hour clock
//    HH    Hours with leading zero for single-digit hours; 24-hour clock
//    m     Minutes with no leading zero for single-digit minutes
//    mm    Minutes with leading zero for single-digit minutes
//    s     Seconds with no leading zero for single-digit seconds
//    ss    Seconds with leading zero for single-digit seconds
//    t     One character time marker string, such as A or P
//    tt    Multicharacter time marker string, such as AM or PM
//
// For example, to get the time string
//    "11:29:40 PM"
// use the following picture string:
//    "hh':'mm':'ss tt"
External_Function GetTimeFormat "GetTimeFormatA" Kernel32.Dll ;
    DWord LCID DWord dwFlags Address lpsSystemTime Address lpFormat Address lpTimeStr Integer cchTime Returns Integer

// This function returns the time for the computer. It is the time of the clock shown in the taskbar of windows
External_Function GetLocalTime "GetLocalTime" Kernel32.Dll ;
    Address lpsSystemTime Returns Integer

// This function returns the time in GreenWhich currently based on the local time and the timezone information
External_Function GetSystemTime "GetSystemTime" Kernel32.Dll ;
    Address lpsSystemTime Returns Integer

// This function formats the date in a picture-string passed
//
// Picture  Meaning
//
//    d     Day of month as digits with no leading zero for single-digit days.
//    dd    Day of month as digits with leading zero for single-digit days.
//    ddd   Day of week as a three-letter abbreviation. The function uses the LOCALE_SABBREVDAYNAME value
//          associated with the specified locale.
//    dddd  Day of week as its full name. The function uses the LOCALE_SDAYNAME value associated with the
//          specified locale.
//    M     Month as digits with no leading zero for single-digit months.
//    MM    Month as digits with leading zero for single-digit months.
//    MMM   Month as a three-letter abbreviation. The function uses the LOCALE_SABBREVMONTHNAME value
//          associated with the specified locale.
//    MMMM  Month as its full name. The function uses the LOCALE_SMONTHNAME value associated with the
//          specified locale.
//    y     Year as last two digits, but with no leading zero for years less than 10.
//    yy    Year as last two digits, but with leading zero for years less than 10.
//    yyyy  Year represented by full four digits.
//    gg    Period/era string. The function uses the CAL_SERASTRING value associated with the specified
//          locale. This element is ignored if the date to be formatted does not have an associated era
//          or period string.
// For example, to get the date string
//    "Wed, Aug 31 94"
// use the following picture string:
//    "ddd',' MMM dd yy"
External_Function GetDateFormat "GetDateFormatA" Kernel32.Dll ;
    DWord LCID DWord dwFlags Address lpsSystemTime Address lpFormat Address lpDateStr Integer cchDate Returns Integer

Define LOCALE_NOUSEROVERRIDE   for |CI$80000000 // do not use user overrides
Define TIME_NOMINUTESORSECONDS for |CI$00000001 // do not use minutes or seconds
Define TIME_NOSECONDS          for |CI$00000002 // do not use seconds
Define TIME_NOTIMEMARKER       for |CI$00000004 // do not use time marker
Define TIME_FORCE24HOURFORMAT  for |CI$00000008 // always use 24 hour format

//
//  Date Flags for GetDateFormatW.
//
Define DATE_SHORTDATE        for |CI$00000001  // use short date picture
Define DATE_LONGDATE         for |CI$00000002  // use long date picture
Define DATE_USE_ALT_CALENDAR for |CI$00000004  // use alternate calendar (if any)

Struct tSystemTime
    UShort wYear
    UShort wMonth
    UShort wDayOfWeek
    UShort wDay
    UShort wHour
    UShort wMinute
    UShort wSecond
    UShort wMilliseconds
End_Struct

Struct tFileDateTime
    String sFileName
    DateTime dtCreated
    DateTime dtLastAccessed
    DateTime dtLastWrite
    UInteger iAttributes
End_Struct

// lpFileTime     :pointer to file time to convert
// lpSystemTime   :pointer to structure to receive system time
External_Function FileTimeToSystemTime "FileTimeToSystemTime" Kernel32.Dll ;
    Address lpFileTime Address lpSystemTime Returns Integer

External_Function FileTimeToLocalFileTime "FileTimeToLocalFileTime" Kernel32.Dll ;
    Address lpFileTime Address lpSystemTime Returns Integer

// lpFileName      :address of name of file to search for
// lpFindFileData  :address of returned information
External_Function FindFirstFile "FindFirstFileA" Kernel32.Dll ;
   Address lpFileName Address lpFindFileData Returns Handle

// hFindFile       :handle of search
// lpFindFileData  :address of structure for data on found file
External_Function FindNextFile "FindNextFileA" Kernel32.Dll ;
   Handle hFindFile Address lpFindFileData Returns Integer

// hFindFile       :file search handle
External_Function FindClose "FindClose" Kernel32.Dll ;
   Handle hFindFile Returns Integer

Function ConvertDateTimeToSystemDateTime Global UInteger dwLowDateTime UInteger dwHighDateTime Returns DateTime
    String sFormattedTime sFormattedDate
    Integer iSuccess iDataLength
    tSystemTime SystemTime
    tWinFileTime FileTime
    DateTime dtResult

    Move dwLowDateTime to FileTime.dwLowDateTime
    Move dwHighDateTime to FileTime.dwHighDateTime

    Move (FileTimeToSystemTime (AddressOf (FileTime), AddressOf (SystemTime))) to iSuccess
    If (iSuccess <> 0) Begin
        Move (Repeat (Character (0), 255)) to sFormattedTime
        Move (GetTimeFormat (Locale_User_Default, 0, AddressOf (SystemTime), 0, AddressOf (sFormattedTime), 255)) to iDataLength

        Move (Repeat (Character (0), 255)) to sFormattedDate
        Move (GetDateFormat (Locale_User_Default, 0, AddressOf (SystemTime), 0, AddressOf (sFormattedDate), 255)) to iDataLength

        Move (Cstring (sFormattedDate) * Cstring (sFormattedTime)) to dtResult
    End

    Function_Return dtResult
End_Function

Function FileDateTime Global String sFilePath Returns tFileDateTime[]
    Handle hFindFile
    Integer iVoid iRetval iFile
    DateTime dtFileTime
    tWin32_Find_Data Win32_Find_Data
    tFileDateTime[] FileDateTime

    Move (FindFirstFile (AddressOf (sFilePath), AddressOf (Win32_Find_Data))) to hFindFile
    If (hFindFile <> INVALID_HANDLE_VALUE) Begin
        Repeat
            Move (AddressOf (Win32_Find_Data.cFileName)) to FileDateTime[iFile].sFileName
            Move Win32_Find_Data.dwFileAttributes to FileDateTime[iFile].iAttributes
            Move (ConvertDateTimeToSystemDateTime (Win32_Find_Data.ftCreationTime.dwLowDateTime, Win32_Find_Data.ftCreationTime.dwHighDateTime)) to FileDateTime[iFile].dtLastWrite
            Move (ConvertDateTimeToSystemDateTime (Win32_Find_Data.ftLastAccessTime.dwLowDateTime, Win32_Find_Data.ftLastAccessTime.dwHighDateTime)) to FileDateTime[iFile].dtLastAccessed
            Move (ConvertDateTimeToSystemDateTime (Win32_Find_Data.ftLastWriteTime.dwLowDateTime, Win32_Find_Data.ftLastWriteTime.dwHighDateTime)) to FileDateTime[iFile].dtLastWrite

            Increment iFile

            Move (FindNextFile (hFindFile, AddressOf (Win32_Find_Data))) to iRetval
            // If iRetval = false the function call fails but GetLastError fails to tell me if
            // this was because we do not find any files anymore.
        Until (not (iRetval))

        Move (FindClose (hFindFile)) to iVoid
    End

    Function_Return FileDateTime
End_Function
